/*
Deployment script for BMI_BI_DW

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "BMI_BI_DW"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO

USE [$(DatabaseName)];


GO
PRINT N'Creating [AppDevelopersDEV]...';


GO
CREATE ROLE [AppDevelopersDEV]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [AppDevelopersPROD]...';


GO
CREATE ROLE [AppDevelopersPROD]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [AppDevelopersTEST]...';


GO
CREATE ROLE [AppDevelopersTEST]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [AppSupportReadOnly]...';


GO
CREATE ROLE [AppSupportReadOnly]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [BatchManagers]...';


GO
CREATE ROLE [BatchManagers]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [BusinessAnalystsDEV]...';


GO
CREATE ROLE [BusinessAnalystsDEV]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [BusinessAnalystsPROD]...';


GO
CREATE ROLE [BusinessAnalystsPROD]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [BusinessAnalystsTEST]...';


GO
CREATE ROLE [BusinessAnalystsTEST]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [CodeReviewers]...';


GO
CREATE ROLE [CodeReviewers]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [DataFeedReaders]...';


GO
CREATE ROLE [DataFeedReaders]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [DataFeeds]...';


GO
CREATE ROLE [DataFeeds]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [DataFeedWriters]...';


GO
CREATE ROLE [DataFeedWriters]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [DeploymentManagers]...';


GO
CREATE ROLE [DeploymentManagers]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [EtlDevelopersDEV]...';


GO
CREATE ROLE [EtlDevelopersDEV]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [EtlDevelopersPROD]...';


GO
CREATE ROLE [EtlDevelopersPROD]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [EtlDevelopersTEST]...';


GO
CREATE ROLE [EtlDevelopersTEST]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [PowerBiReporters]...';


GO
CREATE ROLE [PowerBiReporters]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [SqlDevelopersDEV]...';


GO
CREATE ROLE [SqlDevelopersDEV]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [SqlDevelopersPROD]...';


GO
CREATE ROLE [SqlDevelopersPROD]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [SqlDevelopersTEST]...';


GO
CREATE ROLE [SqlDevelopersTEST]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating <unnamed>...';


GO
EXECUTE sp_addrolemember @rolename = N'CodeReviewers', @membername = N'EtlDevelopersDEV';


GO
PRINT N'Creating <unnamed>...';


GO
EXECUTE sp_addrolemember @rolename = N'db_datareader', @membername = N'BusinessAnalystsTEST';


GO
PRINT N'Creating <unnamed>...';


GO
EXECUTE sp_addrolemember @rolename = N'db_datareader', @membername = N'BusinessAnalystsDEV';


GO
PRINT N'Creating <unnamed>...';


GO
EXECUTE sp_addrolemember @rolename = N'db_datareader', @membername = N'AppDevelopersTEST';


GO
PRINT N'Creating <unnamed>...';


GO
EXECUTE sp_addrolemember @rolename = N'db_datareader', @membername = N'AppDevelopersDEV';


GO
PRINT N'Creating <unnamed>...';


GO
EXECUTE sp_addrolemember @rolename = N'db_datareader', @membername = N'EtlDevelopersTEST';


GO
PRINT N'Creating <unnamed>...';


GO
EXECUTE sp_addrolemember @rolename = N'db_datareader', @membername = N'EtlDevelopersDEV';


GO
PRINT N'Creating <unnamed>...';


GO
EXECUTE sp_addrolemember @rolename = N'db_datareader', @membername = N'SqlDevelopersPROD';


GO
PRINT N'Creating <unnamed>...';


GO
EXECUTE sp_addrolemember @rolename = N'db_datareader', @membername = N'SqlDevelopersTEST';


GO
PRINT N'Creating <unnamed>...';


GO
EXECUTE sp_addrolemember @rolename = N'db_datareader', @membername = N'SqlDevelopersDEV';


GO
PRINT N'Creating <unnamed>...';


GO
EXECUTE sp_addrolemember @rolename = N'db_datareader', @membername = N'DeploymentManagers';


GO
PRINT N'Creating <unnamed>...';


GO
EXECUTE sp_addrolemember @rolename = N'db_datareader', @membername = N'AppSupportReadOnly';


GO
PRINT N'Creating <unnamed>...';


GO
EXECUTE sp_addrolemember @rolename = N'db_datawriter', @membername = N'AppDevelopersDEV';


GO
PRINT N'Creating <unnamed>...';


GO
EXECUTE sp_addrolemember @rolename = N'db_datawriter', @membername = N'SqlDevelopersTEST';


GO
PRINT N'Creating <unnamed>...';


GO
EXECUTE sp_addrolemember @rolename = N'db_datawriter', @membername = N'SqlDevelopersDEV';


GO
PRINT N'Creating <unnamed>...';


GO
EXECUTE sp_addrolemember @rolename = N'db_datawriter', @membername = N'DeploymentManagers';


GO
PRINT N'Creating <unnamed>...';


GO
EXECUTE sp_addrolemember @rolename = N'db_ddladmin', @membername = N'SqlDevelopersTEST';


GO
PRINT N'Creating <unnamed>...';


GO
EXECUTE sp_addrolemember @rolename = N'db_owner', @membername = N'SqlDevelopersDEV';


GO
PRINT N'Creating <unnamed>...';


GO
EXECUTE sp_addrolemember @rolename = N'db_owner', @membername = N'DeploymentManagers';


GO
PRINT N'Creating [etl]...';


GO
CREATE SCHEMA [etl]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [log4]...';


GO
CREATE SCHEMA [log4]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [log4Private]...';


GO
CREATE SCHEMA [log4Private]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [log4Utils]...';


GO
CREATE SCHEMA [log4Utils]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [pbi]...';


GO
CREATE SCHEMA [pbi]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [qvstg]...';


GO
CREATE SCHEMA [qvstg]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [stg]...';


GO
CREATE SCHEMA [stg]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [utils]...';


GO
CREATE SCHEMA [utils]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [log4Private].[Journal]...';


GO
CREATE TABLE [log4Private].[Journal] (
    [JournalId]         INT            IDENTITY (1, 1) NOT NULL,
    [UtcDate]           DATETIME       NOT NULL,
    [SystemDate]        DATETIME       NOT NULL,
    [Task]              VARCHAR (128)  NOT NULL,
    [FunctionName]      VARCHAR (256)  NOT NULL,
    [StepInFunction]    VARCHAR (128)  NOT NULL,
    [MessageText]       VARCHAR (512)  NOT NULL,
    [SeverityId]        INT            NOT NULL,
    [ExceptionId]       INT            NULL,
    [SessionId]         INT            NOT NULL,
    [ServerName]        NVARCHAR (128) NOT NULL,
    [DatabaseName]      NVARCHAR (128) NOT NULL,
    [HostName]          NVARCHAR (128) NULL,
    [ProgramName]       NVARCHAR (128) NULL,
    [NTDomain]          NVARCHAR (128) NULL,
    [NTUsername]        NVARCHAR (128) NULL,
    [LoginName]         NVARCHAR (128) NULL,
    [OriginalLoginName] NVARCHAR (128) NULL,
    [SessionLoginTime]  DATETIME       NULL,
    CONSTRAINT [PK_Journal] PRIMARY KEY CLUSTERED ([JournalId] ASC) WITH (FILLFACTOR = 100)
);


GO
PRINT N'Creating [log4Private].[JournalControl]...';


GO
CREATE TABLE [log4Private].[JournalControl] (
    [ModuleName]  VARCHAR (255) NOT NULL,
    [OnOffSwitch] VARCHAR (3)   NOT NULL,
    CONSTRAINT [PK_JournalControl] PRIMARY KEY CLUSTERED ([ModuleName] ASC) WITH (FILLFACTOR = 100)
);


GO
PRINT N'Creating [log4Private].[JournalDetail]...';


GO
CREATE TABLE [log4Private].[JournalDetail] (
    [JournalId] INT           NOT NULL,
    [ExtraInfo] VARCHAR (MAX) NULL,
    CONSTRAINT [PK_JournalDetail] PRIMARY KEY CLUSTERED ([JournalId] ASC) WITH (FILLFACTOR = 100)
);


GO
PRINT N'Creating [log4Private].[Severity]...';


GO
CREATE TABLE [log4Private].[Severity] (
    [SeverityId]   INT           NOT NULL,
    [SeverityName] VARCHAR (128) NOT NULL,
    CONSTRAINT [PK_Severity] PRIMARY KEY CLUSTERED ([SeverityId] ASC) WITH (FILLFACTOR = 100),
    CONSTRAINT [UQ_Severity_SeverityName] UNIQUE NONCLUSTERED ([SeverityName] ASC) WITH (FILLFACTOR = 100)
);


GO
PRINT N'Creating [log4Private].[SqlException]...';


GO
CREATE TABLE [log4Private].[SqlException] (
    [ExceptionId]       INT            IDENTITY (1, 1) NOT NULL,
    [UtcDate]           DATETIME       NOT NULL,
    [SystemDate]        DATETIME       NOT NULL,
    [ErrorContext]      NVARCHAR (512) NOT NULL,
    [ErrorNumber]       INT            NOT NULL,
    [ErrorSeverity]     INT            NOT NULL,
    [ErrorState]        INT            NOT NULL,
    [ErrorProcedure]    NVARCHAR (128) NOT NULL,
    [ErrorLine]         INT            NOT NULL,
    [ErrorMessage]      NVARCHAR (MAX) NOT NULL,
    [ErrorDatabase]     NVARCHAR (128) NOT NULL,
    [SessionIdent]      INT            NOT NULL,
    [ServerName]        NVARCHAR (128) NOT NULL,
    [HostName]          NVARCHAR (128) NOT NULL,
    [ProgramName]       NVARCHAR (128) NOT NULL,
    [NTDomain]          NVARCHAR (128) NOT NULL,
    [NTUsername]        NVARCHAR (128) NOT NULL,
    [LoginName]         NVARCHAR (128) NOT NULL,
    [OriginalLoginName] NVARCHAR (128) NOT NULL,
    [SessionLoginTime]  DATETIME       NULL,
    CONSTRAINT [PK_SqlException] PRIMARY KEY CLUSTERED ([ExceptionId] ASC) WITH (FILLFACTOR = 100)
);


GO
PRINT N'Creating [qvstg].[ProductCategory]...';


GO
CREATE TABLE [qvstg].[ProductCategory] (
    [ProductCategoryKey]         INT            NOT NULL,
    [IsDeleted]                  CHAR (1)       NOT NULL,
    [EtlCreatedOn]               DATETIME       NOT NULL,
    [EtlCreatedBy]               VARCHAR (200)  NOT NULL,
    [EtlUpdatedOn]               DATETIME       NOT NULL,
    [EtlUpdatedBy]               VARCHAR (200)  NOT NULL,
    [EtlDeletedOn]               DATETIME       NULL,
    [EtlDeletedBy]               VARCHAR (200)  NULL,
    [NativeProductCategoryKey]   NVARCHAR (50)  NOT NULL,
    [ProductCategoryId]          INT            NOT NULL,
    [ProductCategoryName]        NVARCHAR (100) NOT NULL,
    [NodeDepth]                  TINYINT        NOT NULL,
    [Level3Id]                   INT            NOT NULL,
    [Level3Name]                 NVARCHAR (100) NOT NULL,
    [Level2Id]                   INT            NOT NULL,
    [Level2Name]                 NVARCHAR (100) NOT NULL,
    [Level1Id]                   INT            NOT NULL,
    [Level1Name]                 NVARCHAR (100) NOT NULL,
    [ProductCategoryDescription] NVARCHAR (500) NOT NULL,
    CONSTRAINT [PK_qvstg_ProductCategory] PRIMARY KEY CLUSTERED ([ProductCategoryKey] ASC),
    CONSTRAINT [AK_qvstg_ProductCategory_NativeProductCategoryKey] UNIQUE NONCLUSTERED ([NativeProductCategoryKey] ASC)
);


GO
PRINT N'Creating [qvstg].[BusinessUnit]...';


GO
CREATE TABLE [qvstg].[BusinessUnit] (
    [BusinessUnitKey]           INT             NOT NULL,
    [IsDeleted]                 CHAR (1)        NOT NULL,
    [EtlCreatedOn]              DATETIME        NOT NULL,
    [EtlCreatedBy]              VARCHAR (200)   NOT NULL,
    [EtlUpdatedOn]              DATETIME        NOT NULL,
    [EtlUpdatedBy]              VARCHAR (200)   NOT NULL,
    [EtlDeletedOn]              DATETIME        NULL,
    [EtlDeletedBy]              VARCHAR (200)   NULL,
    [NativeBusinessUnitKey]     NVARCHAR (50)   NOT NULL,
    [StrategicBusinessUnitCode] NVARCHAR (20)   NOT NULL,
    [SalesCenterSbuCode]        NVARCHAR (20)   NOT NULL,
    [BusinessUnitName]          NVARCHAR (100)  NOT NULL,
    [RegionId]                  INT             NULL,
    [RegionName]                NVARCHAR (50)   NOT NULL,
    [RegionDescription]         NVARCHAR (1000) NOT NULL,
    CONSTRAINT [PK_qvstg_BusinessUnit] PRIMARY KEY CLUSTERED ([BusinessUnitKey] ASC),
    CONSTRAINT [AK_qvstg_BusinessUnit_NativeBusinessUnitKey] UNIQUE NONCLUSTERED ([NativeBusinessUnitKey] ASC)
);


GO
PRINT N'Creating [qvstg].[OrderBacklog]...';


GO
CREATE TABLE [qvstg].[OrderBacklog] (
    [OrderBacklogKey]                INT             NOT NULL,
    [IsDeleted]                      CHAR (1)        NOT NULL,
    [EtlCreatedOn]                   DATETIME        NOT NULL,
    [EtlCreatedBy]                   VARCHAR (200)   NOT NULL,
    [EtlUpdatedOn]                   DATETIME        NOT NULL,
    [EtlUpdatedBy]                   VARCHAR (200)   NOT NULL,
    [EtlDeletedOn]                   DATETIME        NULL,
    [EtlDeletedBy]                   VARCHAR (200)   NULL,
    [DataSourceKey]                  INT             NOT NULL,
    [QlikViewOrderBacklogKey]        NVARCHAR (50)   NOT NULL,
    [LineCount]                      INT             NOT NULL,
    [OrderNumber]                    NVARCHAR (50)   NOT NULL,
    [OrderLineNumber]                INT             NOT NULL,
    [NativeOrderLineNumber]          NVARCHAR (50)   NOT NULL,
    [ExpectedInvoiceDateKey]         INT             NOT NULL,
    [ExpectedInvoiceDate]            DATETIME        NOT NULL,
    [NativeOrderType]                NVARCHAR (1)    NOT NULL,
    [OrderTypeName]                  NVARCHAR (50)   NOT NULL,
    [LocalSellingSite]               NVARCHAR (50)   NOT NULL,
    [SiteKey]                        INT             NOT NULL,
    [ProductKey]                     INT             NOT NULL,
    [SoldToCustomerKey]              INT             NOT NULL,
    [ShippedToCustomerKey]           INT             NOT NULL,
    [NativeSalesPersonId]            NVARCHAR (50)   NOT NULL,
    [NativeSalesPersonName]          NVARCHAR (100)  NOT NULL,
    [OrderQuantityValue]             DECIMAL (12, 2) NULL,
    [OrderQuantityUnitOfMeasure]     NVARCHAR (20)   NOT NULL,
    [StatisticQuantityValue]         DECIMAL (12, 2) NULL,
    [StatisticQuantityUnitOfMeasure] NVARCHAR (20)   NOT NULL,
    [Quantity]                       DECIMAL (12, 2) NULL,
    [LocalUnitOfMeasure]             NVARCHAR (20)   NOT NULL,
    [LocalUnitOfMeasureHarmonised]   NVARCHAR (20)   NOT NULL,
    [LocalUnitOfMeasureFactor]       DECIMAL (11, 4) NULL,
    [OrderAmount]                    DECIMAL (15, 4) NULL,
    [LocalAmount]                    DECIMAL (15, 4) NULL,
    [GroupAmountEUR]                 DECIMAL (15, 4) NULL,
    [OrderCurrency]                  NVARCHAR (3)    NOT NULL,
    [LocalCurrency]                  NVARCHAR (3)    NOT NULL,
    [LineDiscountAmount]             DECIMAL (15, 4) NULL,
    [OrderDiscountAmount]            DECIMAL (15, 4) NULL,
    [LineBonusAmount]                DECIMAL (15, 4) NULL,
    [BonusShareAmount]               DECIMAL (15, 4) NULL,
    CONSTRAINT [PK_qvstg_OrderBacklog] PRIMARY KEY CLUSTERED ([OrderBacklogKey] ASC),
    CONSTRAINT [AK_qvstg_OrderBacklog_DataSourceKey_QlikViewOrderBacklogKey] UNIQUE NONCLUSTERED ([DataSourceKey] ASC, [QlikViewOrderBacklogKey] ASC),
    CONSTRAINT [AK_qvstg_OrderBacklog_UniqueifiedBusinessKey] UNIQUE NONCLUSTERED ([DataSourceKey] ASC, [OrderNumber] ASC, [NativeOrderLineNumber] ASC)
);


GO
PRINT N'Creating [qvstg].[OrderShippedNotInvoiced]...';


GO
CREATE TABLE [qvstg].[OrderShippedNotInvoiced] (
    [OrderShippedNotInvoicedKey]         INT             NOT NULL,
    [IsDeleted]                          CHAR (1)        NOT NULL,
    [EtlCreatedOn]                       DATETIME        NOT NULL,
    [EtlCreatedBy]                       VARCHAR (200)   NOT NULL,
    [EtlUpdatedOn]                       DATETIME        NOT NULL,
    [EtlUpdatedBy]                       VARCHAR (200)   NOT NULL,
    [EtlDeletedOn]                       DATETIME        NULL,
    [EtlDeletedBy]                       VARCHAR (200)   NULL,
    [DataSourceKey]                      INT             NOT NULL,
    [QlikViewOrderShippedNotInvoicedKey] NVARCHAR (50)   NOT NULL,
    [LineCount]                          INT             NOT NULL,
    [OrderNumber]                        NVARCHAR (50)   NOT NULL,
    [OrderLineNumber]                    INT             NOT NULL,
    [NativeOrderLineNumber]              NVARCHAR (50)   NOT NULL,
    [NativeShippingDocumentKey]          NVARCHAR (50)   NOT NULL,
    [ExpectedInvoiceDateKey]             INT             NOT NULL,
    [ExpectedInvoiceDate]                DATETIME        NOT NULL,
    [NativeOrderType]                    NVARCHAR (1)    NOT NULL,
    [OrderTypeName]                      NVARCHAR (50)   NOT NULL,
    [LocalSellingSite]                   NVARCHAR (50)   NOT NULL,
    [SiteKey]                            INT             NOT NULL,
    [ProductKey]                         INT             NOT NULL,
    [SoldToCustomerKey]                  INT             NOT NULL,
    [ShippedToCustomerKey]               INT             NOT NULL,
    [NativeSalesPersonId]                NVARCHAR (50)   NOT NULL,
    [NativeSalesPersonName]              NVARCHAR (100)  NOT NULL,
    [ShippedQuantityValue]               DECIMAL (12, 2) NULL,
    [ShippedQuantityUnitOfMeasure]       NVARCHAR (20)   NOT NULL,
    [StatisticQuantityValue]             DECIMAL (12, 2) NULL,
    [StatisticQuantityUnitOfMeasure]     NVARCHAR (20)   NOT NULL,
    [Quantity]                           DECIMAL (12, 2) NULL,
    [LocalUnitOfMeasure]                 NVARCHAR (20)   NOT NULL,
    [LocalUnitOfMeasureHarmonised]       NVARCHAR (20)   NOT NULL,
    [LocalUnitOfMeasureFactor]           DECIMAL (11, 4) NULL,
    [ShippedAmount]                      DECIMAL (15, 4) NULL,
    [LocalAmount]                        DECIMAL (15, 4) NULL,
    [GroupAmountEUR]                     DECIMAL (15, 4) NULL,
    [ShippedCurrency]                    NVARCHAR (3)    NOT NULL,
    [LocalCurrency]                      NVARCHAR (3)    NOT NULL,
    [LineDiscountAmount]                 DECIMAL (15, 4) NULL,
    [OrderDiscountAmount]                DECIMAL (15, 4) NULL,
    [LineBonusAmount]                    DECIMAL (15, 4) NULL,
    [BonusShareAmount]                   DECIMAL (15, 4) NULL,
    CONSTRAINT [PK_qvstg_OrderShippedNotInvoiced] PRIMARY KEY CLUSTERED ([OrderShippedNotInvoicedKey] ASC),
    CONSTRAINT [AK_qvstg_OrderShippedNotInvoiced_DataSourceKey_QlikViewOrderShippedNotInvoicedKey] UNIQUE NONCLUSTERED ([DataSourceKey] ASC, [QlikViewOrderShippedNotInvoicedKey] ASC),
    CONSTRAINT [AK_qvstg_OrderShippedNotInvoiced_UniqueifiedBusinessKey] UNIQUE NONCLUSTERED ([DataSourceKey] ASC, [OrderNumber] ASC, [NativeOrderLineNumber] ASC, [NativeShippingDocumentKey] ASC)
);


GO
PRINT N'Creating [qvstg].[Invoice]...';


GO
CREATE TABLE [qvstg].[Invoice] (
    [InvoiceKey]                     INT             NOT NULL,
    [IsDeleted]                      CHAR (1)        NOT NULL,
    [EtlCreatedOn]                   DATETIME        NOT NULL,
    [EtlCreatedBy]                   VARCHAR (200)   NOT NULL,
    [EtlUpdatedOn]                   DATETIME        NOT NULL,
    [EtlUpdatedBy]                   VARCHAR (200)   NOT NULL,
    [EtlDeletedOn]                   DATETIME        NULL,
    [EtlDeletedBy]                   VARCHAR (200)   NULL,
    [DataSourceKey]                  INT             NOT NULL,
    [QlikViewInvoiceKey]             NVARCHAR (50)   NOT NULL,
    [LineCount]                      INT             NOT NULL,
    [InvoiceDateKey]                 INT             NOT NULL,
    [InvoiceDate]                    DATETIME        NOT NULL,
    [InvoiceNumber]                  NVARCHAR (20)   NOT NULL,
    [InvoiceLineNumber]              INT             NOT NULL,
    [NativeInvoiceLineNumber]        NVARCHAR (20)   NOT NULL,
    [OrderNumber]                    NVARCHAR (20)   NOT NULL,
    [OrderLineNumber]                INT             NOT NULL,
    [NativeOrderLineNumber]          NVARCHAR (20)   NOT NULL,
    [NativeInvoiceType]              NVARCHAR (1)    NOT NULL,
    [InvoiceTypeName]                NVARCHAR (29)   NOT NULL,
    [LocalSellingSite]               NVARCHAR (20)   NOT NULL,
    [SiteKey]                        INT             NOT NULL,
    [ProductKey]                     INT             NOT NULL,
    [SoldToCustomerKey]              INT             NOT NULL,
    [ShippedToCustomerKey]           INT             NOT NULL,
    [NativeSalesPersonId]            NVARCHAR (20)   NOT NULL,
    [NativeSalesPersonName]          NVARCHAR (100)  NOT NULL,
    [DeliveryDateKey]                INT             NOT NULL,
    [DeliveryDate]                   DATETIME        NULL,
    [ExpectedPaymentDateKey]         INT             NOT NULL,
    [ExpectedPaymentDate]            DATETIME        NULL,
    [ActualPaymentDateKey]           INT             NOT NULL,
    [ActualPaymentDate]              DATETIME        NULL,
    [LocalDeliveryTerm]              NVARCHAR (20)   NOT NULL,
    [LocalDeliveryTermText]          NVARCHAR (100)  NOT NULL,
    [PaymentTermKey]                 INT             NOT NULL,
    [LocalPaymentTerm]               NVARCHAR (20)   NOT NULL,
    [LocalPaymentTermText]           NVARCHAR (100)  NOT NULL,
    [InvoiceQuantityValue]           DECIMAL (12, 2) NULL,
    [InvoiceQuantityUnitOfMeasure]   NVARCHAR (20)   NOT NULL,
    [StatisticQuantityValue]         DECIMAL (12, 2) NULL,
    [StatisticQuantityUnitOfMeasure] NVARCHAR (20)   NOT NULL,
    [Quantity]                       DECIMAL (12, 2) NULL,
    [LocalUnitOfMeasure]             NVARCHAR (20)   NOT NULL,
    [LocalUnitOfMeasureHarmonised]   NVARCHAR (20)   NOT NULL,
    [LocalUnitOfMeasureFactor]       DECIMAL (11, 4) NULL,
    [InvoiceAmount]                  DECIMAL (15, 4) NULL,
    [LocalAmount]                    DECIMAL (15, 4) NULL,
    [GroupAmountEUR]                 DECIMAL (15, 4) NULL,
    [InvoiceCurrency]                NVARCHAR (3)    NOT NULL,
    [LocalCurrency]                  NVARCHAR (3)    NOT NULL,
    [LineDiscountAmount]             DECIMAL (15, 4) NULL,
    [InvoiceDiscountAmount]          DECIMAL (15, 4) NULL,
    [LineBonusAmount]                DECIMAL (15, 4) NULL,
    [BonusShareAmount]               DECIMAL (15, 4) NULL,
    [StandardCost]                   DECIMAL (15, 4) NULL,
    [StandardFreight]                DECIMAL (15, 4) NULL,
    CONSTRAINT [PK_qvstg_Invoice] PRIMARY KEY CLUSTERED ([InvoiceKey] ASC),
    CONSTRAINT [AK_qvstg_Invoice_DataSourceKey_QlikViewInvoiceKey] UNIQUE NONCLUSTERED ([DataSourceKey] ASC, [QlikViewInvoiceKey] ASC),
    CONSTRAINT [AK_qvstg_Invoice_UniqueifiedBusinessKey] UNIQUE NONCLUSTERED ([DataSourceKey] ASC, [InvoiceNumber] ASC, [OrderNumber] ASC, [NativeInvoiceLineNumber] ASC, [NativeOrderLineNumber] ASC)
);


GO
PRINT N'Creating [qvstg].[Site]...';


GO
CREATE TABLE [qvstg].[Site] (
    [SiteKey]                   INT             NOT NULL,
    [IsDeleted]                 CHAR (1)        NOT NULL,
    [EtlCreatedOn]              DATETIME        NOT NULL,
    [EtlCreatedBy]              VARCHAR (200)   NOT NULL,
    [EtlUpdatedOn]              DATETIME        NOT NULL,
    [EtlUpdatedBy]              VARCHAR (200)   NOT NULL,
    [EtlDeletedOn]              DATETIME        NULL,
    [EtlDeletedBy]              VARCHAR (200)   NULL,
    [NativeSiteKey]             NVARCHAR (50)   NOT NULL,
    [SiteName]                  NVARCHAR (100)  NOT NULL,
    [SiteDescription]           NVARCHAR (1000) NOT NULL,
    [BusinessUnitKey]           INT             NOT NULL,
    [StrategicBusinessUnitCode] NVARCHAR (20)   NOT NULL,
    [SalesCenterSbuCode]        NVARCHAR (20)   NOT NULL,
    [BusinessUnitName]          NVARCHAR (100)  NOT NULL,
    [RegionId]                  INT             NULL,
    [RegionName]                NVARCHAR (50)   NOT NULL,
    [RegionDescription]         NVARCHAR (1000) NOT NULL,
    [DataSourceKey]             INT             NULL,
    [SourceSystemId]            INT             NULL,
    [SourceSystemName]          NVARCHAR (100)  NOT NULL,
    CONSTRAINT [PK_qvstg_Site] PRIMARY KEY CLUSTERED ([SiteKey] ASC),
    CONSTRAINT [AK_qvstg_Site_NativeSiteKey] UNIQUE NONCLUSTERED ([NativeSiteKey] ASC)
);


GO
PRINT N'Creating [qvstg].[PaymentTerm]...';


GO
CREATE TABLE [qvstg].[PaymentTerm] (
    [PaymentTermKey]         INT            NOT NULL,
    [IsDeleted]              CHAR (1)       NOT NULL,
    [EtlCreatedOn]           DATETIME       NOT NULL,
    [EtlCreatedBy]           VARCHAR (200)  NOT NULL,
    [EtlUpdatedOn]           DATETIME       NOT NULL,
    [EtlUpdatedBy]           VARCHAR (200)  NOT NULL,
    [EtlDeletedOn]           DATETIME       NULL,
    [EtlDeletedBy]           VARCHAR (200)  NULL,
    [NativePaymentTermKey]   NVARCHAR (50)  NOT NULL,
    [PaymentTermName]        NVARCHAR (100) NOT NULL,
    [PaymentTermDays]        INT            NULL,
    [PaymentTermDescription] NVARCHAR (500) NOT NULL,
    CONSTRAINT [PK_qvstg_PaymentTerm] PRIMARY KEY CLUSTERED ([PaymentTermKey] ASC),
    CONSTRAINT [AK_qvstg_PaymentTerm_NativePaymentTermKey] UNIQUE NONCLUSTERED ([NativePaymentTermKey] ASC)
);


GO
PRINT N'Creating [qvstg].[Customer]...';


GO
CREATE TABLE [qvstg].[Customer] (
    [CustomerKey]               INT            NOT NULL,
    [IsDeleted]                 CHAR (1)       NOT NULL,
    [EtlCreatedOn]              DATETIME       NOT NULL,
    [EtlCreatedBy]              VARCHAR (200)  NOT NULL,
    [EtlUpdatedOn]              DATETIME       NOT NULL,
    [EtlUpdatedBy]              VARCHAR (200)  NOT NULL,
    [EtlDeletedOn]              DATETIME       NULL,
    [EtlDeletedBy]              VARCHAR (200)  NULL,
    [DataSourceKey]             INT            NULL,
    [NativeCustomerKey]         NVARCHAR (50)  NOT NULL,
    [CustomerNumber]            NVARCHAR (50)  NOT NULL,
    [CustomerName]              NVARCHAR (100) NOT NULL,
    [CustomerAddress1]          NVARCHAR (100) NOT NULL,
    [CustomerAddress2]          NVARCHAR (100) NOT NULL,
    [CustomerAddress3]          NVARCHAR (100) NOT NULL,
    [CustomerZipCode]           NVARCHAR (100) NOT NULL,
    [CustomerCity]              NVARCHAR (100) NOT NULL,
    [CustomerCountry]           NVARCHAR (100) NOT NULL,
    [CustomerVatNumber]         NVARCHAR (50)  NOT NULL,
    [CustomerTypeId]            INT            NULL,
    [CustomerTypeName]          NVARCHAR (100) NOT NULL,
    [CustomerGroup1]            NVARCHAR (100) NOT NULL,
    [CustomerGroup2]            NVARCHAR (100) NOT NULL,
    [CustomerGroup3]            NVARCHAR (100) NOT NULL,
    [CustomerGroup4]            NVARCHAR (100) NOT NULL,
    [CustomerGroup5]            NVARCHAR (100) NOT NULL,
    [CategoryIsMapped]          CHAR (1)       NOT NULL,
    [NativeCustomerCategoryKey] NVARCHAR (100) NOT NULL,
    [CustomerCategoryBaseLevel] NVARCHAR (200) NOT NULL,
    [CustomerCategoryLevel1]    NVARCHAR (100) NOT NULL,
    [CustomerCategoryLevel2]    NVARCHAR (100) NOT NULL,
    [CustomerCategoryLevel3]    NVARCHAR (100) NOT NULL,
    [CustomerCategoryLevel4]    NVARCHAR (100) NOT NULL,
    [CustomerCategoryLevel5]    NVARCHAR (100) NOT NULL,
    [CustomerCategoryLevel6]    NVARCHAR (100) NOT NULL,
    [CustomerCategoryLevel7]    NVARCHAR (100) NOT NULL,
    [CustomerCategoryLevel8]    NVARCHAR (100) NOT NULL,
    CONSTRAINT [PK_qvstg_Customer] PRIMARY KEY CLUSTERED ([CustomerKey] ASC),
    CONSTRAINT [AK_qvstg_Customer_DataSourceKey_NativeCustomerKey] UNIQUE NONCLUSTERED ([DataSourceKey] ASC, [NativeCustomerKey] ASC)
);


GO
PRINT N'Creating [qvstg].[Product]...';


GO
CREATE TABLE [qvstg].[Product] (
    [ProductKey]               INT            NOT NULL,
    [IsDeleted]                CHAR (1)       NOT NULL,
    [EtlCreatedOn]             DATETIME       NOT NULL,
    [EtlCreatedBy]             VARCHAR (200)  NOT NULL,
    [EtlUpdatedOn]             DATETIME       NOT NULL,
    [EtlUpdatedBy]             VARCHAR (200)  NOT NULL,
    [EtlDeletedOn]             DATETIME       NULL,
    [EtlDeletedBy]             VARCHAR (200)  NULL,
    [DataSourceKey]            INT            NOT NULL,
    [NativeProductKey]         NVARCHAR (50)  NOT NULL,
    [ProductNumber]            NVARCHAR (50)  NOT NULL,
    [ProductName]              NVARCHAR (100) NOT NULL,
    [ProductTypeId]            INT            NULL,
    [ProductTypeName]          NVARCHAR (50)  NOT NULL,
    [ProductGnit]              NVARCHAR (50)  NOT NULL,
    [ProductDescription1]      NVARCHAR (100) NOT NULL,
    [ProductDescription2]      NVARCHAR (100) NOT NULL,
    [LocalProductGroup1]       NVARCHAR (50)  NOT NULL,
    [LocalProductGroup2]       NVARCHAR (50)  NOT NULL,
    [LocalProductGroup3]       NVARCHAR (50)  NOT NULL,
    [LocalProductGroup4]       NVARCHAR (50)  NOT NULL,
    [LocalProductGroup5]       NVARCHAR (50)  NOT NULL,
    [NativeProductCategoryKey] NVARCHAR (100) NOT NULL,
    [ProductCategoryBaseLevel] NVARCHAR (200) NOT NULL,
    [ProductCategoryLevel1]    NVARCHAR (200) NOT NULL,
    [ProductCategoryLevel2]    NVARCHAR (200) NOT NULL,
    [ProductCategoryLevel3]    NVARCHAR (200) NOT NULL,
    [ProductCategoryLevel4]    NVARCHAR (200) NOT NULL,
    [ProductCategoryLevel5]    NVARCHAR (200) NOT NULL,
    CONSTRAINT [PK_qvstg_Product] PRIMARY KEY CLUSTERED ([ProductKey] ASC),
    CONSTRAINT [AK_qvstg_Product_DataSourceKey_NativeProductKey] UNIQUE NONCLUSTERED ([DataSourceKey] ASC, [NativeProductKey] ASC)
);


GO
PRINT N'Creating [qvstg].[BudgetSales]...';


GO
CREATE TABLE [qvstg].[BudgetSales] (
    [BudgetSaleKey]          INT             IDENTITY (100, 1) NOT NULL,
    [EtlDeltaHash]           CHAR (32)       NOT NULL,
    [EtlCreatedOn]           DATETIME        NOT NULL,
    [EtlCreatedBy]           VARCHAR (200)   NOT NULL,
    [EtlUpdatedOn]           DATETIME        NOT NULL,
    [EtlUpdatedBy]           VARCHAR (200)   NOT NULL,
    [EtlDeletedOn]           DATETIME        NULL,
    [EtlDeletedBy]           VARCHAR (200)   NULL,
    [IsDeleted]              CHAR (1)        NOT NULL,
    [LineCount]              INT             NOT NULL,
    [BusinessUnitKey]        INT             NOT NULL,
    [BudgetMonthDateKey]     INT             NOT NULL,
    [InstallationServices]   DECIMAL (28, 4) NULL,
    [ProducedGoods]          DECIMAL (28, 4) NULL,
    [GroupGoods]             DECIMAL (28, 4) NULL,
    [CommercialGoods]        DECIMAL (28, 4) NULL,
    [ExternalSales]          DECIMAL (28, 4) NULL,
    [IC_Transf_SBU]          DECIMAL (28, 4) NULL,
    [IC_Transf_Region]       DECIMAL (28, 4) NULL,
    [IC_Transf_Abroad]       DECIMAL (28, 4) NULL,
    [IC_Transf_US]           DECIMAL (28, 4) NULL,
    [Total_IC_Sales]         DECIMAL (28, 4) NULL,
    [TotalSalesAndTransfers] DECIMAL (28, 4) NULL,
    CONSTRAINT [PK_qvstg_BudgetSale] PRIMARY KEY CLUSTERED ([BudgetSaleKey] ASC),
    CONSTRAINT [AK_qvstg_BudgetSale_BusinessUnitKey_BudgetMonthDateKey] UNIQUE NONCLUSTERED ([BusinessUnitKey] ASC, [BudgetMonthDateKey] ASC)
);


GO
PRINT N'Creating [qvstg].[BudgetSales].[NCI_qvstg_BudgetSale_LoadFilter]...';


GO
CREATE NONCLUSTERED INDEX [NCI_qvstg_BudgetSale_LoadFilter]
    ON [qvstg].[BudgetSales]([BusinessUnitKey] ASC, [BudgetMonthDateKey] ASC, [EtlDeltaHash] ASC, [IsDeleted] ASC);


GO
PRINT N'Creating [qvstg].[BudgetVolumes]...';


GO
CREATE TABLE [qvstg].[BudgetVolumes] (
    [BudgetVolumesKey]   INT             IDENTITY (100, 1) NOT NULL,
    [EtlDeltaHash]       CHAR (32)       NOT NULL,
    [EtlCreatedOn]       DATETIME        NOT NULL,
    [EtlCreatedBy]       VARCHAR (200)   NOT NULL,
    [EtlUpdatedOn]       DATETIME        NOT NULL,
    [EtlUpdatedBy]       VARCHAR (200)   NOT NULL,
    [EtlDeletedOn]       DATETIME        NULL,
    [EtlDeletedBy]       VARCHAR (200)   NULL,
    [IsDeleted]          CHAR (1)        NOT NULL,
    [LineCount]          INT             NOT NULL,
    [BusinessUnitKey]    INT             NOT NULL,
    [ProductCategoryKey] INT             NOT NULL,
    [Jan_YTD]            DECIMAL (28, 4) NULL,
    [Feb_YTD]            DECIMAL (28, 4) NULL,
    [Mar_YTD]            DECIMAL (28, 4) NULL,
    [Apr_YTD]            DECIMAL (28, 4) NULL,
    [May_YTD]            DECIMAL (28, 4) NULL,
    [Jun_YTD]            DECIMAL (28, 4) NULL,
    [Jul_YTD]            DECIMAL (28, 4) NULL,
    [Aug_YTD]            DECIMAL (28, 4) NULL,
    [Sep_YTD]            DECIMAL (28, 4) NULL,
    [Oct_YTD]            DECIMAL (28, 4) NULL,
    [Nov_YTD]            DECIMAL (28, 4) NULL,
    [Dec_YTD]            DECIMAL (28, 4) NULL,
    CONSTRAINT [PK_qvstg_BudgetVolumes] PRIMARY KEY CLUSTERED ([BudgetVolumesKey] ASC),
    CONSTRAINT [AK_qvstg_BudgetVolumes_BusinessUnitKey_ProductCategoryKey] UNIQUE NONCLUSTERED ([BusinessUnitKey] ASC, [ProductCategoryKey] ASC)
);


GO
PRINT N'Creating [qvstg].[BudgetVolumes].[NCI_qvstg_BudgetVolumes_LoadFilter]...';


GO
CREATE NONCLUSTERED INDEX [NCI_qvstg_BudgetVolumes_LoadFilter]
    ON [qvstg].[BudgetVolumes]([BusinessUnitKey] ASC, [ProductCategoryKey] ASC, [EtlDeltaHash] ASC, [IsDeleted] ASC);


GO
PRINT N'Creating [stg].[SSIS_STG_BUDGET_2017_VolumeCheck]...';


GO
CREATE TABLE [stg].[SSIS_STG_BUDGET_2017_VolumeCheck] (
    [RegionName]   NVARCHAR (200)   NOT NULL,
    [ProductGroup] NVARCHAR (200)   NOT NULL,
    [Jan_YTD]      DECIMAL (38, 16) NULL,
    [Feb_YTD]      DECIMAL (38, 16) NULL,
    [Mar_YTD]      DECIMAL (38, 16) NULL,
    [Apr_YTD]      DECIMAL (38, 16) NULL,
    [May_YTD]      DECIMAL (38, 16) NULL,
    [Jun_YTD]      DECIMAL (38, 16) NULL,
    [Jul_YTD]      DECIMAL (38, 16) NULL,
    [Aug_YTD]      DECIMAL (38, 16) NULL,
    [Sep_YTD]      DECIMAL (38, 16) NULL,
    [Oct_YTD]      DECIMAL (38, 16) NULL,
    [Nov_YTD]      DECIMAL (38, 16) NULL,
    [Dec_YTD]      DECIMAL (38, 16) NULL,
    CONSTRAINT [PK_stg_SSIS_STG_BUDGET_2017_VolumeCheck] PRIMARY KEY CLUSTERED ([RegionName] ASC, [ProductGroup] ASC)
);


GO
PRINT N'Creating [stg].[SSIS_STG_BUDGET_2017_Sales]...';


GO
CREATE TABLE [stg].[SSIS_STG_BUDGET_2017_Sales] (
    [NativeBusinessUnit]           NVARCHAR (200)   NOT NULL,
    [NativeMonthCode]              CHAR (3)         NOT NULL,
    [NativeRegionName]             NVARCHAR (200)   NOT NULL,
    [BusinessUnitKey]              INT              NOT NULL,
    [DateKey]                      INT              NOT NULL,
    [InstallationServices_10000]   DECIMAL (38, 16) NULL,
    [ProducedGoods_10100]          DECIMAL (38, 16) NULL,
    [GroupGoods_10200]             DECIMAL (38, 16) NULL,
    [CommercialGoods_10300]        DECIMAL (38, 16) NULL,
    [ExternalSales_11890]          DECIMAL (38, 16) NULL,
    [IC_Transf_SBU_11000]          DECIMAL (38, 16) NULL,
    [IC_Transf_Region_11100]       DECIMAL (38, 16) NULL,
    [IC_Transf_Abroad_11200]       DECIMAL (38, 16) NULL,
    [IC_Transf_US_11300]           DECIMAL (38, 16) NULL,
    [Total_IC_Sales]               DECIMAL (38, 16) NULL,
    [TotalSalesAndTransfers_11990] DECIMAL (38, 16) NULL,
    CONSTRAINT [PK_stg_SSIS_STG_BUDGET_2017_Sales] PRIMARY KEY CLUSTERED ([NativeBusinessUnit] ASC, [NativeMonthCode] ASC)
);


GO
PRINT N'Creating [stg].[SSIS_STG_BUDGET_2017_SalesCheck]...';


GO
CREATE TABLE [stg].[SSIS_STG_BUDGET_2017_SalesCheck] (
    [RegionName]                   NVARCHAR (200)   NOT NULL,
    [MonthCode]                    CHAR (3)         NOT NULL,
    [InstallationServices_10000]   DECIMAL (38, 16) NULL,
    [ProducedGoods_10100]          DECIMAL (38, 16) NULL,
    [GroupGoods_10200]             DECIMAL (38, 16) NULL,
    [CommercialGoods_10300]        DECIMAL (38, 16) NULL,
    [ExternalSales_11890]          DECIMAL (38, 16) NULL,
    [IC_Transf_SBU_11000]          DECIMAL (38, 16) NULL,
    [IC_Transf_Region_11100]       DECIMAL (38, 16) NULL,
    [IC_Transf_Abroad_11200]       DECIMAL (38, 16) NULL,
    [IC_Transf_US_11300]           DECIMAL (38, 16) NULL,
    [Total_IC_Sales]               DECIMAL (38, 16) NULL,
    [TotalSalesAndTransfers_11990] DECIMAL (38, 16) NULL,
    CONSTRAINT [PK_stg_SSIS_STG_BUDGET_2017_SalesCheck] PRIMARY KEY CLUSTERED ([RegionName] ASC, [MonthCode] ASC)
);


GO
PRINT N'Creating [stg].[SSIS_LAND_BUDGET_2017_Volume]...';


GO
CREATE TABLE [stg].[SSIS_LAND_BUDGET_2017_Volume] (
    [RecordId]     INT            IDENTITY (1, 1) NOT NULL,
    [BusinessUnit] NVARCHAR (500) NULL,
    [ProductGroup] NVARCHAR (500) NULL,
    [Jan_YTD]      NVARCHAR (500) NULL,
    [Feb_YTD]      NVARCHAR (500) NULL,
    [Mar_YTD]      NVARCHAR (500) NULL,
    [Apr_YTD]      NVARCHAR (500) NULL,
    [May_YTD]      NVARCHAR (500) NULL,
    [Jun_YTD]      NVARCHAR (500) NULL,
    [Jul_YTD]      NVARCHAR (500) NULL,
    [Aug_YTD]      NVARCHAR (500) NULL,
    [Sep_YTD]      NVARCHAR (500) NULL,
    [Oct_YTD]      NVARCHAR (500) NULL,
    [Nov_YTD]      NVARCHAR (500) NULL,
    [Dec_YTD]      NVARCHAR (500) NULL
);


GO
PRINT N'Creating [stg].[SSIS_LAND_BUDGET_2017_Sales]...';


GO
CREATE TABLE [stg].[SSIS_LAND_BUDGET_2017_Sales] (
    [RecordId]                     INT            IDENTITY (1, 1) NOT NULL,
    [MonthCode]                    CHAR (3)       NOT NULL,
    [RowHeader]                    NVARCHAR (500) NULL,
    [InstallationServices_10000]   NVARCHAR (500) NULL,
    [ProducedGoods_10100]          NVARCHAR (500) NULL,
    [GroupGoods_10200]             NVARCHAR (500) NULL,
    [CommercialGoods_10300]        NVARCHAR (500) NULL,
    [ExternalSales_11890]          NVARCHAR (500) NULL,
    [IC_Transf_SBU_11000]          NVARCHAR (500) NULL,
    [IC_Transf_Region_11100]       NVARCHAR (500) NULL,
    [IC_Transf_Abroad_11200]       NVARCHAR (500) NULL,
    [IC_Transf_US_11300]           NVARCHAR (500) NULL,
    [Total_IC_Sales]               NVARCHAR (500) NULL,
    [TotalSalesAndTransfers_11990] NVARCHAR (500) NULL
);


GO
PRINT N'Creating [stg].[SSIS_BUDGET_RegionLookup]...';


GO
CREATE TABLE [stg].[SSIS_BUDGET_RegionLookup] (
    [RegionCode]   VARCHAR (8)  NOT NULL,
    [RegionName]   VARCHAR (50) NOT NULL,
    [RegionLookup] VARCHAR (50) NOT NULL,
    CONSTRAINT [PK_stg_SSIS_BUDGET_RegionLookup] PRIMARY KEY CLUSTERED ([RegionCode] ASC),
    CONSTRAINT [AK_stg_SSIS_BUDGET_RegionLookup_RegionLookup] UNIQUE NONCLUSTERED ([RegionLookup] ASC),
    CONSTRAINT [AK_stg_SSIS_BUDGET_RegionLookup_RegionName] UNIQUE NONCLUSTERED ([RegionName] ASC)
);


GO
PRINT N'Creating [stg].[SSIS_BUDGET_BusinessUnitLookup]...';


GO
CREATE TABLE [stg].[SSIS_BUDGET_BusinessUnitLookup] (
    [RegionCode]         VARCHAR (8)  NOT NULL,
    [SBU]                VARCHAR (8)  NOT NULL,
    [BusinessUnitName]   VARCHAR (50) NOT NULL,
    [BusinessUnitLookup] VARCHAR (50) NOT NULL,
    CONSTRAINT [PK_SSIS_BUDGET_BusinessUnitLookup] PRIMARY KEY CLUSTERED ([SBU] ASC),
    CONSTRAINT [AK_stg_SSIS_BUDGET_BusinessUnitLookup__BusinessUnitLookup] UNIQUE NONCLUSTERED ([BusinessUnitLookup] ASC),
    CONSTRAINT [AK_stg_SSIS_BUDGET_BusinessUnitLookup_BusinessUnitName] UNIQUE NONCLUSTERED ([BusinessUnitName] ASC)
);


GO
PRINT N'Creating [stg].[SSIS_BUDGET_ProductCategoryGroupLookup]...';


GO
CREATE TABLE [stg].[SSIS_BUDGET_ProductCategoryGroupLookup] (
    [ProductCategoryGroupId]     INT          NOT NULL,
    [ProductCategoryGroupName]   VARCHAR (50) NOT NULL,
    [QlikViewCategoryLevel2Name] VARCHAR (50) NOT NULL,
    [QlikViewCategoryLevel2Id]   INT          NULL,
    CONSTRAINT [PK_stg_SSIS_BUDGET_ProductCategoryGroupLookup] PRIMARY KEY CLUSTERED ([ProductCategoryGroupId] ASC),
    CONSTRAINT [AK_stg_SSIS_BUDGET_ProductCategoryGroupLookup_Name] UNIQUE NONCLUSTERED ([ProductCategoryGroupName] ASC)
);


GO
PRINT N'Creating [stg].[SSIS_BUDGET_ProductCategoryLookup]...';


GO
CREATE TABLE [stg].[SSIS_BUDGET_ProductCategoryLookup] (
    [ProductCategoryGroupId]     INT          NOT NULL,
    [ProductCategoryId]          INT          NOT NULL,
    [ProductCategoryName]        VARCHAR (50) NOT NULL,
    [QlikViewCategoryLevel4Name] VARCHAR (50) NOT NULL,
    [QlikViewCategoryLevel4Id]   INT          NULL,
    [QlikViewCategoryLevel3Name] VARCHAR (50) NOT NULL,
    [QlikViewCategoryLevel3Id]   INT          NULL,
    [MatchConfidence]            TINYINT      NOT NULL,
    CONSTRAINT [PK_SSIS_BUDGET_ProductCategoryLookup] PRIMARY KEY CLUSTERED ([ProductCategoryId] ASC),
    CONSTRAINT [AK_stg_SSIS_BUDGET_ProductCategoryLookup_Name] UNIQUE NONCLUSTERED ([ProductCategoryName] ASC)
);


GO
PRINT N'Creating [stg].[SSIS_STG_BUDGET_2017_Volume]...';


GO
CREATE TABLE [stg].[SSIS_STG_BUDGET_2017_Volume] (
    [NativeBusinessUnit]    NVARCHAR (200)   NOT NULL,
    [NativeProductCategory] NVARCHAR (200)   NOT NULL,
    [BusinessUnitKey]       INT              NOT NULL,
    [ProductCategoryKey]    INT              NOT NULL,
    [Jan_YTD]               DECIMAL (38, 16) NULL,
    [Feb_YTD]               DECIMAL (38, 16) NULL,
    [Mar_YTD]               DECIMAL (38, 16) NULL,
    [Apr_YTD]               DECIMAL (38, 16) NULL,
    [May_YTD]               DECIMAL (38, 16) NULL,
    [Jun_YTD]               DECIMAL (38, 16) NULL,
    [Jul_YTD]               DECIMAL (38, 16) NULL,
    [Aug_YTD]               DECIMAL (38, 16) NULL,
    [Sep_YTD]               DECIMAL (38, 16) NULL,
    [Oct_YTD]               DECIMAL (38, 16) NULL,
    [Nov_YTD]               DECIMAL (38, 16) NULL,
    [Dec_YTD]               DECIMAL (38, 16) NULL,
    CONSTRAINT [PK_stg_SSIS_STG_BUDGET_2017_Volume] PRIMARY KEY CLUSTERED ([NativeBusinessUnit] ASC, [NativeProductCategory] ASC)
);


GO
PRINT N'Creating [dbo].[DataSource]...';


GO
CREATE TABLE [dbo].[DataSource] (
    [DataSourceKey]          INT            NOT NULL,
    [DataSourceCode]         NVARCHAR (20)  NOT NULL,
    [DataSourceName]         NVARCHAR (50)  NOT NULL,
    [DataSourceGroup]        NVARCHAR (50)  NOT NULL,
    [HostCountry]            NVARCHAR (50)  NOT NULL,
    [DataCountries]          NVARCHAR (100) NOT NULL,
    [Narrative]              NVARCHAR (500) NOT NULL,
    [QlikViewSourceSystemId] INT            NULL,
    [IsActive]               CHAR (1)       NOT NULL,
    CONSTRAINT [PK_DataSource] PRIMARY KEY CLUSTERED ([DataSourceKey] ASC),
    CONSTRAINT [AK_DataSource_Code] UNIQUE NONCLUSTERED ([DataSourceCode] ASC),
    CONSTRAINT [AK_DataSource_Name] UNIQUE NONCLUSTERED ([DataSourceName] ASC)
);


GO
PRINT N'Creating [dbo].[dimDate]...';


GO
CREATE TABLE [dbo].[dimDate] (
    [DateKey]                      INT          NOT NULL,
    [ActualDate]                   DATE         NULL,
    [DateNameEU]                   VARCHAR (30) NOT NULL,
    [DateNameUS]                   VARCHAR (30) NOT NULL,
    [EnglishMonthCode]             CHAR (3)     NOT NULL,
    [EnglishMonthName]             VARCHAR (10) NOT NULL,
    [EnglishDayCode]               CHAR (3)     NOT NULL,
    [EnglishDayName]               VARCHAR (10) NOT NULL,
    [CalendarYear]                 INT          NULL,
    [CalendarQuarter]              TINYINT      NULL,
    [MonthNumberInYear]            TINYINT      NULL,
    [WeekNumberInYear]             TINYINT      NULL,
    [DayNumberInYear]              SMALLINT     NULL,
    [DayNumberInMonth]             TINYINT      NULL,
    [DayNumberInWeek]              TINYINT      NULL,
    [YearMonth]                    VARCHAR (10) NOT NULL,
    [YearQuarter]                  VARCHAR (10) NOT NULL,
    [IsWeekend]                    VARCHAR (10) NOT NULL,
    [IsLastDayInMonth]             VARCHAR (10) NOT NULL,
    [MondayWeekCommencing]         DATE         NULL,
    [WorkDaysInMonthTotal]         TINYINT      NULL,
    [WorkDaysInMonthToDate]        TINYINT      NULL,
    [FiscalPeriod]                 TINYINT      NULL,
    [FiscalQuarter]                TINYINT      NULL,
    [FiscalYear]                   INT          NULL,
    [FiscalPeriodCode]             CHAR (3)     NOT NULL,
    [FiscalPeriodName]             VARCHAR (10) NOT NULL,
    [FiscalYearPeriod]             VARCHAR (10) NOT NULL,
    [FiscalYearQuarter]            VARCHAR (10) NOT NULL,
    [WorkDaysInFiscalPeriodTotal]  TINYINT      NULL,
    [WorkDaysInFiscalPeriodToDate] TINYINT      NULL,
    CONSTRAINT [PK_dimDate] PRIMARY KEY CLUSTERED ([DateKey] ASC)
);


GO
PRINT N'Creating [log4Private].[DF_Journal_UtcDate]...';


GO
ALTER TABLE [log4Private].[Journal]
    ADD CONSTRAINT [DF_Journal_UtcDate] DEFAULT (getutcdate()) FOR [UtcDate];


GO
PRINT N'Creating [log4Private].[DF_Journal_SystemDate]...';


GO
ALTER TABLE [log4Private].[Journal]
    ADD CONSTRAINT [DF_Journal_SystemDate] DEFAULT (getdate()) FOR [SystemDate];


GO
PRINT N'Creating [log4Private].[DF_Journal_Task]...';


GO
ALTER TABLE [log4Private].[Journal]
    ADD CONSTRAINT [DF_Journal_Task] DEFAULT ('') FOR [Task];


GO
PRINT N'Creating [log4Private].[DF_SqlException_UtcDate]...';


GO
ALTER TABLE [log4Private].[SqlException]
    ADD CONSTRAINT [DF_SqlException_UtcDate] DEFAULT (getutcdate()) FOR [UtcDate];


GO
PRINT N'Creating [log4Private].[DF_SqlException_SystemDate]...';


GO
ALTER TABLE [log4Private].[SqlException]
    ADD CONSTRAINT [DF_SqlException_SystemDate] DEFAULT (getdate()) FOR [SystemDate];


GO
PRINT N'Creating [dbo].[DF_DataSource_HostCountry]...';


GO
ALTER TABLE [dbo].[DataSource]
    ADD CONSTRAINT [DF_DataSource_HostCountry] DEFAULT ('') FOR [HostCountry];


GO
PRINT N'Creating [dbo].[DF_DataSource_DataCountries]...';


GO
ALTER TABLE [dbo].[DataSource]
    ADD CONSTRAINT [DF_DataSource_DataCountries] DEFAULT ('') FOR [DataCountries];


GO
PRINT N'Creating [dbo].[DF_DataSource_Narrative]...';


GO
ALTER TABLE [dbo].[DataSource]
    ADD CONSTRAINT [DF_DataSource_Narrative] DEFAULT ('') FOR [Narrative];


GO
PRINT N'Creating [dbo].[DF_DataSource_IsActive]...';


GO
ALTER TABLE [dbo].[DataSource]
    ADD CONSTRAINT [DF_DataSource_IsActive] DEFAULT ('Y') FOR [IsActive];


GO
PRINT N'Creating [dbo].[ReferenceTypeHistorySequence]...';


GO
CREATE SEQUENCE [dbo].[ReferenceTypeHistorySequence]
    AS BIGINT
    START WITH 100001
    INCREMENT BY 2
    MINVALUE 1001
    MAXVALUE 9223372036854775805
    NO CACHE;


GO
PRINT N'Creating [dbo].[ReferenceTypeKeySequence]...';


GO
CREATE SEQUENCE [dbo].[ReferenceTypeKeySequence]
    AS BIGINT
    START WITH 100102
    INCREMENT BY 2
    MINVALUE 1002
    MAXVALUE 9223372036854775806
    NO CACHE;


GO
PRINT N'Creating [dbo].[DF_DataSource_DataSourceKey]...';


GO
ALTER TABLE [dbo].[DataSource]
    ADD CONSTRAINT [DF_DataSource_DataSourceKey] DEFAULT (next value for dbo.ReferenceTypeKeySequence) FOR [DataSourceKey];


GO
PRINT N'Creating [log4Private].[FK_Journal_Severity]...';


GO
ALTER TABLE [log4Private].[Journal]
    ADD CONSTRAINT [FK_Journal_Severity] FOREIGN KEY ([SeverityId]) REFERENCES [log4Private].[Severity] ([SeverityId]);


GO
PRINT N'Creating [log4Private].[FK_Journal_SqlException]...';


GO
ALTER TABLE [log4Private].[Journal]
    ADD CONSTRAINT [FK_Journal_SqlException] FOREIGN KEY ([ExceptionId]) REFERENCES [log4Private].[SqlException] ([ExceptionId]);


GO
PRINT N'Creating [log4Private].[FK_JournalDetail_Journal]...';


GO
ALTER TABLE [log4Private].[JournalDetail]
    ADD CONSTRAINT [FK_JournalDetail_Journal] FOREIGN KEY ([JournalId]) REFERENCES [log4Private].[Journal] ([JournalId]) ON DELETE CASCADE;


GO
PRINT N'Creating [stg].[FK_SSIS_BUDGET_BusinessUnitLookup_Region]...';


GO
ALTER TABLE [stg].[SSIS_BUDGET_BusinessUnitLookup]
    ADD CONSTRAINT [FK_SSIS_BUDGET_BusinessUnitLookup_Region] FOREIGN KEY ([RegionCode]) REFERENCES [stg].[SSIS_BUDGET_RegionLookup] ([RegionCode]);


GO
PRINT N'Creating [stg].[FK_SSIS_BUDGET_ProductCategoryLookup_ProductCategoryGroup]...';


GO
ALTER TABLE [stg].[SSIS_BUDGET_ProductCategoryLookup]
    ADD CONSTRAINT [FK_SSIS_BUDGET_ProductCategoryLookup_ProductCategoryGroup] FOREIGN KEY ([ProductCategoryGroupId]) REFERENCES [stg].[SSIS_BUDGET_ProductCategoryGroupLookup] ([ProductCategoryGroupId]);


GO
PRINT N'Creating [log4Private].[CK_JournalControl_OnOffSwitch]...';


GO
ALTER TABLE [log4Private].[JournalControl]
    ADD CONSTRAINT [CK_JournalControl_OnOffSwitch] CHECK ([OnOffSwitch]='OFF' OR [OnOffSwitch]='ON');


GO
PRINT N'Creating [qvstg].[CK_qvstg_ProductCategory_IsDeleted]...';


GO
ALTER TABLE [qvstg].[ProductCategory]
    ADD CONSTRAINT [CK_qvstg_ProductCategory_IsDeleted] CHECK (IsDeleted = 'Y' or IsDeleted = 'N');


GO
PRINT N'Creating [qvstg].[CK_qvstg_BusinessUnit_IsDeleted]...';


GO
ALTER TABLE [qvstg].[BusinessUnit]
    ADD CONSTRAINT [CK_qvstg_BusinessUnit_IsDeleted] CHECK (IsDeleted = 'Y' or IsDeleted = 'N');


GO
PRINT N'Creating [qvstg].[CK_qvstg_OrderBacklog_IsDeleted]...';


GO
ALTER TABLE [qvstg].[OrderBacklog]
    ADD CONSTRAINT [CK_qvstg_OrderBacklog_IsDeleted] CHECK (IsDeleted = 'Y' or IsDeleted = 'N');


GO
PRINT N'Creating [qvstg].[CK_qvstg_OrderShippedNotInvoiced_IsDeleted]...';


GO
ALTER TABLE [qvstg].[OrderShippedNotInvoiced]
    ADD CONSTRAINT [CK_qvstg_OrderShippedNotInvoiced_IsDeleted] CHECK (IsDeleted = 'Y' or IsDeleted = 'N');


GO
PRINT N'Creating [qvstg].[CK_qvstg_Invoice_IsDeleted]...';


GO
ALTER TABLE [qvstg].[Invoice]
    ADD CONSTRAINT [CK_qvstg_Invoice_IsDeleted] CHECK (IsDeleted = 'Y' or IsDeleted = 'N');


GO
PRINT N'Creating [qvstg].[CK_qvstg_Site_IsDeleted]...';


GO
ALTER TABLE [qvstg].[Site]
    ADD CONSTRAINT [CK_qvstg_Site_IsDeleted] CHECK (IsDeleted = 'Y' or IsDeleted = 'N');


GO
PRINT N'Creating [qvstg].[CK_qvstg_PaymentTerm_IsDeleted]...';


GO
ALTER TABLE [qvstg].[PaymentTerm]
    ADD CONSTRAINT [CK_qvstg_PaymentTerm_IsDeleted] CHECK (IsDeleted = 'Y' or IsDeleted = 'N');


GO
PRINT N'Creating [qvstg].[CK_qvstg_Customer_IsDeleted]...';


GO
ALTER TABLE [qvstg].[Customer]
    ADD CONSTRAINT [CK_qvstg_Customer_IsDeleted] CHECK (IsDeleted = 'Y' or IsDeleted = 'N');


GO
PRINT N'Creating [qvstg].[CK_qvstg_Product_IsDeleted]...';


GO
ALTER TABLE [qvstg].[Product]
    ADD CONSTRAINT [CK_qvstg_Product_IsDeleted] CHECK (IsDeleted = 'Y' or IsDeleted = 'N');


GO
PRINT N'Creating [qvstg].[CK_qvstg_BudgetSale_IsDeleted]...';


GO
ALTER TABLE [qvstg].[BudgetSales]
    ADD CONSTRAINT [CK_qvstg_BudgetSale_IsDeleted] CHECK (IsDeleted = 'Y' or IsDeleted = 'N');


GO
PRINT N'Creating [qvstg].[CK_qvstg_BudgetVolumes_IsDeleted]...';


GO
ALTER TABLE [qvstg].[BudgetVolumes]
    ADD CONSTRAINT [CK_qvstg_BudgetVolumes_IsDeleted] CHECK (IsDeleted = 'Y' or IsDeleted = 'N');


GO
PRINT N'Creating [dbo].[CK_DataSource_IsActive]...';


GO
ALTER TABLE [dbo].[DataSource]
    ADD CONSTRAINT [CK_DataSource_IsActive] CHECK ((IsActive = 'Y' or IsActive = 'N'));


GO
PRINT N'Creating [log4].[GetJournalControl]...';


GO

/*************************************************************************************************/
--</MaintenanceHeader>

CREATE FUNCTION [log4].[GetJournalControl]
(
  @ModuleName		varchar(255)
, @GroupName		varchar(255)
)

RETURNS varchar(3)

AS

--<CommentHeader>
/**************************************************************************************************

Properties
==========
FUNCTION NAME:      [log4].[GetJournalControl]
DESCRIPTION:		Returns the ON/OFF value for the specified Journal Name, or Group Name if
					Module not found or the system default if neither is found
DATE OF ORIGIN:		15-APR-2008
ORIGINAL AUTHOR:	Greg M. Lucas (data-centric solutions ltd. http://www.data-centric.co.uk)
BUILD DATE:			01-MAR-2015
BUILD VERSION:		0.0.13
DEPENDANTS:         Various
DEPENDENCIES:       None

Additional Notes
================
Builds a string that looks like this: "0 hr(s) 1 min(s) and 22 sec(s)" or "1345 milliseconds"

Revision history
==================================================================================================
ChangeDate		Author	Version		Narrative
============	======	=======		==============================================================
15-APR-2008		GML		v0.0.3		Created
------------	------	-------		--------------------------------------------------------------

=================================================================================================
(C) Copyright 2006-14 data-centric solutions ltd. (http://log4tsql.sourceforge.net/)

This library is free software; you can redistribute it and/or modify it under the terms of the
GNU Lesser General Public License as published by the Free Software Foundation (www.fsf.org);
either version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along with this
library; if not, you can find it at http://www.opensource.org/licenses/lgpl-3.0.html
or http://www.gnu.org/licenses/lgpl.html

**************************************************************************************************/
--</CommentHeader>

BEGIN
	RETURN
		(
			SELECT
				TOP 1 OnOffSwitch
			FROM
				(
						SELECT
							  OnOffSwitch
							, 1 AS [Precedence]
						FROM
							[log4Private].[JournalControl]
						WHERE
							ModuleName = 'SYSTEM_OVERRIDE'
						AND
							OnOffSwitch = 'OFF' -- only care about the override when it's OFF
					UNION
						SELECT
							  OnOffSwitch
							, 10 AS [Precedence]
						FROM
							[log4Private].[JournalControl]
						WHERE
							ModuleName = @ModuleName
					UNION
						SELECT
							  OnOffSwitch
							, 100 AS [Precedence]
						FROM
							[log4Private].[JournalControl]
						WHERE
							ModuleName = @GroupName
					UNION
						SELECT
							  OnOffSwitch
							, 200 AS [Precedence]
						FROM
							[log4Private].[JournalControl]
						WHERE
							ModuleName = 'SYSTEM_DEFAULT'
					UNION
						SELECT
							  'OFF'		AS [OnOffSwitch]
							, 300		AS [Precedence]
				) AS [x]
			ORDER BY
				[Precedence] ASC
		)
END
GO
PRINT N'Creating [log4].[FormatElapsedTime]...';


GO

/*************************************************************************************************/
--</MaintenanceHeader>

CREATE FUNCTION [log4].[FormatElapsedTime]
(
  @StartTime                      datetime
, @EndTime                        datetime  = NULL
, @ShowMillisecsIfUnderNumSecs    tinyint   = NULL
)

RETURNS varchar(48)

AS

--<CommentHeader>
/**************************************************************************************************

Properties
==========
FUNCTION NAME:      [log4].[FormatElapsedTime]
DESCRIPTION:        Returns a string describing the time elapsed between start and end time
DATE OF ORIGIN:		16-FEB-2007
ORIGINAL AUTHOR:	Greg M. Lucas (data-centric solutions ltd. http://www.data-centric.co.uk)
BUILD DATE:			01-MAR-2015
BUILD VERSION:		0.0.13
DEPENDANTS:         Various
DEPENDENCIES:       None

Additional Notes
================
Builds a string that looks like this: "0 hr(s) 1 min(s) and 22 sec(s)" or "1345 milliseconds"

Revision history
==================================================================================================
ChangeDate		Author	Version		Narrative
============	======	=======		==============================================================
16-FEB-2007		GML		v0.0.2		Created
------------	------	-------		--------------------------------------------------------------
01-MAR-2015		GML		v0.0.13		Fixed bug when number of hours is greater than 99
------------	------	-------		--------------------------------------------------------------

=================================================================================================
(C) Copyright 2006-14 data-centric solutions ltd. (http://log4tsql.sourceforge.net/)

This library is free software; you can redistribute it and/or modify it under the terms of the
GNU Lesser General Public License as published by the Free Software Foundation (www.fsf.org);
either version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along with this
library; if not, you can find it at http://www.opensource.org/licenses/lgpl-3.0.html
or http://www.gnu.org/licenses/lgpl.html

**************************************************************************************************/
--</CommentHeader>

BEGIN
	DECLARE	  @time                     int
			, @hrs                      int
			, @mins                     int
			, @secs                     int
			, @msecs                    int
			, @Duration                 varchar(48)

	IF @StartTime IS NULL AND @EndTime IS NULL
		SET @Duration = 'Start and End Times are both NULL'
	ELSE IF @StartTime IS NULL
		SET @Duration = 'Start Time is NULL'
	ELSE
		BEGIN
			IF @EndTime IS NULL SET @EndTime = GETDATE()

			SET @time = DATEDIFF(ss, @StartTime, @EndTime)

			IF @time > ISNULL(@ShowMillisecsIfUnderNumSecs, 5)
				BEGIN
					SET @hrs        = @time / 3600
					SET @mins       = (@time % 3600) / 60
					SET @secs       = (@time % 3600) % 60
					SET @Duration   = CASE
										WHEN @hrs = 0 THEN ''
										WHEN @hrs = 1 THEN CAST(@hrs AS varchar(4)) + ' hr, '
										ELSE CAST(@hrs AS varchar(8)) + ' hrs, '
									  END
									+ CASE
										WHEN @mins = 1 THEN CAST(@mins AS varchar(4)) + ' min'
										ELSE CAST(@mins AS varchar(2)) + ' mins'
									  END
									+ ' and '
									+ CASE
										WHEN @secs = 1 THEN CAST(@secs AS varchar(2)) + ' sec'
										ELSE CAST(@secs AS varchar(2)) + ' secs'
									  END
				END
			ELSE
				BEGIN
					SET @msecs      = DATEDIFF(ms, @StartTime, @EndTime)
					SET @Duration   = CAST(@msecs AS varchar(6)) + ' milliseconds'
				END
		END

	RETURN @Duration
END
GO
PRINT N'Creating [dbo].[Numbers]...';


GO
create function [dbo].[Numbers]
(
  @size int
)
returns table
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
FUNCTION NAME:  dbo.Numbers
DESCRIPTION:    Returns a dynamically created set of N sequential numbers starting at 1 where N is the value of @size
AUTHOR:         Greg M. Lucas
ORIGIN DATE:    14-Jun-2017

Additional Notes
================
select max(Number) from  dbo.Numbers(255) -- tinyint
select max(Number) from  dbo.Numbers(32767) -- smallint
select max(Number) from  dbo.Numbers(2147483647) -- int
select max(Number) from  dbo.Numbers(9223372036854775807) -- bigint not supported

REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		14-Jun-2017		GML		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------

**********************************************************************************************************************/
--</CommentHeader>
return
	(
		with
			  cte0 (num) as (select 1 union all select 1)
			, cte1 (num) as (select 1 from cte0 as x cross join cte0 as y)
			, cte2 (num) as (select 1 from cte1 as x cross join cte1 as y)
			, cte3 (num) as (select 1 from cte2 as x cross join cte2 as y)
			, cte4 (num) as (select 1 from cte3 as x cross join cte3 as y)
			, cte5 (num) as (select 1 from cte4 as x cross join cte4 as y)
			, cte6 (num) as (select 1 from cte5 as x cross join cte5 as y)

		select top(case when @size > 0 then @size else 0 end)
			row_number() over (order by num) as [Number]
		from
			cte6
	)
GO
PRINT N'Creating [pbi].[dimExpectedPaymentDate]...';


GO
create view [pbi].[dimExpectedPaymentDate]
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
VIEW NAME:      pbi.dimExpectedPaymentDate
DESCRIPTION:    Exposes date information for use with factInvoice.ExpectedPaymentDateKey
AUTHOR:         Greg M. Lucas
ORIGIN DATE:    21-JUN-2017

Additional Notes
================


REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		21-JUN-2017		GML		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------


**********************************************************************************************************************/
--</CommentHeader>

	select
		  DateKey as [ExpectedPaymentDateKey]
		, ActualDate as [ExpectedPaymentDate]
		, DateNameEU as [ExpectedPaymentDateNameEU]
		, DateNameUS as [ExpectedPaymentDateNameUS]
		, EnglishMonthCode as [ExpectedPaymentDateEnglishMonthCode]
		, EnglishMonthName as [ExpectedPaymentDateEnglishMonthName]
		, EnglishDayCode as [ExpectedPaymentDateEnglishDayCode]
		, EnglishDayName as [ExpectedPaymentDateEnglishDayName]
		, CalendarYear as [ExpectedPaymentDateCalendarYear]
		, CalendarQuarter as [ExpectedPaymentDateCalendarQuarter]
		, MonthNumberInYear as [ExpectedPaymentDateMonthNumberInYear]
		, WeekNumberInYear as [ExpectedPaymentDateWeekNumberInYear]
		, DayNumberInYear as [ExpectedPaymentDateDayNumberInYear]
		, DayNumberInMonth as [ExpectedPaymentDateDayNumberInMonth]
		, DayNumberInWeek as [ExpectedPaymentDateDayNumberInWeek]
		, YearMonth as [ExpectedPaymentDateYearMonth]
		, YearQuarter as [ExpectedPaymentDateYearQuarter]
		, IsWeekend as [ExpectedPaymentDateIsWeekend]
		, IsLastDayInMonth as [ExpectedPaymentDateIsLastDayInMonth]
		, MondayWeekCommencing as [ExpectedPaymentDateMondayWeekCommencing]
		, WorkDaysInMonthTotal as [ExpectedPaymentDateWorkDaysInMonthTotal]
		, WorkDaysInMonthToDate as [ExpectedPaymentDateWorkDaysInMonthToDate]
		, FiscalPeriod as [ExpectedPaymentDateFiscalPeriod]
		, FiscalQuarter as [ExpectedPaymentDateFiscalQuarter]
		, FiscalYear as [ExpectedPaymentDateFiscalYear]
		, FiscalPeriodCode as [ExpectedPaymentDateFiscalPeriodCode]
		, FiscalPeriodName as [ExpectedPaymentDateFiscalPeriodName]
		, FiscalYearPeriod as [ExpectedPaymentDateFiscalYearPeriod]
		, FiscalYearQuarter as [ExpectedPaymentDateFiscalYearQuarter]
		, WorkDaysInFiscalPeriodTotal as [ExpectedPaymentDateWorkDaysInFiscalPeriodTotal]
		, WorkDaysInFiscalPeriodToDate as [ExpectedPaymentDateWorkDaysInFiscalPeriodToDate]
	from
		dbo.dimDate
GO
PRINT N'Creating [pbi].[dimInvoiceDate]...';


GO
create view [pbi].[dimInvoiceDate]
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
VIEW NAME:      pbi.dimInvoiceDate
DESCRIPTION:    Exposes date information for use with factInvoice.InvoiceDateKey
AUTHOR:         Greg M. Lucas
ORIGIN DATE:    20-JUN-2017

Additional Notes
================


REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		20-JUN-2017		GML		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------


**********************************************************************************************************************/
--</CommentHeader>

	select
		  DateKey as [InvoiceDateKey]
		, ActualDate as [InvoiceDate]
		, DateNameEU as [InvoiceDateDateNameEU]
		, DateNameUS as [InvoiceDateDateNameUS]
		, EnglishMonthCode as [InvoiceDateEnglishMonthCode]
		, EnglishMonthName as [InvoiceDateEnglishMonthName]
		, EnglishDayCode as [InvoiceDateEnglishDayCode]
		, EnglishDayName as [InvoiceDateEnglishDayName]
		, CalendarYear as [InvoiceDateCalendarYear]
		, CalendarQuarter as [InvoiceDateCalendarQuarter]
		, MonthNumberInYear as [InvoiceDateMonthNumberInYear]
		, WeekNumberInYear as [InvoiceDateWeekNumberInYear]
		, DayNumberInYear as [InvoiceDateDayNumberInYear]
		, DayNumberInMonth as [InvoiceDateDayNumberInMonth]
		, DayNumberInWeek as [InvoiceDateDayNumberInWeek]
		, YearMonth as [InvoiceDateYearMonth]
		, YearQuarter as [InvoiceDateYearQuarter]
		, IsWeekend as [InvoiceDateIsWeekend]
		, IsLastDayInMonth as [InvoiceDateIsLastDayInMonth]
		, MondayWeekCommencing as [InvoiceDateMondayWeekCommencing]
		, WorkDaysInMonthTotal as [InvoiceDateWorkDaysInMonthTotal]
		, WorkDaysInMonthToDate as [InvoiceDateWorkDaysInMonthToDate]
		, FiscalPeriod as [InvoiceDateFiscalPeriod]
		, FiscalQuarter as [InvoiceDateFiscalQuarter]
		, FiscalYear as [InvoiceDateFiscalYear]
		, FiscalPeriodCode as [InvoiceDateFiscalPeriodCode]
		, FiscalPeriodName as [InvoiceDateFiscalPeriodName]
		, FiscalYearPeriod as [InvoiceDateFiscalYearPeriod]
		, FiscalYearQuarter as [InvoiceDateFiscalYearQuarter]
		, WorkDaysInFiscalPeriodTotal as [InvoiceDateWorkDaysInFiscalPeriodTotal]
		, WorkDaysInFiscalPeriodToDate as [InvoiceDateWorkDaysInFiscalPeriodToDate]
	from
		dbo.dimDate
GO
PRINT N'Creating [pbi].[dimPaymentTerm]...';


GO
create view [pbi].[dimPaymentTerm]
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
VIEW NAME:      pbi.dimPaymentTerm
DESCRIPTION:    Exposes current state of the PaymentTerm dimension imported from QlikView (no history available)
AUTHOR:         Greg M. Lucas
ORIGIN DATE:    12-JUN-2017

Additional Notes
================


REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		12-JUN-2017		GML		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------


**********************************************************************************************************************/
--</CommentHeader>

	select
		  PaymentTermKey
		, PaymentTermName
		, PaymentTermDays
		, PaymentTermDescription
		, cast('19000101 00:00:00' as datetime) as [RowValidFromUTC]
		, cast('99991231 23:59:59' as datetime) as [RowValidToUTC]
		, cast('Y' as char(1)) as [IsCurrent]
		, IsDeleted
	from
		qvstg.PaymentTerm
GO
PRINT N'Creating [pbi].[dimProduct]...';


GO
create view [pbi].[dimProduct]
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
VIEW NAME:      pbi.dimProduct
DESCRIPTION:    Exposes current state of the Product dimension imported from QlikView (no history available)
AUTHOR:         Greg M. Lucas
ORIGIN DATE:    12-JUN-2017

Additional Notes
================


REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		12-JUN-2017		GML		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------


**********************************************************************************************************************/
--</CommentHeader>

	select
		  p.ProductKey
		, p.ProductNumber
		, p.ProductName
		, p.ProductTypeId
		, p.ProductTypeName
		, p.ProductGnit
		, p.ProductDescription1
		, p.ProductDescription2
		, p.LocalProductGroup1
		, p.LocalProductGroup2
		, p.LocalProductGroup3
		, p.LocalProductGroup4
		, p.LocalProductGroup5
		, p.NativeProductCategoryKey
		, p.ProductCategoryBaseLevel
		, p.ProductCategoryLevel1
		, p.ProductCategoryLevel2
		, p.ProductCategoryLevel3
		, p.ProductCategoryLevel4
		, p.ProductCategoryLevel5
		, cast('19000101 00:00:00' as datetime) as [RowValidFromUTC]
		, cast('99991231 23:59:59' as datetime) as [RowValidToUTC]
		, cast('Y' as char(1)) as [IsCurrent]
		, p.IsDeleted
	from
		qvstg.Product as p
GO
PRINT N'Creating [pbi].[dimProductCategory]...';


GO
create view [pbi].[dimProductCategory]
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
VIEW NAME:      pbi.dimProductCategory
DESCRIPTION:    Exposes current state of the Product Category dimension imported from QlikView (no history available)
AUTHOR:         Greg M. Lucas
ORIGIN DATE:    19-JUN-2017

Additional Notes
================


REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		19-JUN-2017		GML		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------


**********************************************************************************************************************/
--</CommentHeader>

	select
		  s.ProductCategoryKey
		, ProductCategoryId
		, ProductCategoryName
		, NodeDepth
		, Level3Id
		, Level3Name
		, Level2Id
		, Level2Name
		, Level1Id
		, Level1Name
		, ProductCategoryDescription 
		, cast('19000101 00:00:00' as datetime) as [RowValidFromUTC]
		, cast('99991231 23:59:59' as datetime) as [RowValidToUTC]
		, cast('Y' as char(1)) as [IsCurrent]
		, s.IsDeleted
	from
		qvstg.ProductCategory as s
GO
PRINT N'Creating [pbi].[dimPromisedDeliveryDate]...';


GO
create view [pbi].[dimPromisedDeliveryDate]
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
VIEW NAME:      pbi.dimPromisedDeliveryDate
DESCRIPTION:    Exposes date information for use with factOrder.PromisedDeliveryDateKey (when implemented)
AUTHOR:         Greg M. Lucas
ORIGIN DATE:    21-JUN-2017

Additional Notes
================


REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		21-JUN-2017		GML		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------


**********************************************************************************************************************/
--</CommentHeader>

	select
		  DateKey as [PromisedDeliveryDateKey]
		, ActualDate as [PromisedDeliveryDate]
		, DateNameEU as [PromisedDeliveryDateNameEU]
		, DateNameUS as [PromisedDeliveryDateNameUS]
		, EnglishMonthCode as [PromisedDeliveryDateEnglishMonthCode]
		, EnglishMonthName as [PromisedDeliveryDateEnglishMonthName]
		, EnglishDayCode as [PromisedDeliveryDateEnglishDayCode]
		, EnglishDayName as [PromisedDeliveryDateEnglishDayName]
		, CalendarYear as [PromisedDeliveryDateCalendarYear]
		, CalendarQuarter as [PromisedDeliveryDateCalendarQuarter]
		, MonthNumberInYear as [PromisedDeliveryDateMonthNumberInYear]
		, WeekNumberInYear as [PromisedDeliveryDateWeekNumberInYear]
		, DayNumberInYear as [PromisedDeliveryDateDayNumberInYear]
		, DayNumberInMonth as [PromisedDeliveryDateDayNumberInMonth]
		, DayNumberInWeek as [PromisedDeliveryDateDayNumberInWeek]
		, YearMonth as [PromisedDeliveryDateYearMonth]
		, YearQuarter as [PromisedDeliveryDateYearQuarter]
		, IsWeekend as [PromisedDeliveryDateIsWeekend]
		, IsLastDayInMonth as [PromisedDeliveryDateIsLastDayInMonth]
		, MondayWeekCommencing as [PromisedDeliveryDateMondayWeekCommencing]
		, WorkDaysInMonthTotal as [PromisedDeliveryDateWorkDaysInMonthTotal]
		, WorkDaysInMonthToDate as [PromisedDeliveryDateWorkDaysInMonthToDate]
		, FiscalPeriod as [PromisedDeliveryDateFiscalPeriod]
		, FiscalQuarter as [PromisedDeliveryDateFiscalQuarter]
		, FiscalYear as [PromisedDeliveryDateFiscalYear]
		, FiscalPeriodCode as [PromisedDeliveryDateFiscalPeriodCode]
		, FiscalPeriodName as [PromisedDeliveryDateFiscalPeriodName]
		, FiscalYearPeriod as [PromisedDeliveryDateFiscalYearPeriod]
		, FiscalYearQuarter as [PromisedDeliveryDateFiscalYearQuarter]
		, WorkDaysInFiscalPeriodTotal as [PromisedDeliveryDateWorkDaysInFiscalPeriodTotal]
		, WorkDaysInFiscalPeriodToDate as [PromisedDeliveryDateWorkDaysInFiscalPeriodToDate]
	from
		dbo.dimDate
GO
PRINT N'Creating [pbi].[dimSite]...';


GO
create view [pbi].[dimSite]
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
VIEW NAME:      pbi.dimSite
DESCRIPTION:    Exposes current state of the Site dimension imported from QlikView (no history available)
AUTHOR:         Greg M. Lucas
ORIGIN DATE:    12-JUN-2017

Additional Notes
================


REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		12-JUN-2017		GML		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------


**********************************************************************************************************************/
--</CommentHeader>

	select
		s.SiteKey
	  , s.SiteName
	  , s.SiteDescription
	  , s.BusinessUnitKey
	  , s.SalesCenterSbuCode as [SBU]
	  , s.BusinessUnitName
	  , s.RegionName
	  , s.RegionDescription
	  , s.SourceSystemName
	  , cast('19000101 00:00:00' as datetime) as [RowValidFromUTC]
	  , cast('99991231 23:59:59' as datetime) as [RowValidToUTC]
	  , cast('Y' as char(1)) as [IsCurrent]
	  , s.IsDeleted
	from
		qvstg.Site as s
GO
PRINT N'Creating [pbi].[factBudgetSales]...';


GO
create view [pbi].[factBudgetSales]
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
VIEW NAME:      pbi.factBudgetSales
DESCRIPTION:    Exposes current state of the BudgetSales facts imported from QlikView (no history available)
AUTHOR:         Greg M. Lucas
ORIGIN DATE:    20-JUN-2017

Additional Notes
================


REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		20-JUN-2017		GML		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------


**********************************************************************************************************************/
--</CommentHeader>

	select
		  BudgetSaleKey
		, LineCount
		, BusinessUnitKey
		, BudgetMonthDateKey
		, InstallationServices
		, ProducedGoods
		, GroupGoods
		, CommercialGoods
		, ExternalSales
		, IC_Transf_SBU
		, IC_Transf_Region
		, IC_Transf_Abroad
		, IC_Transf_US
		, Total_IC_Sales
		, TotalSalesAndTransfers
		, IsDeleted
	from
		qvstg.BudgetSales
GO
PRINT N'Creating [pbi].[factBudgetVolumes]...';


GO
create view [pbi].[factBudgetVolumes]
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
VIEW NAME:      pbi.factBudgetVolumes
DESCRIPTION:    Exposes current state of the BudgetVolume facts imported from QlikView (no history available)
AUTHOR:         Greg M. Lucas
ORIGIN DATE:    21-JUN-2017

Additional Notes
================


REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		21-JUN-2017		GML		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------


**********************************************************************************************************************/
--</CommentHeader>

	select
		  BudgetVolumesKey as [BudgetVolumeKey]
		, LineCount
		, BusinessUnitKey
		, ProductCategoryKey
		, Jan_YTD
		, Feb_YTD
		, Mar_YTD
		, Apr_YTD
		, May_YTD
		, Jun_YTD
		, Jul_YTD
		, Aug_YTD
		, Sep_YTD
		, Oct_YTD
		, Nov_YTD
		, Dec_YTD
		, IsDeleted
	from
		qvstg.BudgetVolumes
GO
PRINT N'Creating [pbi].[factInvoice]...';


GO
create view [pbi].[factInvoice]
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
VIEW NAME:      pbi.factInvoice
DESCRIPTION:    Exposes current state of the Invoice facts imported from QlikView (no history available)
AUTHOR:         Greg M. Lucas
ORIGIN DATE:    13-JUN-2017

Additional Notes
================


REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		13-JUN-2017		GML		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------


**********************************************************************************************************************/
--</CommentHeader>

	select
		  i.InvoiceKey
		, i.LineCount
		, i.InvoiceDateKey
		, i.InvoiceDate
		, i.InvoiceNumber
		, i.InvoiceLineNumber
		, i.NativeInvoiceLineNumber
		, i.OrderNumber
		, i.OrderLineNumber
		, i.NativeOrderLineNumber
		, i.NativeInvoiceType
		, i.InvoiceTypeName
		, i.LocalSellingSite
		, i.SiteKey
		, i.ProductKey
		, i.SoldToCustomerKey
		, i.ShippedToCustomerKey
		, i.NativeSalesPersonId
		, i.NativeSalesPersonName
		, i.DeliveryDateKey as [ActualDeliveryDateKey]
		, i.DeliveryDate as [ActualDeliveryDate]
		, i.ExpectedPaymentDateKey
		, i.ExpectedPaymentDate
		, i.ActualPaymentDateKey
		, i.ActualPaymentDate
		, i.LocalDeliveryTerm
		, i.LocalDeliveryTermText
		, i.PaymentTermKey
		, i.LocalPaymentTerm
		, i.LocalPaymentTermText
		, i.InvoiceQuantityValue
		, i.InvoiceQuantityUnitOfMeasure
		, i.StatisticQuantityValue
		, i.StatisticQuantityUnitOfMeasure
		, i.Quantity
		, i.LocalUnitOfMeasure
		, i.LocalUnitOfMeasureHarmonised
		, i.LocalUnitOfMeasureFactor
		, i.InvoiceAmount
		, i.LocalAmount
		, i.GroupAmountEUR
		, i.InvoiceCurrency
		, i.LocalCurrency
		, i.LineDiscountAmount
		, i.InvoiceDiscountAmount
		, i.LineBonusAmount
		, i.BonusShareAmount
		, i.StandardCost
		, i.StandardFreight
		--! Quick and dirty hack for Bob's Gross-to-Net Sales Report
		, cast(case when LocalCurrency <> InvoiceCurrency and LocalAmount > 0 and InvoiceAmount > 0 then LocalAmount / InvoiceAmount else 1 end as decimal(28,4)) as [InvoiceRate]
		, i.IsDeleted
	from
		qvstg.Invoice as i
GO
PRINT N'Creating [pbi].[factOrderBacklog]...';


GO
create view [pbi].[factOrderBacklog]
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
VIEW NAME:      pbi.factOrderBacklog
DESCRIPTION:    Exposes current state of the Orders on backlog, i.e. promised but past or not delivered (imported
				from QlikView - no history available)
AUTHOR:         Greg M. Lucas
ORIGIN DATE:    15-JUN-2017

Additional Notes
================


REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		15-JUN-2017		GML		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------


**********************************************************************************************************************/
--</CommentHeader>

	select
		  osni.OrderBacklogKey
		, osni.LineCount
		, osni.OrderNumber
		, osni.OrderLineNumber
		, osni.NativeOrderLineNumber
		, osni.ExpectedInvoiceDateKey
		, osni.ExpectedInvoiceDate
		, osni.NativeOrderType
		, osni.OrderTypeName
		, osni.LocalSellingSite
		, osni.SiteKey
		, osni.ProductKey
		, osni.SoldToCustomerKey
		, osni.ShippedToCustomerKey
		, osni.NativeSalesPersonId
		, osni.NativeSalesPersonName
		, osni.OrderQuantityValue
		, osni.OrderQuantityUnitOfMeasure
		, osni.StatisticQuantityValue
		, osni.StatisticQuantityUnitOfMeasure
		, osni.Quantity
		, osni.LocalUnitOfMeasure
		, osni.LocalUnitOfMeasureHarmonised
		, osni.LocalUnitOfMeasureFactor
		, osni.OrderAmount
		, osni.LocalAmount
		, osni.GroupAmountEUR
		, osni.OrderCurrency
		, osni.LocalCurrency
		, osni.LineDiscountAmount
		, osni.OrderDiscountAmount
		, osni.LineBonusAmount
		, osni.BonusShareAmount
		--! Quick and dirty hack for Bob's Gross-to-Net Sales Report
		, cast(case when LocalCurrency <> OrderCurrency and LocalAmount > 0 and OrderAmount > 0 then LocalAmount / OrderAmount else 1 end as decimal(28,4)) as [InvoiceRate]
		, osni.IsDeleted
	from
		qvstg.OrderBacklog as osni
GO
PRINT N'Creating [pbi].[factOrderShippedNotInvoiced]...';


GO
create view [pbi].[factOrderShippedNotInvoiced]
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
VIEW NAME:      pbi.factOrderShippedNotInvoiced
DESCRIPTION:    Exposes current state of the Orders that have been shipped but not invoiced (imported from QlikView
				- no history available)
AUTHOR:         Greg M. Lucas
ORIGIN DATE:    14-JUN-2017

Additional Notes
================


REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		14-JUN-2017		GML		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------


**********************************************************************************************************************/
--</CommentHeader>

	select
		  osni.OrderShippedNotInvoicedKey
		, osni.LineCount
		, osni.OrderNumber
		, osni.OrderLineNumber
		, osni.NativeOrderLineNumber
		, osni.NativeShippingDocumentKey
		, osni.ExpectedInvoiceDateKey
		, osni.ExpectedInvoiceDate
		, osni.NativeOrderType
		, osni.OrderTypeName
		, osni.LocalSellingSite
		, osni.SiteKey
		, osni.ProductKey
		, osni.SoldToCustomerKey
		, osni.ShippedToCustomerKey
		, osni.NativeSalesPersonId
		, osni.NativeSalesPersonName
		, osni.ShippedQuantityValue
		, osni.ShippedQuantityUnitOfMeasure
		, osni.StatisticQuantityValue
		, osni.StatisticQuantityUnitOfMeasure
		, osni.Quantity
		, osni.LocalUnitOfMeasure
		, osni.LocalUnitOfMeasureHarmonised
		, osni.LocalUnitOfMeasureFactor
		, osni.ShippedAmount
		, osni.LocalAmount
		, osni.GroupAmountEUR
		, osni.ShippedCurrency
		, osni.LocalCurrency
		, osni.LineDiscountAmount
		, osni.OrderDiscountAmount
		, osni.LineBonusAmount
		, osni.BonusShareAmount
		--! Quick and dirty hack for Bob's Gross-to-Net Sales Report
		, cast(case when LocalCurrency <> ShippedCurrency and LocalAmount > 0 and ShippedAmount > 0 then LocalAmount / ShippedAmount else 1 end as decimal(28,4)) as [InvoiceRate]
		, osni.IsDeleted
	from
		qvstg.OrderShippedNotInvoiced as osni
GO
PRINT N'Creating [pbi].[factSaleForecastTotal]...';


GO
create view [pbi].[factSaleForecastTotal]
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
VIEW NAME:      pbi.factSaleForecastTotal
DESCRIPTION:    Exposes current state of the Invoice facts imported from QlikView (no history available)
AUTHOR:         Greg M. Lucas
ORIGIN DATE:    20-JUN-2017

Additional Notes
================


REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		20-JUN-2017		GML		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------


**********************************************************************************************************************/
--</CommentHeader>

select
	  SiteKey
	, ProductKey
	, SoldToCustomerKey
	, ShippedToCustomerKey
	, sum(TotalGroupAmountEUR) as [TotalGroupAmountEUR]
from
	(
			select
				  i.SiteKey
				, i.ProductKey
				, i.SoldToCustomerKey
				, i.ShippedToCustomerKey
				, sum(coalesce(i.GroupAmountEUR, 0)) as [TotalGroupAmountEUR]
			from
				qvstg.Invoice as i
			where
				i.IsDeleted = 'N'
			group by
				  i.SiteKey
				, i.ProductKey
				, i.SoldToCustomerKey
				, i.ShippedToCustomerKey
		union
			select
				  osni.SiteKey
				, osni.ProductKey
				, osni.SoldToCustomerKey
				, osni.ShippedToCustomerKey
				, sum(coalesce(osni.GroupAmountEUR, 0)) as [TotalGroupAmountEUR]
			from
				qvstg.OrderShippedNotInvoiced as osni
			where
				osni.IsDeleted = 'N'
			group by
				  osni.SiteKey
				, osni.ProductKey
				, osni.SoldToCustomerKey
				, osni.ShippedToCustomerKey
		union
			select
				  ob.SiteKey
				, ob.ProductKey
				, ob.SoldToCustomerKey
				, ob.ShippedToCustomerKey
				, sum(coalesce(ob.GroupAmountEUR, 0)) as [TotalGroupAmountEUR]
			from
				qvstg.OrderBacklog as ob
			where
				ob.IsDeleted = 'N'
			group by
				  ob.SiteKey
				, ob.ProductKey
				, ob.SoldToCustomerKey
				, ob.ShippedToCustomerKey
	) as x
group by
	  SiteKey
	, ProductKey
	, SoldToCustomerKey
	, ShippedToCustomerKey
GO
PRINT N'Creating [pbi].[dimActualDeliveryDate]...';


GO
create view [pbi].[dimActualDeliveryDate]
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
VIEW NAME:      pbi.dimActualDeliveryDate
DESCRIPTION:    Exposes date information for use with factInvoice.ActualDeliveryDateKey
AUTHOR:         Greg M. Lucas
ORIGIN DATE:    21-JUN-2017

Additional Notes
================


REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		21-JUN-2017		GML		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------


**********************************************************************************************************************/
--</CommentHeader>

	select
		  DateKey as [ActualDeliveryDateKey]
		, ActualDate as [ActualDeliveryDate]
		, DateNameEU as [ActualDeliveryDateNameEU]
		, DateNameUS as [ActualDeliveryDateNameUS]
		, EnglishMonthCode as [ActualDeliveryDateEnglishMonthCode]
		, EnglishMonthName as [ActualDeliveryDateEnglishMonthName]
		, EnglishDayCode as [ActualDeliveryDateEnglishDayCode]
		, EnglishDayName as [ActualDeliveryDateEnglishDayName]
		, CalendarYear as [ActualDeliveryDateCalendarYear]
		, CalendarQuarter as [ActualDeliveryDateCalendarQuarter]
		, MonthNumberInYear as [ActualDeliveryDateMonthNumberInYear]
		, WeekNumberInYear as [ActualDeliveryDateWeekNumberInYear]
		, DayNumberInYear as [ActualDeliveryDateDayNumberInYear]
		, DayNumberInMonth as [ActualDeliveryDateDayNumberInMonth]
		, DayNumberInWeek as [ActualDeliveryDateDayNumberInWeek]
		, YearMonth as [ActualDeliveryDateYearMonth]
		, YearQuarter as [ActualDeliveryDateYearQuarter]
		, IsWeekend as [ActualDeliveryDateIsWeekend]
		, IsLastDayInMonth as [ActualDeliveryDateIsLastDayInMonth]
		, MondayWeekCommencing as [ActualDeliveryDateMondayWeekCommencing]
		, WorkDaysInMonthTotal as [ActualDeliveryDateWorkDaysInMonthTotal]
		, WorkDaysInMonthToDate as [ActualDeliveryDateWorkDaysInMonthToDate]
		, FiscalPeriod as [ActualDeliveryFiscalPeriod]
		, FiscalQuarter as [ActualDeliveryFiscalQuarter]
		, FiscalYear as [ActualDeliveryFiscalYear]
		, FiscalPeriodCode as [ActualDeliveryFiscalPeriodCode]
		, FiscalPeriodName as [ActualDeliveryFiscalPeriodName]
		, FiscalYearPeriod as [ActualDeliveryFiscalYearPeriod]
		, FiscalYearQuarter as [ActualDeliveryFiscalYearQuarter]
		, WorkDaysInFiscalPeriodTotal as [ActualDeliveryWorkDaysInFiscalPeriodTotal]
		, WorkDaysInFiscalPeriodToDate as [ActualDeliveryWorkDaysInFiscalPeriodToDate]
	from
		dbo.dimDate
GO
PRINT N'Creating [pbi].[dimActualPaymentDate]...';


GO
create view [pbi].[dimActualPaymentDate]
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
VIEW NAME:      pbi.dimActualPaymentDate
DESCRIPTION:    Exposes date information for use with factInvoice.ActualPaymentDateKey
AUTHOR:         Greg M. Lucas
ORIGIN DATE:    21-JUN-2017

Additional Notes
================


REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		21-JUN-2017		GML		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------


**********************************************************************************************************************/
--</CommentHeader>

	select
		  DateKey as [ActualPaymentDateKey]
		, ActualDate as [ActualPaymentDate]
		, DateNameEU as [ActualPaymentDateNameEU]
		, DateNameUS as [ActualPaymentDateNameUS]
		, EnglishMonthCode as [ActualPaymentDateEnglishMonthCode]
		, EnglishMonthName as [ActualPaymentDateEnglishMonthName]
		, EnglishDayCode as [ActualPaymentDateEnglishDayCode]
		, EnglishDayName as [ActualPaymentDateEnglishDayName]
		, CalendarYear as [ActualPaymentDateCalendarYear]
		, CalendarQuarter as [ActualPaymentDateCalendarQuarter]
		, MonthNumberInYear as [ActualPaymentDateMonthNumberInYear]
		, WeekNumberInYear as [ActualPaymentDateWeekNumberInYear]
		, DayNumberInYear as [ActualPaymentDateDayNumberInYear]
		, DayNumberInMonth as [ActualPaymentDateDayNumberInMonth]
		, DayNumberInWeek as [ActualPaymentDateDayNumberInWeek]
		, YearMonth as [ActualPaymentDateYearMonth]
		, YearQuarter as [ActualPaymentDateYearQuarter]
		, IsWeekend as [ActualPaymentDateIsWeekend]
		, IsLastDayInMonth as [ActualPaymentDateIsLastDayInMonth]
		, MondayWeekCommencing as [ActualPaymentDateMondayWeekCommencing]
		, WorkDaysInMonthTotal as [ActualPaymentDateWorkDaysInMonthTotal]
		, WorkDaysInMonthToDate as [ActualPaymentDateWorkDaysInMonthToDate]
		, FiscalPeriod as [ActualPaymentDateFiscalPeriod]
		, FiscalQuarter as [ActualPaymentDateFiscalQuarter]
		, FiscalYear as [ActualPaymentDateFiscalYear]
		, FiscalPeriodCode as [ActualPaymentDateFiscalPeriodCode]
		, FiscalPeriodName as [ActualPaymentDateFiscalPeriodName]
		, FiscalYearPeriod as [ActualPaymentDateFiscalYearPeriod]
		, FiscalYearQuarter as [ActualPaymentDateFiscalYearQuarter]
		, WorkDaysInFiscalPeriodTotal as [ActualPaymentDateWorkDaysInFiscalPeriodTotal]
		, WorkDaysInFiscalPeriodToDate as [ActualPaymentDateWorkDaysInFiscalPeriodToDate]
	from
		dbo.dimDate
GO
PRINT N'Creating [pbi].[dimBudgetMonth]...';


GO
create view [pbi].[dimBudgetMonth]
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
VIEW NAME:      pbi.dimBudgetMonth
DESCRIPTION:    Exposes date information for use with factInvoice.InvoiceDateKey
AUTHOR:         Greg M. Lucas
ORIGIN DATE:    20-JUN-2017

Additional Notes
================


REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		20-JUN-2017		GML		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------


**********************************************************************************************************************/
--</CommentHeader>

	select
		  min(DateKey) as [BudgetMonthKey]
		, FiscalPeriod as [BudgetFiscalPeriod]
		, FiscalQuarter as [BudgetFiscalQuarter]
		, FiscalYear as [BudgetFiscalYear]
		, FiscalPeriodCode as [BudgetFiscalPeriodCode]
		, FiscalPeriodName as [BudgetFiscalPeriodName]
		, FiscalYearPeriod as [BudgetFiscalYearPeriod]
		, FiscalYearQuarter as [BudgetFiscalYearQuarter]
		, WorkDaysInFiscalPeriodTotal as [BudgetWorkDaysInFiscalPeriodTotal]
	from
		dbo.dimDate
	group by
		  FiscalPeriod
		, FiscalQuarter
		, FiscalYear
		, FiscalPeriodCode
		, FiscalPeriodName
		, FiscalYearPeriod
		, FiscalYearQuarter
		, WorkDaysInFiscalPeriodTotal
GO
PRINT N'Creating [pbi].[dimBusinessUnit]...';


GO
create view [pbi].[dimBusinessUnit]
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
VIEW NAME:      pbi.dimBusinessUnit
DESCRIPTION:    Exposes current state of the Business Unit dimension imported from QlikView (no history available)
AUTHOR:         Greg M. Lucas
ORIGIN DATE:    16-JUN-2017

Additional Notes
================


REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		16-JUN-2017		GML		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------


**********************************************************************************************************************/
--</CommentHeader>

	select
		s.BusinessUnitKey
	  , s.SalesCenterSbuCode as [SBU]
	  , s.BusinessUnitName
	  , s.RegionName
	  , s.RegionDescription
	  , cast('19000101 00:00:00' as datetime) as [RowValidFromUTC]
	  , cast('99991231 23:59:59' as datetime) as [RowValidToUTC]
	  , cast('Y' as char(1)) as [IsCurrent]
	  , s.IsDeleted
	from
		qvstg.BusinessUnit as s
GO
PRINT N'Creating [pbi].[dimCustomerShippedTo]...';


GO
create view [pbi].[dimCustomerShippedTo]
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
VIEW NAME:      pbi.dimCustomerShippedTo
DESCRIPTION:    Exposes current state of the Customer dimension imported from QlikView (no history available)
AUTHOR:         Greg M. Lucas
ORIGIN DATE:    12-JUN-2017

Additional Notes
================


REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		12-JUN-2017		GML		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------


**********************************************************************************************************************/
--</CommentHeader>

	select
		  c.CustomerKey
		, c.CustomerNumber
		, c.CustomerName
		, c.CustomerAddress1
		, c.CustomerAddress2
		, c.CustomerAddress3
		, c.CustomerZipCode
		, c.CustomerCity
		, c.CustomerCountry
		, c.CustomerVatNumber
		, c.CustomerTypeId
		, c.CustomerTypeName
		, c.CustomerGroup1
		, c.CustomerGroup2
		, c.CustomerGroup3
		, c.CustomerGroup4
		, c.CustomerGroup5
		, c.CategoryIsMapped
		, c.CustomerCategoryBaseLevel
		, c.CustomerCategoryLevel1
		, c.CustomerCategoryLevel2
		, c.CustomerCategoryLevel3
		, c.CustomerCategoryLevel4
		, c.CustomerCategoryLevel5
		, c.CustomerCategoryLevel6
		, c.CustomerCategoryLevel7
		, c.CustomerCategoryLevel8
		, cast('19000101 00:00:00' as datetime) as [RowValidFromUTC]
		, cast('99991231 23:59:59' as datetime) as [RowValidToUTC]
		, cast('Y' as char(1)) as [IsCurrent]
		, c.IsDeleted
	from
		qvstg.Customer as c
GO
PRINT N'Creating [pbi].[dimCustomerSoldTo]...';


GO
create view [pbi].[dimCustomerSoldTo]
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
VIEW NAME:      pbi.dimCustomerSoldTo
DESCRIPTION:    Exposes current state of the Customer dimension imported from QlikView (no history available)
AUTHOR:         Greg M. Lucas
ORIGIN DATE:    20-JUN-2017

Additional Notes
================


REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		20-JUN-2017		GML		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------


**********************************************************************************************************************/
--</CommentHeader>

	select
		  c.CustomerKey
		, c.CustomerNumber
		, c.CustomerName
		, c.CustomerAddress1
		, c.CustomerAddress2
		, c.CustomerAddress3
		, c.CustomerZipCode
		, c.CustomerCity
		, c.CustomerCountry
		, c.CustomerVatNumber
		, c.CustomerTypeId
		, c.CustomerTypeName
		, c.CustomerGroup1
		, c.CustomerGroup2
		, c.CustomerGroup3
		, c.CustomerGroup4
		, c.CustomerGroup5
		, c.CategoryIsMapped
		, c.CustomerCategoryBaseLevel
		, c.CustomerCategoryLevel1
		, c.CustomerCategoryLevel2
		, c.CustomerCategoryLevel3
		, c.CustomerCategoryLevel4
		, c.CustomerCategoryLevel5
		, c.CustomerCategoryLevel6
		, c.CustomerCategoryLevel7
		, c.CustomerCategoryLevel8
		, cast('19000101 00:00:00' as datetime) as [RowValidFromUTC]
		, cast('99991231 23:59:59' as datetime) as [RowValidToUTC]
		, cast('Y' as char(1)) as [IsCurrent]
		, c.IsDeleted
	from
		qvstg.Customer as c
GO
PRINT N'Creating [log4Private].[SessionInfoOutput]...';


GO

/*************************************************************************************************/
--</MaintenanceHeader>

CREATE PROCEDURE [log4Private].[SessionInfoOutput]
(
  @SessionId          int
, @HostName           nvarchar( 128 ) = null  out
, @ProgramName        nvarchar( 128 ) = null  out
, @NTDomain           nvarchar( 128 ) = null  out
, @NTUsername         nvarchar( 128 ) = null  out
, @LoginName          nvarchar( 128 ) = null  out
, @OriginalLoginName  nvarchar( 128 ) = null  out
, @SessionLoginTime   datetime        = null  out
)

as

--<CommentHeader>
/**********************************************************************************************************************

Properties
=====================================================================================================================
PROCEDURE NAME:  SessionInfoOutput
DESCRIPTION:     Outputs session info from master.sys.dm_exec_sessions for the current @@SPID
DATE OF ORIGIN:  15-APR-2008
ORIGINAL AUTHOR: Greg M. Lucas (data-centric solutions ltd. http://www.data-centric.co.uk)
BUILD DATE:      13-MAR-2012
BUILD VERSION:   0.0.11
DEPENDANTS:      log4.ExceptionHandler
                 log4.JournalWriter
DEPENDENCIES:    Called functions

Returns
=====================================================================================================================
@@ERROR - always zero on success

Additional Notes
=====================================================================================================================


Revision history
=====================================================================================================================
ChangeDate		Author	Version		Narrative
============	======	=======		=================================================================================
15-APR-2008		GML		vX.Y.z		Created
------------	------	-------		---------------------------------------------------------------------------------
17-OCT-2015		GML		vX.Y.z		Now works on SQL Azure DB
------------	------	-------		---------------------------------------------------------------------------------

=====================================================================================================================
(C) Copyright 2006-14 data-centric solutions ltd. (http://log4tsql.sourceforge.net/)

This library is free software; you can redistribute it and/or modify it under the terms of the
GNU Lesser General Public License as published by the Free Software Foundation (www.fsf.org);
either version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along with this
library; if not, you can find it at http://www.opensource.org/licenses/lgpl-3.0.html
or http://www.gnu.org/licenses/lgpl.html

**********************************************************************************************************************/
--</CommentHeader>

begin
	SET NOCOUNT ON

	begin try
		--! These system attributes come from master.sys.dm_exec_sessions which isn't available in Azure
		set @HostName			= 'N/S in Azure'
		set @ProgramName		= 'N/S in Azure'
		set @NTDomain			= 'N/S in Azure'
		set @NTUsername			= 'N/S in Azure'
		set @LoginName			= 'N/S in Azure'
		set @OriginalLoginName	= 'N/S in Azure'
		set @SessionLoginTime	= '19000101 00:00:00'

	end try
	begin catch
		--! Make sure we return non-null values
		set @SessionId			= 0
		set @HostName			= ''
		set @ProgramName		= 'log4.SessionInfoOutput Error!'
		set @NTDomain			= ''
		set @NTUsername			= ''
		set @LoginName			= 'log4.SessionInfoOutput Error!'
		set @OriginalLoginName	= ''

		declare @context nvarchar(512); set @context = 'log4.SessionInfoOutput failed to retrieve session info';

		--! Only rollback if we have an uncommitable transaction
		if (xact_state() = -1)
		or (@@trancount > 0 and xact_state() != 1)
			begin
				rollback tran;
				set @context = @context + ' (Forced rolled back of all changes due to uncommitable transaction)';
			end

		--! Log this error directly
		--! Don't call ExceptionHandler in case we get another
		--! SessionInfoOutput error and and up in a never-ending loop)
		insert log4Private.SqlException
		(
		  UtcDate
		, SystemDate
		, ErrorContext
		, ErrorNumber
		, ErrorSeverity
		, ErrorState
		, ErrorProcedure
		, ErrorLine
		, ErrorMessage
		, ErrorDatabase
		, SessionIdent
		, ServerName
		, HostName
		, ProgramName
		, NTDomain
		, NTUsername
		, LoginName
		, OriginalLoginName
		, SessionLoginTime
		)
		select
			  getutcdate()
			, getdate()
			, @context
			, error_number()
			, error_severity()
			, error_state()
			, error_procedure()
			, error_line()
			, error_message()
			, db_name()
			, @@spid
			, @@servername
			, '' -- HostName
			, '' -- ProgramName
			, '' -- NTDomain
			, '' -- NTUsername
			, '' -- LoginName
			, '' -- OriginalLoginName
			, null
	end catch

	set nocount off
end
GO
PRINT N'Creating [log4Utils].[JournalReader]...';


GO

/*************************************************************************************************/
--</MaintenanceHeader>

CREATE PROCEDURE [log4Utils].[JournalReader]
(
  @StartDate			datetime		= NULL
, @EndDate				datetime		= NULL
, @TimeZoneOffset		smallint		= NULL
, @FunctionName			varchar(256)	= NULL
, @FunctionSearchType	tinyint			= NULL
, @MessageText			varchar(512)	= NULL
, @MessageSearchType	tinyint			= NULL
, @Task					varchar(128)	= NULL
, @SeverityBitMask		smallint		= 8191 -- 8191 All Severities or 7167 to exclude debug
, @ResultSetSize		int				= NULL
)

AS

/**************************************************************************************************

Properties
==========
PROCEDURE NAME:		[log4Utils].[JournalReader]
DESCRIPTION:		Returns all Journal entries matching the specified search criteria
DATE OF ORIGIN:		01-DEC-2006
ORIGINAL AUTHOR:	Greg M. Lucas (data-centric solutions ltd. http://www.data-centric.co.uk)
BUILD DATE:			01-MAR-2015
BUILD VERSION:		0.0.13
DEPENDANTS:			None
DEPENDENCIES:		None

Inputs
======
@DatabaseName
@FunctionName
@MessageText
@StepInFunction
@ExtraInfo
@Severity

Outputs
=======
None

Returns
=======
@@ERROR - always zero on success

Additional Notes
================
Severity Bits (for bitmask):

   1 -- Showstopper/Critical Failure
   2 -- Severe Failure
   4 -- Major Failure
   8 -- Moderate Failure
  16 -- Minor Failure
  32 -- Concurrency Violation
  64 -- Reserved for future Use
 128 -- Reserved for future Use
 256 -- Informational
 512 -- Success
1024 -- Debug
2048 -- Reserved for future Use
4096 -- Reserved for future Use

Function and Message Search Types:

0 = Exclude from Search
1 = Begins With
2 = Ends With
3 = Contains
4 = Exact Match

Revision history
==================================================================================================
ChangeDate		Author	Version		Narrative
============	======	=======		==============================================================
01-DEC-2006		GML		v0.0.1		Created
------------	------	-------		--------------------------------------------------------------
03-MAY-2011		GML		v0.0.4		Removed ExtraInfo from result set for performance
									Added @TimeZoneOffset for ease of use in other timezones
------------	------	-------		--------------------------------------------------------------
28-AUG-2011		GML		v0.0.6		Added support for ExceptionId and Task columns
------------	------	-------		--------------------------------------------------------------

=================================================================================================
(C) Copyright 2006-14 data-centric solutions ltd. (http://log4tsql.sourceforge.net/)

This library is free software; you can redistribute it and/or modify it under the terms of the
GNU Lesser General Public License as published by the Free Software Foundation (www.fsf.org);
either version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along with this
library; if not, you can find it at http://www.opensource.org/licenses/lgpl-3.0.html
or http://www.gnu.org/licenses/lgpl.html

**************************************************************************************************/

BEGIN
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
	SET NOCOUNT ON

	--! Working variables
	DECLARE	  @Error            int
			, @RowCount         int

	SET @Error 			= 0
	SET @TimeZoneOffset	= COALESCE(@TimeZoneOffset, 0)
	SET @Task			= COALESCE(@Task, '')

	--!
	--! Format the Function search string according to the required search criteria
	--!
	IF LEN(ISNULL(@FunctionName, '')) = 0 OR @FunctionSearchType = 0
		SET @FunctionName = '%'
	ELSE IF LEN(@FunctionName) < 256
		BEGIN
			IF @FunctionSearchType & 1 = 1 AND SUBSTRING(REVERSE(@FunctionName), 1, 1) != '%'
				SET @FunctionName = @FunctionName + '%'

			IF @FunctionSearchType & 2 = 2 AND SUBSTRING(@FunctionName, 1, 1) != '%'
				SET @FunctionName = '%' + @FunctionName

			--! If @FunctionSearchType = 4, do nothing as we want an exact match
		END

	--!
	--! Format the Message search string according to the required search criteria
	--!
	IF LEN(ISNULL(@MessageText, '')) = 0 OR @MessageSearchType = 0
		SET @MessageText = '%'
	ELSE IF LEN(@MessageText) < 512
		BEGIN
			IF @MessageSearchType & 1 = 1 AND SUBSTRING(REVERSE(@MessageText), 1, 1) != '%'
				SET @MessageText = @MessageText + '%'

			IF @MessageSearchType & 2 = 2 AND SUBSTRING(@MessageText, 1, 1) != '%'
				SET @MessageText = '%' + @MessageText

			--! If @MessageSearchType = 4, do nothing as we want an exact match
		END

	--!
	--! If @ResultSetSize is invalid, just return the last 100 rows
	--!
	IF ISNULL(@ResultSetSize, -1) < 1 SET @ResultSetSize = 100
	IF @StartDate IS NULL SET @StartDate = CONVERT(datetime, CONVERT(char(8), DATEADD(day, -7, GETDATE())) + ' 00:00:00', 112)
	IF @EndDate IS NULL SET @EndDate = CONVERT(datetime, CONVERT(char(8), GETDATE(), 112) + ' 23:59:59', 112)

	--! Reverse any time zone offset so we are searching on system time
	SET @StartDate	= DATEADD(hour, @TimeZoneOffset * -1, @StartDate)
	SET @EndDate	= DATEADD(hour, @TimeZoneOffset * -1, @EndDate)

	--!
	--! Return the required results
	--!
	SELECT TOP (@ResultSetSize)
		  j.JournalId
		, DATEADD(hour, @TimeZoneOffset, j.SystemDate)	AS [LocalTime]
		---------------------------------------------------------------------------------------------------
		, j.Task										AS [TaskOrJobName]
		, j.FunctionName								AS [FunctionName]
		, j.StepInFunction								AS [StepInFunction]
		, j.MessageText									AS [MessageText]
		, s.SeverityName								AS [Severity]
		, j.ExceptionId									AS [ExceptionId]
		---------------------------------------------------------------------------------------------------
		, j.SystemDate
	FROM
		[log4Private].[Journal] AS [j]
	INNER JOIN
		[log4Private].[Severity] AS [s]
	ON
		s.SeverityId = j.SeverityId
	WHERE
		j.SystemDate BETWEEN @StartDate AND @EndDate
	AND
		j.SeverityId & @SeverityBitMask = j.SeverityId
	AND
		j.Task = COALESCE(NULLIF(@Task, ''), j.Task)
	AND
		j.FunctionName LIKE @FunctionName
	AND
		j.MessageText LIKE @MessageText
	ORDER BY
		j.JournalId DESC

	SELECT @Error = @@ERROR, @RowCount = @@ROWCOUNT

--/////////////////////////////////////////////////////////////////////////////////////////////////
OnComplete:
--/////////////////////////////////////////////////////////////////////////////////////////////////

	SET NOCOUNT OFF

	RETURN(@Error)

END
GO
PRINT N'Creating [log4Utils].[ExceptionReader]...';


GO

/*************************************************************************************************/
--</MaintenanceHeader>

CREATE PROCEDURE [log4Utils].[ExceptionReader]
(
  @StartDate			datetime		= NULL
, @EndDate				datetime		= NULL
, @TimeZoneOffset		smallint		= NULL
, @ErrorProcedure		varchar(256)	= NULL
, @ProcedureSearchType	tinyint			= NULL
, @ErrorMessage			varchar(512)	= NULL
, @MessageSearchType	tinyint			= NULL
, @ResultSetSize		int				= NULL
)

AS

/**************************************************************************************************

Properties
==========
PROCEDURE NAME:		[log4Utils].[ExceptionReader]
DESCRIPTION:		Returns all Exceptions matching the specified search criteria
DATE OF ORIGIN:		01-DEC-2006
ORIGINAL AUTHOR:	Greg M. Lucas (data-centric solutions ltd. http://www.data-centric.co.uk)
BUILD DATE:			29-AUG-2011
BUILD VERSION:		0.0.6
DEPENDANTS:			None
DEPENDENCIES:		None

Returns
=======
@@ERROR - always zero on success

Additional Notes
================

Function and Message Search Types:

0 = Exclude from Search
1 = Begins With
2 = Ends With
3 = Contains
4 = Exact Match

Revision history
==================================================================================================
ChangeDate		Author	Version		Narrative
============	======	=======		==============================================================
01-DEC-2006		GML		v0.0.1		Created
------------	------	-------		--------------------------------------------------------------
03-MAY-2011		GML		v0.0.4		Added @TimeZoneOffset for ease of use in other timezones
------------	------	-------		--------------------------------------------------------------

=================================================================================================
(C) Copyright 2006-14 data-centric solutions ltd. (http://log4tsql.sourceforge.net/)

This library is free software; you can redistribute it and/or modify it under the terms of the
GNU Lesser General Public License as published by the Free Software Foundation (www.fsf.org);
either version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along with this
library; if not, you can find it at http://www.opensource.org/licenses/lgpl-3.0.html
or http://www.gnu.org/licenses/lgpl.html

**************************************************************************************************/

BEGIN
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
	SET NOCOUNT ON;

	--! Working variables
	DECLARE	  @Error            int
			, @RowCount         int

	SET @Error 			= 0
	SET @TimeZoneOffset	= COALESCE(@TimeZoneOffset, 0)

	--!
	--! Format the Function search string according to the required search criteria
	--!
	IF LEN(ISNULL(@ErrorProcedure, '')) = 0 OR @ProcedureSearchType = 0
		SET @ErrorProcedure = '%'
	ELSE IF LEN(@ErrorProcedure) < 256
		BEGIN
			IF @ProcedureSearchType & 1 = 1 AND SUBSTRING(REVERSE(@ErrorProcedure), 1, 1) != '%'
				SET @ErrorProcedure = @ErrorProcedure + '%'

			IF @ProcedureSearchType & 2 = 2 AND SUBSTRING(@ErrorProcedure, 1, 1) != '%'
				SET @ErrorProcedure = '%' + @ErrorProcedure

			--! If @ProcedureSearchType = 4, do nothing as we want an exact match
		END

	--!
	--! Format the Message search string according to the required search criteria
	--!
	IF LEN(ISNULL(@ErrorMessage, '')) = 0 OR @MessageSearchType = 0
		SET @ErrorMessage = '%'
	ELSE IF LEN(@ErrorMessage) < 512
		BEGIN
			IF @MessageSearchType & 1 = 1 AND SUBSTRING(REVERSE(@ErrorMessage), 1, 1) != '%'
				SET @ErrorMessage = @ErrorMessage + '%'

			IF @MessageSearchType & 2 = 2 AND SUBSTRING(@ErrorMessage, 1, 1) != '%'
				SET @ErrorMessage = '%' + @ErrorMessage

			--! If @MessageSearchType = 4, do nothing as we want an exact match
		END

	--!
	--! If @ResultSetSize is invalid, just return the last 100 rows
	--!
	IF ISNULL(@ResultSetSize, -1) < 1 SET @ResultSetSize = 100
	IF @StartDate IS NULL SET @StartDate = CONVERT(datetime, CONVERT(char(8), DATEADD(day, -10, GETDATE())) + ' 00:00:00', 112)
	IF @EndDate IS NULL SET @EndDate = CONVERT(datetime, CONVERT(char(8), GETDATE(), 112) + ' 23:59:59', 112)

	--! Reverse any time zone offset so we are searching on system time
	SET @StartDate	= DATEADD(hour, @TimeZoneOffset * -1, @StartDate)
	SET @EndDate	= DATEADD(hour, @TimeZoneOffset * -1, @EndDate)

	--!
	--! Return the required results
	--!
	SELECT TOP (@ResultSetSize)
		  ExceptionId
		, DATEADD(hour, @TimeZoneOffset, SystemDate)						AS [LocalTime]
		---------------------------------------------------------------------------------------------------
		, ErrorNumber
		, ErrorContext
		, REPLACE(REPLACE(ErrorMessage, CHAR(13), '  '), CHAR(10), '  ')	AS [ErrorMessage]
		, ErrorSeverity
		, ErrorState
		, ErrorProcedure
		, ErrorLine
		, ErrorDatabase
		---------------------------------------------------------------------------------------------------
		, SystemDate
		, SessionIdent
		, [ProgramName]
		, [NTDomain]
		, [NTUsername]
		, [LoginName]
	FROM
		[log4Private].[SqlException]
	WHERE
		SystemDate BETWEEN @StartDate AND @EndDate
	AND
		ErrorProcedure LIKE @ErrorProcedure
	AND
		ErrorMessage LIKE @ErrorMessage
	ORDER BY
		ExceptionId DESC

	SELECT @Error = @@ERROR, @RowCount = @@ROWCOUNT

--/////////////////////////////////////////////////////////////////////////////////////////////////
OnComplete:
--/////////////////////////////////////////////////////////////////////////////////////////////////

	SET NOCOUNT OFF

	RETURN(@Error)

END
GO
PRINT N'Creating [log4Utils].[PrintString]...';


GO

/*************************************************************************************************/
--</MaintenanceHeader>

CREATE PROCEDURE [log4Utils].[PrintString]
(
  @InputString		nvarchar(max)	= NULL
, @MaxPrintLength	int				= 4000
)

AS

--<CommentHeader>
/**********************************************************************************************************************

Properties
=====================================================================================================================
PROCEDURE NAME:		[log4Utils].[PrintString]
DESCRIPTION:		Prints the supplied string respecting all line feeds and/or carriage returns except where no
					line feeds are found, in which case the output is printed in user-specified lengths
DATE OF ORIGIN:		05-NOV-2011
ORIGINAL AUTHOR:	Greg M. Lucas (data-centric solutions ltd. http://www.data-centric.co.uk)
BUILD DATE:			01-MAR-2015
BUILD VERSION:		0.0.13
DEPENDANTS:			None
DEPENDENCIES:		None

Inputs
======
@InputString - optional, the string to print
@MaxPrintLength - Max length of string to print before inserting an unnatural break

Outputs
=======
None

Returns
=======
NULL

Additional Notes
================

Revision history
=====================================================================================================================
ChangeDate    Author   Version  Narrative
============  =======  =======  =====================================================================================
05-NOV-2011   GML      v0.0.8   Created
------------  -------  -------  -------------------------------------------------------------------------------------
13-MAR-2012   GML      v0.0.10  Fixed backwards-compatability issue with @LineFeedPos
------------  -------  -------  -------------------------------------------------------------------------------------


=====================================================================================================================
(C) Copyright 2006-14 data-centric solutions ltd. (http://log4tsql.sourceforge.net/)

This library is free software; you can redistribute it and/or modify it under the terms of the
GNU Lesser General Public License as published by the Free Software Foundation (www.fsf.org);
either version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along with this
library; if not, you can find it at http://www.opensource.org/licenses/lgpl-3.0.html
or http://www.gnu.org/licenses/lgpl.html

**********************************************************************************************************************/
--</CommentHeader>

BEGIN
	SET NOCOUNT ON

	--! CONSTANTS (keep it SQL2005 compatible)
	DECLARE @LF					char(1); SET @LF			= CHAR(10);
	DECLARE @CR					char(1); SET @CR			= CHAR(13);
	DECLARE @CRLF				char(2); SET @CRLF		= CHAR(13) + CHAR(10);
	DECLARE @LINE_BREAK			char(3); SET @LINE_BREAK	= '%' + @LF + '%';

	--! Working Values
	DECLARE @WorkingLength		bigint
	DECLARE @WorkingString		nvarchar(max)
	DECLARE @SubString			nvarchar(max)
	DECLARE @SubStringLength	bigint

	--! Validate/correct inputs
	SET @MaxPrintLength = COALESCE(NULLIF(@MaxPrintLength, 0), 4000)

	IF @MaxPrintLength > 4000
		BEGIN
			RAISERROR('The @MaxPrintLength value of %i is greater than the maximum length supported by PRINT for unicode strings (4000)', 17, 1, @MaxPrintLength);
			RETURN(60000);
		END

	IF @MaxPrintLength < 1
		BEGIN
			RAISERROR('The @MaxPrintLength must be greater than or equal to 1 but is %i', 17, 2, @MaxPrintLength);
			RETURN(60000);
		END

	--! Working variables
	DECLARE @InputLength bigint; SET @InputLength = LEN(@InputString);

	IF @InputLength = 0
		GOTO OnComplete;

	--!
	--! Our input string may contain either carriage returns, line feeds or both
	--! to separate printing lines so we need to standardise on one of these (LF)
	--!
	SET @WorkingString = REPLACE(REPLACE(@InputString, @CRLF, @LF), @CR, @LF);

	--!
	--! If there are line feeds we use those to break down the text
	--! into individual printed lines, otherwise we print it in
	--! bite-size chunks suitable for consumption by PRINT
	--!
	IF PATINDEX(@LINE_BREAK, @InputString) > 0

		BEGIN --[BREAK_BY_LINE_FEED]

			--! Add a line feed on the end so the final iteration works as expected
			SET @WorkingString	= @WorkingString + @LF;
			SET @WorkingLength	= LEN(@WorkingString);

			DECLARE @LineFeedPos bigint; SET @LineFeedPos = 0;

			WHILE @WorkingLength > 0
				BEGIN
					--!
					--! Get the position of the next line feed
					--!
					SET @LineFeedPos = PATINDEX(@LINE_BREAK, @WorkingString);

					IF @LineFeedPos > 0
						BEGIN
							SET @SubString			= SUBSTRING(@WorkingString, 1, @LineFeedPos - 1);
							SET @SubStringLength	= LEN(@SubString);

							--!
							--! If this string is too long for a single PRINT, we pass it back
							--! to PrintString which will process the string in suitably sized chunks
							--!
							IF LEN(@SubString) > @MaxPrintLength
								EXEC [log4Utils].[PrintString] @InputString = @SubString
							ELSE
								PRINT @SubString;

							--! Remove the text we've just processed
							SET @WorkingLength	= @WorkingLength - @LineFeedPos;
							SET @WorkingString	= SUBSTRING(@WorkingString, @LineFeedPos + 1, @WorkingLength);
						END
				END

		END --[BREAK_BY_LINE_FEED]
	ELSE
		BEGIN --[BREAK_BY_LENGTH]
			--!
			--! If there are no line feeds we may have to break it down
			--! into smaller bit size chunks suitable for PRINT
			--!
			IF @InputLength > @MaxPrintLength
				BEGIN
					SET @WorkingString		= @InputString;
					SET @WorkingLength		= LEN(@WorkingString);
					SET @SubStringLength	= @MaxPrintLength;

					WHILE @WorkingLength > 0
						BEGIN
							SET @SubString			= SUBSTRING(@WorkingString, 1, @SubStringLength);
							SET @SubStringLength	= LEN(@SubString)

							--!
							--! If we still have text to process, set working values
							--!
							IF (@WorkingLength - @SubStringLength + 1) > 0
								BEGIN
									PRINT @SubString;
									--! Remove the text we've just processed
									SET @WorkingString	= SUBSTRING(@WorkingString, @SubStringLength + 1, @WorkingLength);
									SET @WorkingLength	= LEN(@WorkingString);
								END
						END
				END
			ELSE
				PRINT @InputString;

		END --[BREAK_BY_LENGTH]

--/////////////////////////////////////////////////////////////////////////////////////////////////
OnComplete:
--/////////////////////////////////////////////////////////////////////////////////////////////////

	SET NOCOUNT OFF

	RETURN

END
GO
PRINT N'Creating [utils].[LoadDateDimension]...';


GO
create procedure [utils].[LoadDateDimension]
(
  @Year char(4)
, @DoOutputInfo bit = 1
)
as --<CommentHeader>
/**********************************************************************************************************************

Properties
==========
FUNCTION NAME:  utils.LoadDateDimension
DESCRIPTION:    Loads dbo.dimDate table with dates within provided date range
AUTHOR:         Greg M Lucas
ORIGIN DATE:    09-Jun-2017

Additional Notes
================

REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		09-Jun-2017		GML		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------


**********************************************************************************************************************/
--</CommentHeader>
begin
	set nocount on;
	
	--! Find out if we are already in a transaction
	declare	@_TxnIsExternal bit = case when @@trancount > 0 then 1 else 0 end;

	begin try
		if @Year not between '2000' and '2099'
			raiserror('@Year parameter is out of range, expected "2000" to "2099" but was %s', 16, 1, @Year) ;

		declare @_StartRange int = try_convert(int, right(@Year, 2) + '0101') ;
		declare @_EndRange int = try_convert(int, right(@Year, 2) + '1231') ;
		declare @_YearStart date = try_convert(date, @Year + '0101', 112) ;
		declare @_YearEnd date = try_convert(date, @Year + '1231', 112) ;

		--! As we have multiple steps if there no outer transaction,
		--! use an explicit transaction from this point forward 
		if @_TxnIsExternal = 0 begin tran;

		declare @_UpsertCount int, @_P445Count int;

		declare @tblRowCounts table (Change varchar(30));

		set datefirst 1; -- Monday
			
		; with	dateRangeCte(DateKey, ActualDate)
		as
		(
			select
				  20000000 + n.Number
				, try_convert(date, cast(20000000 + n.Number as char(8)))
			from
				dbo.Numbers (999999) as n
			where
				n.Number between @_StartRange and @_EndRange
		)
		, sourceCte(DateKey, ActualDate, DateNameEU, DateNameUS, EnglishMonthCode, EnglishMonthName, EnglishDayCode, EnglishDayName, YearMonth, YearQuarter, IsWeekend, IsLastDayInMonth
				, FiscalPeriod, FiscalQuarter, FiscalYear, FiscalPeriodCode, FiscalPeriodName, FiscalYearPeriod, FiscalYearQuarter)
		as
		(
				select
				  cast(-999 as int)			-- DateKey
				, cast(null as date)		-- ActualDate
				, cast('' as varchar(50))	-- DateNameEU
				, cast('' as varchar(50))	-- DateNameUS
				, cast('' as varchar(50))	-- EnglishMonthCode
				, cast('' as varchar(50))	-- EnglishMonthName
				, cast('' as varchar(50))	-- EnglishDayCode
				, cast('' as varchar(50))	-- EnglishDayName
				, cast('' as varchar(50))	-- YearMonth
				, cast('' as varchar(50))	-- YearQuarter
				, cast('' as varchar(50))	-- IsWeekend
				, cast('' as varchar(50))	-- IsLastDayInMonth
				, cast(null as tinyint)		-- FiscalPeriod tinyint null
				, cast(null as tinyint)		-- FiscalQuarter tinyint null
				, cast(null as int)		-- FiscalYear int null
				, cast('' as char(3))	-- FiscalPeriodCode char(3) not null
				, cast('' as varchar(50))	-- FiscalPeriodName varchar(10) not null
				, cast('' as varchar(50))	-- FiscalYearPeriod varchar(10) not null
				, cast('' as varchar(50))	-- FiscalYearQuarter varchar(10) not null
			union all
				select
					  19000101			-- DateKey
					, '19000101'		-- ActualDate
					, 'Unknown Start Date'	-- DateNameEU
					, 'Unknown Start Date'	-- DateNameUS
					, 'N/A'	-- EnglishMonthCode
					, 'N/A'	-- EnglishMonthName
					, 'N/A'	-- EnglishDayCode
					, 'N/A'	-- EnglishDayName
					, 'N/A'	-- YearMonth
					, 'N/A'	-- YearQuarter
					, 'N/A'	-- IsWeekend
					, 'N/A'	-- IsLastDayInMonth
					, null -- FiscalPeriod
					, null -- FiscalQuarter
					, null -- FiscalYear
					, 'N/A'	-- FiscalPeriodCode
					, 'N/A'	-- FiscalPeriodName
					, 'N/A'	-- FiscalYearPeriod
					, 'N/A'	-- FiscalYearQuarter
			union all
				select
					  99991231			-- DateKey
					, '99991231'		-- ActualDate
					, 'Open End Date/Ongoing'	-- DateNameEU
					, 'Open End Date/Ongoing'	-- DateNameUS
					, 'N/A'	-- EnglishMonthCode
					, 'N/A'	-- EnglishMonthName
					, 'N/A'	-- EnglishDayCode
					, 'N/A'	-- EnglishDayName
					, 'N/A'	-- YearMonth
					, 'N/A'	-- YearQuarter
					, 'N/A'	-- IsWeekend
					, 'N/A'	-- IsLastDayInMonth
					, null -- FiscalPeriod
					, null -- FiscalQuarter
					, null -- FiscalYear
					, 'N/A'	-- FiscalPeriodCode
					, 'N/A'	-- FiscalPeriodName
					, 'N/A'	-- FiscalYearPeriod
					, 'N/A'	-- FiscalYearQuarter
			union all
				select
					  -1		-- DateKey
					, null		-- ActualDate
					, 'Not Specified at Source'	-- DateNameEU
					, 'Not Specified at Source'	-- DateNameUS
					, 'N/A'	-- EnglishMonthCode
					, 'N/A'	-- EnglishMonthName
					, 'N/A'	-- EnglishDayCode
					, 'N/A'	-- EnglishDayName
					, 'N/A'	-- YearMonth
					, 'N/A'	-- YearQuarter
					, 'N/A'	-- IsWeekend
					, 'N/A'	-- IsLastDayInMonth
					, null -- FiscalPeriod
					, null -- FiscalQuarter
					, null -- FiscalYear
					, 'N/A'	-- FiscalPeriodCode
					, 'N/A'	-- FiscalPeriodName
					, 'N/A'	-- FiscalYearPeriod
					, 'N/A'	-- FiscalYearQuarter
			union all
				select
					  -2		-- DateKey
					, null		-- ActualDate
					, 'Lookup Not Found'	-- DateNameEU
					, 'Lookup Not Found'	-- DateNameUS
					, 'N/A'	-- EnglishMonthCode
					, 'N/A'	-- EnglishMonthName
					, 'N/A'	-- EnglishDayCode
					, 'N/A'	-- EnglishDayName
					, 'N/A'	-- YearMonth
					, 'N/A'	-- YearQuarter
					, 'N/A'	-- IsWeekend
					, 'N/A'	-- IsLastDayInMonth
					, null -- FiscalPeriod
					, null -- FiscalQuarter
					, null -- FiscalYear
					, 'N/A'	-- FiscalPeriodCode
					, 'N/A'	-- FiscalPeriodName
					, 'N/A'	-- FiscalYearPeriod
					, 'N/A'	-- FiscalYearQuarter
			union all
				select
					  -3		-- DateKey
					, null		-- ActualDate
					, 'Not Implemented in Source'	-- DateNameEU
					, 'Not Implemented in Source'	-- DateNameUS
					, 'N/A'	-- EnglishMonthCode
					, 'N/A'	-- EnglishMonthName
					, 'N/A'	-- EnglishDayCode
					, 'N/A'	-- EnglishDayName
					, 'N/A'	-- YearMonth
					, 'N/A'	-- YearQuarter
					, 'N/A'	-- IsWeekend
					, 'N/A'	-- IsLastDayInMonth
					, null -- FiscalPeriod
					, null -- FiscalQuarter
					, null -- FiscalYear
					, 'N/A'	-- FiscalPeriodCode
					, 'N/A'	-- FiscalPeriodName
					, 'N/A'	-- FiscalYearPeriod
					, 'N/A'	-- FiscalYearQuarter
			union all
				select
					  -4		-- DateKey
					, null		-- ActualDate
					, 'Not Applicable in this Context'	-- DateNameEU
					, 'Not Applicable in this Context'	-- DateNameUS
					, 'N/A'	-- EnglishMonthCode
					, 'N/A'	-- EnglishMonthName
					, 'N/A'	-- EnglishDayCode
					, 'N/A'	-- EnglishDayName
					, 'N/A'	-- YearMonth
					, 'N/A'	-- YearQuarter
					, 'N/A'	-- IsWeekend
					, 'N/A'	-- IsLastDayInMonth
					, null -- FiscalPeriod
					, null -- FiscalQuarter
					, null -- FiscalYear
					, 'N/A'	-- FiscalPeriodCode
					, 'N/A'	-- FiscalPeriodName
					, 'N/A'	-- FiscalYearPeriod
					, 'N/A'	-- FiscalYearQuarter
			union all
				select
					  -5		-- DateKey
					, null		-- ActualDate
					, 'Logic Not Defined'	-- DateNameEU
					, 'Logic Not Defined'	-- DateNameUS
					, 'N/A'	-- EnglishMonthCode
					, 'N/A'	-- EnglishMonthName
					, 'N/A'	-- EnglishDayCode
					, 'N/A'	-- EnglishDayName
					, 'N/A'	-- YearMonth
					, 'N/A'	-- YearQuarter
					, 'N/A'	-- IsWeekend
					, 'N/A'	-- IsLastDayInMonth
					, null -- FiscalPeriod
					, null -- FiscalQuarter
					, null -- FiscalYear
					, 'N/A'	-- FiscalPeriodCode
					, 'N/A'	-- FiscalPeriodName
					, 'N/A'	-- FiscalYearPeriod
					, 'N/A'	-- FiscalYearQuarter
			union all
				select
					  -6		-- DateKey
					, null		-- ActualDate
					, 'Expected in Future'	-- DateNameEU
					, 'Expected in Future'	-- DateNameUS
					, 'N/A'	-- EnglishMonthCode
					, 'N/A'	-- EnglishMonthName
					, 'N/A'	-- EnglishDayCode
					, 'N/A'	-- EnglishDayName
					, 'N/A'	-- YearMonth
					, 'N/A'	-- YearQuarter
					, 'N/A'	-- IsWeekend
					, 'N/A'	-- IsLastDayInMonth
					, null -- FiscalPeriod
					, null -- FiscalQuarter
					, null -- FiscalYear
					, 'N/A'	-- FiscalPeriodCode
					, 'N/A'	-- FiscalPeriodName
					, 'N/A'	-- FiscalYearPeriod
					, 'N/A'	-- FiscalYearQuarter
			union all
				select
					  -7		-- DateKey
					, null		-- ActualDate
					, 'Deliberately Blank'	-- DateNameEU
					, 'Deliberately Blank'	-- DateNameUS
					, 'N/A'	-- EnglishMonthCode
					, 'N/A'	-- EnglishMonthName
					, 'N/A'	-- EnglishDayCode
					, 'N/A'	-- EnglishDayName
					, 'N/A'	-- YearMonth
					, 'N/A'	-- YearQuarter
					, 'N/A'	-- IsWeekend
					, 'N/A'	-- IsLastDayInMonth
					, null -- FiscalPeriod
					, null -- FiscalQuarter
					, null -- FiscalYear
					, 'N/A'	-- FiscalPeriodCode
					, 'N/A'	-- FiscalPeriodName
					, 'N/A'	-- FiscalYearPeriod
					, 'N/A'	-- FiscalYearQuarter
			union all
				select
					 -8		-- DateKey
					, null		-- ActualDate
					, 'Invalid Source Format'	-- DateNameEU
					, 'Invalid Source Format'	-- DateNameUS
					, 'N/A'	-- EnglishMonthCode
					, 'N/A'	-- EnglishMonthName
					, 'N/A'	-- EnglishDayCode
					, 'N/A'	-- EnglishDayName
					, 'N/A'	-- YearMonth
					, 'N/A'	-- YearQuarter
					, 'N/A'	-- IsWeekend
					, 'N/A'	-- IsLastDayInMonth
					, null -- FiscalPeriod
					, null -- FiscalQuarter
					, null -- FiscalYear
					, 'N/A'	-- FiscalPeriodCode
					, 'N/A'	-- FiscalPeriodName
					, 'N/A'	-- FiscalYearPeriod
					, 'N/A'	-- FiscalYearQuarter
			union all
				select
					  dr.DateKey
					, dr.ActualDate
					, null	-- DateNameEU
					, null	-- DateNameUS
					, null	-- EnglishMonthCode
					, null	-- EnglishMonthName
					, null	-- EnglishDayCode
					, null	-- EnglishDayName
					, null	-- YearMonth
					, null	-- YearQuarter
					, null	-- IsWeekend
					, null	-- IsLastDayInMonth
					, null -- FiscalPeriod
					, null -- FiscalQuarter
					, null -- FiscalYear
					, 'N/D'	-- FiscalPeriodCode
					, 'N/D'	-- FiscalPeriodName
					, 'N/D'	-- FiscalYearPeriod
					, 'N/D'	-- FiscalYearQuarter
				from
					dateRangeCte as dr
				where
					dr.ActualDate is not null
		)
		, ValidDatesCte
		as
		(
			select
				  src.DateKey
				, src.ActualDate
				, coalesce(src.DateNameEU, format(src.ActualDate, 'dd/MM/yyyy'), 'Oops! Date Not Recognised') as [DateNameEU]
				, coalesce(src.DateNameUS, format(src.ActualDate, 'MM/dd/yyyy'), 'Oops! Date Not Recognised') as [DateNameUS]
				, coalesce(src.EnglishMonthCode, upper(left(datename(month, src.ActualDate), 3)), '???') as [EnglishMonthCode]
				, coalesce(src.EnglishMonthName, datename(month, src.ActualDate), 'Oops! Date Not Recognised') as [EnglishMonthName]
				, coalesce(src.EnglishDayCode, upper(left(datename(dw, src.ActualDate), 3)), '???') as [EnglishDayCode]
				, coalesce(src.EnglishDayName, datename(dw, src.ActualDate), 'Oops! Date Not Recognised') as [EnglishDayName]
				, datepart(year, src.ActualDate) as [CalendarYear]
				, datepart(quarter, src.ActualDate) as [CalendarQuarter]
				, datepart(month, src.ActualDate) as [MonthNumberInYear]
				, datepart(week, src.ActualDate) as [WeekNumberInYear]
				, datepart(dayofyear, src.ActualDate) as [DayNumberInYear]
				, datename(dd, src.ActualDate) as [DayNumberInMonth]
				, datepart(dw, src.ActualDate) as [DayNumberInWeek]
				, coalesce(src.YearMonth, format(src.ActualDate, 'yyyy-MM'), 'Oops!') as [YearMonth]
				, coalesce(src.YearQuarter, format(src.ActualDate, 'yyyy-Q') + cast(datepart(quarter, src.ActualDate) as char(1)), 'Oops!') as [YearQuarter]
				-------------------------------------------------------------------------------------------------------------------------------------------
				, case
					when src.IsWeekend is null and datename(dw, src.ActualDate) in ('Saturday', 'Sunday')
						then 'Weekend'
					when src.IsWeekend is null and datename(dw, src.ActualDate) in ('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday')
						then 'Weekday'
					else coalesce(src.IsWeekend, '')
				  end as [IsWeekend]
				-------------------------------------------------------------------------------------------------------------------------------------------
				, case
					when src.IsLastDayInMonth is null and month(src.ActualDate) = month(dateadd(d, 1, src.ActualDate))
						then 'N'
					when src.IsLastDayInMonth is null and month(src.ActualDate) + 1 = month(dateadd(d, 1, src.ActualDate))
						then 'Y'
					else coalesce(src.IsLastDayInMonth, '')
				  end as [IsLastDayInMonth]
				-------------------------------------------------------------------------------------------------------------------------------------------
				, cast(case when DateKey between 19000102 and 99991230
					then dateadd(day, datediff(day, 0, ActualDate) / 7 * 7, 0)
					else null
				  end as date) as [MondayWeekCommencing]
				-------------------------------------------------------------------------------------------------------------------------------------------
				, case when src.IsWeekend is null and datename(dw, src.ActualDate) in ('Saturday', 'Sunday') then 0 else 1 end as [WorkDayCount]
				-------------------------------------------------------------------------------------------------------------------------------------------
				, src.FiscalPeriod
				, src.FiscalQuarter
				, src.FiscalYear
				, src.FiscalPeriodCode
				, src.FiscalPeriodName
				, src.FiscalYearPeriod
				, src.FiscalYearQuarter
			from
				sourceCte as src
			where
				src.DateKey > -999
		)
		, workDaysInMonthCte
		as
		(
			select
				  DateKey
				, sum(WorkDayCount) over(partition by YearMonth) as [WorkDaysInMonthTotal]
				, sum(WorkDayCount) over(partition by YearMonth order by DateKey rows unbounded preceding) as [WorkDaysInMonthToDate]
			from
				ValidDatesCte
			where
				DateKey between 19000102 and 99991230
		)
		, finalCte
		as
		(
			select
				  d.DateKey
				, d.ActualDate
				, d.DateNameEU
				, d.DateNameUS
				, d.EnglishMonthCode
				, d.EnglishMonthName
				, d.EnglishDayCode
				, d.EnglishDayName
				, d.CalendarYear
				, d.CalendarQuarter
				, d.MonthNumberInYear
				, d.WeekNumberInYear
				, d.DayNumberInYear
				, d.DayNumberInMonth
				, d.DayNumberInWeek
				, d.YearMonth
				, d.YearQuarter
				, d.IsWeekend
				, d.IsLastDayInMonth
				, d.MondayWeekCommencing
				-------------------------------------------------------------------------------
				, case when d.ActualDate is not null
					then cast(wdim.WorkDaysInMonthTotal as tinyint)
					else null
				  end as [WorkDaysInMonthTotal]
				-------------------------------------------------------------------------------
				, case when d.ActualDate is not null
					then cast(wdim.WorkDaysInMonthToDate as tinyint)
					else null
				  end as [WorkDaysInMonthToDate]
				-------------------------------------------------------------------------------
				, d.FiscalPeriod
				, d.FiscalQuarter
				, d.FiscalYear
				, d.FiscalPeriodCode
				, d.FiscalPeriodName
				, d.FiscalYearPeriod
				, d.FiscalYearQuarter
			from
				ValidDatesCte as d
			left join workDaysInMonthCte as wdim
				on wdim.DateKey = d.DateKey
		)
		merge into dbo.dimDate as tgt
		using finalCte as src
		on src.DateKey = tgt.DateKey
		when not matched by target
			then
				insert
				(
				  DateKey
				, ActualDate
				, DateNameEU
				, DateNameUS
				, EnglishMonthCode
				, EnglishMonthName
				, EnglishDayCode
				, EnglishDayName
				, CalendarYear
				, CalendarQuarter
				, MonthNumberInYear
				, WeekNumberInYear
				, DayNumberInYear
				, DayNumberInMonth
				, DayNumberInWeek
				, YearMonth
				, YearQuarter
				, IsWeekend
				, IsLastDayInMonth
				, MondayWeekCommencing
				, WorkDaysInMonthTotal
				, WorkDaysInMonthToDate
				, FiscalPeriod
				, FiscalQuarter
				, FiscalYear
				, FiscalPeriodCode
				, FiscalPeriodName
				, FiscalYearPeriod
				, FiscalYearQuarter
				)
				values
				(
				  src.DateKey
				, src.ActualDate
				, src.DateNameEU
				, src.DateNameUS
				, src.EnglishMonthCode
				, src.EnglishMonthName
				, src.EnglishDayCode
				, src.EnglishDayName
				, src.CalendarYear
				, src.CalendarQuarter
				, src.MonthNumberInYear
				, src.WeekNumberInYear
				, src.DayNumberInYear
				, src.DayNumberInMonth
				, src.DayNumberInWeek
				, src.YearMonth
				, src.YearQuarter
				, src.IsWeekend
				, src.IsLastDayInMonth
				, src.MondayWeekCommencing
				, src.WorkDaysInMonthTotal
				, src.WorkDaysInMonthToDate
				, src.FiscalPeriod
				, src.FiscalQuarter
				, src.FiscalYear
				, src.FiscalPeriodCode
				, src.FiscalPeriodName
				, src.FiscalYearPeriod
				, src.FiscalYearQuarter
				)
		when matched
			and
				(
						(tgt.ActualDate <> src.ActualDate)
					or
						(tgt.ActualDate is null and src.ActualDate is not null)
					or
						(tgt.ActualDate is not null and src.ActualDate is null)
				)
			or tgt.DateNameEU <> src.DateNameEU
			or tgt.DateNameUS <> src.DateNameUS
			or tgt.EnglishMonthCode <> src.EnglishMonthCode
			or tgt.EnglishMonthName <> src.EnglishMonthName
			or tgt.EnglishDayCode <> src.EnglishDayCode
			or tgt.EnglishDayName <> src.EnglishDayName
			or coalesce(tgt.CalendarYear, -999999) <> coalesce(src.CalendarYear, -999999)
			or coalesce(tgt.CalendarQuarter, -999999) <> coalesce(src.CalendarQuarter, -999999)
			or coalesce(tgt.MonthNumberInYear, -999999) <> coalesce(src.MonthNumberInYear, -999999)
			or coalesce(tgt.WeekNumberInYear, -999999) <> coalesce(src.WeekNumberInYear, -999999)
			or coalesce(tgt.DayNumberInYear, -999999) <> coalesce(src.DayNumberInYear, -999999)
			or coalesce(tgt.DayNumberInMonth, -999999) <> coalesce(src.DayNumberInMonth, -999999)
			or coalesce(tgt.DayNumberInWeek, -999999) <> coalesce(src.DayNumberInWeek, -999999)
			or tgt.YearMonth <> src.YearMonth
			or tgt.YearQuarter <> src.YearQuarter
			or tgt.IsWeekend <> src.IsWeekend
			or tgt.IsLastDayInMonth <> src.IsLastDayInMonth
			or coalesce(tgt.MondayWeekCommencing, '19000101') <> coalesce(src.MondayWeekCommencing, '19000101')
			or coalesce(tgt.WorkDaysInMonthTotal, -999999) <> coalesce(src.WorkDaysInMonthTotal, -999999)
			or coalesce(tgt.WorkDaysInMonthToDate, -999999) <> coalesce(src.WorkDaysInMonthToDate, -999999)
			or coalesce(tgt.FiscalPeriod, -999999) <> coalesce(src.FiscalPeriod, -999999)
			or coalesce(tgt.FiscalQuarter, -999999) <> coalesce(src.FiscalQuarter, -999999)
			or coalesce(tgt.FiscalYear, -999999) <> coalesce(src.FiscalYear, -999999)
			or tgt.FiscalPeriodCode <> src.FiscalPeriodCode
			or tgt.FiscalPeriodName <> src.FiscalPeriodName
			or tgt.FiscalYearPeriod <> src.FiscalYearPeriod
			or tgt.FiscalYearQuarter <> src.FiscalYearQuarter
		then
			update set
				  tgt.ActualDate = src.ActualDate
				, tgt.DateNameEU = src.DateNameEU
				, tgt.DateNameUS = src.DateNameUS
				, tgt.EnglishMonthCode = src.EnglishMonthCode
				, tgt.EnglishMonthName = src.EnglishMonthName
				, tgt.EnglishDayCode = src.EnglishDayCode
				, tgt.EnglishDayName = src.EnglishDayName
				, tgt.CalendarYear = src.CalendarYear
				, tgt.CalendarQuarter = src.CalendarQuarter
				, tgt.MonthNumberInYear = src.MonthNumberInYear
				, tgt.WeekNumberInYear = src.WeekNumberInYear
				, tgt.DayNumberInYear = src.DayNumberInYear
				, tgt.DayNumberInMonth = src.DayNumberInMonth
				, tgt.DayNumberInWeek = src.DayNumberInWeek
				, tgt.YearMonth = src.YearMonth
				, tgt.YearQuarter = src.YearQuarter
				, tgt.IsWeekend = src.IsWeekend
				, tgt.IsLastDayInMonth = src.IsLastDayInMonth
				, tgt.MondayWeekCommencing = src.MondayWeekCommencing
				, tgt.WorkDaysInMonthTotal = src.WorkDaysInMonthTotal
				, tgt.WorkDaysInMonthToDate = src.WorkDaysInMonthToDate
				, tgt.FiscalPeriod = src.FiscalPeriod
				, tgt.FiscalQuarter = src.FiscalQuarter
				, tgt.FiscalYear = src.FiscalYear
				, tgt.FiscalPeriodCode = src.FiscalPeriodCode
				, tgt.FiscalPeriodName = src.FiscalPeriodName
				, tgt.FiscalYearPeriod = src.FiscalYearPeriod
				, tgt.FiscalYearQuarter = src.FiscalYearQuarter
		output $action into @tblRowCounts (Change);

		set @_UpsertCount = @@rowcount;

		--!
		--! We have to generate the 4-4-5 fiscal calendar values separately
		--! as some of the required dates may already be in the table but
		--! not within the date range we are upserting.
		--!
		;with periodNamesCte
		as
		(
			select distinct
				  CalendarYear as [FiscalYear]
				, MonthNumberInYear as [FiscalPeriod]
				, CalendarQuarter as [FiscalQuarter]
				, EnglishMonthCode as [FiscalPeriodCode]
				, EnglishMonthName as [FiscalPeriodName]
				, YearMonth as [FiscalYearPeriod]
				, YearQuarter as [FiscalYearQuarter]
			from
				dbo.dimDate
			where
				ActualDate between @_YearStart and @_YearEnd
		)
		, fiscalWeeksCte
		as
		(
			select
				  MondayWeekCommencing
				, case
					when MondayWeekCommencing <= @_YearStart
						then 1
					else row_number() over(order by MondayWeekCommencing asc) - 1
				  end as [FiscalWeekNumber]
			from
				dbo.dimDate
			where
					ActualDate between @_YearStart and @_YearEnd
				and MondayWeekCommencing is not null
			group by
				MondayWeekCommencing
		)
		, fiscalPeriodCte
		as
		(
			select
				  MondayWeekCommencing
				, case
					when FiscalWeekNumber between 1 and 4 then 1
					when FiscalWeekNumber between 5 and 8 then 2
					when FiscalWeekNumber between 9 and 13 then 3
					when FiscalWeekNumber between 14 and 17 then 4
					when FiscalWeekNumber between 18 and 21 then 5
					when FiscalWeekNumber between 22 and 26 then 6
					when FiscalWeekNumber between 27 and 30 then 7
					when FiscalWeekNumber between 31 and 34 then 8
					when FiscalWeekNumber between 35 and 39 then 9
					when FiscalWeekNumber between 40 and 43 then 10
					when FiscalWeekNumber between 44 and 47 then 11
					else 12
				  end as [FiscalPeriod]
			from
				fiscalWeeksCte
		)
		update
			tgt
		set
			  tgt.FiscalPeriod = fp.FiscalPeriod
			, tgt.FiscalQuarter = pn.FiscalQuarter
			, tgt.FiscalYear = pn.FiscalYear
			, tgt.FiscalPeriodCode = pn.FiscalPeriodCode
			, tgt.FiscalPeriodName = pn.FiscalPeriodName
			, tgt.FiscalYearPeriod = pn.FiscalYearPeriod
			, tgt.FiscalYearQuarter = pn.FiscalYearQuarter
		from
			dbo.dimDate as tgt
		inner join fiscalPeriodCte as fp
			on fp.MondayWeekCommencing = tgt.MondayWeekCommencing
		inner join periodNamesCte as pn
			on pn.FiscalYear = tgt.CalendarYear
			and pn.FiscalPeriod = fp.FiscalPeriod
		where
			tgt.ActualDate between @_YearStart and @_YearEnd
			
		set @_P445Count = @@rowcount ;

		;with workDaysInPeriodCte
		as
		(
			select
				  DateKey
				, sum(case when IsWeekend = 'Weekday' then 1 else 0 end) over(partition by FiscalYearPeriod) as [WorkDaysInPeriodTotal]
				, sum(case when IsWeekend = 'Weekday' then 1 else 0 end) over(partition by FiscalYearPeriod order by DateKey rows unbounded preceding) as [WorkDaysInPeriodToDate]
			from
				dbo.dimDate
			where
					ActualDate between @_YearStart and @_YearEnd
				and FiscalPeriod is not null
		)
		update
			tgt
		set
			  tgt.WorkDaysInFiscalPeriodTotal = src.WorkDaysInPeriodTotal
			, tgt.WorkDaysInFiscalPeriodToDate = src.WorkDaysInPeriodToDate
		from
			dbo.dimDate as tgt
		inner join workDaysInPeriodCte as src
			on src.DateKey = tgt.DateKey
		where
			tgt.ActualDate between @_YearStart and @_YearEnd

		if @DoOutputInfo = 1
			begin
				raiserror('Upserted %i records in Calendar table and set Period 4-4-5 values on %i rows', 0, 1, @_UpsertCount, @_P445Count) with nowait;

				select Change as [Calendar Management Action], count(*) as [Rows Affected] from @tblRowCounts group by Change ;
			end
			
		--!
		--! Only commit transactions started within this procedure
		--!
		if @_TxnIsExternal = 0 and (xact_state() = 1 or @@trancount > 0) commit tran ;
	end try
	begin catch
		--! If we have an uncommittable external transaction (see BOL), or a deadlock
		--! we can't do anything else until we roll that back. Alternatively, if we
		--! started the transaction we should roll it back otherwise or let the caller
		--! handle its own external txn 
		if (xact_state() = -1) or (xact_state() = 1 and error_number() = 1205) or (xact_state() = 1 and @_TxnIsExternal = 0)
			rollback tran;
		throw;
	end catch;

	set nocount off;
end;
GO
PRINT N'Creating [log4].[ExceptionHandler]...';


GO

/*************************************************************************************************/
--</MaintenanceHeader>

CREATE   PROCEDURE [log4].[ExceptionHandler]
(
  @ErrorContext		nvarchar(512)	= NULL
, @ErrorProcedure	nvarchar(128)	= NULL	OUT
, @ErrorNumber		int				= NULL	OUT
, @ErrorSeverity	int				= NULL	OUT
, @ErrorState		int				= NULL	OUT
, @ErrorLine		int				= NULL	OUT
, @ErrorMessage		nvarchar(4000)	= NULL	OUT
, @ReturnMessage	nvarchar(1000)	= NULL	OUT
, @ExceptionId		int				= NULL	OUT
)
AS

--<CommentHeader>
/**********************************************************************************************************************

Properties
=====================================================================================================================
PROCEDURE NAME:		log4.ExceptionHandler
DESCRIPTION:		Returns error info as output parameters and writes info to Exception table
DATE OF ORIGIN:		01-DEC-2006
ORIGINAL AUTHOR:	Greg M. Lucas (data-centric solutions ltd. http://www.data-centric.co.uk)
BUILD DATE:			01-MAR-2015
BUILD VERSION:		0.0.13
DEPENDANTS:			Various
DEPENDENCIES:		log4.SessionInfoOutput

Outputs
=====================================================================================================================
Outputs all values collected within the CATCH block plus a formatted error message built from context and error msg

Returns
=====================================================================================================================
- @@ERROR - always zero on success


Additional Notes
=====================================================================================================================
-

Revision history
=====================================================================================================================
ChangeDate		Author	Version		Narrative
============	======	=======		=================================================================================
01-DEC-2006		GML		v0.0.1		Created
------------	------	-------		---------------------------------------------------------------------------------
15-APR-2008		GML		v0.0.3		Now utilises SessionInfoOutput sproc for session values
------------	------	-------		---------------------------------------------------------------------------------

=====================================================================================================================
(C) Copyright 2006-14 data-centric solutions ltd. (http://log4tsql.sourceforge.net/)

This library is free software; you can redistribute it and/or modify it under the terms of the
GNU Lesser General Public License as published by the Free Software Foundation (www.fsf.org);
either version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along with this
library; if not, you can find it at http://www.opensource.org/licenses/lgpl-3.0.html
or http://www.gnu.org/licenses/lgpl.html

**********************************************************************************************************************/
--</CommentHeader>

BEGIN
	SET NOCOUNT ON;

	DECLARE @ErrorDatabase nvarchar(128) = DB_NAME();

	SET @ErrorContext	= COALESCE(@ErrorContext, '');
	SET @ErrorProcedure	= COALESCE(NULLIF(@ErrorProcedure, ''), ERROR_PROCEDURE(), '');
	SET @ErrorNumber		= COALESCE(ERROR_NUMBER(), 0);
	SET @ErrorSeverity	= COALESCE(ERROR_SEVERITY(), 0);
	SET @ErrorState		= COALESCE(ERROR_STATE(), 0);
	SET @ErrorLine		= COALESCE(ERROR_LINE(), 0);
	SET @ErrorMessage	= COALESCE(ERROR_MESSAGE()
							, 'ERROR_MESSAGE() Not Found for @@ERROR: '
								+ COALESCE(CAST(ERROR_NUMBER() AS varchar(16)), 'NULL'));

	--!
	--! Generate a detailed, nicely formatted error message to return to the caller
	--!
	DECLARE @context nvarchar(512); SET @context = COALESCE(NULLIF(@ErrorContext, '') + ' due to ', 'ERROR! ');
	SET @ReturnMessage	= @context
						+ CASE
							WHEN LEN(ERROR_MESSAGE()) > (994 - LEN(@context))
								THEN '"' + SUBSTRING(@ErrorMessage, 1, (994 - LEN(@context))) + '..."'
							ELSE
								'"' + @ErrorMessage + '"'
						  END;

	--!
	--! Session variables (keep it SQL2005 compatible)
	--!
	DECLARE @SessionId	int				; SET @SessionId	= @@SPID;
	DECLARE @ServerName	nvarchar(128)	; SET @ServerName	= @@SERVERNAME;

	--!
	--! log4.SessionInfoOutput variables
	--!
	DECLARE   @HostName				nvarchar(128)
			, @ProgramName			nvarchar(128)
			, @NTDomain				nvarchar(128)
			, @NTUsername			nvarchar(128)
			, @LoginName			nvarchar(128)
			, @OriginalLoginName	nvarchar(128)
			, @SessionLoginTime		datetime

	--! Working variables
	DECLARE @tblExceptionId         table	(ExceptionId int NOT NULL UNIQUE);

	--!
	--! Get the details for the current session
	--!
	EXEC log4Private.SessionInfoOutput
			  @SessionId			= @SessionId
			, @HostName				= @HostName				OUT
			, @ProgramName			= @ProgramName			OUT
			, @NTDomain				= @NTDomain				OUT
			, @NTUsername			= @NTUsername			OUT
			, @LoginName			= @LoginName			OUT
			, @OriginalLoginName	= @OriginalLoginName	OUT
			, @SessionLoginTime		= @SessionLoginTime		OUT

	--!
	--! Record what we have
	--!
	INSERT [log4Private].[SqlException]
	(
	  [ErrorContext]
	, [ErrorNumber]
	, [ErrorSeverity]
	, [ErrorState]
	, [ErrorProcedure]
	, [ErrorLine]
	, [ErrorMessage]
	, [ErrorDatabase]
	, [SessionIdent]
	, [ServerName]
	, [HostName]
	, [ProgramName]
	, [NTDomain]
	, [NTUsername]
	, [LoginName]
	, [OriginalLoginName]
	, [SessionLoginTime]
	)
	OUTPUT inserted.ExceptionId INTO @tblExceptionId
	VALUES
	(
	  @ErrorContext
	, @ErrorNumber
	, @ErrorSeverity
	, @ErrorState
	, @ErrorProcedure
	, @ErrorLine
	, @ErrorMessage
	, @ErrorDatabase
	, @SessionId
	, @ServerName
	, @HostName
	, @ProgramName
	, @NTDomain
	, @NTUsername
	, @LoginName
	, @OriginalLoginName
	, @SessionLoginTime
	);

	SELECT @ExceptionId = ExceptionId FROM @tblExceptionId;

--/////////////////////////////////////////////////////////////////////////////////////////////////
OnComplete:
--/////////////////////////////////////////////////////////////////////////////////////////////////

	SET NOCOUNT OFF;

	RETURN;
END
GO
PRINT N'Creating [log4Utils].[JournalPrinter]...';


GO

/*************************************************************************************************/
--</MaintenanceHeader>

CREATE PROCEDURE [log4Utils].[JournalPrinter]
(
  @JournalId		int
)

AS

/**************************************************************************************************

Properties
==========
PROCEDURE NAME:		[log4Utils].[JournalPrinter]
DESCRIPTION:		Prints the contents of JournalDetail for the specified Journal ID respecting all
					line feeds and/or carriage returns
DATE OF ORIGIN:		03-MAY-2011
ORIGINAL AUTHOR:	Greg M. Lucas (data-centric solutions ltd. http://www.data-centric.co.uk)
BUILD DATE:			01-MAR-2015
BUILD VERSION:		0.0.13
DEPENDANTS:			None
DEPENDENCIES:		None

Inputs
======
@JournalId - if -1, just processes any provided input string
@InputString - optional, the string to print

Outputs
=======
None

Returns
=======
NULL

Additional Notes
================

Revision history
==================================================================================================
ChangeDate		Author	Version		Narrative
============	======	=======		==============================================================
03-MAY-2011		GML		v0.0.4		Created
------------	------	-------		--------------------------------------------------------------
05-NOV-2011		GML		v0.0.8		Now calls log4.PrintString (which is SQL2005 compatible)
------------	------	-------		--------------------------------------------------------------

=================================================================================================
(C) Copyright 2006-14 data-centric solutions ltd. (http://log4tsql.sourceforge.net/)

This library is free software; you can redistribute it and/or modify it under the terms of the
GNU Lesser General Public License as published by the Free Software Foundation (www.fsf.org);
either version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along with this
library; if not, you can find it at http://www.opensource.org/licenses/lgpl-3.0.html
or http://www.gnu.org/licenses/lgpl.html

**************************************************************************************************/

BEGIN
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
	SET NOCOUNT ON;

	--! Working Values
	DECLARE @WorkingString		varchar(max)

	SELECT @WorkingString = ExtraInfo FROM [log4Private].[JournalDetail] WHERE JournalId = @JournalId

	IF COALESCE(@WorkingString, '') = ''
		BEGIN
			RAISERROR('No Extra Info for Journal ID: %d!', 0, 1, @JournalId);
		END
	ELSE
		BEGIN
			PRINT '';
			PRINT REPLICATE('=', 120);

			EXEC [log4Utils].[PrintString] @WorkingString

			PRINT '';
			PRINT REPLICATE('=', 120);
			RAISERROR('Completed processing journal detail for Journal ID: %d', 0, 1, @JournalId) WITH NOWAIT;
		END

	SET NOCOUNT OFF;

	RETURN;
END
GO
PRINT N'Creating [etl].[SSIS_BUDGET_2017_TransformVolumes]...';


GO
create procedure [etl].[SSIS_BUDGET_2017_TransformVolumes]
(
  @LoadStart datetime = null
, @RowsAffected int = null out
)
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
PROCEDURE NAME:		etl.SSIS_BUDGET_2017_TransformVolumes
DESCRIPTION:		Transforms Budget Sales data in preparation for loading to the mart
ORIGIN DATE:		21-JUN-2017
ORIGINAL AUTHOR:	Greg M. Lucas

Returns
=======
@@Error - always zero on success

Additional Notes
================

REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		21-JUN-2017		GML		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------

**********************************************************************************************************************/
--</CommentHeader>

begin
	set nocount on;

	--! Standard/ExceptionHandler variables
	declare	@_FunctionName nvarchar(255) = quotename(object_schema_name(@@procid)) + '.' + quotename(object_name(@@procid));
	declare	@_Error int = 0;
	declare @_ReturnValue int
	declare	@_Message nvarchar(512);
	declare	@_ErrorContext nvarchar(512);
	declare	@_Step varchar(128);

	--! Find out if we are already in a transaction
	declare	@_TxnIsExternal bit = case when @@trancount > 0 then 1 else 0 end;

	begin try
		--! If Load Start time hasn't been passed in then set it now
		set @LoadStart = coalesce(@LoadStart, getdate())

		--! If there no outer transaction, use an explicit transaction so we can roll this piece back if required 
		if @_TxnIsExternal = 0 begin tran;

		set @_Step = 'Upsert BudgetVolumes'

		;with aggregateCte
		as
		(
			select
				  BusinessUnitKey
				, ProductCategoryKey
				, count(*) as [LineCount]
				, cast(round(sum(coalesce(Jan_YTD * 1000, 0)), 4) as decimal(28,4)) as [Jan_YTD]
				, cast(round(sum(coalesce(Feb_YTD * 1000, 0)), 4) as decimal(28,4)) as [Feb_YTD]
				, cast(round(sum(coalesce(Mar_YTD * 1000, 0)), 4) as decimal(28,4)) as [Mar_YTD]
				, cast(round(sum(coalesce(Apr_YTD * 1000, 0)), 4) as decimal(28,4)) as [Apr_YTD]
				, cast(round(sum(coalesce(May_YTD * 1000, 0)), 4) as decimal(28,4)) as [May_YTD]
				, cast(round(sum(coalesce(Jun_YTD * 1000, 0)), 4) as decimal(28,4)) as [Jun_YTD]
				, cast(round(sum(coalesce(Jul_YTD * 1000, 0)), 4) as decimal(28,4)) as [Jul_YTD]
				, cast(round(sum(coalesce(Aug_YTD * 1000, 0)), 4) as decimal(28,4)) as [Aug_YTD]
				, cast(round(sum(coalesce(Sep_YTD * 1000, 0)), 4) as decimal(28,4)) as [Sep_YTD]
				, cast(round(sum(coalesce(Oct_YTD * 1000, 0)), 4) as decimal(28,4)) as [Oct_YTD]
				, cast(round(sum(coalesce(Nov_YTD * 1000, 0)), 4) as decimal(28,4)) as [Nov_YTD]
				, cast(round(sum(coalesce(Dec_YTD * 1000, 0)), 4) as decimal(28,4)) as [Dec_YTD]
			from
				stg.SSIS_STG_BUDGET_2017_Volume
			group by
				  BusinessUnitKey
				, ProductCategoryKey
		)
		, sourceCte
		as
		(
			select
				  BusinessUnitKey
				, ProductCategoryKey
				, LineCount
                , Jan_YTD
                , Feb_YTD
                , Mar_YTD
                , Apr_YTD
                , May_YTD
                , Jun_YTD
                , Jul_YTD
                , Aug_YTD
                , Sep_YTD
                , Oct_YTD
                , Nov_YTD
                , Dec_YTD
				---------------------------------------------------------------------------------------------------
				--! Encapsulate ALL non-key columns into a hash value to speed up CDC checks during susbseqent loads
				, convert(nvarchar(32), hashbytes('MD5'
					, coalesce(cast(nullif(LineCount, 0) as nvarchar(30)), 'LineCount')
					+ coalesce(cast(nullif(Jan_YTD, 0) as nvarchar(30)), 'Jan_YTD')
					+ coalesce(cast(nullif(Feb_YTD, 0) as nvarchar(30)), 'Feb_YTD')
					+ coalesce(cast(nullif(Mar_YTD, 0) as nvarchar(30)), 'Mar_YTD')
					+ coalesce(cast(nullif(Apr_YTD, 0) as nvarchar(30)), 'Apr_YTD')
					+ coalesce(cast(nullif(May_YTD, 0) as nvarchar(30)), 'May_YTD')
					+ coalesce(cast(nullif(Jun_YTD, 0) as nvarchar(30)), 'Jun_YTD')
					+ coalesce(cast(nullif(Jul_YTD, 0) as nvarchar(30)), 'Jul_YTD')
					+ coalesce(cast(nullif(Aug_YTD, 0) as nvarchar(30)), 'Aug_YTD')
					+ coalesce(cast(nullif(Sep_YTD, 0) as nvarchar(30)), 'Sep_YTD')
					+ coalesce(cast(nullif(Oct_YTD, 0) as nvarchar(30)), 'Oct_YTD')
					+ coalesce(cast(nullif(Nov_YTD, 0) as nvarchar(30)), 'Nov_YTD')
					+ coalesce(cast(nullif(Dec_YTD, 0) as nvarchar(30)), 'Dec_YTD')), 2) as [EtlDeltaHash]
				---------------------------------------------------------------------------------------------------
			from
				aggregateCte
		)
		merge into qvstg.BudgetVolumes as tgt
		using sourceCte as src
			on src.BusinessUnitKey = tgt.BusinessUnitKey
			and src.ProductCategoryKey = tgt.ProductCategoryKey
		when not matched by target
			then insert
			(  
			  EtlDeltaHash
			, EtlCreatedOn
			, EtlCreatedBy
			, EtlUpdatedOn
			, EtlUpdatedBy
			, EtlDeletedOn
			, EtlDeletedBy
			, IsDeleted
			, LineCount
			, BusinessUnitKey
			, ProductCategoryKey
			, Jan_YTD
			, Feb_YTD
			, Mar_YTD
			, Apr_YTD
			, May_YTD
			, Jun_YTD
			, Jul_YTD
			, Aug_YTD
			, Sep_YTD
			, Oct_YTD
			, Nov_YTD
			, Dec_YTD
			)
			values
			(  
			  src.EtlDeltaHash
			, @LoadStart
			, @_FunctionName
			, @LoadStart
			, @_FunctionName
			, null -- EtlDeletedOn
			, null -- EtlDeletedBy
			, 'N' -- IsDeleted
			, src.LineCount
			, src.BusinessUnitKey
			, src.ProductCategoryKey
			, src.Jan_YTD
			, src.Feb_YTD
			, src.Mar_YTD
			, src.Apr_YTD
			, src.May_YTD
			, src.Jun_YTD
			, src.Jul_YTD
			, src.Aug_YTD
			, src.Sep_YTD
			, src.Oct_YTD
			, src.Nov_YTD
			, src.Dec_YTD
			)
		when matched and tgt.EtlDeltaHash <> src.EtlDeltaHash
			then update set
					  tgt.EtlDeltaHash = src.EtlDeltaHash
					, tgt.EtlUpdatedOn = @LoadStart
					, tgt.EtlUpdatedBy = @_FunctionName
					, tgt.IsDeleted = 'N'
					, tgt.LineCount = src.LineCount
					, tgt.Jan_YTD = src.Jan_YTD
					, tgt.Feb_YTD = src.Feb_YTD
					, tgt.Mar_YTD = src.Mar_YTD
					, tgt.Apr_YTD = src.Apr_YTD
					, tgt.May_YTD = src.May_YTD
					, tgt.Jun_YTD = src.Jun_YTD
					, tgt.Jul_YTD = src.Jul_YTD
					, tgt.Aug_YTD = src.Aug_YTD
					, tgt.Sep_YTD = src.Sep_YTD
					, tgt.Oct_YTD = src.Oct_YTD
					, tgt.Nov_YTD = src.Nov_YTD
					, tgt.Dec_YTD = src.Dec_YTD
		when not matched by source
			then update set
					  tgt.IsDeleted = 'Y'
					, tgt.EtlDeletedOn = @LoadStart
					, tgt.EtlDeletedBy = @_FunctionName
					, tgt.EtlUpdatedOn = @LoadStart
					, tgt.EtlUpdatedBy = @_FunctionName
		;

		set @RowsAffected = @@rowcount;

		--!
		--! Only commit transactions started within this procedure
		--!
		if @_TxnIsExternal = 0 and (xact_state() = 1 or @@trancount > 0) commit tran ;
	end try
	begin catch
		set @_ErrorContext = 'Failed to refresh product dimension at step '
			+ coalesce('[' + @_Step + ']', 'NULL');

		--! If we have an uncommittable external transaction (see BOL), or a deadlock
		--! we can't do anything else until we roll that back. Alternatively, if we
		--! started the transaction we should roll it back otherwise or let the caller
		--! handle its own external txn 
		if (xact_state() = -1) or (xact_state() = 1 and error_number() = 1205) or (xact_state() = 1 and @_TxnIsExternal = 0)
			begin
				rollback tran;
				set @_ErrorContext = @_ErrorContext + ' (Forced roll back all changes)';
			end
		
		exec log4.ExceptionHandler
				  @ErrorContext   = @_ErrorContext
				, @ErrorProcedure = @_FunctionName
				, @ErrorNumber    = @_Error out
				, @ReturnMessage  = @_Message out;
	end catch

--/////////////////////////////////////////////////////////////////////////////////////////////////
EndProc:
--/////////////////////////////////////////////////////////////////////////////////////////////////

	--! Finally, throw an exception that will be detected by the caller
	if @_Error > 0 raiserror(@_Message, 16, 99);

	set nocount off;

	--! Return the value of @@ERROR (which will be zero on success)
	return (@_Error);
end
GO
PRINT N'Creating [etl].[SSIS_BUDGET_2017_TransformSales]...';


GO
CREATE procedure [etl].[SSIS_BUDGET_2017_TransformSales]
(
  @LoadStart datetime = null
, @RowsAffected int = null out
)
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
PROCEDURE NAME:		etl.SSIS_BUDGET_2017_TransformSales
DESCRIPTION:		Transforms Budget Sales data in preparation for loading to the mart
ORIGIN DATE:		21-JUN-2017
ORIGINAL AUTHOR:	Greg M. Lucas

Returns
=======
@@Error - always zero on success

Additional Notes
================

REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		21-JUN-2017		GML		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------

**********************************************************************************************************************/
--</CommentHeader>

begin
	set nocount on;

	--! Standard/ExceptionHandler variables
	declare	@_FunctionName nvarchar(255) = quotename(object_schema_name(@@procid)) + '.' + quotename(object_name(@@procid));
	declare	@_Error int = 0;
	declare @_ReturnValue int
	declare	@_Message nvarchar(512);
	declare	@_ErrorContext nvarchar(512);
	declare	@_Step varchar(128);

	--! Find out if we are already in a transaction
	declare	@_TxnIsExternal bit = case when @@trancount > 0 then 1 else 0 end;

	begin try
		--! If Load Start time hasn't been passed in then set it now
		set @LoadStart = coalesce(@LoadStart, getdate())

		--! If there no outer transaction, use an explicit transaction so we can roll this piece back if required 
		if @_TxnIsExternal = 0 begin tran;

		set @_Step = 'Upsert BudgetSales' ;

		;with aggregateCte
		as
		(
			select
				  BusinessUnitKey
				, DateKey
				, count(*) as [LineCount]
				, cast(round(sum(coalesce(InstallationServices_10000 * 1000, 0)), 4) as decimal(28,4)) as [InstallationServices]
				, cast(round(sum(coalesce(ProducedGoods_10100 * 1000, 0)), 4) as decimal(28,4)) as [ProducedGoods]
				, cast(round(sum(coalesce(GroupGoods_10200 * 1000, 0)), 4) as decimal(28,4)) as [GroupGoods]
				, cast(round(sum(coalesce(CommercialGoods_10300 * 1000, 0)), 4) as decimal(28,4)) as [CommercialGoods]
				, cast(round(sum(coalesce(ExternalSales_11890 * 1000, 0)), 4) as decimal(28,4)) as [ExternalSales]
				, cast(round(sum(coalesce(IC_Transf_SBU_11000 * 1000, 0)), 4) as decimal(28,4)) as [IC_Transf_SBU]
				, cast(round(sum(coalesce(IC_Transf_Region_11100 * 1000, 0)), 4) as decimal(28,4)) as [IC_Transf_Region]
				, cast(round(sum(coalesce(IC_Transf_Abroad_11200 * 1000, 0)), 4) as decimal(28,4)) as [IC_Transf_Abroad]
				, cast(round(sum(coalesce(IC_Transf_US_11300 * 1000, 0)), 4) as decimal(28,4)) as [IC_Transf_US]
				, cast(round(sum(coalesce(Total_IC_Sales * 1000, 0)), 4) as decimal(28,4)) as [Total_IC_Sales]
				, cast(round(sum(coalesce(TotalSalesAndTransfers_11990 * 1000, 0)), 4) as decimal(28,4)) as [TotalSalesAndTransfers]
			from
				stg.SSIS_STG_BUDGET_2017_Sales
			group by
				  BusinessUnitKey
				, DateKey
		)
		, sourceCte
		as
		(
			select
				  BusinessUnitKey
				, DateKey
				, LineCount
                , InstallationServices
                , ProducedGoods
                , GroupGoods
                , CommercialGoods
                , ExternalSales
                , IC_Transf_SBU
                , IC_Transf_Region
                , IC_Transf_Abroad
                , IC_Transf_US
                , Total_IC_Sales
                , TotalSalesAndTransfers
				---------------------------------------------------------------------------------------------------
				--! Encapsulate ALL non-key columns into a hash value to speed up CDC checks during susbseqent loads
				, convert(nvarchar(32), hashbytes('MD5'
					, coalesce(cast(LineCount as nvarchar(30)), 'LineCount')
					+ coalesce(cast(InstallationServices as nvarchar(30)), 'ProducedGoods')
					+ coalesce(cast(ProducedGoods as nvarchar(30)), 'ProducedGoods')
					+ coalesce(cast(GroupGoods as nvarchar(30)), 'GroupGoods')
					+ coalesce(cast(CommercialGoods as nvarchar(30)), 'CommercialGoods')
					+ coalesce(cast(ExternalSales as nvarchar(30)), 'ExternalSales')
					+ coalesce(cast(IC_Transf_SBU as nvarchar(30)), 'IC_Transf_SBU')
					+ coalesce(cast(IC_Transf_Region as nvarchar(30)), 'IC_Transf_Region')
					+ coalesce(cast(IC_Transf_Abroad as nvarchar(30)), 'IC_Transf_Abroad')
					+ coalesce(cast(IC_Transf_US as nvarchar(30)), 'IC_Transf_US')
					+ coalesce(cast(Total_IC_Sales as nvarchar(30)), 'Total_IC_Sales')
					+ coalesce(cast(TotalSalesAndTransfers as nvarchar(30)), 'TotalSalesAndTransfers')), 2) as [EtlDeltaHash]
				---------------------------------------------------------------------------------------------------
			from
				aggregateCte
		)
		merge into qvstg.BudgetSales as tgt
		using sourceCte as src
			on src.BusinessUnitKey = tgt.BusinessUnitKey
			and src.DateKey = tgt.BudgetMonthDateKey
		when not matched by target
			then insert
			(  
			  EtlDeltaHash
			, EtlCreatedOn
			, EtlCreatedBy
			, EtlUpdatedOn
			, EtlUpdatedBy
			, EtlDeletedOn
			, EtlDeletedBy
			, IsDeleted
			, LineCount
			, BusinessUnitKey
			, BudgetMonthDateKey
			, InstallationServices
			, ProducedGoods
			, GroupGoods
			, CommercialGoods
			, ExternalSales
			, IC_Transf_SBU
			, IC_Transf_Region
			, IC_Transf_Abroad
			, IC_Transf_US
			, Total_IC_Sales
			, TotalSalesAndTransfers
			)
			values
			(  
			  src.EtlDeltaHash
			, @LoadStart
			, @_FunctionName
			, @LoadStart
			, @_FunctionName
			, null -- EtlDeletedOn
			, null -- EtlDeletedBy
			, 'N' -- IsDeleted
			, src.LineCount
			, src.BusinessUnitKey
			, src.DateKey
			, src.InstallationServices
			, src.ProducedGoods
			, src.GroupGoods
			, src.CommercialGoods
			, src.ExternalSales
			, src.IC_Transf_SBU
			, src.IC_Transf_Region
			, src.IC_Transf_Abroad
			, src.IC_Transf_US
			, src.Total_IC_Sales
			, src.TotalSalesAndTransfers
			)
		when matched and tgt.EtlDeltaHash <> src.EtlDeltaHash
			then update set
					  tgt.EtlDeltaHash = src.EtlDeltaHash
					, tgt.EtlUpdatedOn = @LoadStart
					, tgt.EtlUpdatedBy = @_FunctionName
					, tgt.IsDeleted = 'N'
					, tgt.LineCount = src.LineCount
					, tgt.InstallationServices = src.InstallationServices
					, tgt.ProducedGoods = src.ProducedGoods
					, tgt.GroupGoods = src.GroupGoods
					, tgt.CommercialGoods = src.CommercialGoods
					, tgt.ExternalSales = src.ExternalSales
					, tgt.IC_Transf_SBU = src.IC_Transf_SBU
					, tgt.IC_Transf_Region = src.IC_Transf_Region
					, tgt.IC_Transf_Abroad = src.IC_Transf_Abroad
					, tgt.IC_Transf_US = src.IC_Transf_US
					, tgt.Total_IC_Sales = src.Total_IC_Sales
					, tgt.TotalSalesAndTransfers = src.TotalSalesAndTransfers
		when not matched by source
			then update set
					  tgt.IsDeleted = 'Y'
					, tgt.EtlDeletedOn = @LoadStart
					, tgt.EtlDeletedBy = @_FunctionName
					, tgt.EtlUpdatedOn = @LoadStart
					, tgt.EtlUpdatedBy = @_FunctionName
		;

		set @RowsAffected = @@rowcount;

		--!
		--! Only commit transactions started within this procedure
		--!
		if @_TxnIsExternal = 0 and (xact_state() = 1 or @@trancount > 0) commit tran ;
	end try
	begin catch
		set @_ErrorContext = 'Failed to refresh product dimension at step '
			+ coalesce('[' + @_Step + ']', 'NULL');

		--! If we have an uncommittable external transaction (see BOL), or a deadlock
		--! we can't do anything else until we roll that back. Alternatively, if we
		--! started the transaction we should roll it back otherwise or let the caller
		--! handle its own external txn 
		if (xact_state() = -1) or (xact_state() = 1 and error_number() = 1205) or (xact_state() = 1 and @_TxnIsExternal = 0)
			begin
				rollback tran;
				set @_ErrorContext = @_ErrorContext + ' (Forced roll back all changes)';
			end
		
		exec log4.ExceptionHandler
				  @ErrorContext   = @_ErrorContext
				, @ErrorProcedure = @_FunctionName
				, @ErrorNumber    = @_Error out
				, @ReturnMessage  = @_Message out;
	end catch

--/////////////////////////////////////////////////////////////////////////////////////////////////
EndProc:
--/////////////////////////////////////////////////////////////////////////////////////////////////

	--! Finally, throw an exception that will be detected by the caller
	if @_Error > 0 raiserror(@_Message, 16, 99);

	set nocount off;

	--! Return the value of @@ERROR (which will be zero on success)
	return (@_Error);
end
GO
PRINT N'Creating [etl].[SSIS_BUDGET_2017_ValidateVolumes]...';


GO
create procedure [etl].[SSIS_BUDGET_2017_ValidateVolumes]
(
  @ShowResults bit = 0
)
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
PROCEDURE NAME:		etl.SSIS_BUDGET_2017_ValidateVolumes
DESCRIPTION:		Includes all validation checks for Budget Volumes by Product Category Group (will throw an exception on any failure)
ORIGIN DATE:		21-JUN-2017
ORIGINAL AUTHOR:	Greg M. Lucas

Returns
=======
@@Error - always zero on success

Additional Notes
================

REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		21-JUN-2017		GML		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------

**********************************************************************************************************************/
--</CommentHeader>

begin
	set nocount on;

	--! Standard/ExceptionHandler variables
	declare	@_FunctionName nvarchar(255) = quotename(object_schema_name(@@procid)) + '.' + quotename(object_name(@@procid));
	declare	@_RowCount int = 0;
	declare	@_Error int = 0;
	declare @_ReturnValue int
	declare	@_Message nvarchar(512);
	declare	@_ErrorContext nvarchar(512);
	declare	@_Step varchar(128);
	declare	@_Now datetime = getdate();

	begin try
		set @_Step = 'Check that Volumes by Product Category Group are correct'

		;with volsToCheckCte
		as
		(
			select
				  r.RegionLookup as [RegionName]
				, pcg.ProductCategoryGroupName as [ProductGroup]
				-------------------------------------------------------------------------------
				, sum(coalesce(v.Jan_YTD, 0))
					+ sum(coalesce(v.Feb_YTD, 0))
					+ sum(coalesce(v.Mar_YTD, 0))
					+ sum(coalesce(v.Apr_YTD, 0))
					+ sum(coalesce(v.May_YTD, 0))
					+ sum(coalesce(v.Jun_YTD, 0))
					+ sum(coalesce(v.Jul_YTD, 0))
					+ sum(coalesce(v.Aug_YTD, 0))
					+ sum(coalesce(v.Sep_YTD, 0))
					+ sum(coalesce(v.Oct_YTD, 0))
					+ sum(coalesce(v.Nov_YTD, 0))
					+ sum(coalesce(v.Dec_YTD, 0)) as [TotalSum]
				-------------------------------------------------------------------------------
				, sum(coalesce(v.Jan_YTD, 0.0)) as [Jan_YTD]
				, sum(coalesce(v.Feb_YTD, 0.0)) as [Feb_YTD]
				, sum(coalesce(v.Mar_YTD, 0.0)) as [Mar_YTD]
				, sum(coalesce(v.Apr_YTD, 0.0)) as [Apr_YTD]
				, sum(coalesce(v.May_YTD, 0.0)) as [May_YTD]
				, sum(coalesce(v.Jun_YTD, 0.0)) as [Jun_YTD]
				, sum(coalesce(v.Jul_YTD, 0.0)) as [Jul_YTD]
				, sum(coalesce(v.Aug_YTD, 0.0)) as [Aug_YTD]
				, sum(coalesce(v.Sep_YTD, 0.0)) as [Sep_YTD]
				, sum(coalesce(v.Oct_YTD, 0.0)) as [Oct_YTD]
				, sum(coalesce(v.Nov_YTD, 0.0)) as [Nov_YTD]
				, sum(coalesce(v.Dec_YTD, 0.0)) as [Dec_YTD]
			from
				stg.SSIS_STG_BUDGET_2017_Volume as v
			inner join stg.SSIS_BUDGET_BusinessUnitLookup as bu
				on bu.BusinessUnitLookup = v.NativeBusinessUnit
			inner join stg.SSIS_BUDGET_RegionLookup as r
				on r.RegionCode = bu.RegionCode
			inner join stg.SSIS_BUDGET_ProductCategoryLookup as pc
				on pc.ProductCategoryName = v.NativeProductCategory
			inner join stg.SSIS_BUDGET_ProductCategoryGroupLookup as pcg
				on pcg.ProductCategoryGroupId = pc.ProductCategoryGroupId
			group by
				  r.RegionLookup
				, pcg.ProductCategoryGroupName
		)
		, resultCte
		as
		(
			select
				  ctrl.RegionName
				, ctrl.ProductGroup
				-------------------------------------------------------------------------------
				, coalesce(ctrl.Jan_YTD, 0)
					+ coalesce(ctrl.Feb_YTD, 0)
					+ coalesce(ctrl.Mar_YTD, 0)
					+ coalesce(ctrl.Apr_YTD, 0)
					+ coalesce(ctrl.May_YTD, 0)
					+ coalesce(ctrl.Jun_YTD, 0)
					+ coalesce(ctrl.Jul_YTD, 0)
					+ coalesce(ctrl.Aug_YTD, 0)
					+ coalesce(ctrl.Sep_YTD, 0)
					+ coalesce(ctrl.Oct_YTD, 0)
					+ coalesce(ctrl.Nov_YTD, 0)
					+ coalesce(ctrl.Dec_YTD, 0) as [CheckTotalSum]
				-------------------------------------------------------------------------------
				, v.TotalSum as [VolumeTotalSum]
				, ctrl.Jan_YTD as [Check_Jan]
				, v.Jan_YTD as [Volume_Jan]
				, ctrl.Feb_YTD as [Check_Feb]
				, v.Feb_YTD as [Volume_Feb]
				, ctrl.Mar_YTD as [Check_Mar]
				, v.Mar_YTD as [Volume_Mar]
				, ctrl.Apr_YTD as [Check_Apr]
				, v.Apr_YTD as [Volume_Apr]
				, ctrl.May_YTD as [Check_May]
				, v.May_YTD as [Volume_May]
				, ctrl.Jun_YTD as [Check_Jun]
				, v.Jun_YTD as [Volume_Jun]
				, ctrl.Jul_YTD as [Check_Jul]
				, v.Jul_YTD as [Volume_Jul]
				, ctrl.Aug_YTD as [Check_Aug]
				, v.Aug_YTD as [Volume_Aug]
				, ctrl.Sep_YTD as [Check_Sep]
				, v.Sep_YTD as [Volume_Sep]
				, ctrl.Oct_YTD as [Check_Oct]
				, v.Oct_YTD as [Volume_Oct]
				, ctrl.Nov_YTD as [Check_Nov]
				, v.Nov_YTD as [Volume_Nov]
				, ctrl.Dec_YTD as [Check_Dec]
				, v.Dec_YTD as [Volume_Dec]
			from
				stg.SSIS_STG_BUDGET_2017_VolumeCheck as ctrl
			full outer join volsToCheckCte as v
				on v.RegionName = ctrl.RegionName
				and v.ProductGroup = ctrl.ProductGroup
			where
					ctrl.RegionName not in ('ELIM Icopal/GAF Europe division', 'Icopal/GAF Europe division')
				and ctrl.ProductGroup not in ('Products Total', 'Total')
		)
		select
			RegionName
		  , ProductGroup
		  , round(CheckTotalSum * 1000, 2) as [CheckTotalSum]
		  , round(VolumeTotalSum * 1000, 2) as [VolumeTotalSum]
		  , Check_Jan
		  , Volume_Jan
		  , Check_Feb
		  , Volume_Feb
		  , Check_Mar
		  , Volume_Mar
		  , Check_Apr
		  , Volume_Apr
		  , Check_May
		  , Volume_May
		  , Check_Jun
		  , Volume_Jun
		  , Check_Jul
		  , Volume_Jul
		  , Check_Aug
		  , Volume_Aug
		  , Check_Sep
		  , Volume_Sep
		  , Check_Oct
		  , Volume_Oct
		  , Check_Nov
		  , Volume_Nov
		  , Check_Dec
		  , Volume_Dec
		into #tmp
		from
			resultCte
		where
			round(coalesce(CheckTotalSum * 1000, -9999.9999), 2) <> round(coalesce(VolumeTotalSum * 1000, -9999.9999), 2) -- 24

		set @_RowCount = @@rowcount ;

		if @ShowResults = 1
			select * from #tmp order by 1, 2;

		if @_RowCount > 0
			raiserror('Found %i records with total volumes value mismatch', 16, 0, @_RowCount) ;
	end try
	begin catch
		set @_ErrorContext = 'Failed to validate Volumes by Product Category Group'
			+ coalesce('[' + @_Step + ']', 'NULL');

		--! If we have an uncommittable external transaction (see BOL), or a deadlock
		--! we can't do anything else until we roll that back. Alternatively, if we
		--! started the transaction we should roll it back
		if (xact_state() = -1) or (xact_state() = 1 and error_number() = 1205)
			begin
				rollback tran;
				set @_ErrorContext = @_ErrorContext + ' (Forced roll back all changes)';
			end
		
		exec log4.ExceptionHandler
				  @ErrorContext   = @_ErrorContext
				, @ErrorProcedure = @_FunctionName
				, @ErrorNumber    = @_Error out
				, @ReturnMessage  = @_Message out;
	end catch

--/////////////////////////////////////////////////////////////////////////////////////////////////
EndProc:
--/////////////////////////////////////////////////////////////////////////////////////////////////

	--! Finally, throw an exception that will be detected by the caller
	if @_Error > 0 raiserror(@_Message, 16, 99);

	set nocount off;

	--! Return the value of @@ERROR (which will be zero on success)
	return (@_Error);
end
GO
PRINT N'Creating [etl].[SSIS_BUDGET_2017_StageVolumes]...';


GO
create procedure [etl].[SSIS_BUDGET_2017_StageVolumes]
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
PROCEDURE NAME:		etl.SSIS_BUDGET_2017_StageVolumes
DESCRIPTION:		Transforms raw, landed volumes data to interim staging table ready for further processing and validation
ORIGIN DATE:		21-JUN-2017
ORIGINAL AUTHOR:	Greg M. Lucas

Returns
=======
@@Error - always zero on success

Additional Notes
================

REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		21-JUN-2017		GML		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------

**********************************************************************************************************************/
--</CommentHeader>

begin
	set nocount on;

	--! Standard/ExceptionHandler variables
	declare	@_FunctionName nvarchar(255) = quotename(object_schema_name(@@procid)) + '.' + quotename(object_name(@@procid));
	declare	@_Error int = 0;
	declare @_ReturnValue int
	declare	@_Message nvarchar(512);
	declare	@_ErrorContext nvarchar(512);
	declare	@_Step varchar(128);
	declare	@_Now datetime = getdate();

	--! Find out if we are already in a transaction
	declare	@_TxnIsExternal bit = case when @@trancount > 0 then 1 else 0 end;

	begin try
		--! If there no outer transaction, use an explicit transaction so we can roll this piece back if required 
		if @_TxnIsExternal = 0 begin tran;

		set @_Step = 'Clear Down SSIS_STG_BUDGET_2017_Volume'

		truncate table stg.SSIS_STG_BUDGET_2017_Volume;

		set @_Step = 'Clear Down SSIS_STG_BUDGET_2017_VolumeCheck'

		truncate table stg.SSIS_STG_BUDGET_2017_VolumeCheck;

		--!
		--!
		--!
		set @_Step = 'Populate SSIS_STG_BUDGET_2017_Volume'

		insert stg.SSIS_STG_BUDGET_2017_Volume
		(
		  NativeBusinessUnit
		, NativeProductCategory
		, BusinessUnitKey
		, ProductCategoryKey
		, Jan_YTD
		, Feb_YTD
		, Mar_YTD
		, Apr_YTD
		, May_YTD
		, Jun_YTD
		, Jul_YTD
		, Aug_YTD
		, Sep_YTD
		, Oct_YTD
		, Nov_YTD
		, Dec_YTD
		)
		select
			  src.BusinessUnit as [NativeBusinessUnit]
			, src.ProductGroup as [NativeProductCategory]
			-------------------------------------------------------------------------------
			, case
				when coalesce(src.BusinessUnit, '') = '' then -1 -- Not Specified at Source
				else coalesce(bu.BusinessUnitKey, -2) -- Lookup Not Found
			  end as [BusinessUnitKey]
			-------------------------------------------------------------------------------
			, case
				when coalesce(src.ProductGroup, '') = '' then -1 -- Not Specified at Source
				else coalesce(pc.ProductCategoryKey, -2) -- Lookup Not Found
			  end as [ProductCategoryKey]
			-------------------------------------------------------------------------------
			, try_cast(replace(src.Jan_YTD, ',', '') as decimal(38,16)) as [Jan_YTD]
			, try_cast(replace(src.Feb_YTD, ',', '') as decimal(38,16)) as [Feb_YTD]
			, try_cast(replace(src.Mar_YTD, ',', '') as decimal(38,16)) as [Mar_YTD]
			, try_cast(replace(src.Apr_YTD, ',', '') as decimal(38,16)) as [Apr_YTD]
			, try_cast(replace(src.May_YTD, ',', '') as decimal(38,16)) as [May_YTD]
			, try_cast(replace(src.Jun_YTD, ',', '') as decimal(38,16)) as [Jun_YTD]
			, try_cast(replace(src.Jul_YTD, ',', '') as decimal(38,16)) as [Jul_YTD]
			, try_cast(replace(src.Aug_YTD, ',', '') as decimal(38,16)) as [Aug_YTD]
			, try_cast(replace(src.Sep_YTD, ',', '') as decimal(38,16)) as [Sep_YTD]
			, try_cast(replace(src.Oct_YTD, ',', '') as decimal(38,16)) as [Oct_YTD]
			, try_cast(replace(src.Nov_YTD, ',', '') as decimal(38,16)) as [Nov_YTD]
			, try_cast(replace(src.Dec_YTD, ',', '') as decimal(38,16)) as [Dec_YTD]
		from
			stg.SSIS_LAND_BUDGET_2017_Volume as src
		inner join stg.SSIS_BUDGET_BusinessUnitLookup as lubu
			on lubu.BusinessUnitLookup = src.BusinessUnit
		inner join stg.SSIS_BUDGET_ProductCategoryLookup as lupc
			on lupc.ProductCategoryName = src.ProductGroup
		left join qvstg.BusinessUnit as bu
			on bu.NativeBusinessUnitKey = lubu.SBU
		left join qvstg.ProductCategory as pc
			on pc.NativeProductCategoryKey = cast(coalesce(lupc.QlikViewCategoryLevel4Id, lupc.QlikViewCategoryLevel3Id) as nvarchar(50))
		;

		--!
		--!
		--!
		set @_Step = 'Populate SSIS_STG_BUDGET_2017_VolumeCheck'

		insert stg.SSIS_STG_BUDGET_2017_VolumeCheck
		(
		  RegionName
		, ProductGroup
		, Jan_YTD
		, Feb_YTD
		, Mar_YTD
		, Apr_YTD
		, May_YTD
		, Jun_YTD
		, Jul_YTD
		, Aug_YTD
		, Sep_YTD
		, Oct_YTD
		, Nov_YTD
		, Dec_YTD
		)
		select
			  src.BusinessUnit as [RegionName]
			, src.ProductGroup as [ProductGroup]
			, try_cast(replace(src.Jan_YTD, ',', '') as decimal(38,16)) as [Jan_YTD]
			, try_cast(replace(src.Feb_YTD, ',', '') as decimal(38,16)) as [Feb_YTD]
			, try_cast(replace(src.Mar_YTD, ',', '') as decimal(38,16)) as [Mar_YTD]
			, try_cast(replace(src.Apr_YTD, ',', '') as decimal(38,16)) as [Apr_YTD]
			, try_cast(replace(src.May_YTD, ',', '') as decimal(38,16)) as [May_YTD]
			, try_cast(replace(src.Jun_YTD, ',', '') as decimal(38,16)) as [Jun_YTD]
			, try_cast(replace(src.Jul_YTD, ',', '') as decimal(38,16)) as [Jul_YTD]
			, try_cast(replace(src.Aug_YTD, ',', '') as decimal(38,16)) as [Aug_YTD]
			, try_cast(replace(src.Sep_YTD, ',', '') as decimal(38,16)) as [Sep_YTD]
			, try_cast(replace(src.Oct_YTD, ',', '') as decimal(38,16)) as [Oct_YTD]
			, try_cast(replace(src.Nov_YTD, ',', '') as decimal(38,16)) as [Nov_YTD]
			, try_cast(replace(src.Dec_YTD, ',', '') as decimal(38,16)) as [Dec_YTD]
		from
			stg.SSIS_LAND_BUDGET_2017_Volume as src
		inner join stg.SSIS_BUDGET_ProductCategoryGroupLookup as lupcg
			on lupcg.ProductCategoryGroupName = src.ProductGroup
		inner join stg.SSIS_BUDGET_RegionLookup as lur
			on lur.RegionLookup = src.BusinessUnit
		;

		--!
		--! Only commit transactions started within this procedure
		--!
		if @_TxnIsExternal = 0 and (xact_state() = 1 or @@trancount > 0) commit tran ;
	end try
	begin catch
		set @_ErrorContext = 'Failed to reset Business Unit control at step '
			+ coalesce('[' + @_Step + ']', 'NULL');

		--! If we have an uncommittable external transaction (see BOL), or a deadlock
		--! we can't do anything else until we roll that back. Alternatively, if we
		--! started the transaction we should roll it back otherwise or let the caller
		--! handle its own external txn 
		if (xact_state() = -1) or (xact_state() = 1 and error_number() = 1205) or (xact_state() = 1 and @_TxnIsExternal = 0)
			begin
				rollback tran;
				set @_ErrorContext = @_ErrorContext + ' (Forced roll back all changes)';
			end
		
		exec log4.ExceptionHandler
				  @ErrorContext   = @_ErrorContext
				, @ErrorProcedure = @_FunctionName
				, @ErrorNumber    = @_Error out
				, @ReturnMessage  = @_Message out;
	end catch

--/////////////////////////////////////////////////////////////////////////////////////////////////
EndProc:
--/////////////////////////////////////////////////////////////////////////////////////////////////

	--! Finally, throw an exception that will be detected by the caller
	if @_Error > 0 raiserror(@_Message, 16, 99);

	set nocount off;

	--! Return the value of @@ERROR (which will be zero on success)
	return (@_Error);
end
GO
PRINT N'Creating [etl].[SSIS_BUDGET_2017_ValidateSales]...';


GO
create procedure [etl].[SSIS_BUDGET_2017_ValidateSales]
(
  @ShowResults bit = 0
)
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
PROCEDURE NAME:		etl.SSIS_BUDGET_2017_ValidateSales
DESCRIPTION:		Includes all validation checks for Budget Sales by Region and Month (will throw an exception on any failure)
ORIGIN DATE:		21-JUN-2017
ORIGINAL AUTHOR:	Greg M. Lucas

Returns
=======
@@Error - always zero on success

Additional Notes
================

REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		21-JUN-2017		GML		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------

**********************************************************************************************************************/
--</CommentHeader>

begin
	set nocount on;

	--! Standard/ExceptionHandler variables
	declare	@_FunctionName nvarchar(255) = quotename(object_schema_name(@@procid)) + '.' + quotename(object_name(@@procid));
	declare	@_RowCount int = 0;
	declare	@_Error int = 0;
	declare @_ReturnValue int
	declare	@_Message nvarchar(512);
	declare	@_ErrorContext nvarchar(512);
	declare	@_Step varchar(128);
	declare	@_Now datetime = getdate();

	begin try
		set @_Step = 'Check that Sales by Region and Month are correct'

		;with salesToCheckCte
		as
		(
			select
				  NativeRegionName
				, NativeMonthCode
				-------------------------------------------------------------------------------
				, sum(coalesce(InstallationServices_10000, 0))
					+ sum(coalesce(ProducedGoods_10100, 0))
					+ sum(coalesce(GroupGoods_10200, 0))
					+ sum(coalesce(CommercialGoods_10300, 0))
					+ sum(coalesce(ExternalSales_11890, 0))
					+ sum(coalesce(IC_Transf_SBU_11000, 0))
					+ sum(coalesce(IC_Transf_Region_11100, 0))
					+ sum(coalesce(IC_Transf_Abroad_11200, 0))
					+ sum(coalesce(IC_Transf_US_11300, 0))
					+ sum(coalesce(Total_IC_Sales, 0))
					+ sum(coalesce(TotalSalesAndTransfers_11990, 0)) as [SalesTotal]
				-------------------------------------------------------------------------------
				, sum(coalesce(InstallationServices_10000, 0.0)) as [InstallationServices_10000]
				, sum(coalesce(ProducedGoods_10100, 0.0)) as [ProducedGoods_10100]
				, sum(coalesce(GroupGoods_10200, 0.0)) as [GroupGoods_10200]
				, sum(coalesce(CommercialGoods_10300, 0.0)) as [CommercialGoods_10300]
				, sum(coalesce(ExternalSales_11890, 0.0)) as [ExternalSales_11890]
				, sum(coalesce(IC_Transf_SBU_11000, 0.0)) as [IC_Transf_SBU_11000]
				, sum(coalesce(IC_Transf_Region_11100, 0.0)) as [IC_Transf_Region_11100]
				, sum(coalesce(IC_Transf_Abroad_11200, 0.0)) as [IC_Transf_Abroad_11200]
				, sum(coalesce(IC_Transf_US_11300, 0.0)) as [IC_Transf_US_11300]
				, sum(coalesce(Total_IC_Sales, 0.0)) as [Total_IC_Sales]
				, sum(coalesce(TotalSalesAndTransfers_11990, 0.0)) as [TotalSalesAndTransfers_11990]
			from
				stg.SSIS_STG_BUDGET_2017_Sales
			group by
				  NativeRegionName
				, NativeMonthCode
		)
		, resultCte as
		(
			select
				  ctrl.RegionName
				, ctrl.MonthCode
				-------------------------------------------------------------------------------
				, coalesce(ctrl.InstallationServices_10000, 0)
					+ coalesce(ctrl.ProducedGoods_10100, 0)
					+ coalesce(ctrl.GroupGoods_10200, 0)
					+ coalesce(ctrl.CommercialGoods_10300, 0)
					+ coalesce(ctrl.ExternalSales_11890, 0)
					+ coalesce(ctrl.IC_Transf_SBU_11000, 0)
					+ coalesce(ctrl.IC_Transf_Region_11100, 0)
					+ coalesce(ctrl.IC_Transf_Abroad_11200, 0)
					+ coalesce(ctrl.IC_Transf_US_11300, 0)
					+ coalesce(ctrl.Total_IC_Sales, 0)
					+ coalesce(ctrl.TotalSalesAndTransfers_11990, 0) as [ControlTotal]
				-------------------------------------------------------------------------------
				, s.SalesTotal
				, ctrl.InstallationServices_10000 as [CTRL_InstallationServices]
				, s.InstallationServices_10000 as [SALES_InstallationServices]
				, ctrl.ProducedGoods_10100 as [CTRL_ProducedGoods]
				, s.ProducedGoods_10100 as [SALES_ProducedGoods]
				, ctrl.GroupGoods_10200 as [CTRL_GroupGoods]
				, s.GroupGoods_10200 as [SALES_GroupGoods]
				, ctrl.CommercialGoods_10300 as [CTRL_CommercialGoods]
				, s.CommercialGoods_10300 as [SALES_CommercialGoods]
				, ctrl.ExternalSales_11890 as [CTRL_ExternalSales]
				, s.ExternalSales_11890 as [SALES_ExternalSales]
				, ctrl.IC_Transf_SBU_11000 as [CTRL_IC_Transf_SBU]
				, s.IC_Transf_SBU_11000 as [SALES_IC_Transf_SBU]
				, ctrl.IC_Transf_Region_11100 as [CTRL_IC_Transf_Region]
				, s.IC_Transf_Region_11100 as [SALES_IC_Transf_Region]
				, ctrl.IC_Transf_Abroad_11200 as [CTRL_IC_Transf_Abroad]
				, s.IC_Transf_Abroad_11200 as [SALES_IC_Transf_Abroad]
				, ctrl.IC_Transf_US_11300 as [CTRL_IC_Transf_US]
				, s.IC_Transf_US_11300 as [SALES_IC_Transf_US]
				, ctrl.Total_IC_Sales as [CTRL_Total_IC_Sales]
				, s.Total_IC_Sales as [SALES_Total_IC_Sales]
				, ctrl.TotalSalesAndTransfers_11990 as [CTRL_TotalSalesAndTransfers]
				, s.TotalSalesAndTransfers_11990 as [SALES_TotalSalesAndTransfers]
			from
				stg.SSIS_STG_BUDGET_2017_SalesCheck as ctrl
			full outer join salesToCheckCte as s
				on s.NativeRegionName = ctrl.RegionName
				and s.NativeMonthCode = ctrl.MonthCode
			where
				ctrl.RegionName not in ('ELIM Icopal/GAF Europe division', 'Icopal/GAF Europe division')
		)
		select
			  RegionName
			, MonthCode
			, round(ControlTotal * 1000, 4) as [ControlTotal]
			, round(SalesTotal * 1000, 4) as [SalesTotal]
			, CTRL_InstallationServices
			, SALES_InstallationServices
			, CTRL_ProducedGoods
			, SALES_ProducedGoods
			, CTRL_GroupGoods
			, SALES_GroupGoods
			, CTRL_CommercialGoods
			, SALES_CommercialGoods
			, CTRL_ExternalSales
			, SALES_ExternalSales
			, CTRL_IC_Transf_SBU
			, SALES_IC_Transf_SBU
			, CTRL_IC_Transf_Region
			, SALES_IC_Transf_Region
			, CTRL_IC_Transf_Abroad
			, SALES_IC_Transf_Abroad
			, CTRL_IC_Transf_US
			, SALES_IC_Transf_US
			, CTRL_Total_IC_Sales
			, SALES_Total_IC_Sales
			, CTRL_TotalSalesAndTransfers
			, SALES_TotalSalesAndTransfers
		into #tmp
		from
			resultCte
		where
			round(coalesce(ControlTotal * 1000, -9999.9999), 4) <> round(coalesce(SalesTotal * 1000, -9999.9999), 4) -- 0

		set @_RowCount = @@rowcount ;

		if @ShowResults = 1
			select * from #tmp ;

		if @_RowCount > 0
			raiserror('Found %i records with total sales value mismatch', 16, 0, @_RowCount) ;
	end try
	begin catch
		set @_ErrorContext = 'Failed to validate Sales by Region and Month'
			+ coalesce('[' + @_Step + ']', 'NULL');

		--! If we have an uncommittable external transaction (see BOL), or a deadlock
		--! we can't do anything else until we roll that back. Alternatively, if we
		--! started the transaction we should roll it back
		if (xact_state() = -1) or (xact_state() = 1 and error_number() = 1205)
			begin
				rollback tran;
				set @_ErrorContext = @_ErrorContext + ' (Forced roll back all changes)';
			end
		
		exec log4.ExceptionHandler
				  @ErrorContext   = @_ErrorContext
				, @ErrorProcedure = @_FunctionName
				, @ErrorNumber    = @_Error out
				, @ReturnMessage  = @_Message out;
	end catch

--/////////////////////////////////////////////////////////////////////////////////////////////////
EndProc:
--/////////////////////////////////////////////////////////////////////////////////////////////////

	--! Finally, throw an exception that will be detected by the caller
	if @_Error > 0 raiserror(@_Message, 16, 99);

	set nocount off;

	--! Return the value of @@ERROR (which will be zero on success)
	return (@_Error);
end
GO
PRINT N'Creating [etl].[SSIS_BUDGET_2017_StageSales]...';


GO
create procedure [etl].[SSIS_BUDGET_2017_StageSales]
(
  @BudgetYear char(4) = '2017'
)
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
PROCEDURE NAME:		etl.SSIS_BUDGET_2017_StageSales
DESCRIPTION:		Transforms raw, landed sales data to interim staging table ready for further processing and validation
ORIGIN DATE:		21-JUN-2017
ORIGINAL AUTHOR:	Greg M. Lucas

Returns
=======
@@Error - always zero on success

Additional Notes
================

REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		21-JUN-2017		GML		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------

**********************************************************************************************************************/
--</CommentHeader>

begin
	set nocount on;

	--! Standard/ExceptionHandler variables
	declare	@_FunctionName nvarchar(255) = quotename(object_schema_name(@@procid)) + '.' + quotename(object_name(@@procid));
	declare	@_Error int = 0;
	declare @_ReturnValue int
	declare	@_Message nvarchar(512);
	declare	@_ErrorContext nvarchar(512);
	declare	@_Step varchar(128);
	declare	@_Now datetime = getdate();

	--! Find out if we are already in a transaction
	declare	@_TxnIsExternal bit = case when @@trancount > 0 then 1 else 0 end;

	begin try
		--! If there no outer transaction, use an explicit transaction so we can roll this piece back if required 
		if @_TxnIsExternal = 0 begin tran;

		set @_Step = 'Clear Down SSIS_STG_BUDGET_2017_Sales'

		truncate table stg.SSIS_STG_BUDGET_2017_Sales;

		set @_Step = 'Clear Down SSIS_STG_BUDGET_2017_SalesCheck'

		truncate table stg.SSIS_STG_BUDGET_2017_SalesCheck;

		--!
		--!
		--!
		set @_Step = 'Populate SSIS_STG_BUDGET_2017_Sales'

		; with dateKeyCte
		as
		(
			select
				  min(DateKey) as [DateKey]
				, FiscalPeriodCode
			from
				dbo.dimDate
			where
				cast(FiscalYear as char(4)) = @BudgetYear
			group by
				FiscalPeriodCode
		)
		insert stg.SSIS_STG_BUDGET_2017_Sales
		(   
		  NativeBusinessUnit
		, NativeMonthCode
		, NativeRegionName
		, BusinessUnitKey
		, DateKey
		, InstallationServices_10000
		, ProducedGoods_10100
		, GroupGoods_10200
		, CommercialGoods_10300
		, ExternalSales_11890
		, IC_Transf_SBU_11000
		, IC_Transf_Region_11100
		, IC_Transf_Abroad_11200
		, IC_Transf_US_11300
		, Total_IC_Sales
		, TotalSalesAndTransfers_11990
		)
		select
			  src.RowHeader as [NativeBusinessUnit]
			, src.MonthCode as [NativeMonthCode]
			, r.RegionLookup as [NativeRegionName]
			---------------------------------------------------------------------------------------------------
			, case
				when coalesce(src.RowHeader, '') = '' then -1 -- Not Specified at Source
				else coalesce(bu.BusinessUnitKey, -2) -- Lookup Not Found
			  end as [BusinessUnitKey]
			---------------------------------------------------------------------------------------------------
			, case
				when coalesce(src.MonthCode, '') = '' then -1 -- Not Specified at Source
				else coalesce(dk.DateKey, -8) -- Invalid Source Format
			  end as [DateKey]
			---------------------------------------------------------------------------------------------------
			, try_cast(replace(src.InstallationServices_10000, ',', '') as decimal(38,16)) as [InstallationServices_10000]
			, try_cast(replace(src.ProducedGoods_10100, ',', '') as decimal(38,16)) as [ProducedGoods_10100]
			, try_cast(replace(src.GroupGoods_10200, ',', '') as decimal(38,16)) as [GroupGoods_10200]
			, try_cast(replace(src.CommercialGoods_10300, ',', '') as decimal(38,16)) as [CommercialGoods_10300]
			, try_cast(replace(src.ExternalSales_11890, ',', '') as decimal(38,16)) as [ExternalSales_11890]
			, try_cast(replace(src.IC_Transf_SBU_11000, ',', '') as decimal(38,16)) as [IC_Transf_SBU_11000]
			, try_cast(replace(src.IC_Transf_Region_11100, ',', '') as decimal(38,16)) as [IC_Transf_Region_11100]
			, try_cast(replace(src.IC_Transf_Abroad_11200, ',', '') as decimal(38,16)) as [IC_Transf_Abroad_11200]
			, try_cast(replace(src.IC_Transf_US_11300, ',', '') as decimal(38,16)) as [IC_Transf_US_11300]
			, try_cast(replace(src.Total_IC_Sales, ',', '') as decimal(38,16)) as [Total_IC_Sales]
			, try_cast(replace(src.TotalSalesAndTransfers_11990, ',', '') as decimal(38,16)) as [TotalSalesAndTransfers_11990]
		from
			stg.SSIS_LAND_BUDGET_2017_Sales as src
		inner join stg.SSIS_BUDGET_BusinessUnitLookup as lubu
			on lubu.BusinessUnitLookup = src.RowHeader
		inner join stg.SSIS_BUDGET_RegionLookup as r
			on r.RegionCode = lubu.RegionCode
		left join dateKeyCte as dk
			on dk.FiscalPeriodCode = src.MonthCode
		left join qvstg.BusinessUnit as bu
			on bu.SalesCenterSbuCode = lubu.SBU
		;

		--!
		--!
		--!
		set @_Step = 'Populate SSIS_STG_BUDGET_2017_SalesCheck'

		insert stg.SSIS_STG_BUDGET_2017_SalesCheck
		(   
		  RegionName
		, MonthCode
		, InstallationServices_10000
		, ProducedGoods_10100
		, GroupGoods_10200
		, CommercialGoods_10300
		, ExternalSales_11890
		, IC_Transf_SBU_11000
		, IC_Transf_Region_11100
		, IC_Transf_Abroad_11200
		, IC_Transf_US_11300
		, Total_IC_Sales
		, TotalSalesAndTransfers_11990
		)
		select
			  src.RowHeader as [RegionName]
			, src.MonthCode as [MonthCode]
			---------------------------------------------------------------------------------------------------
			, try_cast(replace(src.InstallationServices_10000, ',', '') as decimal(38,16)) as [InstallationServices_10000]
			, try_cast(replace(src.ProducedGoods_10100, ',', '') as decimal(38,16)) as [ProducedGoods_10100]
			, try_cast(replace(src.GroupGoods_10200, ',', '') as decimal(38,16)) as [GroupGoods_10200]
			, try_cast(replace(src.CommercialGoods_10300, ',', '') as decimal(38,16)) as [CommercialGoods_10300]
			, try_cast(replace(src.ExternalSales_11890, ',', '') as decimal(38,16)) as [ExternalSales_11890]
			, try_cast(replace(src.IC_Transf_SBU_11000, ',', '') as decimal(38,16)) as [IC_Transf_SBU_11000]
			, try_cast(replace(src.IC_Transf_Region_11100, ',', '') as decimal(38,16)) as [IC_Transf_Region_11100]
			, try_cast(replace(src.IC_Transf_Abroad_11200, ',', '') as decimal(38,16)) as [IC_Transf_Abroad_11200]
			, try_cast(replace(src.IC_Transf_US_11300, ',', '') as decimal(38,16)) as [IC_Transf_US_11300]
			, try_cast(replace(src.Total_IC_Sales, ',', '') as decimal(38,16)) as [Total_IC_Sales]
			, try_cast(replace(src.TotalSalesAndTransfers_11990, ',', '') as decimal(38,16)) as [TotalSalesAndTransfers_11990]
		from
			stg.SSIS_LAND_BUDGET_2017_Sales as src
		inner join stg.SSIS_BUDGET_RegionLookup as lur
			on lur.RegionLookup = src.RowHeader
		;

		--!
		--! Only commit transactions started within this procedure
		--!
		if @_TxnIsExternal = 0 and (xact_state() = 1 or @@trancount > 0) commit tran ;
	end try
	begin catch
		set @_ErrorContext = 'Failed to reset Business Unit control at step '
			+ coalesce('[' + @_Step + ']', 'NULL');

		--! If we have an uncommittable external transaction (see BOL), or a deadlock
		--! we can't do anything else until we roll that back. Alternatively, if we
		--! started the transaction we should roll it back otherwise or let the caller
		--! handle its own external txn 
		if (xact_state() = -1) or (xact_state() = 1 and error_number() = 1205) or (xact_state() = 1 and @_TxnIsExternal = 0)
			begin
				rollback tran;
				set @_ErrorContext = @_ErrorContext + ' (Forced roll back all changes)';
			end
		
		exec log4.ExceptionHandler
				  @ErrorContext   = @_ErrorContext
				, @ErrorProcedure = @_FunctionName
				, @ErrorNumber    = @_Error out
				, @ReturnMessage  = @_Message out;
	end catch

--/////////////////////////////////////////////////////////////////////////////////////////////////
EndProc:
--/////////////////////////////////////////////////////////////////////////////////////////////////

	--! Finally, throw an exception that will be detected by the caller
	if @_Error > 0 raiserror(@_Message, 16, 99);

	set nocount off;

	--! Return the value of @@ERROR (which will be zero on success)
	return (@_Error);
end
GO
PRINT N'Creating [log4].[JournalWriter]...';


GO

/*************************************************************************************************/
--</MaintenanceHeader>

CREATE PROCEDURE [log4].[JournalWriter]
(
  @FunctionName			varchar(256)
, @MessageText			varchar(512)
, @ExtraInfo			varchar(max)	= NULL
, @DatabaseName			nvarchar(128)	= NULL
, @Task					nvarchar(128)	= NULL
, @StepInFunction		varchar(128)	= NULL
, @Severity				smallint		= NULL
, @ExceptionId			int				= NULL
, @JournalId			int				= NULL OUT
)

AS

/**************************************************************************************************

Properties
==========
PROCEDURE NAME:		[log4].[JournalWriter]
DESCRIPTION:		Adds a journal entry summarising task progress, completion or failure msgs etc.
DATE OF ORIGIN:		01-DEC-2006
ORIGINAL AUTHOR:	Greg M. Lucas (data-centric solutions ltd. http://www.data-centric.co.uk)
BUILD DATE:			01-MAR-2015
BUILD VERSION:		0.0.13
DEPENDANTS:			Various
DEPENDENCIES:		[log4Private].[SessionInfoOutput]
					[log4].[ExceptionHandler]

Returns
=======
@@ERROR - always zero on success

Additional Notes
================
Possible options for @Severity

   1 -- Showstopper/Critical Failure
   2 -- Severe Failure
   4 -- Major Failure
   8 -- Moderate Failure
  16 -- Minor Failure
  32 -- Concurrency Violation
  64 -- Reserved for future Use
 128 -- Reserved for future Use
 256 -- Informational
 512 -- Success
1024 -- Debug
2048 -- Reserved for future Use
4096 -- Reserved for future Use



Revision history
==================================================================================================
ChangeDate		Author	Version		Narrative
============	======	=======		==============================================================
01-DEC-2006		GML		v0.0.1		Created
------------	------	-------		--------------------------------------------------------------
15-APR-2008		GML		v0.0.3		Now utilises [log4Private].[SessionInfoOutput] sproc for session values
------------	------	-------		--------------------------------------------------------------
03-MAY-2011		GML		v0.0.4		Added support for JournalDetail table
------------	------	-------		--------------------------------------------------------------
28-AUG-2011		GML		v0.0.6		Added support for ExceptionId and Task columns
------------	------	-------		--------------------------------------------------------------

=================================================================================================
(C) Copyright 2006-14 data-centric solutions ltd. (http://log4tsql.sourceforge.net/)

This library is free software; you can redistribute it and/or modify it under the terms of the
GNU Lesser General Public License as published by the Free Software Foundation (www.fsf.org);
either version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along with this
library; if not, you can find it at http://www.opensource.org/licenses/lgpl-3.0.html
or http://www.gnu.org/licenses/lgpl.html

**************************************************************************************************/

BEGIN
	SET NOCOUNT ON

	DECLARE @Error int; SET @Error = 0;

	--!
	--! Define input defaults
	--!
	SET @DatabaseName	= COALESCE(@DatabaseName, DB_NAME())
	SET @FunctionName	= COALESCE(@FunctionName, '')
	SET @StepInFunction	= COALESCE(@StepInFunction, '')
	SET @MessageText	= COALESCE(@MessageText, '')
	SET @ExtraInfo		= COALESCE(@ExtraInfo, '')
	SET @Task			= COALESCE(@Task, '')

	--! Make sure the supplied severity fits our bitmask model
	IF ISNULL(@Severity, 0) NOT IN (1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096)
		BEGIN
			SET @ExtraInfo  = COALESCE(NULLIF(@ExtraInfo, '') + CHAR(13), '')
							+ '(Severity value: ' + COALESCE(CAST(@Severity AS varchar(4)), 'NULL') + ' is invalid so using 256)'
			SET @Severity   = 256 -- Informational
		END

	--!
	--! Session variables (keep it SQL2005 compatible)
	--!
	DECLARE @SessionId	int				; SET @SessionId	= @@SPID;
	DECLARE @ServerName	nvarchar(128)	; SET @ServerName	= @@SERVERNAME;

	--!
	--! log4.SessionInfoOutput variables
	--!
	DECLARE   @HostName				nvarchar(128)
			, @ProgramName			nvarchar(128)
			, @NTDomain				nvarchar(128)
			, @NTUsername			nvarchar(128)
			, @LoginName			nvarchar(128)
			, @OriginalLoginName	nvarchar(128)
			, @SessionLoginTime		datetime


	--!
	--! Get the details for the current session
	--!
	EXEC log4Private.SessionInfoOutput
			  @SessionId			= @SessionId
			, @HostName				= @HostName				OUT
			, @ProgramName			= @ProgramName			OUT
			, @NTDomain				= @NTDomain				OUT
			, @NTUsername			= @NTUsername			OUT
			, @LoginName			= @LoginName			OUT
			, @OriginalLoginName	= @OriginalLoginName	OUT
			, @SessionLoginTime		= @SessionLoginTime		OUT

	--! Working variables
	DECLARE @tblJournalId table	(JournalId int NOT NULL UNIQUE);

	BEGIN TRY
		INSERT [log4Private].[Journal]
		(
		  [Task]
		, [FunctionName]
		, [StepInFunction]
		, [MessageText]
		, [SeverityId]
		, [ExceptionId]
		------------------------
		, [SessionId]
		, [ServerName]
		, [DatabaseName]
		, [HostName]
		, [ProgramName]
		, [NTDomain]
		, [NTUsername]
		, [LoginName]
		, [OriginalLoginName]
		, [SessionLoginTime]
		)
	OUTPUT inserted.JournalId INTO @tblJournalId
	VALUES
		(
		  @Task
		, @FunctionName
		, @StepInFunction
		, @MessageText
		, @Severity
		, @ExceptionId
		------------------------
		, @SessionId
		, @ServerName
		, @DatabaseName
		, @HostName
		, @ProgramName
		, @NTDomain
		, @NTUsername
		, @LoginName
		, @OriginalLoginName
		, @SessionLoginTime
		)

		SELECT @JournalId = JournalId FROM @tblJournalId;

		INSERT [log4Private].[JournalDetail]
		(
		  JournalId
		, ExtraInfo
		)
		VALUES
		(
		  @JournalId
		, @ExtraInfo
		)

	END TRY
	BEGIN CATCH
		--!
		--! If we have an uncommitable transaction (XACT_STATE() = -1), if we hit a deadlock
		--! or if @@TRANCOUNT > 0 AND XACT_STATE() != 1, we HAVE to roll back.
		--! Otherwise, leaving it to the calling process
		--!
		IF (@@TRANCOUNT > 0 AND XACT_STATE() != 1) OR (XACT_STATE() = -1) OR (ERROR_NUMBER() = 1205)
			BEGIN
				ROLLBACK TRAN

				SET @MessageText    = 'Failed to write journal entry: '
									+ CASE
										WHEN LEN(@MessageText) > 440
											THEN '"' + SUBSTRING(@MessageText, 1, 440) + '..."'
										ELSE
											COALESCE('"' + @MessageText + '"', 'NULL')
										END
									+ ' (Forced roll back of all changes)'
			END
		ELSE
			BEGIN
				SET @MessageText    = 'Failed to write journal entry: '
									+ CASE
										WHEN LEN(@MessageText) > 475
											THEN '"' + SUBSTRING(@MessageText, 1, 475) + '..."'
										ELSE
											COALESCE('"' + @MessageText + '"', 'NULL')
										END
			END

		--! Record any failure info
		EXEC [log4].[ExceptionHandler]
				  @ErrorContext = @MessageText
				, @ErrorNumber  = @Error OUT
	END CATCH

--/////////////////////////////////////////////////////////////////////////////////////////////////
OnComplete:
--/////////////////////////////////////////////////////////////////////////////////////////////////

	SET NOCOUNT OFF

	RETURN(@Error)

END
GO
PRINT N'Creating [log4Utils].[JournalCleanup]...';


GO

/*************************************************************************************************/
--</MaintenanceHeader>

CREATE PROCEDURE [log4Utils].[JournalCleanup]
(
  @DaysToKeepJournal            int
, @DaysToKeepException			int
)

AS

/**************************************************************************************************

Properties
==========
PROCEDURE NAME:		[log4Utils].[JournalCleanup]
DESCRIPTION:		Deletes all Journal and Exception entries older than the specified days
DATE OF ORIGIN:		16-FEB-2007
ORIGINAL AUTHOR:	Greg M. Lucas (data-centric solutions ltd. http://www.data-centric.co.uk)
BUILD DATE:			01-MAR-2015
BUILD VERSION:		0.0.13
DEPENDANTS:			None
DEPENDENCIES:		None

Inputs
======
@DatabaseName
@FunctionName
@MessageText
@StepInFunction
@ExtraInfo
@Severity

Outputs
=======
None

Returns
=======
@@ERROR - always zero on success

Additional Notes
================

Revision history
==================================================================================================
ChangeDate		Author	Version		Narrative
============	======	=======		==============================================================
16-FEB-2007		GML		v0.0.2		Created
------------	------	-------		--------------------------------------------------------------
29-AUG-2011		GML		v0.0.7		Added support for ExceptionId (now ensures that Exception
									deleted date is greater than Journa delete date)
------------	------	-------		--------------------------------------------------------------



=================================================================================================
(C) Copyright 2006-14 data-centric solutions ltd. (http://log4tsql.sourceforge.net/)

This library is free software; you can redistribute it and/or modify it under the terms of the
GNU Lesser General Public License as published by the Free Software Foundation (www.fsf.org);
either version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along with this
library; if not, you can find it at http://www.opensource.org/licenses/lgpl-3.0.html
or http://www.gnu.org/licenses/lgpl.html

**************************************************************************************************/

BEGIN
	SET NOCOUNT ON

	--! Standard/common variables
	DECLARE	  @_Error					int
			, @_RowCount				int
			, @_DatabaseName			nvarchar(128)
			, @_DebugMessage			varchar(2000)
			, @_SprocStartTime			datetime
			, @_StepStartTime			datetime

	--! WriteJournal variables
	DECLARE   @_FunctionName			varchar(256)
			, @_Message					varchar(512)
			, @_ProgressText			nvarchar(max)
			, @_Step					varchar(128)
			, @_Severity				smallint

	--! ExceptionHandler variables
	DECLARE   @_CustomErrorText			varchar(512)
			, @_ErrorMessage			varchar(4000)
			, @_ExceptionId				int

	--! Common Debug variables
	DECLARE	  @_LoopStartTime			datetime
			, @_StepEndTime				datetime
			, @_CRLF					char(1)

	--! Populate the common variables
	SET @_SprocStartTime	= GETDATE()
	SET @_FunctionName		= OBJECT_NAME(@@PROCID)
	SET @_DatabaseName		= DB_NAME()
	SET @_Error				= 0
	SET @_Severity			= 256 -- Informational
	SET @_CRLF				= CHAR(10)
	SET @_DebugMessage		= @_FunctionName + ' starting at ' + CONVERT(char(23), @_SprocStartTime, 121) + ' with inputs: '
							+ @_CRLF + '    @DaysToKeepJournal     : ' + COALESCE(CAST(@DaysToKeepJournal AS varchar(8)), 'NULL')
							+ @_CRLF + '    @DaysToKeepException   : ' + COALESCE(CAST(@DaysToKeepException AS varchar(8)), 'NULL')
	SET @_ProgressText		= @_DebugMessage

	--! Define our working values
	DECLARE @_DaysToKeepJournal		int;		SET @_DaysToKeepJournal = COALESCE(@DaysToKeepJournal, 30)
	DECLARE @_DaysToKeepException	int;		SET @_DaysToKeepException = COALESCE(@DaysToKeepException, @_DaysToKeepJournal + 1)
	DECLARE @_JournalArchiveDate	datetime;	SET @_JournalArchiveDate = CONVERT(char(11), DATEADD(day, - @_DaysToKeepJournal, GETDATE()), 113)
	DECLARE @_ExceptionArchiveDate	datetime;	SET @_ExceptionArchiveDate = CONVERT(char(11), DATEADD(day, - @_DaysToKeepException, GETDATE()), 113)

	SET @_ProgressText		= @_ProgressText
							+ @_CRLF + 'and working values...'
							+ @_CRLF + '    @_DaysToKeepJournal     : ' + COALESCE(CAST(@_DaysToKeepJournal AS varchar(8)), 'NULL')
							+ @_CRLF + '    @_DaysToKeepException   : ' + COALESCE(CAST(@_DaysToKeepException AS varchar(8)), 'NULL')
							+ @_CRLF + '    @_JournalArchiveDate   : ' + COALESCE(CONVERT(char(19), @_JournalArchiveDate, 120), 'NULL')
							+ @_CRLF + '    @_ExceptionArchiveDate : ' + COALESCE(CONVERT(char(19), @_ExceptionArchiveDate, 120), 'NULL')

	--!
	--!
	--!
	BEGIN TRY
		SET @_Step = 'Validate inputs';

		--!
		--! There is an FK between Journal and Exception so we can't delete more from Exception
		--! than we do from Journal
		--!
		IF @_JournalArchiveDate >= @_ExceptionArchiveDate
			BEGIN
				SET @_Message	= 'Failed to clean up Journal and Exception tables as Journal delete Date: '
								+ COALESCE(CONVERT(char(19), @_JournalArchiveDate, 120), 'NULL')
								+ ' must be less than Exception delete date: '
								+ COALESCE(CONVERT(char(19), @_ExceptionArchiveDate, 120), 'NULL')
				RAISERROR(@_Message, 16, 1);
			END

		SET @_Step = 'Delete old Journal entries';
		SET @_StepStartTime = GETDATE();

		BEGIN TRAN

		--! Don't need to DELETE JournalDetail as FK cascades
		DELETE
			[log4Private].[Journal]
		WHERE
			SystemDate < @_JournalArchiveDate

		SET @_RowCount		= @@ROWCOUNT;
		SET @_DebugMessage	= 'Completed step: "' +  COALESCE(@_Step, 'NULL') + '"'
							+ ' in ' + [log4].[FormatElapsedTime](@_StepStartTime, NULL, 3)
							+ ' ' + COALESCE(CAST(@_RowCount AS varchar(8)), 'NULL') + ' row(s) affected'
		SET @_ProgressText	= @_ProgressText + @_CRLF + @_DebugMessage

		IF  @@TRANCOUNT > 0 COMMIT TRAN
	END TRY
	BEGIN CATCH
		IF ABS(XACT_STATE()) = 1 OR @@TRANCOUNT > 0 ROLLBACK TRAN;

		SET @_CustomErrorText	= 'Failed to cleanup Journal and Exception at step: ' + COALESCE(@_Step, 'NULL')

		EXEC [log4].[ExceptionHandler]
				  @ErrorContext    = @_CustomErrorText
				, @ErrorProcedure  = @_FunctionName
				, @ErrorNumber     = @_Error OUT
				, @ReturnMessage   = @_Message OUT
				, @ExceptionId     = @_ExceptionId OUT

		GOTO OnComplete;
	END CATCH

	--!
	--!
	--!
	BEGIN TRY
		SET @_Step = 'Delete old Exception entries';
		SET @_StepStartTime = GETDATE();

		BEGIN TRAN

		DELETE
			[log4Private].[SqlException]
		WHERE
			SystemDate < @_ExceptionArchiveDate

		SET @_RowCount		= @@ROWCOUNT;
		SET @_DebugMessage	= 'Completed step: "' +  COALESCE(@_Step, 'NULL') + '"'
							+ ' in ' + [log4].[FormatElapsedTime](@_StepStartTime, NULL, 3)
							+ ' ' + COALESCE(CAST(@_RowCount AS varchar(8)), 'NULL') + ' row(s) affected'
		SET @_ProgressText	= @_ProgressText + @_CRLF + @_DebugMessage

		IF  @@TRANCOUNT > 0 COMMIT TRAN

		SET @_Message		= 'Completed all Journal and Exception cleanup activities;'
							+ ' retaining ' + COALESCE(CAST(@DaysToKeepJournal AS varchar(8)), 'NULL') + ' days'' Journal entries'
							+ ' and ' + COALESCE(CAST(@DaysToKeepException AS varchar(8)), 'NULL') + ' days'' Exception entries'
	END TRY
	BEGIN CATCH
		IF ABS(XACT_STATE()) = 1 OR @@TRANCOUNT > 0 ROLLBACK TRAN;

		SET @_CustomErrorText	= 'Failed to cleanup Journal and Exception at step: ' + COALESCE(@_Step, 'NULL')

		EXEC [log4].[ExceptionHandler]
				  @ErrorContext    = @_CustomErrorText
				, @ErrorProcedure  = @_FunctionName
				, @ErrorNumber     = @_Error OUT
				, @ReturnMessage   = @_Message OUT
				, @ExceptionId     = @_ExceptionId OUT

		GOTO OnComplete;
	END CATCH


--/////////////////////////////////////////////////////////////////////////////////////////////////
OnComplete:
--/////////////////////////////////////////////////////////////////////////////////////////////////

	IF @_Error = 0
		BEGIN
			SET @_Step			= 'OnComplete'
			SET @_Severity		= 512 -- Success
			SET @_Message		= COALESCE(@_Message, @_Step) + ' in a total run time of ' + [log4].[FormatElapsedTime](@_SprocStartTime, NULL, 3)
		END
	ELSE
		BEGIN
			SET @_Step			= COALESCE(@_Step, 'OnError')
			SET @_Severity		= 2 -- Severe Failure
			SET @_Message		= COALESCE(@_Message, @_Step) + ' after a total run time of ' + [log4].[FormatElapsedTime](@_SprocStartTime, NULL, 3)
		END

	--! Always log completion of this call
	EXEC [log4].[JournalWriter]
			  @FunctionName		= @_FunctionName
			, @StepInFunction	= @_Step
			, @MessageText		= @_Message
			, @ExtraInfo		= @_ProgressText
			, @DatabaseName		= @_DatabaseName
			, @Severity			= @_Severity
			, @ExceptionId		= @_ExceptionId

	--! Finaly, throw an exception that will be detected by SQL Agent
	IF @_Error > 0 RAISERROR(@_Message, 16, 1);

	SET NOCOUNT OFF;

	RETURN (@_Error);
END
GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON SCHEMA::[etl] TO [EtlDevelopersTEST];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON SCHEMA::[etl] TO [EtlDevelopersDEV];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON SCHEMA::[etl] TO [EtlDevelopersTEST];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON SCHEMA::[etl] TO [EtlDevelopersPROD];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON SCHEMA::[etl] TO [EtlDevelopersDEV];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON SCHEMA::[etl] TO [DataFeedWriters];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON SCHEMA::[etl] TO [BusinessAnalystsPROD];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON SCHEMA::[etl] TO [BatchManagers];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON SCHEMA::[etl] TO [AppDevelopersPROD];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON SCHEMA::[etl] TO [EtlDevelopersDEV];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON SCHEMA::[etl] TO [EtlDevelopersTEST];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON SCHEMA::[etl] TO [EtlDevelopersDEV];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON SCHEMA::[etl] TO [DataFeedWriters];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON SCHEMA::[etl] TO [EtlDevelopersDEV];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON SCHEMA::[log4] TO PUBLIC;


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[log4].[JournalWriter] TO PUBLIC
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[log4].[GetJournalControl] TO PUBLIC
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[log4].[ExceptionHandler] TO PUBLIC
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[log4].[FormatElapsedTime] TO PUBLIC
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON SCHEMA::[log4Private] TO [BatchManagers];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[log4Private].[SessionInfoOutput] TO PUBLIC
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON SCHEMA::[log4Utils] TO PUBLIC;


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[log4Utils].[JournalPrinter] TO PUBLIC
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[log4Utils].[JournalReader] TO PUBLIC
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[log4Utils].[ExceptionReader] TO PUBLIC
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[log4Utils].[PrintString] TO PUBLIC
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON SCHEMA::[pbi] TO [PowerBiReporters];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON SCHEMA::[qvstg] TO [EtlDevelopersTEST];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON SCHEMA::[qvstg] TO [EtlDevelopersDEV];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON SCHEMA::[qvstg] TO [DataFeeds];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON SCHEMA::[qvstg] TO [EtlDevelopersTEST];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON SCHEMA::[qvstg] TO [EtlDevelopersPROD];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON SCHEMA::[qvstg] TO [EtlDevelopersDEV];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON SCHEMA::[qvstg] TO [DataFeeds];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON SCHEMA::[qvstg] TO [BusinessAnalystsPROD];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON SCHEMA::[qvstg] TO [BatchManagers];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON SCHEMA::[qvstg] TO [AppDevelopersPROD];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON SCHEMA::[qvstg] TO [EtlDevelopersTEST];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON SCHEMA::[qvstg] TO [EtlDevelopersDEV];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON SCHEMA::[qvstg] TO [DataFeeds];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON SCHEMA::[qvstg] TO [EtlDevelopersDEV];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON SCHEMA::[qvstg] TO [DataFeeds];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON SCHEMA::[qvstg] TO [EtlDevelopersTEST];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON SCHEMA::[qvstg] TO [EtlDevelopersDEV];


GO
PRINT N'Creating Permission...';


GO
GRANT ALTER
    ON SCHEMA::[qvstg] TO [EtlDevelopersDEV];


GO
PRINT N'Creating Permission...';


GO
GRANT ALTER
    ON SCHEMA::[qvstg] TO [DataFeeds];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON SCHEMA::[qvstg] TO [DataFeedWriters];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON SCHEMA::[qvstg] TO [DataFeedWriters];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON SCHEMA::[qvstg] TO [DataFeedReaders];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON SCHEMA::[qvstg] TO [DataFeedWriters];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON SCHEMA::[qvstg] TO [DataFeedWriters];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON SCHEMA::[qvstg] TO [DataFeedReaders];


GO
PRINT N'Creating Permission...';


GO
GRANT ALTER
    ON SCHEMA::[qvstg] TO [DataFeedWriters];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON SCHEMA::[stg] TO [EtlDevelopersTEST];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON SCHEMA::[stg] TO [EtlDevelopersDEV];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON SCHEMA::[stg] TO [DataFeedWriters];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON SCHEMA::[stg] TO [EtlDevelopersTEST];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON SCHEMA::[stg] TO [EtlDevelopersPROD];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON SCHEMA::[stg] TO [EtlDevelopersDEV];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON SCHEMA::[stg] TO [DataFeedWriters];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON SCHEMA::[stg] TO [DataFeedReaders];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON SCHEMA::[stg] TO [BusinessAnalystsPROD];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON SCHEMA::[stg] TO [BatchManagers];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON SCHEMA::[stg] TO [AppDevelopersPROD];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON SCHEMA::[stg] TO [EtlDevelopersTEST];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON SCHEMA::[stg] TO [EtlDevelopersDEV];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON SCHEMA::[stg] TO [DataFeedWriters];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON SCHEMA::[stg] TO [EtlDevelopersDEV];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON SCHEMA::[stg] TO [DataFeedWriters];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON SCHEMA::[stg] TO [DataFeedReaders];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON SCHEMA::[stg] TO [EtlDevelopersTEST];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON SCHEMA::[stg] TO [EtlDevelopersDEV];


GO
PRINT N'Creating Permission...';


GO
GRANT ALTER
    ON SCHEMA::[stg] TO [EtlDevelopersDEV];


GO
PRINT N'Creating Permission...';


GO
GRANT ALTER
    ON SCHEMA::[stg] TO [DataFeedWriters];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[utils].[LoadDateDimension] TO [BatchManagers]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON SCHEMA::[dbo] TO [DataFeedReaders];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON SCHEMA::[dbo] TO [DataFeeds];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON SCHEMA::[dbo] TO [DataFeedWriters];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON SCHEMA::[INFORMATION_SCHEMA] TO [DataFeedReaders];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON SCHEMA::[INFORMATION_SCHEMA] TO [DataFeeds];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON SCHEMA::[INFORMATION_SCHEMA] TO [DataFeedWriters];


GO
PRINT N'Creating [etl].[SSIS_BUDGET_2017_TransformVolumes].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = 'Transforms Budget Sales data in preparation for loading to the mart', @level0type = N'SCHEMA', @level0name = N'etl', @level1type = N'PROCEDURE', @level1name = N'SSIS_BUDGET_2017_TransformVolumes';


GO
PRINT N'Creating [etl].[SSIS_BUDGET_2017_TransformSales].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = 'Transforms Budget Sales data in preparation for loading to the mart', @level0type = N'SCHEMA', @level0name = N'etl', @level1type = N'PROCEDURE', @level1name = N'SSIS_BUDGET_2017_TransformSales';


GO
PRINT N'Creating [etl].[SSIS_BUDGET_2017_ValidateVolumes].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = 'Includes all validation checks for Budget Volumes by Product Category Group (will throw an exception on any failure)', @level0type = N'SCHEMA', @level0name = N'etl', @level1type = N'PROCEDURE', @level1name = N'SSIS_BUDGET_2017_ValidateVolumes';


GO
PRINT N'Creating [etl].[SSIS_BUDGET_2017_StageVolumes].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = 'Transforms raw, landed volumes data to interim staging table ready for further processing and validation', @level0type = N'SCHEMA', @level0name = N'etl', @level1type = N'PROCEDURE', @level1name = N'SSIS_BUDGET_2017_StageVolumes';


GO
PRINT N'Creating [etl].[SSIS_BUDGET_2017_ValidateSales].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = 'Includes all validation checks for Budget Sales by Region and Month (will throw an exception on any failure)', @level0type = N'SCHEMA', @level0name = N'etl', @level1type = N'PROCEDURE', @level1name = N'SSIS_BUDGET_2017_ValidateSales';


GO
PRINT N'Creating [etl].[SSIS_BUDGET_2017_StageSales].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = 'Transforms raw, landed sales data to interim staging table ready for further processing and validation', @level0type = N'SCHEMA', @level0name = N'etl', @level1type = N'PROCEDURE', @level1name = N'SSIS_BUDGET_2017_StageSales';


GO
PRINT N'Creating [log4].[JournalWriter].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Adds a journal entry summarising task progress, completion or failure msgs etc.', @level0type = N'SCHEMA', @level0name = N'log4', @level1type = N'PROCEDURE', @level1name = N'JournalWriter';


GO
PRINT N'Creating [log4].[GetJournalControl].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Returns the ON/OFF value for the specified Journal Name, or Group Name if Module not found or the system default if neither is found', @level0type = N'SCHEMA', @level0name = N'log4', @level1type = N'FUNCTION', @level1name = N'GetJournalControl';


GO
PRINT N'Creating [log4].[ExceptionHandler].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Returns error info as output parameters and writes info to Exception table', @level0type = N'SCHEMA', @level0name = N'log4', @level1type = N'PROCEDURE', @level1name = N'ExceptionHandler';


GO
PRINT N'Creating [log4].[FormatElapsedTime].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Returns a string describing the time elapsed between start and end time', @level0type = N'SCHEMA', @level0name = N'log4', @level1type = N'FUNCTION', @level1name = N'FormatElapsedTime';


GO
PRINT N'Creating [log4Private].[SessionInfoOutput].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Outputs session info from master.sys.dm_exec_sessions for the current @@SPID', @level0type = N'SCHEMA', @level0name = N'log4Private', @level1type = N'PROCEDURE', @level1name = N'SessionInfoOutput';


GO
PRINT N'Creating [log4Utils].[JournalCleanup].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Deletes all Journal and Exception entries older than the specified days', @level0type = N'SCHEMA', @level0name = N'log4Utils', @level1type = N'PROCEDURE', @level1name = N'JournalCleanup';


GO
PRINT N'Creating [log4Utils].[JournalPrinter].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Prints the contents of JournalDetail for the specified Journal ID respecting all line feeds and/or carriage returns', @level0type = N'SCHEMA', @level0name = N'log4Utils', @level1type = N'PROCEDURE', @level1name = N'JournalPrinter';


GO
PRINT N'Creating [log4Utils].[JournalReader].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Returns all Journal entries matching the specified search criteria', @level0type = N'SCHEMA', @level0name = N'log4Utils', @level1type = N'PROCEDURE', @level1name = N'JournalReader';


GO
PRINT N'Creating [log4Utils].[ExceptionReader].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Returns all Exceptions matching the specified search criteria', @level0type = N'SCHEMA', @level0name = N'log4Utils', @level1type = N'PROCEDURE', @level1name = N'ExceptionReader';


GO
PRINT N'Creating [log4Utils].[PrintString].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Prints the supplied string respecting all line feeds and/or carriage returns except where no line feeds are found, in which case the output is printed in user-specified lengths', @level0type = N'SCHEMA', @level0name = N'log4Utils', @level1type = N'PROCEDURE', @level1name = N'PrintString';


GO
PRINT N'Creating [dbo].[Numbers].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Returns a dynamically created set of N sequential numbers starting at 1 (up to a maximum of 2,147,483,647) where N is the value of @size', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'FUNCTION', @level1name = N'Numbers';


GO
PRINT N'Creating [dbo].[DataSource].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table records all Data Warehouse-specific data sources corresponding to the source of e.g. SAP-GBR, SAP-AUT, M3-ESP, M3-FRA etc', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'DataSource';


GO
PRINT N'Creating [dbo].[DataSource].[DataSourceKey].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Data Warehouse-specific unique identifier (primary key) for a data source (aka Source System)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'DataSource', @level2type = N'COLUMN', @level2name = N'DataSourceKey';


GO
PRINT N'Creating [dbo].[DataSource].[DataSourceCode].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Data Warehouse-specific short-code identifier for the originating data source of this record, that is, the ERP system behind QlikView (aka Source System) - corresponds to the schema name in the landing/staging area', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'DataSource', @level2type = N'COLUMN', @level2name = N'DataSourceCode';


GO
PRINT N'Creating [dbo].[DataSource].[DataSourceName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Data Warehouse-specific, business-friendly unique name for a data source (aka Source System)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'DataSource', @level2type = N'COLUMN', @level2name = N'DataSourceName';


GO
PRINT N'Creating [dbo].[DataSource].[DataSourceGroup].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Display heading to allow multiple data sources to be displayed under the same heading e.g. France might include M3-FRA, FRA-CEGID-COMP and FRA-CEGID-POLY', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'DataSource', @level2type = N'COLUMN', @level2name = N'DataSourceGroup';


GO
PRINT N'Creating [dbo].[DataSource].[HostCountry].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The country where the data source is hosted, the country business unit that "owns" the data', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'DataSource', @level2type = N'COLUMN', @level2name = N'HostCountry';


GO
PRINT N'Creating [dbo].[DataSource].[DataCountries].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The country or countries represented by the data contained in this data source', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'DataSource', @level2type = N'COLUMN', @level2name = N'DataCountries';


GO
PRINT N'Creating [dbo].[DataSource].[Narrative].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Detailed description (if any) of this data source', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'DataSource', @level2type = N'COLUMN', @level2name = N'Narrative';


GO
PRINT N'Creating [dbo].[DataSource].[QlikViewSourceSystemId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Optional identifier of a source system as detailed in the QlikView database (Icopal_profBIS)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'DataSource', @level2type = N'COLUMN', @level2name = N'QlikViewSourceSystemId';


GO
PRINT N'Creating [dbo].[DataSource].[IsActive].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Indicates that this record is marked as deleted or otherwise inactive', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'DataSource', @level2type = N'COLUMN', @level2name = N'IsActive';


GO
PRINT N'Creating [dbo].[dimDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'This table represents the date dimension used in EDW and records all past, present and future dates along with their attributes for eaxmple, day of the week, month, quarter, year etc', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'dimDate';


GO
PRINT N'Creating [dbo].[dimDate].[DateKey].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'database-specific unique identifier for a date. Except for the special cases (unknown, not happened etc) the number will be an eight digit integer formatted to represent YYYYMMDD for readability', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'dimDate', @level2type = N'COLUMN', @level2name = N'DateKey';


GO
PRINT N'Creating [dbo].[dimDate].[ActualDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Optional - will always be populated for real dates but may be NULL (or an extreme like 01-Jan-1900 or 31-Dec-9999) for special cases', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'dimDate', @level2type = N'COLUMN', @level2name = N'ActualDate';


GO
PRINT N'Creating [dbo].[dimDate].[DateNameEU].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'When ActualDate is populated will usually be string in the standard EU date format of MM/DD/YYYY but may be some other text for special case dates', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'dimDate', @level2type = N'COLUMN', @level2name = N'DateNameEU';


GO
PRINT N'Creating [dbo].[dimDate].[DateNameUS].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'When ActualDate is populated will usually be string in the standard US date format of DD/MM/YYYY but may be some other text for special case dates', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'dimDate', @level2type = N'COLUMN', @level2name = N'DateNameUS';


GO
PRINT N'Creating [dbo].[dimDate].[EnglishMonthCode].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Three letter abbreviation of English month name or other text for special cases', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'dimDate', @level2type = N'COLUMN', @level2name = N'EnglishMonthCode';


GO
PRINT N'Creating [dbo].[dimDate].[EnglishMonthName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Full English month name or other text for special cases', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'dimDate', @level2type = N'COLUMN', @level2name = N'EnglishMonthName';


GO
PRINT N'Creating [dbo].[dimDate].[EnglishDayCode].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Three letter abbreviation of English day name in English or other text for special cases', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'dimDate', @level2type = N'COLUMN', @level2name = N'EnglishDayCode';


GO
PRINT N'Creating [dbo].[dimDate].[EnglishDayName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Full English day name or other text for special cases', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'dimDate', @level2type = N'COLUMN', @level2name = N'EnglishDayName';


GO
PRINT N'Creating [dbo].[dimDate].[CalendarYear].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Numeric representation of the year when ActualDate is populated - otherwise NULL', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'dimDate', @level2type = N'COLUMN', @level2name = N'CalendarYear';


GO
PRINT N'Creating [dbo].[dimDate].[CalendarQuarter].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Numeric representation of the quarter in the calendar year when ActualDate is populated - otherwise NULL', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'dimDate', @level2type = N'COLUMN', @level2name = N'CalendarQuarter';


GO
PRINT N'Creating [dbo].[dimDate].[MonthNumberInYear].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Numeric representation of the month number in the calendar year when ActualDate is populated - otherwise NULL', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'dimDate', @level2type = N'COLUMN', @level2name = N'MonthNumberInYear';


GO
PRINT N'Creating [dbo].[dimDate].[WeekNumberInYear].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Numeric representation of the week number in the calendar year when ActualDate is populated - otherwise NULL', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'dimDate', @level2type = N'COLUMN', @level2name = N'WeekNumberInYear';


GO
PRINT N'Creating [dbo].[dimDate].[DayNumberInYear].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Numeric representation of the day number in the calendar year when ActualDate is populated - otherwise NULL', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'dimDate', @level2type = N'COLUMN', @level2name = N'DayNumberInYear';


GO
PRINT N'Creating [dbo].[dimDate].[DayNumberInMonth].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Numeric representation of the day number in the month when ActualDate is populated - otherwise NULL', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'dimDate', @level2type = N'COLUMN', @level2name = N'DayNumberInMonth';


GO
PRINT N'Creating [dbo].[dimDate].[DayNumberInWeek].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Numeric representation of the day number in the week when ActualDate is populated - otherwise NULL', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'dimDate', @level2type = N'COLUMN', @level2name = N'DayNumberInWeek';


GO
PRINT N'Creating [dbo].[dimDate].[YearMonth].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'When ActualDate is populated will be string representation of calendar year and month in the form YYYY-MM - may be some other text for special cases', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'dimDate', @level2type = N'COLUMN', @level2name = N'YearMonth';


GO
PRINT N'Creating [dbo].[dimDate].[YearQuarter].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'When ActualDate is populated will be string representation of calendar year and quarter in the form YYYY-QN - may be some other text for special cases', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'dimDate', @level2type = N'COLUMN', @level2name = N'YearQuarter';


GO
PRINT N'Creating [dbo].[dimDate].[IsWeekend].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Typically Weekend or Weekday if Actual Date is populated, otherwise some other text for special cases', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'dimDate', @level2type = N'COLUMN', @level2name = N'IsWeekend';


GO
PRINT N'Creating [dbo].[dimDate].[IsLastDayInMonth].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Typically Y (Yes) or N (No) if Actual Date is populated, otherwise some other text for special cases', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'dimDate', @level2type = N'COLUMN', @level2name = N'IsLastDayInMonth';


GO
PRINT N'Creating [dbo].[dimDate].[MondayWeekCommencing].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'When ActualDate is populated will be the date of the Monday in the week,  in which ActualDate falls - otherwise NULL.', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'dimDate', @level2type = N'COLUMN', @level2name = N'MondayWeekCommencing';


GO
PRINT N'Creating [dbo].[dimDate].[WorkDaysInMonthTotal].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'When ActualDate is populated will be the number of normal working days in the month indicated by ActualDate, otherwise 0', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'dimDate', @level2type = N'COLUMN', @level2name = N'WorkDaysInMonthTotal';


GO
PRINT N'Creating [dbo].[dimDate].[WorkDaysInMonthToDate].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'When ActualDate is populated will be the total number of normal working days to date in the month indicated by ActualDate, otherwise 0', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'dimDate', @level2type = N'COLUMN', @level2name = N'WorkDaysInMonthToDate';


GO
PRINT N'Creating [dbo].[dimDate].[FiscalPeriod].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'When ActualDate is populated will be the 4-4-5 financial period/month number (1-12), otherwise null', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'dimDate', @level2type = N'COLUMN', @level2name = N'FiscalPeriod';


GO
PRINT N'Creating [dbo].[dimDate].[FiscalQuarter].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'When ActualDate is populated will be the 4-4-5 financial quarter number (1-4), otherwise null', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'dimDate', @level2type = N'COLUMN', @level2name = N'FiscalQuarter';


GO
PRINT N'Creating [dbo].[dimDate].[FiscalYear].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'When ActualDate is populated will be the 4-4-5 financial year reprsented as a four-digit number (should be the same as calendar year), otherwise null', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'dimDate', @level2type = N'COLUMN', @level2name = N'FiscalYear';


GO
PRINT N'Creating [dbo].[dimDate].[FiscalPeriodCode].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'When ActualDate is populated will be a string representation of the 4-4-5 financial period/month code (JAN-DEC)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'dimDate', @level2type = N'COLUMN', @level2name = N'FiscalPeriodCode';


GO
PRINT N'Creating [dbo].[dimDate].[FiscalPeriodName].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'When ActualDate is populated will be a string representation of the 4-4-5 financial period/month full name (January-December)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'dimDate', @level2type = N'COLUMN', @level2name = N'FiscalPeriodName';


GO
PRINT N'Creating [dbo].[dimDate].[FiscalYearPeriod].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'When ActualDate is populated will be a string representation of the 4-4-5 financial year and month in the form YYYY-MM - may be some other text for special cases', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'dimDate', @level2type = N'COLUMN', @level2name = N'FiscalYearPeriod';


GO
PRINT N'Creating [dbo].[dimDate].[FiscalYearQuarter].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'When ActualDate is populated will be a string representation of the 4-4-5 financial year and quarter in the form YYYY-QN - may be some other text for special cases', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'dimDate', @level2type = N'COLUMN', @level2name = N'FiscalYearQuarter';


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
set nocount on
GO

merge into [log4Private].[JournalControl] as Target
using (values
  ('SYSTEM_DEFAULT','ON')
 ,('SYSTEM_OVERRIDE','ON')
) as Source ([ModuleName],[OnOffSwitch])
on (Target.[ModuleName] = Source.[ModuleName])
when matched and (
	nullif(Source.[OnOffSwitch], Target.[OnOffSwitch]) is not null or nullif(Target.[OnOffSwitch], Source.[OnOffSwitch]) is not null) then
 update set
  [OnOffSwitch] = Source.[OnOffSwitch]
when not matched by target then
 insert([ModuleName],[OnOffSwitch])
 values(Source.[ModuleName],Source.[OnOffSwitch])
when not matched by source then 
 delete
;
GO
declare @mergeError int
 , @mergeCount int
select @mergeError = @@error, @mergeCount = @@rowcount
if @mergeError != 0
 begin
 print 'ERROR OCCURRED IN MERGE FOR [log4Private].[JournalControl]. Rows affected: ' + cast(@mergeCount as varchar(100)); -- SQL should always return zero rows affected
 end
else
 begin
 print '[log4Private].[JournalControl] rows affected by MERGE: ' + cast(@mergeCount as varchar(100));
 end
GO

set nocount off
GO

set nocount on
GO

merge into [log4Private].[Severity] as Target
using (values
  (1,'Showstopper/Critical Failure')
 ,(2,'Severe Failure')
 ,(4,'Major Failure')
 ,(8,'Moderate Failure')
 ,(16,'Minor Failure')
 ,(32,'Concurrency Violation')
 ,(256,'Informational')
 ,(512,'Success')
 ,(1024,'Debug')
) as Source ([SeverityId],[SeverityName])
on (Target.[SeverityId] = Source.[SeverityId])
when matched and (
	nullif(Source.[SeverityName], Target.[SeverityName]) is not null or nullif(Target.[SeverityName], Source.[SeverityName]) is not null) then
 update set
  [SeverityName] = Source.[SeverityName]
when not matched by target then
 insert([SeverityId],[SeverityName])
 values(Source.[SeverityId],Source.[SeverityName])
when not matched by source then 
 delete
;
GO
declare @mergeError int
 , @mergeCount int
select @mergeError = @@error, @mergeCount = @@rowcount
if @mergeError != 0
 begin
 print 'ERROR OCCURRED IN MERGE FOR [log4Private].[Severity]. Rows affected: ' + cast(@mergeCount as varchar(100)); -- SQL should always return zero rows affected
 end
else
 begin
 print '[log4Private].[Severity] rows affected by MERGE: ' + cast(@mergeCount as varchar(100));
 end
GO

set nocount off
GO


set nocount on
GO

;with sourceCte (DataSourceKey, DataSourceCode, DataSourceName, DataSourceGroup, HostCountry, DataCountries, QlikViewSourceSystemId, IsActive, Narrative)
as
(
			  select     -1	, 'N/S'				, 'Not Specified at Source'					, 'SYSTEM'	, ''	, ''	, null	, 'Y' , 'Indicates that the value in the source system was NULL'
	union all select     -2	, 'N/F'				, 'Lookup Not Found'						, 'SYSTEM'	, ''	, ''	, null	, 'Y' , 'Indicates that the source system provided a value but that there is no matching lookup'
	union all select     -3	, 'N/I'				, 'Not Implemented in Source'				, 'SYSTEM'	, ''	, ''	, null	, 'Y' , 'Used when the source system does not support the concept of a data source'
	union all select     -4	, 'N/A'				, 'Not Applicable'							, 'SYSTEM'	, ''	, ''	, null	, 'Y' , 'Used in a context where data source has no relevance in this context'
	union all select     -5	, 'N/D'				, 'Not Defined'								, 'SYSTEM'	, ''	, ''	, null	, 'Y' , 'The logic to identify the data source has not been supplied or specified'
	union all select 100000	, 'EDW'				, 'Data Warehouse Metadata'					, 'SYSTEM'	, ''	, ''	, null	, 'Y' , 'Data supplied from the BMI Enterprise data warehouse e.g. conformed static/reference data'
	union all select 100001	, 'MDM'				, 'Mastered Data Repository'				, 'MASTER'	, ''	, ''	, null	, 'Y' , 'Data supplied from the BMI Master Data Management System (once implemented)'
	union all select 100101 , 'UK'				, 'Icopal UK - SAP'							, ''		, ''	, ''	, 1		, 'Y' , ''		
	union all select 100102 , 'DK'				, 'DK/SKF/SKS/BE/SE - Movex'				, ''		, ''	, ''	, 2		, 'Y' , ''		
	union all select 100103 , 'US'				, 'Icopal US'								, ''		, ''	, ''	, 3		, 'Y' , ''		
	union all select 100104 , 'SK'				, 'Icopal SK - SAP'							, ''		, ''	, ''	, 4		, 'Y' , ''		
	union all select 100105 , 'NO'				, 'Icopal NO -'								, ''		, ''	, ''	, 5		, 'Y' , ''		
	union all select 100106 , 'MFX'				, 'Monarflex SK - Movex'					, ''		, ''	, ''	, 6		, 'Y' , ''		
	union all select 100107 , 'NL'				, 'Icopal NL (Esha) - Baan 4'				, ''		, ''	, ''	, 7		, 'Y' , ''		
	union all select 100108 , 'NLS'				, 'Van Besouw, NL -  Baan 4'				, ''		, ''	, ''	, 8		, 'Y' , ''		
	union all select 100109 , 'SE'				, 'Icopal SE - Movex'						, ''		, ''	, ''	, 9		, 'Y' , ''		
	union all select 100110 , 'BE'				, 'Icopal BE - MFG pro'						, ''		, ''	, ''	, 10	, 'Y' , ''		
	union all select 100111 , 'CZ'				, 'Icopal CZ - SAP'							, ''		, ''	, ''	, 11	, 'Y' , ''		
	union all select 100112 , 'FI'				, 'Icopal FI - IBS'							, ''		, ''	, ''	, 12	, 'Y' , ''		
	union all select 100113 , 'PL'				, 'Icopal PL - Movex'						, ''		, ''	, ''	, 13	, 'Y' , ''		
	union all select 100114 , 'DE'				, 'Icopal DE - Invers'						, ''		, ''	, ''	, 14	, 'Y' , ''		
	union all select 100115 , 'FR'				, 'France - Movex'							, ''		, ''	, ''	, 15	, 'Y' , ''		
	union all select 100116 , 'Vedag-SAP'		, 'VEDAG - SAP'								, ''		, ''	, ''	, 16	, 'Y' , ''		
	union all select 100117 , 'RU (old)'		, 'Icopal RU (before 2015)'					, ''		, ''	, ''	, 17	, 'Y' , ''		
	union all select 100119 , 'AT'				, 'VILLAS Austria - SAP'					, ''		, ''	, ''	, 19	, 'Y' , ''		
	union all select 100120 , 'Villas-HUM'		, 'Villas - Hungary'						, ''		, ''	, ''	, 20	, 'Y' , ''		
	union all select 100122 , 'DEU-SAP'			, 'Icopal Germany - SAP (from 2011.05.01)'	, ''		, ''	, ''	, 22	, 'Y' , ''		
	union all select 100125 , 'CAN'				, 'Icopal Canada  (US)'						, ''		, ''	, ''	, 25	, 'Y' , ''		
	union all select 100126 , 'DES-IKV'			, 'DES (IKV)'								, ''		, ''	, ''	, 26	, 'Y' , ''		
	union all select 100127 , 'RU-SA'			, 'Icopal RU - SAP'							, ''		, ''	, ''	, 27	, 'Y' , ''		
	union all select 100129 , 'Poly-Cegid'		, 'Polytuil - Cegid'						, ''		, ''	, ''	, 29	, 'Y' , ''		
	union all select 100130 , 'Symph-POL'		, 'Poland - Symphonia'						, ''		, ''	, ''	, 30	, 'Y' , ''		
	union all select 100131 , 'Comptoir-Cegid'	, 'Comptoir - Cegid'						, ''		, ''	, ''	, 31	, 'Y' , ''		
	union all select 100132 , 'Sage-FRA'		, 'France - Sage Forte'						, ''		, ''	, ''	, 32	, 'Y' , ''		
	union all select 100133 , 'Wolfin - SAP'	, 'Wolfin - SAP'							, ''		, ''	, ''	, 33	, 'Y' , ''		
	union all select 100134 , 'Decra-DEU-SAP'	, 'Decra - Germany SAP'						, ''		, ''	, ''	, 34	, 'Y' , ''		
	union all select 100135 , 'Feumas-DEU-SAP'	, 'Feumas - Germany SAP'					, ''		, ''	, ''	, 35	, 'Y' , ''		
	union all select 100136 , 'Nav-ESP'			, 'Spain - Navision'						, ''		, ''	, ''	, 36	, 'Y' , ''		
	union all select 100137 , 'Nav-ITA'			, 'Italy - Navision'						, ''		, ''	, ''	, 37	, 'Y' , ''		
	union all select 100138 , 'Nav-ROU'			, 'Romania - Navision'						, ''		, ''	, ''	, 38	, 'Y' , ''		
	union all select 100139 , 'Nav-BGR'			, 'Bulgaria - Navision'						, ''		, ''	, ''	, 39	, 'Y' , ''		
	union all select 100140 , 'Vedag-POL-M3'	, 'Vedag Poland - M3'						, ''		, ''	, ''	, 40	, 'Y' , ''		
	union all select 100141 , 'Villas-POL-M3'	, 'Villas Poland - M3'						, ''		, ''	, ''	, 41	, 'Y' , ''		
	union all select 100142 , 'Baan-NLD'		, 'NL ?? - Baan'							, ''		, ''	, ''	, 42	, 'Y' , ''		
	union all select 100143 , 'Wijo-SWE'		, 'Wijo - Sweden'							, ''		, ''	, ''	, 43	, 'Y' , ''		
)
merge into dbo.DataSource as tgt
using sourceCte as src
on src.DataSourceKey = tgt.DataSourceKey
when matched
		and tgt.DataSourceCode <> src.DataSourceCode
		or tgt.DataSourceName <> src.DataSourceName
		or tgt.DataSourceGroup <> src.DataSourceGroup
		or tgt.HostCountry <> src.HostCountry
		or tgt.DataCountries <> src.DataCountries
		or coalesce(tgt.QlikViewSourceSystemId, -1) <> coalesce(src.QlikViewSourceSystemId, -1)
		or tgt.IsActive <> src.IsActive
		or tgt.Narrative <> src.Narrative
	then update set
		  tgt.DataSourceCode = src.DataSourceCode
		, tgt.DataSourceName = src.DataSourceName
		, tgt.DataSourceGroup = src.DataSourceGroup
		, tgt.HostCountry = src.HostCountry
		, tgt.DataCountries = src.DataCountries
		, tgt.QlikViewSourceSystemId = src.QlikViewSourceSystemId
		, tgt.IsActive = src.IsActive
		, tgt.Narrative = src.Narrative
when not matched then
	insert
	(
	  DataSourceKey
	, DataSourceCode
	, DataSourceName
	, DataSourceGroup
	, HostCountry
	, DataCountries
	, QlikViewSourceSystemId
	, IsActive
	, Narrative
	)
	values
	(
	  src.DataSourceKey
	, src.DataSourceCode
	, src.DataSourceName
	, src.DataSourceGroup
	, src.HostCountry
	, src.DataCountries
	, src.QlikViewSourceSystemId
	, src.IsActive
	, src.Narrative
	);
GO

set nocount off
GO


--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

set nocount on

merge into [stg].[SSIS_BUDGET_RegionLookup] as Target
using (values
  ('DIV_TOT','Icopal/GAF','Icopal/GAF Europe division')
 ,('ELIM','ELIM Icopal/GAF','ELIM Icopal/GAF Europe division')
 ,('REC','Central','Region Central (REC)')
 ,('REE','East','Region East (REE)')
 ,('REN','North','Region North (REN)')
 ,('REW','West','Region West (REW)')
 ,('RPM','Plastic and Metal','Region Plastic and Metal (RPM)')
) as Source ([RegionCode],[RegionName],[RegionLookup])
on (Target.[RegionCode] = Source.[RegionCode])
when matched and (
	nullif(Source.[RegionName], Target.[RegionName]) is not null or nullif(Target.[RegionName], Source.[RegionName]) is not null or 
	nullif(Source.[RegionLookup], Target.[RegionLookup]) is not null or nullif(Target.[RegionLookup], Source.[RegionLookup]) is not null) then
 update set
  [RegionName] = Source.[RegionName], 
  [RegionLookup] = Source.[RegionLookup]
when not matched by target then
 insert([RegionCode],[RegionName],[RegionLookup])
 values(Source.[RegionCode],Source.[RegionName],Source.[RegionLookup])
when not matched by source then 
 delete
;
GO
declare @mergeError int
 , @mergeCount int
select @mergeError = @@error, @mergeCount = @@rowcount
if @mergeError != 0
 begin
 print 'ERROR OCCURRED IN MERGE FOR [stg].[SSIS_BUDGET_RegionLookup]. Rows affected: ' + cast(@mergeCount as varchar(100)); -- SQL should always return zero rows affected
 end
else
 begin
 print '[stg].[SSIS_BUDGET_RegionLookup] rows affected by MERGE: ' + cast(@mergeCount as varchar(100));
 end
GO

set nocount off
GO


--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

set nocount on

merge into [stg].[SSIS_BUDGET_BusinessUnitLookup] as Target
using (values
  ('REC','ATP','Austria','Austria (ATP)')
 ,('RPM','BED','Decra','Decra (BED)')
 ,('REE','CZP','Czech','Czech (CZP)')
 ,('REC','DEI','Germany','Germany (DEI)')
 ,('REC','DEV','Vedag','Vedag (DEV)')
 ,('REC','DEW','Wolfin','Wolfin (DEW)')
 ,('REN','DKT','Denmark','Denmark (DKT)')
 ,('REC','ELIM-C','ELIM - Central','ELIM Region Central (REC)')
 ,('REE','ELIM-E','ELIM - East','ELIM Region East (REE)')
 ,('REN','ELIM-N','ELIM - North','ELIM Region North (REN)')
 ,('RPM','ELIM-RPM','ELIM Plastic and Metal','ELIM Region Plastic and Metal (RPM)')
 ,('REW','ELIM-W','ELIM - West','ELIM Region West (REW)')
 ,('REN','FIT','Finland','Finland (FIT)')
 ,('REW','FRT','France','France (FRT)')
 ,('REW','GBP','UK','UK (GBP)')
 ,('REE','HUP','Hungary','Hungary (HUP)')
 ,('RPM','ISM','Synthetics','Synthetics (ISM)')
 ,('REW','NLT','Benelux','Benelux (NLT)')
 ,('REN','NOT','Norway','Norway (NOT)')
 ,('REE','PLT','Poland','Poland (PLT)')
 ,('REE','RUP','Russia','Russia (RUP)')
 ,('RPM','SEG','Wijo','Wijo (SEG)')
 ,('REN','SET','Sweden','Sweden (SET)')
 ,('RPM','SKF','Monarflex','Monarflex (SKF)')
 ,('REE','SKP','Slovakia','Slovakia (SKP)')
) as Source ([RegionCode],[SBU],[BusinessUnitName],[BusinessUnitLookup])
on (Target.[SBU] = Source.[SBU])
when matched and (
	nullif(Source.[RegionCode], Target.[RegionCode]) is not null or nullif(Target.[RegionCode], Source.[RegionCode]) is not null or 
	nullif(Source.[BusinessUnitName], Target.[BusinessUnitName]) is not null or nullif(Target.[BusinessUnitName], Source.[BusinessUnitName]) is not null or 
	nullif(Source.[BusinessUnitLookup], Target.[BusinessUnitLookup]) is not null or nullif(Target.[BusinessUnitLookup], Source.[BusinessUnitLookup]) is not null) then
 update set
  [RegionCode] = Source.[RegionCode], 
  [BusinessUnitName] = Source.[BusinessUnitName], 
  [BusinessUnitLookup] = Source.[BusinessUnitLookup]
when not matched by target then
 insert([RegionCode],[SBU],[BusinessUnitName],[BusinessUnitLookup])
 values(Source.[RegionCode],Source.[SBU],Source.[BusinessUnitName],Source.[BusinessUnitLookup])
when not matched by source then 
 delete
;
GO
declare @mergeError int
 , @mergeCount int
select @mergeError = @@error, @mergeCount = @@rowcount
if @mergeError != 0
 begin
 print 'ERROR OCCURRED IN MERGE FOR [stg].[SSIS_BUDGET_BusinessUnitLookup]. Rows affected: ' + cast(@mergeCount as varchar(100)); -- SQL should always return zero rows affected
 end
else
 begin
 print '[stg].[SSIS_BUDGET_BusinessUnitLookup] rows affected by MERGE: ' + cast(@mergeCount as varchar(100));
 end
GO

set nocount off
GO

--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

set nocount on

merge into [stg].[SSIS_BUDGET_ProductCategoryGroupLookup] as Target
using (values
  (1000,'Flat Roofing Total','Flat Roofing',46257)
 ,(2000,'Pitched Roofing Tot','Pitched Roofing',46297)
 ,(3000,'Building Membranes Tot','Building Membranes',46317)
 ,(4000,'Civil Engineering Total','Civil Engineering',46346)
 ,(5000,'Products Total','Other',46357)
 ,(5500,'Not Exported to Qlikview','Not Exported to Qlikview',46377)
 ,(6000,'Installation Services','Installation Services',null)
 ,(8800,'Unmapped L2 Categories','UnMapped Items',46247)
 ,(9900,'Total','',null)
) as Source ([ProductCategoryGroupId],[ProductCategoryGroupName],[QlikViewCategoryLevel2Name],[QlikViewCategoryLevel2Id])
on (Target.[ProductCategoryGroupId] = Source.[ProductCategoryGroupId])
when matched and (
	nullif(Source.[ProductCategoryGroupName], Target.[ProductCategoryGroupName]) is not null or nullif(Target.[ProductCategoryGroupName], Source.[ProductCategoryGroupName]) is not null or 
	nullif(Source.[QlikViewCategoryLevel2Name], Target.[QlikViewCategoryLevel2Name]) is not null or nullif(Target.[QlikViewCategoryLevel2Name], Source.[QlikViewCategoryLevel2Name]) is not null or 
	nullif(Source.[QlikViewCategoryLevel2Id], Target.[QlikViewCategoryLevel2Id]) is not null or nullif(Target.[QlikViewCategoryLevel2Id], Source.[QlikViewCategoryLevel2Id]) is not null) then
 update set
  [ProductCategoryGroupName] = Source.[ProductCategoryGroupName], 
  [QlikViewCategoryLevel2Name] = Source.[QlikViewCategoryLevel2Name], 
  [QlikViewCategoryLevel2Id] = Source.[QlikViewCategoryLevel2Id]
when not matched by target then
 insert([ProductCategoryGroupId],[ProductCategoryGroupName],[QlikViewCategoryLevel2Name],[QlikViewCategoryLevel2Id])
 values(Source.[ProductCategoryGroupId],Source.[ProductCategoryGroupName],Source.[QlikViewCategoryLevel2Name],Source.[QlikViewCategoryLevel2Id])
when not matched by source then 
 delete
;
GO
declare @mergeError int
 , @mergeCount int
select @mergeError = @@error, @mergeCount = @@rowcount
if @mergeError != 0
 begin
 print 'ERROR OCCURRED IN MERGE FOR [stg].[SSIS_BUDGET_ProductCategoryGroupLookup]. Rows affected: ' + cast(@mergeCount as varchar(100)); -- SQL should always return zero rows affected
 end
else
 begin
 print '[stg].[SSIS_BUDGET_ProductCategoryGroupLookup] rows affected by MERGE: ' + cast(@mergeCount as varchar(100));
 end
GO

set nocount off
GO

--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

set nocount on

merge into [stg].[SSIS_BUDGET_ProductCategoryLookup] as Target
using (values
  (1000,1001,'Bitumen membranes','',null,'Bitumen membranes',46258,90)
 ,(1000,1002,'Synthetic membranes - Polymeric (DEW)','',null,'Synthetic membranes, Polymeric',46260,80)
 ,(1000,1003,'Synthetic membranes - Monomeric','Synthetic membranes, Monomeric PVC',46290,'Synthetic Membranes, Monomeric & TPO',46259,80)
 ,(1000,1004,'Synthetic membranes - TPO','Synthetic membranes, TPO',46291,'Synthetic Membranes, Monomeric & TPO',46259,80)
 ,(1000,1005,'Liquid products','',null,'Liquid products',46261,90)
 ,(1000,1006,'Skylights & Smoke ventilation','',null,'Skylights & Smoke ventilation',46262,90)
 ,(1000,1007,'Thermal Insulation','',null,'Thermal Insulation',46263,90)
 ,(1000,1008,'Flat Roofing Accessories','',null,'Flat Roofing Accessories',46264,90)
 ,(2000,2001,'Shingles','',null,'Shingles',46298,90)
 ,(2000,2002,'Steel roof tiles (Decra)','',null,'Steel Roof Tiles (Decra)',46300,90)
 ,(2000,2003,'Steel roof accessories (Decra)','',null,'',null,0)
 ,(2000,2004,'Other Pitched Roof Products','',null,'Other Pitched Roof Products',46301,90)
 ,(3000,3001,'Underroofs','',null,'Underroofs',46318,90)
 ,(3000,3002,'Underroofs (SKF)','',null,'',null,0)
 ,(3000,3003,'Wall Barriers','',null,'Wall Barriers',46324,90)
 ,(3000,3004,'Wall Barriers (SKF)','',null,'',null,0)
 ,(3000,3005,'Below Ground','',null,'Below Ground',46329,90)
 ,(3000,3006,'Below Ground (SKF)','',null,'',null,0)
 ,(3000,3007,'Scaffold Sheeting & Tarpaulins (SKF)','',null,'Scaffold Sheeting & Tarpaulins',46336,70)
 ,(3000,3008,'Sound deadening','',null,'Sound deadening',46341,90)
 ,(4000,4001,'Civil eng. & structural waterproofing','',null,'Civil eng. & structural waterproofing',46347,90)
 ,(4000,4002,'Civil eng. & structural waterproofing (SKF)','',null,'',null,0)
 ,(4000,4003,'PMB','PMB',46354,'PMB and Road Emulsions',46353,80)
 ,(4000,4004,'Road Emulsions','Road Emulsions',46355,'PMB and Road Emulsions',46353,80)
 ,(5000,5001,'Other Products','',null,'',null,0)
 ,(6000,6001,'Installation Services','',null,'',null,0)
) as Source ([ProductCategoryGroupId],[ProductCategoryId],[ProductCategoryName],[QlikViewCategoryLevel4Name],[QlikViewCategoryLevel4Id],[QlikViewCategoryLevel3Name],[QlikViewCategoryLevel3Id],[MatchConfidence])
on (Target.[ProductCategoryId] = Source.[ProductCategoryId])
when matched and (
	nullif(Source.[ProductCategoryGroupId], Target.[ProductCategoryGroupId]) is not null or nullif(Target.[ProductCategoryGroupId], Source.[ProductCategoryGroupId]) is not null or 
	nullif(Source.[ProductCategoryName], Target.[ProductCategoryName]) is not null or nullif(Target.[ProductCategoryName], Source.[ProductCategoryName]) is not null or 
	nullif(Source.[QlikViewCategoryLevel4Name], Target.[QlikViewCategoryLevel4Name]) is not null or nullif(Target.[QlikViewCategoryLevel4Name], Source.[QlikViewCategoryLevel4Name]) is not null or 
	nullif(Source.[QlikViewCategoryLevel4Id], Target.[QlikViewCategoryLevel4Id]) is not null or nullif(Target.[QlikViewCategoryLevel4Id], Source.[QlikViewCategoryLevel4Id]) is not null or 
	nullif(Source.[QlikViewCategoryLevel3Name], Target.[QlikViewCategoryLevel3Name]) is not null or nullif(Target.[QlikViewCategoryLevel3Name], Source.[QlikViewCategoryLevel3Name]) is not null or 
	nullif(Source.[QlikViewCategoryLevel3Id], Target.[QlikViewCategoryLevel3Id]) is not null or nullif(Target.[QlikViewCategoryLevel3Id], Source.[QlikViewCategoryLevel3Id]) is not null or 
	nullif(Source.[MatchConfidence], Target.[MatchConfidence]) is not null or nullif(Target.[MatchConfidence], Source.[MatchConfidence]) is not null) then
 update set
  [ProductCategoryGroupId] = Source.[ProductCategoryGroupId], 
  [ProductCategoryName] = Source.[ProductCategoryName], 
  [QlikViewCategoryLevel4Name] = Source.[QlikViewCategoryLevel4Name], 
  [QlikViewCategoryLevel4Id] = Source.[QlikViewCategoryLevel4Id], 
  [QlikViewCategoryLevel3Name] = Source.[QlikViewCategoryLevel3Name], 
  [QlikViewCategoryLevel3Id] = Source.[QlikViewCategoryLevel3Id], 
  [MatchConfidence] = Source.[MatchConfidence]
when not matched by target then
 insert([ProductCategoryGroupId],[ProductCategoryId],[ProductCategoryName],[QlikViewCategoryLevel4Name],[QlikViewCategoryLevel4Id],[QlikViewCategoryLevel3Name],[QlikViewCategoryLevel3Id],[MatchConfidence])
 values(Source.[ProductCategoryGroupId],Source.[ProductCategoryId],Source.[ProductCategoryName],Source.[QlikViewCategoryLevel4Name],Source.[QlikViewCategoryLevel4Id],Source.[QlikViewCategoryLevel3Name],Source.[QlikViewCategoryLevel3Id],Source.[MatchConfidence])
when not matched by source then 
 delete
;
GO
declare @mergeError int
 , @mergeCount int
select @mergeError = @@error, @mergeCount = @@rowcount
if @mergeError != 0
 begin
 print 'ERROR OCCURRED IN MERGE FOR [stg].[SSIS_BUDGET_ProductCategoryLookup]. Rows affected: ' + cast(@mergeCount as varchar(100)); -- SQL should always return zero rows affected
 end
else
 begin
 print '[stg].[SSIS_BUDGET_ProductCategoryLookup] rows affected by MERGE: ' + cast(@mergeCount as varchar(100));
 end
GO

set nocount off
GO


GO

GO
PRINT N'Update complete.';


GO
