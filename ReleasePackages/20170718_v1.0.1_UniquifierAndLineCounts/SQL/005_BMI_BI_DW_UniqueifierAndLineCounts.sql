/*
	Target database:	BMI_BI_DW (configurable)
	Target instance:	(any)
	Generated date:		19/07/2017 12:28:05
	Generated on:		UKX260-003
	Package version:	1.0.1
	Migration version:	1.0.1
	Baseline version:	1.0.0
	ReadyRoll version:	1.14.6.4220
	Migrations pending:	(variable)

	IMPORTANT! "SQLCMD Mode" must be activated prior to execution (under the Query menu in SSMS).

	BEFORE EXECUTING THIS SCRIPT, WE STRONGLY RECOMMEND YOU TAKE A BACKUP OF YOUR DATABASE.

	This SQLCMD script is designed to be executed through MSBuild (via the .sqlproj Deploy target) however 
	it can also be run manually using SQL Management Studio. 

	It was generated by the ReadyRoll build task and contains logic to deploy the database, ensuring that 
	each of the incremental migrations is executed a single time only in alphabetical (filename) 
	order. If any errors occur within those scripts, the deployment will be aborted and the transaction
	rolled-back.

	NOTE: Automatic transaction management is provided for incremental migrations, so you don't need to
		  add any special BEGIN TRAN/COMMIT/ROLLBACK logic in those script files. 
		  However if you require transaction handling in your Pre/Post-Deployment scripts, you will
		  need to add this logic to the source .sql files yourself.
*/

----====================================================================================================================
---- SQLCMD Variables
---- This script is designed to be called by SQLCMD.EXE with variables specified on the command line.
---- However you can also run it in SQL Management Studio by uncommenting this section (CTRL+K, CTRL+U).
:setvar DatabaseName "BMI_BI_DW_PROD"
:setvar ReleaseVersion "1.0.1"
--:setvar ForceDeployWithoutBaseline "False"
--:setvar DeployPath ""
--:setvar DefaultFilePrefix "BMI_BI_DW"
--:setvar DefaultDataPath ""
--:setvar DefaultLogPath ""
--:setvar DefaultBackupPath ""
----====================================================================================================================

:on error exit -- Instructs SQLCMD to abort execution as soon as an erroneous batch is encountered

:setvar PackageVersion "1.0.1"

GO

SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;
SET XACT_ABORT ON; -- Abort the current batch immediately if a statement raises a run-time error and rollback any open transaction(s)

IF N'$(DatabaseName)' = N'$' + N'(DatabaseName)' -- Is SQLCMD mode enabled within the execution context (eg. SSMS)
	BEGIN
		IF IS_SRVROLEMEMBER(N'sysadmin') = 1
			BEGIN -- User is sysadmin; abort execution by disconnect the script from the database server
				RAISERROR(N'This script must be run in SQLCMD Mode (under the Query menu in SSMS). Aborting connection to suppress subsequent errors.', 20, 127, N'UNKNOWN') WITH LOG;
			END
		ELSE
			BEGIN -- User is not sysadmin; abort execution by switching off statement execution (script will continue to the end without performing any actual deployment work)
				RAISERROR(N'This script must be run in SQLCMD Mode (under the Query menu in SSMS). Script execution has been halted.', 16, 127, N'UNKNOWN') WITH NOWAIT;
			END		
	END		
GO
IF @@ERROR != 0
	BEGIN
		SET NOEXEC ON; -- SQLCMD is NOT enabled so prevent any further statements from executing
	END
GO
-- Beyond this point, no further explicit error handling is required because it can be assumed that SQLCMD mode is enabled








------------------------------------------------------------------------------------------------------------------------
------------------------------------------       PRE-DEPLOYMENT SCRIPTS       ------------------------------------------
------------------------------------------------------------------------------------------------------------------------

SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

PRINT '----- executing pre-deployment script "Pre-Deployment\01_Create_Database.sql" -----';

------------------------- BEGIN PRE-DEPLOYMENT SCRIPT: "Pre-Deployment\01_Create_Database.sql" ---------------------------
GO
if (db_id(N'$(DatabaseName)') is null)
begin
	print N'Creating $(DatabaseName)...';
end
go
if (db_id(N'$(DatabaseName)') is null)
begin
	create database [$(DatabaseName)] collate Latin1_General_BIN; -- MODIFY THIS STATEMENT TO SPECIFY A COLLATION FOR YOUR DATABASE
end
go

alter database [$(DatabaseName)] set compatibility_level = 130
go

--! Default all new columns to NOT NULL
alter database [$(DatabaseName)] set ansi_null_default on 
go

--! ON: NULL = NULL will always be false
alter database [$(DatabaseName)] set ansi_nulls on 
go

--! ON: Null and non null (n)char/binary are both padded, (n)varchar trailing spaces are retained
--! OFF: Not null (n)char and binary are padded but null (n)char/binary and (n)varchar trailing spaces are trimmed 
alter database [$(DatabaseName)] set ansi_padding off 
go
alter database [$(DatabaseName)] set ansi_warnings on 
go
alter database [$(DatabaseName)] set arithabort on 
go
alter database [$(DatabaseName)] set concat_null_yields_null on 
go
alter database [$(DatabaseName)] set numeric_roundabort off 
go
alter database [$(DatabaseName)] set quoted_identifier on 
go

--!
--!
--!
alter database [$(DatabaseName)] set auto_create_statistics on 
go
alter database [$(DatabaseName)] set auto_shrink off 
go
alter database [$(DatabaseName)] set auto_update_statistics on 
go
alter database [$(DatabaseName)] set auto_update_statistics_async off 
go

--!
--!
--!
alter database [$(DatabaseName)] set cursor_close_on_commit off 
go

--!
--!
--!
alter database [$(DatabaseName)] set read_write 
go

--!
--!
--!
alter database [$(DatabaseName)] set multi_user;
go

--!
--!
--!
alter database [$(DatabaseName)] set allow_snapshot_isolation on ;
go
alter database [$(DatabaseName)] set read_committed_snapshot on ;
go


GO
-------------------------- END PRE-DEPLOYMENT SCRIPT: "Pre-Deployment\01_Create_Database.sql" ----------------------------









------------------------------------------------------------------------------------------------------------------------
------------------------------------------       INCREMENTAL MIGRATIONS       ------------------------------------------
------------------------------------------------------------------------------------------------------------------------

SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
PRINT '# Beginning transaction';

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;

SET XACT_ABORT ON;

BEGIN TRANSACTION;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF (NOT EXISTS (SELECT * FROM sys.objects WHERE [object_id] = OBJECT_ID(N'[dbo].[__MigrationLog]') AND [type] = 'U'))
  BEGIN
    IF OBJECT_ID(N'[dbo].[__MigrationLogCurrent]', 'V') IS NOT NULL
      DROP VIEW [dbo].[__MigrationLogCurrent];
    CREATE TABLE [dbo].[__MigrationLog] (
      [migration_id] UNIQUEIDENTIFIER NOT NULL,
      [script_checksum] NVARCHAR (64) NOT NULL,
      [script_filename] NVARCHAR (255) NOT NULL,
      [complete_dt] DATETIME2 NOT NULL,
      [applied_by] NVARCHAR (100) NOT NULL,
      [deployed] TINYINT CONSTRAINT [DF___MigrationLog_deployed] DEFAULT (1) NOT NULL,
      [version] VARCHAR (255) NULL,
      [package_version] VARCHAR (255) NULL,
      [release_version] VARCHAR (255) NULL,
      [sequence_no] INT IDENTITY (1, 1) NOT NULL CONSTRAINT [PK___MigrationLog] PRIMARY KEY CLUSTERED ([migration_id], [complete_dt], [script_checksum]));
    CREATE NONCLUSTERED INDEX [IX___MigrationLog_CompleteDt]
      ON [dbo].[__MigrationLog]([complete_dt]);
    CREATE NONCLUSTERED INDEX [IX___MigrationLog_Version]
      ON [dbo].[__MigrationLog]([version]);
    CREATE UNIQUE NONCLUSTERED INDEX [UX___MigrationLog_SequenceNo]
      ON [dbo].[__MigrationLog]([sequence_no]);
    EXECUTE ('
	CREATE VIEW [dbo].[__MigrationLogCurrent]
			AS
			WITH currentMigration AS
			(
			  SELECT 
				 migration_id, script_checksum, script_filename, complete_dt, applied_by, deployed, ROW_NUMBER() OVER(PARTITION BY migration_id ORDER BY sequence_no DESC) AS RowNumber
			  FROM [dbo].[__MigrationLog]
			)
			SELECT  migration_id, script_checksum, script_filename, complete_dt, applied_by, deployed
			FROM currentMigration
			WHERE RowNumber = 1
	');
    IF OBJECT_ID(N'sp_addextendedproperty', 'P') IS NOT NULL
      BEGIN
        PRINT N'Creating extended properties';
        EXECUTE sp_addextendedproperty N'MS_Description', N'This table is required by ReadyRoll SQL Projects to keep track of which migrations have been executed during deployment. Please do not alter or remove this table from the database.', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', NULL, NULL;
        EXECUTE sp_addextendedproperty N'MS_Description', N'The executing user at the time of deployment (populated using the SYSTEM_USER function).', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', 'COLUMN', N'applied_by';
        EXECUTE sp_addextendedproperty N'MS_Description', N'The date/time that the migration finished executing. This value is populated using the SYSDATETIME function in SQL Server 2008+ or by using GETDATE in SQL Server 2005.', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', 'COLUMN', N'complete_dt';
        EXECUTE sp_addextendedproperty N'MS_Description', N'This column contains a number of potential states:

0 - Marked As Deployed: The migration was not executed.
1- Deployed: The migration was executed successfully.
2- Imported: The migration was generated by importing from this DB.

"Marked As Deployed" and "Imported" are similar in that the migration was not executed on this database; it was was only marked as such to prevent it from executing during subsequent deployments.', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', 'COLUMN', N'deployed';
        EXECUTE sp_addextendedproperty N'MS_Description', N'The unique identifier of a migration script file. This value is stored within the <Migration /> Xml fragment within the header of the file itself.

Note that it is possible for this value to repeat in the [__MigrationLog] table. In the case of programmable object scripts, a record will be inserted with a particular ID each time a change is made to the source file and subsequently deployed.

In the case of a migration, you may see the same [migration_id] repeated, but only in the scenario where the "Mark As Deployed" button/command has been run.', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', 'COLUMN', N'migration_id';
        EXECUTE sp_addextendedproperty N'MS_Description', N'If you have enabled SQLCMD Packaging in your ReadyRoll project, or if you are using Octopus Deploy, this will be the version number that your database package was stamped with at build-time.', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', 'COLUMN', N'package_version';
        EXECUTE sp_addextendedproperty N'MS_Description', N'If you are using Octopus Deploy, you can use the value in this column to look-up which release was responsible for deploying this migration.
If deploying via PowerShell, set the $ReleaseVersion variable to populate this column.
If deploying via Visual Studio, this column will always be NULL.', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', 'COLUMN', N'release_version';
        EXECUTE sp_addextendedproperty N'MS_Description', N'A SHA256 representation of the migration script file at the time of build.  This value is used to determine whether a migration has been changed since it was deployed. In the case of a programmable object script, a different checksum will cause the migration to be redeployed.
Note: if any variables have been specified as part of a deployment, this will not affect the checksum value.', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', 'COLUMN', N'script_checksum';
        EXECUTE sp_addextendedproperty N'MS_Description', N'The name of the migration script file on disk, at the time of build.
If Semantic Versioning has been enabled, then this value will contain the full relative path from the root of the project folder. If it is not enabled, then it will simply contain the filename itself.', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', 'COLUMN', N'script_filename';
        EXECUTE sp_addextendedproperty N'MS_Description', N'An auto-seeded numeric identifier that can be used to determine the order in which migrations were deployed.', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', 'COLUMN', N'sequence_no';
        EXECUTE sp_addextendedproperty N'MS_Description', N'The semantic version that this migration was created under. In ReadyRoll projects, a folder can be given a version number, e.g. 1.0.0, and one or more migration scripts can be stored within that folder to provide logical grouping of related database changes.', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', 'COLUMN', N'version';
        EXECUTE sp_addextendedproperty N'MS_Description', N'This view is required by ReadyRoll SQL Projects to determine whether a migration should be executed during a deployment. The view lists the most recent [__MigrationLog] entry for a given [migration_id], which is needed to determine whether a particular programmable object script needs to be (re)executed: a non-matching checksum on the current [__MigrationLog] entry will trigger the execution of a programmable object script. Please do not alter or remove this table from the database.', N'SCHEMA', N'dbo', N'VIEW', N'__MigrationLogCurrent', NULL, NULL;
      END
  END

IF NOT EXISTS (SELECT col.COLUMN_NAME FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS tab, INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE AS col WHERE col.CONSTRAINT_NAME = tab.CONSTRAINT_NAME AND col.TABLE_NAME = tab.TABLE_NAME AND col.TABLE_SCHEMA = tab.TABLE_SCHEMA AND tab.CONSTRAINT_TYPE = 'PRIMARY KEY' AND col.TABLE_SCHEMA = 'dbo' AND col.TABLE_NAME = '__MigrationLog' AND col.COLUMN_NAME = 'complete_dt')
  BEGIN
    RAISERROR (N'The ReadyRoll [dbo].[__MigrationLog] table has an incorrect primary key specification. This may be due to the fact that the <ReadyRollToolsVersion/> element in your .sqlproj file contains the wrong version number for your database. Please check earlier versions of your .sqlproj file to determine what is the appropriate version for your database (possibly 1.7 or 1.3.1).', 16, 127, N'UNKNOWN')
      WITH NOWAIT;
    RETURN;
  END

IF COL_LENGTH(N'[dbo].[__MigrationLog]', N'sequence_no') IS NULL
  BEGIN
    RAISERROR (N'The ReadyRoll [dbo].[__MigrationLog] table is missing the [sequence_no] column. This may be due to the fact that the <ReadyRollToolsVersion/> element in your .sqlproj file contains the wrong version number for your database. Please check earlier versions of your .sqlproj file to determine what is the appropriate version for your database (possibly 1.7 or 1.3.1).', 16, 127, N'UNKNOWN')
      WITH NOWAIT;
    RETURN;
  END

IF (NOT EXISTS (SELECT * FROM sys.objects WHERE [object_id] = OBJECT_ID(N'[dbo].[__MigrationLogCurrent]') AND [type] = 'V'))
  BEGIN
    EXECUTE ('
	CREATE VIEW [dbo].[__MigrationLogCurrent]
			AS
			WITH currentMigration AS
			(
			  SELECT 
				 migration_id, script_checksum, script_filename, complete_dt, applied_by, deployed, ROW_NUMBER() OVER(PARTITION BY migration_id ORDER BY sequence_no DESC) AS RowNumber
			  FROM [dbo].[__MigrationLog]
			)
			SELECT  migration_id, script_checksum, script_filename, complete_dt, applied_by, deployed
			FROM currentMigration
			WHERE RowNumber = 1
	');
  END

GO
DECLARE @baselineRequired AS BIT;

SET @baselineRequired = 0;

IF (EXISTS (SELECT * FROM sys.objects AS o WHERE o.is_ms_shipped = 0 AND NOT o.name LIKE '%__MigrationLog%') AND (SELECT count(*) FROM [dbo].[__MigrationLog]) = 0)
  SET @baselineRequired = 1;

IF @baselineRequired = 1
  BEGIN
    PRINT '----- baselined: Migrations\1.0.0\001_InitialProductionRelease_20170705.sql (marked as deployed) -----';
    INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
    VALUES                                         (CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER), '756C6CC8B79ACC73F4CEF51526E4B0FE2EF49E99169EB8483203B00A20A33233', 'Migrations\1.0.0\001_InitialProductionRelease_20170705.sql', SYSDATETIME(), SYSTEM_USER, 0, '1.0.0', '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);
  END

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  PRINT '

***** EXECUTING MIGRATION "Migrations\1.0.0\001_InitialProductionRelease_20170705.sql", ID: {ae53bbf8-0274-4933-8ebc-44b442241eb4} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('
PRINT N''Creating role AppDevelopersDEV''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE ROLE [AppDevelopersDEV]
AUTHORIZATION [dbo]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating role AppDevelopersPROD''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE ROLE [AppDevelopersPROD]
AUTHORIZATION [dbo]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating role AppDevelopersTEST''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE ROLE [AppDevelopersTEST]
AUTHORIZATION [dbo]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating role AppSupportReadOnly''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE ROLE [AppSupportReadOnly]
AUTHORIZATION [dbo]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating role BatchManagers''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE ROLE [BatchManagers]
AUTHORIZATION [dbo]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating role BusinessAnalystsDEV''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE ROLE [BusinessAnalystsDEV]
AUTHORIZATION [dbo]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating role BusinessAnalystsPROD''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE ROLE [BusinessAnalystsPROD]
AUTHORIZATION [dbo]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating role BusinessAnalystsTEST''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE ROLE [BusinessAnalystsTEST]
AUTHORIZATION [dbo]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating role CodeReviewers''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE ROLE [CodeReviewers]
AUTHORIZATION [dbo]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating role DataFeedReaders''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE ROLE [DataFeedReaders]
AUTHORIZATION [dbo]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating role DataFeedWriters''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE ROLE [DataFeedWriters]
AUTHORIZATION [dbo]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating role DataFeeds''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE ROLE [DataFeeds]
AUTHORIZATION [dbo]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating role DeploymentManagers''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE ROLE [DeploymentManagers]
AUTHORIZATION [dbo]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating role EtlDevelopersDEV''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE ROLE [EtlDevelopersDEV]
AUTHORIZATION [dbo]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating role EtlDevelopersPROD''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE ROLE [EtlDevelopersPROD]
AUTHORIZATION [dbo]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating role EtlDevelopersTEST''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE ROLE [EtlDevelopersTEST]
AUTHORIZATION [dbo]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating role PowerBiReporters''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE ROLE [PowerBiReporters]
AUTHORIZATION [dbo]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating role SqlDevelopersDEV''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE ROLE [SqlDevelopersDEV]
AUTHORIZATION [dbo]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating role SqlDevelopersPROD''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE ROLE [SqlDevelopersPROD]
AUTHORIZATION [dbo]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating role SqlDevelopersTEST''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE ROLE [SqlDevelopersTEST]
AUTHORIZATION [dbo]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Altering members of role CodeReviewers''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addrolemember N''CodeReviewers'', N''EtlDevelopersDEV''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Altering members of role db_datareader''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addrolemember N''db_datareader'', N''AppDevelopersDEV''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addrolemember N''db_datareader'', N''AppDevelopersTEST''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addrolemember N''db_datareader'', N''AppSupportReadOnly''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addrolemember N''db_datareader'', N''BusinessAnalystsDEV''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addrolemember N''db_datareader'', N''BusinessAnalystsTEST''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addrolemember N''db_datareader'', N''DeploymentManagers''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addrolemember N''db_datareader'', N''EtlDevelopersDEV''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addrolemember N''db_datareader'', N''EtlDevelopersTEST''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addrolemember N''db_datareader'', N''SqlDevelopersDEV''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addrolemember N''db_datareader'', N''SqlDevelopersPROD''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addrolemember N''db_datareader'', N''SqlDevelopersTEST''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Altering members of role db_datawriter''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addrolemember N''db_datawriter'', N''AppDevelopersDEV''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addrolemember N''db_datawriter'', N''DeploymentManagers''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addrolemember N''db_datawriter'', N''SqlDevelopersDEV''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addrolemember N''db_datawriter'', N''SqlDevelopersTEST''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Altering members of role db_ddladmin''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addrolemember N''db_ddladmin'', N''SqlDevelopersTEST''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Altering members of role db_owner''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addrolemember N''db_owner'', N''DeploymentManagers''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addrolemember N''db_owner'', N''SqlDevelopersDEV''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating schemas''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE SCHEMA [etl]
AUTHORIZATION [dbo]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE SCHEMA [log4]
AUTHORIZATION [dbo]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE SCHEMA [log4Private]
AUTHORIZATION [dbo]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE SCHEMA [log4Utils]
AUTHORIZATION [dbo]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE SCHEMA [pbi]
AUTHORIZATION [dbo]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE SCHEMA [qvstg]
AUTHORIZATION [dbo]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE SCHEMA [stg]
AUTHORIZATION [dbo]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE SCHEMA [utils]
AUTHORIZATION [dbo]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating sequences''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE SEQUENCE [dbo].[ReferenceTypeHistorySequence]
AS bigint
START WITH 100001
INCREMENT BY 2
MINVALUE 1001
MAXVALUE 9223372036854775805
NO CYCLE
NO CACHE
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE SEQUENCE [dbo].[ReferenceTypeKeySequence]
AS bigint
START WITH 100102
INCREMENT BY 2
MINVALUE 1002
MAXVALUE 9223372036854775806
NO CYCLE
NO CACHE
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating [qvstg].[Invoice]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE TABLE [qvstg].[Invoice]
(
[InvoiceKey] [int] NOT NULL,
[IsDeleted] [char] (1) NOT NULL,
[EtlCreatedOn] [datetime] NOT NULL,
[EtlCreatedBy] [varchar] (200) NOT NULL,
[EtlUpdatedOn] [datetime] NOT NULL,
[EtlUpdatedBy] [varchar] (200) NOT NULL,
[EtlDeletedOn] [datetime] NULL,
[EtlDeletedBy] [varchar] (200) NULL,
[DataSourceKey] [int] NOT NULL,
[QlikViewInvoiceKey] [nvarchar] (50) NOT NULL,
[LineCount] [int] NOT NULL,
[InvoiceDateKey] [int] NOT NULL,
[InvoiceDate] [datetime] NOT NULL,
[InvoiceNumber] [nvarchar] (20) NOT NULL,
[InvoiceLineNumber] [int] NOT NULL,
[NativeInvoiceLineNumber] [nvarchar] (20) NOT NULL,
[OrderNumber] [nvarchar] (20) NOT NULL,
[OrderLineNumber] [int] NOT NULL,
[NativeOrderLineNumber] [nvarchar] (20) NOT NULL,
[NativeInvoiceType] [nvarchar] (1) NOT NULL,
[InvoiceTypeName] [nvarchar] (29) NOT NULL,
[LocalSellingSite] [nvarchar] (20) NOT NULL,
[SiteKey] [int] NOT NULL,
[ProductKey] [int] NOT NULL,
[SoldToCustomerKey] [int] NOT NULL,
[ShippedToCustomerKey] [int] NOT NULL,
[NativeSalesPersonId] [nvarchar] (20) NOT NULL,
[NativeSalesPersonName] [nvarchar] (100) NOT NULL,
[DeliveryDateKey] [int] NOT NULL,
[DeliveryDate] [datetime] NULL,
[ExpectedPaymentDateKey] [int] NOT NULL,
[ExpectedPaymentDate] [datetime] NULL,
[ActualPaymentDateKey] [int] NOT NULL,
[ActualPaymentDate] [datetime] NULL,
[LocalDeliveryTerm] [nvarchar] (20) NOT NULL,
[LocalDeliveryTermText] [nvarchar] (100) NOT NULL,
[PaymentTermKey] [int] NOT NULL,
[LocalPaymentTerm] [nvarchar] (20) NOT NULL,
[LocalPaymentTermText] [nvarchar] (100) NOT NULL,
[InvoiceQuantityValue] [decimal] (12, 2) NULL,
[InvoiceQuantityUnitOfMeasure] [nvarchar] (20) NOT NULL,
[StatisticQuantityValue] [decimal] (12, 2) NULL,
[StatisticQuantityUnitOfMeasure] [nvarchar] (20) NOT NULL,
[Quantity] [decimal] (12, 2) NULL,
[LocalUnitOfMeasure] [nvarchar] (20) NOT NULL,
[LocalUnitOfMeasureHarmonised] [nvarchar] (20) NOT NULL,
[LocalUnitOfMeasureFactor] [decimal] (11, 4) NULL,
[InvoiceAmount] [decimal] (15, 4) NULL,
[LocalAmount] [decimal] (15, 4) NULL,
[GroupAmountEUR] [decimal] (15, 4) NULL,
[InvoiceCurrency] [nvarchar] (3) NOT NULL,
[LocalCurrency] [nvarchar] (3) NOT NULL,
[LineDiscountAmount] [decimal] (15, 4) NULL,
[InvoiceDiscountAmount] [decimal] (15, 4) NULL,
[LineBonusAmount] [decimal] (15, 4) NULL,
[BonusShareAmount] [decimal] (15, 4) NULL,
[StandardCost] [decimal] (15, 4) NULL,
[StandardFreight] [decimal] (15, 4) NULL
)
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating primary key [PK_qvstg_Invoice] on [qvstg].[Invoice]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [qvstg].[Invoice] ADD CONSTRAINT [PK_qvstg_Invoice] PRIMARY KEY CLUSTERED  ([InvoiceKey])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding constraints to [qvstg].[Invoice]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [qvstg].[Invoice] ADD CONSTRAINT [AK_qvstg_Invoice_UniqueifiedBusinessKey] UNIQUE NONCLUSTERED  ([DataSourceKey], [InvoiceNumber], [OrderNumber], [NativeInvoiceLineNumber], [NativeOrderLineNumber])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding constraints to [qvstg].[Invoice]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [qvstg].[Invoice] ADD CONSTRAINT [AK_qvstg_Invoice_DataSourceKey_QlikViewInvoiceKey] UNIQUE NONCLUSTERED  ([DataSourceKey], [QlikViewInvoiceKey])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating [qvstg].[Site]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE TABLE [qvstg].[Site]
(
[SiteKey] [int] NOT NULL,
[IsDeleted] [char] (1) NOT NULL,
[EtlCreatedOn] [datetime] NOT NULL,
[EtlCreatedBy] [varchar] (200) NOT NULL,
[EtlUpdatedOn] [datetime] NOT NULL,
[EtlUpdatedBy] [varchar] (200) NOT NULL,
[EtlDeletedOn] [datetime] NULL,
[EtlDeletedBy] [varchar] (200) NULL,
[NativeSiteKey] [nvarchar] (50) NOT NULL,
[SiteName] [nvarchar] (100) NOT NULL,
[SiteDescription] [nvarchar] (1000) NOT NULL,
[BusinessUnitKey] [int] NOT NULL,
[StrategicBusinessUnitCode] [nvarchar] (20) NOT NULL,
[SalesCenterSbuCode] [nvarchar] (20) NOT NULL,
[BusinessUnitName] [nvarchar] (100) NOT NULL,
[RegionId] [int] NULL,
[RegionName] [nvarchar] (50) NOT NULL,
[RegionDescription] [nvarchar] (1000) NOT NULL,
[DataSourceKey] [int] NULL,
[SourceSystemId] [int] NULL,
[SourceSystemName] [nvarchar] (100) NOT NULL
)
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating primary key [PK_qvstg_Site] on [qvstg].[Site]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [qvstg].[Site] ADD CONSTRAINT [PK_qvstg_Site] PRIMARY KEY CLUSTERED  ([SiteKey])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding constraints to [qvstg].[Site]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [qvstg].[Site] ADD CONSTRAINT [AK_qvstg_Site_NativeSiteKey] UNIQUE NONCLUSTERED  ([NativeSiteKey])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating [qvstg].[PaymentTerm]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE TABLE [qvstg].[PaymentTerm]
(
[PaymentTermKey] [int] NOT NULL,
[IsDeleted] [char] (1) NOT NULL,
[EtlCreatedOn] [datetime] NOT NULL,
[EtlCreatedBy] [varchar] (200) NOT NULL,
[EtlUpdatedOn] [datetime] NOT NULL,
[EtlUpdatedBy] [varchar] (200) NOT NULL,
[EtlDeletedOn] [datetime] NULL,
[EtlDeletedBy] [varchar] (200) NULL,
[NativePaymentTermKey] [nvarchar] (50) NOT NULL,
[PaymentTermName] [nvarchar] (100) NOT NULL,
[PaymentTermDays] [int] NULL,
[PaymentTermDescription] [nvarchar] (500) NOT NULL
)
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating primary key [PK_qvstg_PaymentTerm] on [qvstg].[PaymentTerm]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [qvstg].[PaymentTerm] ADD CONSTRAINT [PK_qvstg_PaymentTerm] PRIMARY KEY CLUSTERED  ([PaymentTermKey])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding constraints to [qvstg].[PaymentTerm]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [qvstg].[PaymentTerm] ADD CONSTRAINT [AK_qvstg_PaymentTerm_NativePaymentTermKey] UNIQUE NONCLUSTERED  ([NativePaymentTermKey])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating [qvstg].[Customer]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE TABLE [qvstg].[Customer]
(
[CustomerKey] [int] NOT NULL,
[IsDeleted] [char] (1) NOT NULL,
[EtlCreatedOn] [datetime] NOT NULL,
[EtlCreatedBy] [varchar] (200) NOT NULL,
[EtlUpdatedOn] [datetime] NOT NULL,
[EtlUpdatedBy] [varchar] (200) NOT NULL,
[EtlDeletedOn] [datetime] NULL,
[EtlDeletedBy] [varchar] (200) NULL,
[DataSourceKey] [int] NULL,
[NativeCustomerKey] [nvarchar] (50) NOT NULL,
[CustomerNumber] [nvarchar] (50) NOT NULL,
[CustomerName] [nvarchar] (100) NOT NULL,
[CustomerAddress1] [nvarchar] (100) NOT NULL,
[CustomerAddress2] [nvarchar] (100) NOT NULL,
[CustomerAddress3] [nvarchar] (100) NOT NULL,
[CustomerZipCode] [nvarchar] (100) NOT NULL,
[CustomerCity] [nvarchar] (100) NOT NULL,
[CustomerCountry] [nvarchar] (100) NOT NULL,
[CustomerVatNumber] [nvarchar] (50) NOT NULL,
[CustomerTypeId] [int] NULL,
[CustomerTypeName] [nvarchar] (100) NOT NULL,
[CustomerGroup1] [nvarchar] (100) NOT NULL,
[CustomerGroup2] [nvarchar] (100) NOT NULL,
[CustomerGroup3] [nvarchar] (100) NOT NULL,
[CustomerGroup4] [nvarchar] (100) NOT NULL,
[CustomerGroup5] [nvarchar] (100) NOT NULL,
[CategoryIsMapped] [char] (1) NOT NULL,
[NativeCustomerCategoryKey] [nvarchar] (100) NOT NULL,
[CustomerCategoryBaseLevel] [nvarchar] (200) NOT NULL,
[CustomerCategoryLevel1] [nvarchar] (100) NOT NULL,
[CustomerCategoryLevel2] [nvarchar] (100) NOT NULL,
[CustomerCategoryLevel3] [nvarchar] (100) NOT NULL,
[CustomerCategoryLevel4] [nvarchar] (100) NOT NULL,
[CustomerCategoryLevel5] [nvarchar] (100) NOT NULL,
[CustomerCategoryLevel6] [nvarchar] (100) NOT NULL,
[CustomerCategoryLevel7] [nvarchar] (100) NOT NULL,
[CustomerCategoryLevel8] [nvarchar] (100) NOT NULL
)
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating primary key [PK_qvstg_Customer] on [qvstg].[Customer]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [qvstg].[Customer] ADD CONSTRAINT [PK_qvstg_Customer] PRIMARY KEY CLUSTERED  ([CustomerKey])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding constraints to [qvstg].[Customer]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [qvstg].[Customer] ADD CONSTRAINT [AK_qvstg_Customer_DataSourceKey_NativeCustomerKey] UNIQUE NONCLUSTERED  ([DataSourceKey], [NativeCustomerKey])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating [qvstg].[Product]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE TABLE [qvstg].[Product]
(
[ProductKey] [int] NOT NULL,
[IsDeleted] [char] (1) NOT NULL,
[EtlCreatedOn] [datetime] NOT NULL,
[EtlCreatedBy] [varchar] (200) NOT NULL,
[EtlUpdatedOn] [datetime] NOT NULL,
[EtlUpdatedBy] [varchar] (200) NOT NULL,
[EtlDeletedOn] [datetime] NULL,
[EtlDeletedBy] [varchar] (200) NULL,
[DataSourceKey] [int] NOT NULL,
[NativeProductKey] [nvarchar] (50) NOT NULL,
[ProductNumber] [nvarchar] (50) NOT NULL,
[ProductName] [nvarchar] (100) NOT NULL,
[ProductTypeId] [int] NULL,
[ProductTypeName] [nvarchar] (50) NOT NULL,
[ProductGnit] [nvarchar] (50) NOT NULL,
[ProductDescription1] [nvarchar] (100) NOT NULL,
[ProductDescription2] [nvarchar] (100) NOT NULL,
[LocalProductGroup1] [nvarchar] (50) NOT NULL,
[LocalProductGroup2] [nvarchar] (50) NOT NULL,
[LocalProductGroup3] [nvarchar] (50) NOT NULL,
[LocalProductGroup4] [nvarchar] (50) NOT NULL,
[LocalProductGroup5] [nvarchar] (50) NOT NULL,
[NativeProductCategoryKey] [nvarchar] (100) NOT NULL,
[ProductCategoryBaseLevel] [nvarchar] (200) NOT NULL,
[ProductCategoryLevel1] [nvarchar] (200) NOT NULL,
[ProductCategoryLevel2] [nvarchar] (200) NOT NULL,
[ProductCategoryLevel3] [nvarchar] (200) NOT NULL,
[ProductCategoryLevel4] [nvarchar] (200) NOT NULL,
[ProductCategoryLevel5] [nvarchar] (200) NOT NULL
)
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating primary key [PK_qvstg_Product] on [qvstg].[Product]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [qvstg].[Product] ADD CONSTRAINT [PK_qvstg_Product] PRIMARY KEY CLUSTERED  ([ProductKey])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding constraints to [qvstg].[Product]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [qvstg].[Product] ADD CONSTRAINT [AK_qvstg_Product_DataSourceKey_NativeProductKey] UNIQUE NONCLUSTERED  ([DataSourceKey], [NativeProductKey])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating [qvstg].[BudgetSales]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE TABLE [qvstg].[BudgetSales]
(
[BudgetSaleKey] [int] NOT NULL IDENTITY(100, 1),
[EtlDeltaHash] [char] (32) NOT NULL,
[EtlCreatedOn] [datetime] NOT NULL,
[EtlCreatedBy] [varchar] (200) NOT NULL,
[EtlUpdatedOn] [datetime] NOT NULL,
[EtlUpdatedBy] [varchar] (200) NOT NULL,
[EtlDeletedOn] [datetime] NULL,
[EtlDeletedBy] [varchar] (200) NULL,
[IsDeleted] [char] (1) NOT NULL,
[LineCount] [int] NOT NULL,
[BusinessUnitKey] [int] NOT NULL,
[BudgetMonthDateKey] [int] NOT NULL,
[InstallationServices] [decimal] (28, 4) NULL,
[ProducedGoods] [decimal] (28, 4) NULL,
[GroupGoods] [decimal] (28, 4) NULL,
[CommercialGoods] [decimal] (28, 4) NULL,
[ExternalSales] [decimal] (28, 4) NULL,
[IC_Transf_SBU] [decimal] (28, 4) NULL,
[IC_Transf_Region] [decimal] (28, 4) NULL,
[IC_Transf_Abroad] [decimal] (28, 4) NULL,
[IC_Transf_US] [decimal] (28, 4) NULL,
[Total_IC_Sales] [decimal] (28, 4) NULL,
[TotalSalesAndTransfers] [decimal] (28, 4) NULL
)
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating primary key [PK_qvstg_BudgetSale] on [qvstg].[BudgetSales]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [qvstg].[BudgetSales] ADD CONSTRAINT [PK_qvstg_BudgetSale] PRIMARY KEY CLUSTERED  ([BudgetSaleKey])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding constraints to [qvstg].[BudgetSales]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [qvstg].[BudgetSales] ADD CONSTRAINT [AK_qvstg_BudgetSale_BusinessUnitKey_BudgetMonthDateKey] UNIQUE NONCLUSTERED  ([BusinessUnitKey], [BudgetMonthDateKey])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating index [NCI_qvstg_BudgetSale_LoadFilter] on [qvstg].[BudgetSales]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE NONCLUSTERED INDEX [NCI_qvstg_BudgetSale_LoadFilter] ON [qvstg].[BudgetSales] ([BusinessUnitKey], [BudgetMonthDateKey], [EtlDeltaHash], [IsDeleted])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating [qvstg].[BudgetVolumes]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE TABLE [qvstg].[BudgetVolumes]
(
[BudgetVolumesKey] [int] NOT NULL IDENTITY(100, 1),
[EtlDeltaHash] [char] (32) NOT NULL,
[EtlCreatedOn] [datetime] NOT NULL,
[EtlCreatedBy] [varchar] (200) NOT NULL,
[EtlUpdatedOn] [datetime] NOT NULL,
[EtlUpdatedBy] [varchar] (200) NOT NULL,
[EtlDeletedOn] [datetime] NULL,
[EtlDeletedBy] [varchar] (200) NULL,
[IsDeleted] [char] (1) NOT NULL,
[LineCount] [int] NOT NULL,
[BusinessUnitKey] [int] NOT NULL,
[ProductCategoryKey] [int] NOT NULL,
[Jan_YTD] [decimal] (28, 4) NULL,
[Feb_YTD] [decimal] (28, 4) NULL,
[Mar_YTD] [decimal] (28, 4) NULL,
[Apr_YTD] [decimal] (28, 4) NULL,
[May_YTD] [decimal] (28, 4) NULL,
[Jun_YTD] [decimal] (28, 4) NULL,
[Jul_YTD] [decimal] (28, 4) NULL,
[Aug_YTD] [decimal] (28, 4) NULL,
[Sep_YTD] [decimal] (28, 4) NULL,
[Oct_YTD] [decimal] (28, 4) NULL,
[Nov_YTD] [decimal] (28, 4) NULL,
[Dec_YTD] [decimal] (28, 4) NULL
)
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating primary key [PK_qvstg_BudgetVolumes] on [qvstg].[BudgetVolumes]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [qvstg].[BudgetVolumes] ADD CONSTRAINT [PK_qvstg_BudgetVolumes] PRIMARY KEY CLUSTERED  ([BudgetVolumesKey])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding constraints to [qvstg].[BudgetVolumes]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [qvstg].[BudgetVolumes] ADD CONSTRAINT [AK_qvstg_BudgetVolumes_BusinessUnitKey_ProductCategoryKey] UNIQUE NONCLUSTERED  ([BusinessUnitKey], [ProductCategoryKey])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating index [NCI_qvstg_BudgetVolumes_LoadFilter] on [qvstg].[BudgetVolumes]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE NONCLUSTERED INDEX [NCI_qvstg_BudgetVolumes_LoadFilter] ON [qvstg].[BudgetVolumes] ([BusinessUnitKey], [ProductCategoryKey], [EtlDeltaHash], [IsDeleted])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating [dbo].[DataSource]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE TABLE [dbo].[DataSource]
(
[DataSourceKey] [int] NOT NULL CONSTRAINT [DF_DataSource_DataSourceKey] DEFAULT (NEXT VALUE FOR [dbo].[ReferenceTypeKeySequence]),
[DataSourceCode] [nvarchar] (20) NOT NULL,
[DataSourceName] [nvarchar] (50) NOT NULL,
[DataSourceGroup] [nvarchar] (50) NOT NULL,
[HostCountry] [nvarchar] (50) NOT NULL CONSTRAINT [DF_DataSource_HostCountry] DEFAULT (''''),
[DataCountries] [nvarchar] (100) NOT NULL CONSTRAINT [DF_DataSource_DataCountries] DEFAULT (''''),
[Narrative] [nvarchar] (500) NOT NULL CONSTRAINT [DF_DataSource_Narrative] DEFAULT (''''),
[QlikViewSourceSystemId] [int] NULL,
[IsActive] [char] (1) NOT NULL CONSTRAINT [DF_DataSource_IsActive] DEFAULT (''Y'')
)
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating primary key [PK_DataSource] on [dbo].[DataSource]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [dbo].[DataSource] ADD CONSTRAINT [PK_DataSource] PRIMARY KEY CLUSTERED  ([DataSourceKey])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding constraints to [dbo].[DataSource]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [dbo].[DataSource] ADD CONSTRAINT [AK_DataSource_Code] UNIQUE NONCLUSTERED  ([DataSourceCode])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding constraints to [dbo].[DataSource]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [dbo].[DataSource] ADD CONSTRAINT [AK_DataSource_Name] UNIQUE NONCLUSTERED  ([DataSourceName])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating [log4Private].[JournalControl]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE TABLE [log4Private].[JournalControl]
(
[ModuleName] [varchar] (255) NOT NULL,
[OnOffSwitch] [varchar] (3) NOT NULL
)
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating primary key [PK_JournalControl] on [log4Private].[JournalControl]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [log4Private].[JournalControl] ADD CONSTRAINT [PK_JournalControl] PRIMARY KEY CLUSTERED  ([ModuleName])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating [dbo].[dimDate]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE TABLE [dbo].[dimDate]
(
[DateKey] [int] NOT NULL,
[ActualDate] [date] NULL,
[DateNameEU] [varchar] (30) NOT NULL,
[DateNameUS] [varchar] (30) NOT NULL,
[EnglishMonthCode] [char] (3) NOT NULL,
[EnglishMonthName] [varchar] (10) NOT NULL,
[EnglishDayCode] [char] (3) NOT NULL,
[EnglishDayName] [varchar] (10) NOT NULL,
[CalendarYear] [int] NULL,
[CalendarQuarter] [tinyint] NULL,
[MonthNumberInYear] [tinyint] NULL,
[WeekNumberInYear] [tinyint] NULL,
[DayNumberInYear] [smallint] NULL,
[DayNumberInMonth] [tinyint] NULL,
[DayNumberInWeek] [tinyint] NULL,
[YearMonth] [varchar] (10) NOT NULL,
[YearQuarter] [varchar] (10) NOT NULL,
[IsWeekend] [varchar] (10) NOT NULL,
[IsLastDayInMonth] [varchar] (10) NOT NULL,
[MondayWeekCommencing] [date] NULL,
[WorkDaysInMonthTotal] [tinyint] NULL,
[WorkDaysInMonthToDate] [tinyint] NULL,
[FiscalPeriod] [tinyint] NULL,
[FiscalQuarter] [tinyint] NULL,
[FiscalYear] [int] NULL,
[FiscalPeriodCode] [char] (3) NOT NULL,
[FiscalPeriodName] [varchar] (10) NOT NULL,
[FiscalYearPeriod] [varchar] (10) NOT NULL,
[FiscalYearQuarter] [varchar] (10) NOT NULL,
[WorkDaysInFiscalPeriodTotal] [tinyint] NULL,
[WorkDaysInFiscalPeriodToDate] [tinyint] NULL
)
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating primary key [PK_dimDate] on [dbo].[dimDate]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [dbo].[dimDate] ADD CONSTRAINT [PK_dimDate] PRIMARY KEY CLUSTERED  ([DateKey])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating [qvstg].[ProductCategory]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE TABLE [qvstg].[ProductCategory]
(
[ProductCategoryKey] [int] NOT NULL,
[IsDeleted] [char] (1) NOT NULL,
[EtlCreatedOn] [datetime] NOT NULL,
[EtlCreatedBy] [varchar] (200) NOT NULL,
[EtlUpdatedOn] [datetime] NOT NULL,
[EtlUpdatedBy] [varchar] (200) NOT NULL,
[EtlDeletedOn] [datetime] NULL,
[EtlDeletedBy] [varchar] (200) NULL,
[NativeProductCategoryKey] [nvarchar] (50) NOT NULL,
[ProductCategoryId] [int] NOT NULL,
[ProductCategoryName] [nvarchar] (100) NOT NULL,
[NodeDepth] [tinyint] NOT NULL,
[Level3Id] [int] NOT NULL,
[Level3Name] [nvarchar] (100) NOT NULL,
[Level2Id] [int] NOT NULL,
[Level2Name] [nvarchar] (100) NOT NULL,
[Level1Id] [int] NOT NULL,
[Level1Name] [nvarchar] (100) NOT NULL,
[ProductCategoryDescription] [nvarchar] (500) NOT NULL
)
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating primary key [PK_qvstg_ProductCategory] on [qvstg].[ProductCategory]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [qvstg].[ProductCategory] ADD CONSTRAINT [PK_qvstg_ProductCategory] PRIMARY KEY CLUSTERED  ([ProductCategoryKey])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding constraints to [qvstg].[ProductCategory]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [qvstg].[ProductCategory] ADD CONSTRAINT [AK_qvstg_ProductCategory_NativeProductCategoryKey] UNIQUE NONCLUSTERED  ([NativeProductCategoryKey])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating [qvstg].[OrderBacklog]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE TABLE [qvstg].[OrderBacklog]
(
[OrderBacklogKey] [int] NOT NULL,
[IsDeleted] [char] (1) NOT NULL,
[EtlCreatedOn] [datetime] NOT NULL,
[EtlCreatedBy] [varchar] (200) NOT NULL,
[EtlUpdatedOn] [datetime] NOT NULL,
[EtlUpdatedBy] [varchar] (200) NOT NULL,
[EtlDeletedOn] [datetime] NULL,
[EtlDeletedBy] [varchar] (200) NULL,
[DataSourceKey] [int] NOT NULL,
[QlikViewOrderBacklogKey] [nvarchar] (50) NOT NULL,
[LineCount] [int] NOT NULL,
[OrderNumber] [nvarchar] (50) NOT NULL,
[OrderLineNumber] [int] NOT NULL,
[NativeOrderLineNumber] [nvarchar] (50) NOT NULL,
[ExpectedInvoiceDateKey] [int] NOT NULL,
[ExpectedInvoiceDate] [datetime] NOT NULL,
[NativeOrderType] [nvarchar] (1) NOT NULL,
[OrderTypeName] [nvarchar] (50) NOT NULL,
[LocalSellingSite] [nvarchar] (50) NOT NULL,
[SiteKey] [int] NOT NULL,
[ProductKey] [int] NOT NULL,
[SoldToCustomerKey] [int] NOT NULL,
[ShippedToCustomerKey] [int] NOT NULL,
[NativeSalesPersonId] [nvarchar] (50) NOT NULL,
[NativeSalesPersonName] [nvarchar] (100) NOT NULL,
[OrderQuantityValue] [decimal] (12, 2) NULL,
[OrderQuantityUnitOfMeasure] [nvarchar] (20) NOT NULL,
[StatisticQuantityValue] [decimal] (12, 2) NULL,
[StatisticQuantityUnitOfMeasure] [nvarchar] (20) NOT NULL,
[Quantity] [decimal] (12, 2) NULL,
[LocalUnitOfMeasure] [nvarchar] (20) NOT NULL,
[LocalUnitOfMeasureHarmonised] [nvarchar] (20) NOT NULL,
[LocalUnitOfMeasureFactor] [decimal] (11, 4) NULL,
[OrderAmount] [decimal] (15, 4) NULL,
[LocalAmount] [decimal] (15, 4) NULL,
[GroupAmountEUR] [decimal] (15, 4) NULL,
[OrderCurrency] [nvarchar] (3) NOT NULL,
[LocalCurrency] [nvarchar] (3) NOT NULL,
[LineDiscountAmount] [decimal] (15, 4) NULL,
[OrderDiscountAmount] [decimal] (15, 4) NULL,
[LineBonusAmount] [decimal] (15, 4) NULL,
[BonusShareAmount] [decimal] (15, 4) NULL
)
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating primary key [PK_qvstg_OrderBacklog] on [qvstg].[OrderBacklog]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [qvstg].[OrderBacklog] ADD CONSTRAINT [PK_qvstg_OrderBacklog] PRIMARY KEY CLUSTERED  ([OrderBacklogKey])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding constraints to [qvstg].[OrderBacklog]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [qvstg].[OrderBacklog] ADD CONSTRAINT [AK_qvstg_OrderBacklog_UniqueifiedBusinessKey] UNIQUE NONCLUSTERED  ([DataSourceKey], [OrderNumber], [NativeOrderLineNumber])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding constraints to [qvstg].[OrderBacklog]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [qvstg].[OrderBacklog] ADD CONSTRAINT [AK_qvstg_OrderBacklog_DataSourceKey_QlikViewOrderBacklogKey] UNIQUE NONCLUSTERED  ([DataSourceKey], [QlikViewOrderBacklogKey])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating [qvstg].[OrderShippedNotInvoiced]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE TABLE [qvstg].[OrderShippedNotInvoiced]
(
[OrderShippedNotInvoicedKey] [int] NOT NULL,
[IsDeleted] [char] (1) NOT NULL,
[EtlCreatedOn] [datetime] NOT NULL,
[EtlCreatedBy] [varchar] (200) NOT NULL,
[EtlUpdatedOn] [datetime] NOT NULL,
[EtlUpdatedBy] [varchar] (200) NOT NULL,
[EtlDeletedOn] [datetime] NULL,
[EtlDeletedBy] [varchar] (200) NULL,
[DataSourceKey] [int] NOT NULL,
[QlikViewOrderShippedNotInvoicedKey] [nvarchar] (50) NOT NULL,
[LineCount] [int] NOT NULL,
[OrderNumber] [nvarchar] (50) NOT NULL,
[OrderLineNumber] [int] NOT NULL,
[NativeOrderLineNumber] [nvarchar] (50) NOT NULL,
[NativeShippingDocumentKey] [nvarchar] (50) NOT NULL,
[ExpectedInvoiceDateKey] [int] NOT NULL,
[ExpectedInvoiceDate] [datetime] NOT NULL,
[NativeOrderType] [nvarchar] (1) NOT NULL,
[OrderTypeName] [nvarchar] (50) NOT NULL,
[LocalSellingSite] [nvarchar] (50) NOT NULL,
[SiteKey] [int] NOT NULL,
[ProductKey] [int] NOT NULL,
[SoldToCustomerKey] [int] NOT NULL,
[ShippedToCustomerKey] [int] NOT NULL,
[NativeSalesPersonId] [nvarchar] (50) NOT NULL,
[NativeSalesPersonName] [nvarchar] (100) NOT NULL,
[ShippedQuantityValue] [decimal] (12, 2) NULL,
[ShippedQuantityUnitOfMeasure] [nvarchar] (20) NOT NULL,
[StatisticQuantityValue] [decimal] (12, 2) NULL,
[StatisticQuantityUnitOfMeasure] [nvarchar] (20) NOT NULL,
[Quantity] [decimal] (12, 2) NULL,
[LocalUnitOfMeasure] [nvarchar] (20) NOT NULL,
[LocalUnitOfMeasureHarmonised] [nvarchar] (20) NOT NULL,
[LocalUnitOfMeasureFactor] [decimal] (11, 4) NULL,
[ShippedAmount] [decimal] (15, 4) NULL,
[LocalAmount] [decimal] (15, 4) NULL,
[GroupAmountEUR] [decimal] (15, 4) NULL,
[ShippedCurrency] [nvarchar] (3) NOT NULL,
[LocalCurrency] [nvarchar] (3) NOT NULL,
[LineDiscountAmount] [decimal] (15, 4) NULL,
[OrderDiscountAmount] [decimal] (15, 4) NULL,
[LineBonusAmount] [decimal] (15, 4) NULL,
[BonusShareAmount] [decimal] (15, 4) NULL
)
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating primary key [PK_qvstg_OrderShippedNotInvoiced] on [qvstg].[OrderShippedNotInvoiced]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [qvstg].[OrderShippedNotInvoiced] ADD CONSTRAINT [PK_qvstg_OrderShippedNotInvoiced] PRIMARY KEY CLUSTERED  ([OrderShippedNotInvoicedKey])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding constraints to [qvstg].[OrderShippedNotInvoiced]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [qvstg].[OrderShippedNotInvoiced] ADD CONSTRAINT [AK_qvstg_OrderShippedNotInvoiced_UniqueifiedBusinessKey] UNIQUE NONCLUSTERED  ([DataSourceKey], [OrderNumber], [NativeOrderLineNumber], [NativeShippingDocumentKey])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding constraints to [qvstg].[OrderShippedNotInvoiced]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [qvstg].[OrderShippedNotInvoiced] ADD CONSTRAINT [AK_qvstg_OrderShippedNotInvoiced_DataSourceKey_QlikViewOrderShippedNotInvoicedKey] UNIQUE NONCLUSTERED  ([DataSourceKey], [QlikViewOrderShippedNotInvoicedKey])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating [qvstg].[BusinessUnit]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE TABLE [qvstg].[BusinessUnit]
(
[BusinessUnitKey] [int] NOT NULL,
[IsDeleted] [char] (1) NOT NULL,
[EtlCreatedOn] [datetime] NOT NULL,
[EtlCreatedBy] [varchar] (200) NOT NULL,
[EtlUpdatedOn] [datetime] NOT NULL,
[EtlUpdatedBy] [varchar] (200) NOT NULL,
[EtlDeletedOn] [datetime] NULL,
[EtlDeletedBy] [varchar] (200) NULL,
[NativeBusinessUnitKey] [nvarchar] (50) NOT NULL,
[StrategicBusinessUnitCode] [nvarchar] (20) NOT NULL,
[SalesCenterSbuCode] [nvarchar] (20) NOT NULL,
[BusinessUnitName] [nvarchar] (100) NOT NULL,
[RegionId] [int] NULL,
[RegionName] [nvarchar] (50) NOT NULL,
[RegionDescription] [nvarchar] (1000) NOT NULL
)
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating primary key [PK_qvstg_BusinessUnit] on [qvstg].[BusinessUnit]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [qvstg].[BusinessUnit] ADD CONSTRAINT [PK_qvstg_BusinessUnit] PRIMARY KEY CLUSTERED  ([BusinessUnitKey])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding constraints to [qvstg].[BusinessUnit]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [qvstg].[BusinessUnit] ADD CONSTRAINT [AK_qvstg_BusinessUnit_NativeBusinessUnitKey] UNIQUE NONCLUSTERED  ([NativeBusinessUnitKey])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating [log4Private].[SqlException]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE TABLE [log4Private].[SqlException]
(
[ExceptionId] [int] NOT NULL IDENTITY(1, 1),
[UtcDate] [datetime] NOT NULL CONSTRAINT [DF_SqlException_UtcDate] DEFAULT (getutcdate()),
[SystemDate] [datetime] NOT NULL CONSTRAINT [DF_SqlException_SystemDate] DEFAULT (getdate()),
[ErrorContext] [nvarchar] (512) NOT NULL,
[ErrorNumber] [int] NOT NULL,
[ErrorSeverity] [int] NOT NULL,
[ErrorState] [int] NOT NULL,
[ErrorProcedure] [nvarchar] (128) NOT NULL,
[ErrorLine] [int] NOT NULL,
[ErrorMessage] [nvarchar] (max) NOT NULL,
[ErrorDatabase] [nvarchar] (128) NOT NULL,
[SessionIdent] [int] NOT NULL,
[ServerName] [nvarchar] (128) NOT NULL,
[HostName] [nvarchar] (128) NOT NULL,
[ProgramName] [nvarchar] (128) NOT NULL,
[NTDomain] [nvarchar] (128) NOT NULL,
[NTUsername] [nvarchar] (128) NOT NULL,
[LoginName] [nvarchar] (128) NOT NULL,
[OriginalLoginName] [nvarchar] (128) NOT NULL,
[SessionLoginTime] [datetime] NULL
)
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating primary key [PK_SqlException] on [log4Private].[SqlException]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [log4Private].[SqlException] ADD CONSTRAINT [PK_SqlException] PRIMARY KEY CLUSTERED  ([ExceptionId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating [log4Private].[Severity]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE TABLE [log4Private].[Severity]
(
[SeverityId] [int] NOT NULL,
[SeverityName] [varchar] (128) NOT NULL
)
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating primary key [PK_Severity] on [log4Private].[Severity]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [log4Private].[Severity] ADD CONSTRAINT [PK_Severity] PRIMARY KEY CLUSTERED  ([SeverityId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding constraints to [log4Private].[Severity]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [log4Private].[Severity] ADD CONSTRAINT [UQ_Severity_SeverityName] UNIQUE NONCLUSTERED  ([SeverityName])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating [log4Private].[Journal]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE TABLE [log4Private].[Journal]
(
[JournalId] [int] NOT NULL IDENTITY(1, 1),
[UtcDate] [datetime] NOT NULL CONSTRAINT [DF_Journal_UtcDate] DEFAULT (getutcdate()),
[SystemDate] [datetime] NOT NULL CONSTRAINT [DF_Journal_SystemDate] DEFAULT (getdate()),
[Task] [varchar] (128) NOT NULL CONSTRAINT [DF_Journal_Task] DEFAULT (''''),
[FunctionName] [varchar] (256) NOT NULL,
[StepInFunction] [varchar] (128) NOT NULL,
[MessageText] [varchar] (512) NOT NULL,
[SeverityId] [int] NOT NULL,
[ExceptionId] [int] NULL,
[SessionId] [int] NOT NULL,
[ServerName] [nvarchar] (128) NOT NULL,
[DatabaseName] [nvarchar] (128) NOT NULL,
[HostName] [nvarchar] (128) NULL,
[ProgramName] [nvarchar] (128) NULL,
[NTDomain] [nvarchar] (128) NULL,
[NTUsername] [nvarchar] (128) NULL,
[LoginName] [nvarchar] (128) NULL,
[OriginalLoginName] [nvarchar] (128) NULL,
[SessionLoginTime] [datetime] NULL
)
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating primary key [PK_Journal] on [log4Private].[Journal]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [log4Private].[Journal] ADD CONSTRAINT [PK_Journal] PRIMARY KEY CLUSTERED  ([JournalId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating [log4Private].[JournalDetail]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE TABLE [log4Private].[JournalDetail]
(
[JournalId] [int] NOT NULL,
[ExtraInfo] [varchar] (max) NULL
)
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating primary key [PK_JournalDetail] on [log4Private].[JournalDetail]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [log4Private].[JournalDetail] ADD CONSTRAINT [PK_JournalDetail] PRIMARY KEY CLUSTERED  ([JournalId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating [stg].[SSIS_STG_BUDGET_2017_Volume]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE TABLE [stg].[SSIS_STG_BUDGET_2017_Volume]
(
[NativeBusinessUnit] [nvarchar] (200) NOT NULL,
[NativeProductCategory] [nvarchar] (200) NOT NULL,
[BusinessUnitKey] [int] NOT NULL,
[ProductCategoryKey] [int] NOT NULL,
[Jan_YTD] [decimal] (38, 16) NULL,
[Feb_YTD] [decimal] (38, 16) NULL,
[Mar_YTD] [decimal] (38, 16) NULL,
[Apr_YTD] [decimal] (38, 16) NULL,
[May_YTD] [decimal] (38, 16) NULL,
[Jun_YTD] [decimal] (38, 16) NULL,
[Jul_YTD] [decimal] (38, 16) NULL,
[Aug_YTD] [decimal] (38, 16) NULL,
[Sep_YTD] [decimal] (38, 16) NULL,
[Oct_YTD] [decimal] (38, 16) NULL,
[Nov_YTD] [decimal] (38, 16) NULL,
[Dec_YTD] [decimal] (38, 16) NULL
)
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating primary key [PK_stg_SSIS_STG_BUDGET_2017_Volume] on [stg].[SSIS_STG_BUDGET_2017_Volume]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [stg].[SSIS_STG_BUDGET_2017_Volume] ADD CONSTRAINT [PK_stg_SSIS_STG_BUDGET_2017_Volume] PRIMARY KEY CLUSTERED  ([NativeBusinessUnit], [NativeProductCategory])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating [stg].[SSIS_STG_BUDGET_2017_Sales]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE TABLE [stg].[SSIS_STG_BUDGET_2017_Sales]
(
[NativeBusinessUnit] [nvarchar] (200) NOT NULL,
[NativeMonthCode] [char] (3) NOT NULL,
[NativeRegionName] [nvarchar] (200) NOT NULL,
[BusinessUnitKey] [int] NOT NULL,
[DateKey] [int] NOT NULL,
[InstallationServices_10000] [decimal] (38, 16) NULL,
[ProducedGoods_10100] [decimal] (38, 16) NULL,
[GroupGoods_10200] [decimal] (38, 16) NULL,
[CommercialGoods_10300] [decimal] (38, 16) NULL,
[ExternalSales_11890] [decimal] (38, 16) NULL,
[IC_Transf_SBU_11000] [decimal] (38, 16) NULL,
[IC_Transf_Region_11100] [decimal] (38, 16) NULL,
[IC_Transf_Abroad_11200] [decimal] (38, 16) NULL,
[IC_Transf_US_11300] [decimal] (38, 16) NULL,
[Total_IC_Sales] [decimal] (38, 16) NULL,
[TotalSalesAndTransfers_11990] [decimal] (38, 16) NULL
)
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating primary key [PK_stg_SSIS_STG_BUDGET_2017_Sales] on [stg].[SSIS_STG_BUDGET_2017_Sales]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [stg].[SSIS_STG_BUDGET_2017_Sales] ADD CONSTRAINT [PK_stg_SSIS_STG_BUDGET_2017_Sales] PRIMARY KEY CLUSTERED  ([NativeBusinessUnit], [NativeMonthCode])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating [stg].[SSIS_STG_BUDGET_2017_VolumeCheck]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE TABLE [stg].[SSIS_STG_BUDGET_2017_VolumeCheck]
(
[RegionName] [nvarchar] (200) NOT NULL,
[ProductGroup] [nvarchar] (200) NOT NULL,
[Jan_YTD] [decimal] (38, 16) NULL,
[Feb_YTD] [decimal] (38, 16) NULL,
[Mar_YTD] [decimal] (38, 16) NULL,
[Apr_YTD] [decimal] (38, 16) NULL,
[May_YTD] [decimal] (38, 16) NULL,
[Jun_YTD] [decimal] (38, 16) NULL,
[Jul_YTD] [decimal] (38, 16) NULL,
[Aug_YTD] [decimal] (38, 16) NULL,
[Sep_YTD] [decimal] (38, 16) NULL,
[Oct_YTD] [decimal] (38, 16) NULL,
[Nov_YTD] [decimal] (38, 16) NULL,
[Dec_YTD] [decimal] (38, 16) NULL
)
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating primary key [PK_stg_SSIS_STG_BUDGET_2017_VolumeCheck] on [stg].[SSIS_STG_BUDGET_2017_VolumeCheck]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [stg].[SSIS_STG_BUDGET_2017_VolumeCheck] ADD CONSTRAINT [PK_stg_SSIS_STG_BUDGET_2017_VolumeCheck] PRIMARY KEY CLUSTERED  ([RegionName], [ProductGroup])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating [stg].[SSIS_BUDGET_RegionLookup]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE TABLE [stg].[SSIS_BUDGET_RegionLookup]
(
[RegionCode] [varchar] (8) NOT NULL,
[RegionName] [varchar] (50) NOT NULL,
[RegionLookup] [varchar] (50) NOT NULL
)
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating primary key [PK_stg_SSIS_BUDGET_RegionLookup] on [stg].[SSIS_BUDGET_RegionLookup]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [stg].[SSIS_BUDGET_RegionLookup] ADD CONSTRAINT [PK_stg_SSIS_BUDGET_RegionLookup] PRIMARY KEY CLUSTERED  ([RegionCode])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding constraints to [stg].[SSIS_BUDGET_RegionLookup]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [stg].[SSIS_BUDGET_RegionLookup] ADD CONSTRAINT [AK_stg_SSIS_BUDGET_RegionLookup_RegionLookup] UNIQUE NONCLUSTERED  ([RegionLookup])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding constraints to [stg].[SSIS_BUDGET_RegionLookup]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [stg].[SSIS_BUDGET_RegionLookup] ADD CONSTRAINT [AK_stg_SSIS_BUDGET_RegionLookup_RegionName] UNIQUE NONCLUSTERED  ([RegionName])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating [stg].[SSIS_BUDGET_ProductCategoryLookup]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE TABLE [stg].[SSIS_BUDGET_ProductCategoryLookup]
(
[ProductCategoryGroupId] [int] NOT NULL,
[ProductCategoryId] [int] NOT NULL,
[ProductCategoryName] [varchar] (50) NOT NULL,
[QlikViewCategoryLevel4Name] [varchar] (50) NOT NULL,
[QlikViewCategoryLevel4Id] [int] NULL,
[QlikViewCategoryLevel3Name] [varchar] (50) NOT NULL,
[QlikViewCategoryLevel3Id] [int] NULL,
[MatchConfidence] [tinyint] NOT NULL
)
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating primary key [PK_SSIS_BUDGET_ProductCategoryLookup] on [stg].[SSIS_BUDGET_ProductCategoryLookup]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [stg].[SSIS_BUDGET_ProductCategoryLookup] ADD CONSTRAINT [PK_SSIS_BUDGET_ProductCategoryLookup] PRIMARY KEY CLUSTERED  ([ProductCategoryId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding constraints to [stg].[SSIS_BUDGET_ProductCategoryLookup]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [stg].[SSIS_BUDGET_ProductCategoryLookup] ADD CONSTRAINT [AK_stg_SSIS_BUDGET_ProductCategoryLookup_Name] UNIQUE NONCLUSTERED  ([ProductCategoryName])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating [stg].[SSIS_BUDGET_ProductCategoryGroupLookup]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE TABLE [stg].[SSIS_BUDGET_ProductCategoryGroupLookup]
(
[ProductCategoryGroupId] [int] NOT NULL,
[ProductCategoryGroupName] [varchar] (50) NOT NULL,
[QlikViewCategoryLevel2Name] [varchar] (50) NOT NULL,
[QlikViewCategoryLevel2Id] [int] NULL
)
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating primary key [PK_stg_SSIS_BUDGET_ProductCategoryGroupLookup] on [stg].[SSIS_BUDGET_ProductCategoryGroupLookup]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [stg].[SSIS_BUDGET_ProductCategoryGroupLookup] ADD CONSTRAINT [PK_stg_SSIS_BUDGET_ProductCategoryGroupLookup] PRIMARY KEY CLUSTERED  ([ProductCategoryGroupId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding constraints to [stg].[SSIS_BUDGET_ProductCategoryGroupLookup]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [stg].[SSIS_BUDGET_ProductCategoryGroupLookup] ADD CONSTRAINT [AK_stg_SSIS_BUDGET_ProductCategoryGroupLookup_Name] UNIQUE NONCLUSTERED  ([ProductCategoryGroupName])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating [stg].[SSIS_BUDGET_BusinessUnitLookup]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE TABLE [stg].[SSIS_BUDGET_BusinessUnitLookup]
(
[RegionCode] [varchar] (8) NOT NULL,
[SBU] [varchar] (8) NOT NULL,
[BusinessUnitName] [varchar] (50) NOT NULL,
[BusinessUnitLookup] [varchar] (50) NOT NULL
)
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating primary key [PK_SSIS_BUDGET_BusinessUnitLookup] on [stg].[SSIS_BUDGET_BusinessUnitLookup]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [stg].[SSIS_BUDGET_BusinessUnitLookup] ADD CONSTRAINT [PK_SSIS_BUDGET_BusinessUnitLookup] PRIMARY KEY CLUSTERED  ([SBU])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding constraints to [stg].[SSIS_BUDGET_BusinessUnitLookup]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [stg].[SSIS_BUDGET_BusinessUnitLookup] ADD CONSTRAINT [AK_stg_SSIS_BUDGET_BusinessUnitLookup__BusinessUnitLookup] UNIQUE NONCLUSTERED  ([BusinessUnitLookup])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding constraints to [stg].[SSIS_BUDGET_BusinessUnitLookup]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [stg].[SSIS_BUDGET_BusinessUnitLookup] ADD CONSTRAINT [AK_stg_SSIS_BUDGET_BusinessUnitLookup_BusinessUnitName] UNIQUE NONCLUSTERED  ([BusinessUnitName])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating [stg].[SSIS_LAND_BUDGET_2017_Volume]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE TABLE [stg].[SSIS_LAND_BUDGET_2017_Volume]
(
[RecordId] [int] NOT NULL IDENTITY(1, 1),
[BusinessUnit] [nvarchar] (500) NULL,
[ProductGroup] [nvarchar] (500) NULL,
[Jan_YTD] [nvarchar] (500) NULL,
[Feb_YTD] [nvarchar] (500) NULL,
[Mar_YTD] [nvarchar] (500) NULL,
[Apr_YTD] [nvarchar] (500) NULL,
[May_YTD] [nvarchar] (500) NULL,
[Jun_YTD] [nvarchar] (500) NULL,
[Jul_YTD] [nvarchar] (500) NULL,
[Aug_YTD] [nvarchar] (500) NULL,
[Sep_YTD] [nvarchar] (500) NULL,
[Oct_YTD] [nvarchar] (500) NULL,
[Nov_YTD] [nvarchar] (500) NULL,
[Dec_YTD] [nvarchar] (500) NULL
)
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating [stg].[SSIS_STG_BUDGET_2017_SalesCheck]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE TABLE [stg].[SSIS_STG_BUDGET_2017_SalesCheck]
(
[RegionName] [nvarchar] (200) NOT NULL,
[MonthCode] [char] (3) NOT NULL,
[InstallationServices_10000] [decimal] (38, 16) NULL,
[ProducedGoods_10100] [decimal] (38, 16) NULL,
[GroupGoods_10200] [decimal] (38, 16) NULL,
[CommercialGoods_10300] [decimal] (38, 16) NULL,
[ExternalSales_11890] [decimal] (38, 16) NULL,
[IC_Transf_SBU_11000] [decimal] (38, 16) NULL,
[IC_Transf_Region_11100] [decimal] (38, 16) NULL,
[IC_Transf_Abroad_11200] [decimal] (38, 16) NULL,
[IC_Transf_US_11300] [decimal] (38, 16) NULL,
[Total_IC_Sales] [decimal] (38, 16) NULL,
[TotalSalesAndTransfers_11990] [decimal] (38, 16) NULL
)
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating primary key [PK_stg_SSIS_STG_BUDGET_2017_SalesCheck] on [stg].[SSIS_STG_BUDGET_2017_SalesCheck]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [stg].[SSIS_STG_BUDGET_2017_SalesCheck] ADD CONSTRAINT [PK_stg_SSIS_STG_BUDGET_2017_SalesCheck] PRIMARY KEY CLUSTERED  ([RegionName], [MonthCode])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating [stg].[SSIS_LAND_BUDGET_2017_Sales]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE TABLE [stg].[SSIS_LAND_BUDGET_2017_Sales]
(
[RecordId] [int] NOT NULL IDENTITY(1, 1),
[MonthCode] [char] (3) NOT NULL,
[RowHeader] [nvarchar] (500) NULL,
[InstallationServices_10000] [nvarchar] (500) NULL,
[ProducedGoods_10100] [nvarchar] (500) NULL,
[GroupGoods_10200] [nvarchar] (500) NULL,
[CommercialGoods_10300] [nvarchar] (500) NULL,
[ExternalSales_11890] [nvarchar] (500) NULL,
[IC_Transf_SBU_11000] [nvarchar] (500) NULL,
[IC_Transf_Region_11100] [nvarchar] (500) NULL,
[IC_Transf_Abroad_11200] [nvarchar] (500) NULL,
[IC_Transf_US_11300] [nvarchar] (500) NULL,
[Total_IC_Sales] [nvarchar] (500) NULL,
[TotalSalesAndTransfers_11990] [nvarchar] (500) NULL
)
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding constraints to [dbo].[DataSource]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [dbo].[DataSource] ADD CONSTRAINT [CK_DataSource_IsActive] CHECK (([IsActive]=''Y'' OR [IsActive]=''N''))
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding constraints to [log4Private].[JournalControl]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [log4Private].[JournalControl] ADD CONSTRAINT [CK_JournalControl_OnOffSwitch] CHECK (([OnOffSwitch]=''OFF'' OR [OnOffSwitch]=''ON''))
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding constraints to [qvstg].[BudgetSales]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [qvstg].[BudgetSales] ADD CONSTRAINT [CK_qvstg_BudgetSale_IsDeleted] CHECK (([IsDeleted]=''Y'' OR [IsDeleted]=''N''))
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding constraints to [qvstg].[BudgetVolumes]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [qvstg].[BudgetVolumes] ADD CONSTRAINT [CK_qvstg_BudgetVolumes_IsDeleted] CHECK (([IsDeleted]=''Y'' OR [IsDeleted]=''N''))
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding constraints to [qvstg].[BusinessUnit]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [qvstg].[BusinessUnit] ADD CONSTRAINT [CK_qvstg_BusinessUnit_IsDeleted] CHECK (([IsDeleted]=''Y'' OR [IsDeleted]=''N''))
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding constraints to [qvstg].[Customer]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [qvstg].[Customer] ADD CONSTRAINT [CK_qvstg_Customer_IsDeleted] CHECK (([IsDeleted]=''Y'' OR [IsDeleted]=''N''))
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding constraints to [qvstg].[Invoice]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [qvstg].[Invoice] ADD CONSTRAINT [CK_qvstg_Invoice_IsDeleted] CHECK (([IsDeleted]=''Y'' OR [IsDeleted]=''N''))
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding constraints to [qvstg].[OrderBacklog]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [qvstg].[OrderBacklog] ADD CONSTRAINT [CK_qvstg_OrderBacklog_IsDeleted] CHECK (([IsDeleted]=''Y'' OR [IsDeleted]=''N''))
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding constraints to [qvstg].[OrderShippedNotInvoiced]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [qvstg].[OrderShippedNotInvoiced] ADD CONSTRAINT [CK_qvstg_OrderShippedNotInvoiced_IsDeleted] CHECK (([IsDeleted]=''Y'' OR [IsDeleted]=''N''))
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding constraints to [qvstg].[PaymentTerm]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [qvstg].[PaymentTerm] ADD CONSTRAINT [CK_qvstg_PaymentTerm_IsDeleted] CHECK (([IsDeleted]=''Y'' OR [IsDeleted]=''N''))
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding constraints to [qvstg].[ProductCategory]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [qvstg].[ProductCategory] ADD CONSTRAINT [CK_qvstg_ProductCategory_IsDeleted] CHECK (([IsDeleted]=''Y'' OR [IsDeleted]=''N''))
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding constraints to [qvstg].[Product]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [qvstg].[Product] ADD CONSTRAINT [CK_qvstg_Product_IsDeleted] CHECK (([IsDeleted]=''Y'' OR [IsDeleted]=''N''))
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding constraints to [qvstg].[Site]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [qvstg].[Site] ADD CONSTRAINT [CK_qvstg_Site_IsDeleted] CHECK (([IsDeleted]=''Y'' OR [IsDeleted]=''N''))
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding foreign keys to [log4Private].[JournalDetail]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [log4Private].[JournalDetail] ADD CONSTRAINT [FK_JournalDetail_Journal] FOREIGN KEY ([JournalId]) REFERENCES [log4Private].[Journal] ([JournalId]) ON DELETE CASCADE
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding foreign keys to [log4Private].[Journal]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [log4Private].[Journal] ADD CONSTRAINT [FK_Journal_Severity] FOREIGN KEY ([SeverityId]) REFERENCES [log4Private].[Severity] ([SeverityId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [log4Private].[Journal] ADD CONSTRAINT [FK_Journal_SqlException] FOREIGN KEY ([ExceptionId]) REFERENCES [log4Private].[SqlException] ([ExceptionId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding foreign keys to [stg].[SSIS_BUDGET_BusinessUnitLookup]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [stg].[SSIS_BUDGET_BusinessUnitLookup] ADD CONSTRAINT [FK_SSIS_BUDGET_BusinessUnitLookup_Region] FOREIGN KEY ([RegionCode]) REFERENCES [stg].[SSIS_BUDGET_RegionLookup] ([RegionCode])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding foreign keys to [stg].[SSIS_BUDGET_ProductCategoryLookup]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [stg].[SSIS_BUDGET_ProductCategoryLookup] ADD CONSTRAINT [FK_SSIS_BUDGET_ProductCategoryLookup_ProductCategoryGroup] FOREIGN KEY ([ProductCategoryGroupId]) REFERENCES [stg].[SSIS_BUDGET_ProductCategoryGroupLookup] ([ProductCategoryGroupId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating extended properties''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''This table records all Data Warehouse-specific data sources corresponding to the source of e.g. SAP-GBR, SAP-AUT, M3-ESP, M3-FRA etc'', ''SCHEMA'', N''dbo'', ''TABLE'', N''DataSource'', NULL, NULL
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''The country or countries represented by the data contained in this data source'', ''SCHEMA'', N''dbo'', ''TABLE'', N''DataSource'', ''COLUMN'', N''DataCountries''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Data Warehouse-specific short-code identifier for the originating data source of this record, that is, the ERP system behind QlikView (aka Source System) - corresponds to the schema name in the landing/staging area'', ''SCHEMA'', N''dbo'', ''TABLE'', N''DataSource'', ''COLUMN'', N''DataSourceCode''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Display heading to allow multiple data sources to be displayed under the same heading e.g. France might include M3-FRA, FRA-CEGID-COMP and FRA-CEGID-POLY'', ''SCHEMA'', N''dbo'', ''TABLE'', N''DataSource'', ''COLUMN'', N''DataSourceGroup''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Data Warehouse-specific unique identifier (primary key) for a data source (aka Source System)'', ''SCHEMA'', N''dbo'', ''TABLE'', N''DataSource'', ''COLUMN'', N''DataSourceKey''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Data Warehouse-specific, business-friendly unique name for a data source (aka Source System)'', ''SCHEMA'', N''dbo'', ''TABLE'', N''DataSource'', ''COLUMN'', N''DataSourceName''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''The country where the data source is hosted, the country business unit that "owns" the data'', ''SCHEMA'', N''dbo'', ''TABLE'', N''DataSource'', ''COLUMN'', N''HostCountry''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Indicates that this record is marked as deleted or otherwise inactive'', ''SCHEMA'', N''dbo'', ''TABLE'', N''DataSource'', ''COLUMN'', N''IsActive''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Detailed description (if any) of this data source'', ''SCHEMA'', N''dbo'', ''TABLE'', N''DataSource'', ''COLUMN'', N''Narrative''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Optional identifier of a source system as detailed in the QlikView database (Icopal_profBIS)'', ''SCHEMA'', N''dbo'', ''TABLE'', N''DataSource'', ''COLUMN'', N''QlikViewSourceSystemId''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''This table represents the date dimension used in EDW and records all past, present and future dates along with their attributes for eaxmple, day of the week, month, quarter, year etc'', ''SCHEMA'', N''dbo'', ''TABLE'', N''dimDate'', NULL, NULL
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Optional - will always be populated for real dates but may be NULL (or an extreme like 01-Jan-1900 or 31-Dec-9999) for special cases'', ''SCHEMA'', N''dbo'', ''TABLE'', N''dimDate'', ''COLUMN'', N''ActualDate''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Numeric representation of the quarter in the calendar year when ActualDate is populated - otherwise NULL'', ''SCHEMA'', N''dbo'', ''TABLE'', N''dimDate'', ''COLUMN'', N''CalendarQuarter''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Numeric representation of the year when ActualDate is populated - otherwise NULL'', ''SCHEMA'', N''dbo'', ''TABLE'', N''dimDate'', ''COLUMN'', N''CalendarYear''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''database-specific unique identifier for a date. Except for the special cases (unknown, not happened etc) the number will be an eight digit integer formatted to represent YYYYMMDD for readability'', ''SCHEMA'', N''dbo'', ''TABLE'', N''dimDate'', ''COLUMN'', N''DateKey''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''When ActualDate is populated will usually be string in the standard EU date format of MM/DD/YYYY but may be some other text for special case dates'', ''SCHEMA'', N''dbo'', ''TABLE'', N''dimDate'', ''COLUMN'', N''DateNameEU''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''When ActualDate is populated will usually be string in the standard US date format of DD/MM/YYYY but may be some other text for special case dates'', ''SCHEMA'', N''dbo'', ''TABLE'', N''dimDate'', ''COLUMN'', N''DateNameUS''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Numeric representation of the day number in the month when ActualDate is populated - otherwise NULL'', ''SCHEMA'', N''dbo'', ''TABLE'', N''dimDate'', ''COLUMN'', N''DayNumberInMonth''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Numeric representation of the day number in the week when ActualDate is populated - otherwise NULL'', ''SCHEMA'', N''dbo'', ''TABLE'', N''dimDate'', ''COLUMN'', N''DayNumberInWeek''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Numeric representation of the day number in the calendar year when ActualDate is populated - otherwise NULL'', ''SCHEMA'', N''dbo'', ''TABLE'', N''dimDate'', ''COLUMN'', N''DayNumberInYear''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Three letter abbreviation of English day name in English or other text for special cases'', ''SCHEMA'', N''dbo'', ''TABLE'', N''dimDate'', ''COLUMN'', N''EnglishDayCode''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Full English day name or other text for special cases'', ''SCHEMA'', N''dbo'', ''TABLE'', N''dimDate'', ''COLUMN'', N''EnglishDayName''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Three letter abbreviation of English month name or other text for special cases'', ''SCHEMA'', N''dbo'', ''TABLE'', N''dimDate'', ''COLUMN'', N''EnglishMonthCode''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Full English month name or other text for special cases'', ''SCHEMA'', N''dbo'', ''TABLE'', N''dimDate'', ''COLUMN'', N''EnglishMonthName''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''When ActualDate is populated will be the 4-4-5 financial period/month number (1-12), otherwise null'', ''SCHEMA'', N''dbo'', ''TABLE'', N''dimDate'', ''COLUMN'', N''FiscalPeriod''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''When ActualDate is populated will be a string representation of the 4-4-5 financial period/month code (JAN-DEC)'', ''SCHEMA'', N''dbo'', ''TABLE'', N''dimDate'', ''COLUMN'', N''FiscalPeriodCode''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''When ActualDate is populated will be a string representation of the 4-4-5 financial period/month full name (January-December)'', ''SCHEMA'', N''dbo'', ''TABLE'', N''dimDate'', ''COLUMN'', N''FiscalPeriodName''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''When ActualDate is populated will be the 4-4-5 financial quarter number (1-4), otherwise null'', ''SCHEMA'', N''dbo'', ''TABLE'', N''dimDate'', ''COLUMN'', N''FiscalQuarter''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''When ActualDate is populated will be the 4-4-5 financial year reprsented as a four-digit number (should be the same as calendar year), otherwise null'', ''SCHEMA'', N''dbo'', ''TABLE'', N''dimDate'', ''COLUMN'', N''FiscalYear''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''When ActualDate is populated will be a string representation of the 4-4-5 financial year and month in the form YYYY-MM - may be some other text for special cases'', ''SCHEMA'', N''dbo'', ''TABLE'', N''dimDate'', ''COLUMN'', N''FiscalYearPeriod''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''When ActualDate is populated will be a string representation of the 4-4-5 financial year and quarter in the form YYYY-QN - may be some other text for special cases'', ''SCHEMA'', N''dbo'', ''TABLE'', N''dimDate'', ''COLUMN'', N''FiscalYearQuarter''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Typically Y (Yes) or N (No) if Actual Date is populated, otherwise some other text for special cases'', ''SCHEMA'', N''dbo'', ''TABLE'', N''dimDate'', ''COLUMN'', N''IsLastDayInMonth''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Typically Weekend or Weekday if Actual Date is populated, otherwise some other text for special cases'', ''SCHEMA'', N''dbo'', ''TABLE'', N''dimDate'', ''COLUMN'', N''IsWeekend''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''When ActualDate is populated will be the date of the Monday in the week,  in which ActualDate falls - otherwise NULL.'', ''SCHEMA'', N''dbo'', ''TABLE'', N''dimDate'', ''COLUMN'', N''MondayWeekCommencing''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Numeric representation of the month number in the calendar year when ActualDate is populated - otherwise NULL'', ''SCHEMA'', N''dbo'', ''TABLE'', N''dimDate'', ''COLUMN'', N''MonthNumberInYear''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Numeric representation of the week number in the calendar year when ActualDate is populated - otherwise NULL'', ''SCHEMA'', N''dbo'', ''TABLE'', N''dimDate'', ''COLUMN'', N''WeekNumberInYear''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''When ActualDate is populated will be the total number of normal working days to date in the month indicated by ActualDate, otherwise 0'', ''SCHEMA'', N''dbo'', ''TABLE'', N''dimDate'', ''COLUMN'', N''WorkDaysInMonthToDate''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''When ActualDate is populated will be the number of normal working days in the month indicated by ActualDate, otherwise 0'', ''SCHEMA'', N''dbo'', ''TABLE'', N''dimDate'', ''COLUMN'', N''WorkDaysInMonthTotal''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''When ActualDate is populated will be string representation of calendar year and month in the form YYYY-MM - may be some other text for special cases'', ''SCHEMA'', N''dbo'', ''TABLE'', N''dimDate'', ''COLUMN'', N''YearMonth''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''When ActualDate is populated will be string representation of calendar year and quarter in the form YYYY-QN - may be some other text for special cases'', ''SCHEMA'', N''dbo'', ''TABLE'', N''dimDate'', ''COLUMN'', N''YearQuarter''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Altering permissions on SCHEMA:: [INFORMATION_SCHEMA]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT SELECT ON SCHEMA:: [INFORMATION_SCHEMA] TO [DataFeedReaders]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT SELECT ON SCHEMA:: [INFORMATION_SCHEMA] TO [DataFeeds]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT SELECT ON SCHEMA:: [INFORMATION_SCHEMA] TO [DataFeedWriters]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Altering permissions on SCHEMA:: [dbo]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT SELECT ON SCHEMA:: [dbo] TO [DataFeedReaders]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT SELECT ON SCHEMA:: [dbo] TO [DataFeeds]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT SELECT ON SCHEMA:: [dbo] TO [DataFeedWriters]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Altering permissions on SCHEMA:: [etl]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT SELECT ON SCHEMA:: [etl] TO [AppDevelopersPROD]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT SELECT ON SCHEMA:: [etl] TO [BatchManagers]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT SELECT ON SCHEMA:: [etl] TO [BusinessAnalystsPROD]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT SELECT ON SCHEMA:: [etl] TO [DataFeedWriters]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT EXECUTE ON SCHEMA:: [etl] TO [DataFeedWriters]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT SELECT ON SCHEMA:: [etl] TO [EtlDevelopersDEV]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT INSERT ON SCHEMA:: [etl] TO [EtlDevelopersDEV]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT DELETE ON SCHEMA:: [etl] TO [EtlDevelopersDEV]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT UPDATE ON SCHEMA:: [etl] TO [EtlDevelopersDEV]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT EXECUTE ON SCHEMA:: [etl] TO [EtlDevelopersDEV]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT SELECT ON SCHEMA:: [etl] TO [EtlDevelopersPROD]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT SELECT ON SCHEMA:: [etl] TO [EtlDevelopersTEST]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT UPDATE ON SCHEMA:: [etl] TO [EtlDevelopersTEST]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT EXECUTE ON SCHEMA:: [etl] TO [EtlDevelopersTEST]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Altering permissions on SCHEMA:: [log4]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT EXECUTE ON SCHEMA:: [log4] TO [public]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Altering permissions on SCHEMA:: [log4Private]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT SELECT ON SCHEMA:: [log4Private] TO [BatchManagers]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Altering permissions on SCHEMA:: [log4Utils]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT EXECUTE ON SCHEMA:: [log4Utils] TO [public]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Altering permissions on SCHEMA:: [pbi]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT SELECT ON SCHEMA:: [pbi] TO [PowerBiReporters]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Altering permissions on SCHEMA:: [qvstg]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT SELECT ON SCHEMA:: [qvstg] TO [AppDevelopersPROD]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT SELECT ON SCHEMA:: [qvstg] TO [BatchManagers]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT SELECT ON SCHEMA:: [qvstg] TO [BusinessAnalystsPROD]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT SELECT ON SCHEMA:: [qvstg] TO [DataFeedReaders]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT EXECUTE ON SCHEMA:: [qvstg] TO [DataFeedReaders]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT ALTER ON SCHEMA:: [qvstg] TO [DataFeeds]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT SELECT ON SCHEMA:: [qvstg] TO [DataFeeds]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT INSERT ON SCHEMA:: [qvstg] TO [DataFeeds]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT UPDATE ON SCHEMA:: [qvstg] TO [DataFeeds]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT EXECUTE ON SCHEMA:: [qvstg] TO [DataFeeds]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT ALTER ON SCHEMA:: [qvstg] TO [DataFeedWriters]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT SELECT ON SCHEMA:: [qvstg] TO [DataFeedWriters]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT INSERT ON SCHEMA:: [qvstg] TO [DataFeedWriters]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT UPDATE ON SCHEMA:: [qvstg] TO [DataFeedWriters]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT EXECUTE ON SCHEMA:: [qvstg] TO [DataFeedWriters]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT ALTER ON SCHEMA:: [qvstg] TO [EtlDevelopersDEV]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT SELECT ON SCHEMA:: [qvstg] TO [EtlDevelopersDEV]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT INSERT ON SCHEMA:: [qvstg] TO [EtlDevelopersDEV]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT DELETE ON SCHEMA:: [qvstg] TO [EtlDevelopersDEV]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT UPDATE ON SCHEMA:: [qvstg] TO [EtlDevelopersDEV]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT EXECUTE ON SCHEMA:: [qvstg] TO [EtlDevelopersDEV]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT SELECT ON SCHEMA:: [qvstg] TO [EtlDevelopersPROD]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT SELECT ON SCHEMA:: [qvstg] TO [EtlDevelopersTEST]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT INSERT ON SCHEMA:: [qvstg] TO [EtlDevelopersTEST]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT DELETE ON SCHEMA:: [qvstg] TO [EtlDevelopersTEST]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT UPDATE ON SCHEMA:: [qvstg] TO [EtlDevelopersTEST]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Altering permissions on SCHEMA:: [stg]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT SELECT ON SCHEMA:: [stg] TO [AppDevelopersPROD]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT SELECT ON SCHEMA:: [stg] TO [BatchManagers]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT SELECT ON SCHEMA:: [stg] TO [BusinessAnalystsPROD]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT SELECT ON SCHEMA:: [stg] TO [DataFeedReaders]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT EXECUTE ON SCHEMA:: [stg] TO [DataFeedReaders]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT ALTER ON SCHEMA:: [stg] TO [DataFeedWriters]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT SELECT ON SCHEMA:: [stg] TO [DataFeedWriters]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT INSERT ON SCHEMA:: [stg] TO [DataFeedWriters]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT UPDATE ON SCHEMA:: [stg] TO [DataFeedWriters]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT EXECUTE ON SCHEMA:: [stg] TO [DataFeedWriters]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT ALTER ON SCHEMA:: [stg] TO [EtlDevelopersDEV]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT SELECT ON SCHEMA:: [stg] TO [EtlDevelopersDEV]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT INSERT ON SCHEMA:: [stg] TO [EtlDevelopersDEV]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT DELETE ON SCHEMA:: [stg] TO [EtlDevelopersDEV]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT UPDATE ON SCHEMA:: [stg] TO [EtlDevelopersDEV]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT EXECUTE ON SCHEMA:: [stg] TO [EtlDevelopersDEV]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT SELECT ON SCHEMA:: [stg] TO [EtlDevelopersPROD]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT SELECT ON SCHEMA:: [stg] TO [EtlDevelopersTEST]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT INSERT ON SCHEMA:: [stg] TO [EtlDevelopersTEST]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT DELETE ON SCHEMA:: [stg] TO [EtlDevelopersTEST]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT UPDATE ON SCHEMA:: [stg] TO [EtlDevelopersTEST]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\1.0.0\001_InitialProductionRelease_20170705.sql", ID: {ae53bbf8-0274-4933-8ebc-44b442241eb4} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER))
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('ae53bbf8-0274-4933-8ebc-44b442241eb4' AS UNIQUEIDENTIFIER), '756C6CC8B79ACC73F4CEF51526E4B0FE2EF49E99169EB8483203B00A20A33233', 'Migrations\1.0.0\001_InitialProductionRelease_20170705.sql', SYSDATETIME(), SYSTEM_USER, 1, '1.0.0', '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ed54bb21-e6bd-4d8e-a72f-9535672da4f5' AS UNIQUEIDENTIFIER))
  PRINT '

***** EXECUTING MIGRATION "Migrations\1.0.1\001_TSA_PSA_schemas_and_samples.sql", ID: {ed54bb21-e6bd-4d8e-a72f-9535672da4f5} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ed54bb21-e6bd-4d8e-a72f-9535672da4f5' AS UNIQUEIDENTIFIER))
  EXECUTE ('
PRINT N''Creating schemas''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ed54bb21-e6bd-4d8e-a72f-9535672da4f5' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE SCHEMA [psa]
AUTHORIZATION [dbo]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ed54bb21-e6bd-4d8e-a72f-9535672da4f5' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE SCHEMA [tsa]
AUTHORIZATION [dbo]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ed54bb21-e6bd-4d8e-a72f-9535672da4f5' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating [psa].[ICS_STG_SampleSystemName_SourceCountryCode_SampleTableName]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ed54bb21-e6bd-4d8e-a72f-9535672da4f5' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE TABLE [psa].[ICS_STG_SampleSystemName_SourceCountryCode_SampleTableName]
(
[EtlRecordId] [bigint] NOT NULL,
[EtlBatchRunId] [int] NOT NULL,
[EtlStepRunId] [int] NOT NULL,
[EtlThreadRunId] [int] NOT NULL,
[IsProcessed] [char] (1) NOT NULL CONSTRAINT [DF_ICS_STG_SampleSystemName_SourceCountryCode_SampleTableName_IsProcessed] DEFAULT (''N''),
[DataSourceKey] [int] NOT NULL,
[EtlSampleTable] [varchar] (200) NOT NULL,
[EtlCreatedOn] [datetime] NOT NULL,
[EtlCreatedBy] [varchar] (200) NOT NULL,
[EtlUpdatedOn] [datetime] NOT NULL,
[EtlUpdatedBy] [varchar] (200) NOT NULL,
[EtlDeletedOn] [datetime] NOT NULL,
[EtlDeletedBy] [varchar] (200) NOT NULL,
[IsDeleted] [char] (1) NOT NULL CONSTRAINT [DF_ICS_STG_SampleSystemName_SourceCountryCode_SampleTableName_IsDeleted] DEFAULT (''N''),
[SourceTableKeyColumnA] [char] (8) NOT NULL,
[SourceTableKeyColumnB] [int] NOT NULL,
[SourceColumnC] [decimal] (28, 4) NULL,
[SourceColumnD] [nvarchar] (50) NULL,
[SourceColumnE] [datetime] NULL,
[SourceColumnF] [date] NULL
)
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ed54bb21-e6bd-4d8e-a72f-9535672da4f5' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating primary key [PK_ICS_STG_SampleSystemName_SourceCountryCode_SampleTableName] on [psa].[ICS_STG_SampleSystemName_SourceCountryCode_SampleTableName]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ed54bb21-e6bd-4d8e-a72f-9535672da4f5' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [psa].[ICS_STG_SampleSystemName_SourceCountryCode_SampleTableName] ADD CONSTRAINT [PK_ICS_STG_SampleSystemName_SourceCountryCode_SampleTableName] PRIMARY KEY CLUSTERED  ([EtlRecordId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ed54bb21-e6bd-4d8e-a72f-9535672da4f5' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding constraints to [psa].[ICS_STG_SampleSystemName_SourceCountryCode_SampleTableName]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ed54bb21-e6bd-4d8e-a72f-9535672da4f5' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [psa].[ICS_STG_SampleSystemName_SourceCountryCode_SampleTableName] ADD CONSTRAINT [AK_ICS_STG_SampleSystemName_SourceCountryCode_SampleTableName] UNIQUE NONCLUSTERED  ([SourceTableKeyColumnA], [SourceTableKeyColumnB])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ed54bb21-e6bd-4d8e-a72f-9535672da4f5' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating [tsa].[ICS_LAND_SampleSystemName_SourceCountryCode_SampleTableName]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ed54bb21-e6bd-4d8e-a72f-9535672da4f5' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE TABLE [tsa].[ICS_LAND_SampleSystemName_SourceCountryCode_SampleTableName]
(
[EtlBatchRunId] [int] NOT NULL,
[EtlStepRunId] [int] NOT NULL,
[EtlThreadRunId] [int] NOT NULL,
[DataSourceKey] [int] NOT NULL,
[EtlSampleTable] [varchar] (200) NOT NULL,
[EtlCreatedOn] [datetime] NOT NULL,
[EtlCreatedBy] [varchar] (200) NOT NULL,
[SourceTableKeyColumnA] [char] (8) NOT NULL,
[SourceTableKeyColumnB] [int] NOT NULL,
[SourceColumnC] [decimal] (28, 4) NULL,
[SourceColumnD] [nvarchar] (50) NULL,
[SourceColumnE] [datetime] NULL,
[SourceColumnF] [date] NULL
)
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ed54bb21-e6bd-4d8e-a72f-9535672da4f5' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating primary key [PK_ICS_LAND_SampleSystemName_SourceCountryCode_SampleTableName] on [tsa].[ICS_LAND_SampleSystemName_SourceCountryCode_SampleTableName]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ed54bb21-e6bd-4d8e-a72f-9535672da4f5' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [tsa].[ICS_LAND_SampleSystemName_SourceCountryCode_SampleTableName] ADD CONSTRAINT [PK_ICS_LAND_SampleSystemName_SourceCountryCode_SampleTableName] PRIMARY KEY CLUSTERED  ([SourceTableKeyColumnA], [SourceTableKeyColumnB])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ed54bb21-e6bd-4d8e-a72f-9535672da4f5' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding constraints to [psa].[ICS_STG_SampleSystemName_SourceCountryCode_SampleTableName]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ed54bb21-e6bd-4d8e-a72f-9535672da4f5' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [psa].[ICS_STG_SampleSystemName_SourceCountryCode_SampleTableName] ADD CONSTRAINT [CK_ICS_STG_SampleSystemName_SourceCountryCode_SampleTableName_IsProcessed] CHECK (([IsProcessed]=''Y'' OR [IsProcessed]=''N''))
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ed54bb21-e6bd-4d8e-a72f-9535672da4f5' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [psa].[ICS_STG_SampleSystemName_SourceCountryCode_SampleTableName] ADD CONSTRAINT [CK_ICS_STG_SampleSystemName_SourceCountryCode_SampleTableName_IsDeleted] CHECK (([IsDeleted]=''Y'' OR [IsDeleted]=''N''))
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ed54bb21-e6bd-4d8e-a72f-9535672da4f5' AS UNIQUEIDENTIFIER))
  PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\1.0.1\001_TSA_PSA_schemas_and_samples.sql", ID: {ed54bb21-e6bd-4d8e-a72f-9535672da4f5} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ed54bb21-e6bd-4d8e-a72f-9535672da4f5' AS UNIQUEIDENTIFIER))
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('ed54bb21-e6bd-4d8e-a72f-9535672da4f5' AS UNIQUEIDENTIFIER), 'D23BBB0A325A6FF16A0B45B8A18079B0884A0FA392024A025C8F35D6FE305E06', 'Migrations\1.0.1\001_TSA_PSA_schemas_and_samples.sql', SYSDATETIME(), SYSTEM_USER, 1, '1.0.1', '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('73484baa-33ea-4b1d-ae6a-c45137f3aa4a' AS UNIQUEIDENTIFIER))
  PRINT '

***** EXECUTING MIGRATION "Migrations\1.0.1\002_TSA_PSA_permissions.sql", ID: {73484baa-33ea-4b1d-ae6a-c45137f3aa4a} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('73484baa-33ea-4b1d-ae6a-c45137f3aa4a' AS UNIQUEIDENTIFIER))
  EXECUTE ('
PRINT N''Altering permissions on SCHEMA:: [psa]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('73484baa-33ea-4b1d-ae6a-c45137f3aa4a' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT SELECT ON SCHEMA:: [psa] TO [AppDevelopersPROD]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('73484baa-33ea-4b1d-ae6a-c45137f3aa4a' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT SELECT ON SCHEMA:: [psa] TO [BatchManagers]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('73484baa-33ea-4b1d-ae6a-c45137f3aa4a' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT SELECT ON SCHEMA:: [psa] TO [BusinessAnalystsPROD]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('73484baa-33ea-4b1d-ae6a-c45137f3aa4a' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT SELECT ON SCHEMA:: [psa] TO [DataFeedReaders]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('73484baa-33ea-4b1d-ae6a-c45137f3aa4a' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT EXECUTE ON SCHEMA:: [psa] TO [DataFeedReaders]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('73484baa-33ea-4b1d-ae6a-c45137f3aa4a' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT SELECT ON SCHEMA:: [psa] TO [DataFeedWriters]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('73484baa-33ea-4b1d-ae6a-c45137f3aa4a' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT SELECT ON SCHEMA:: [psa] TO [EtlDevelopersDEV]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('73484baa-33ea-4b1d-ae6a-c45137f3aa4a' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT INSERT ON SCHEMA:: [psa] TO [EtlDevelopersDEV]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('73484baa-33ea-4b1d-ae6a-c45137f3aa4a' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT DELETE ON SCHEMA:: [psa] TO [EtlDevelopersDEV]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('73484baa-33ea-4b1d-ae6a-c45137f3aa4a' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT UPDATE ON SCHEMA:: [psa] TO [EtlDevelopersDEV]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('73484baa-33ea-4b1d-ae6a-c45137f3aa4a' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT EXECUTE ON SCHEMA:: [psa] TO [EtlDevelopersDEV]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('73484baa-33ea-4b1d-ae6a-c45137f3aa4a' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT SELECT ON SCHEMA:: [psa] TO [EtlDevelopersPROD]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('73484baa-33ea-4b1d-ae6a-c45137f3aa4a' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT SELECT ON SCHEMA:: [psa] TO [EtlDevelopersTEST]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('73484baa-33ea-4b1d-ae6a-c45137f3aa4a' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT INSERT ON SCHEMA:: [psa] TO [EtlDevelopersTEST]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('73484baa-33ea-4b1d-ae6a-c45137f3aa4a' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT DELETE ON SCHEMA:: [psa] TO [EtlDevelopersTEST]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('73484baa-33ea-4b1d-ae6a-c45137f3aa4a' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT UPDATE ON SCHEMA:: [psa] TO [EtlDevelopersTEST]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('73484baa-33ea-4b1d-ae6a-c45137f3aa4a' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Altering permissions on SCHEMA:: [tsa]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('73484baa-33ea-4b1d-ae6a-c45137f3aa4a' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT SELECT ON SCHEMA:: [tsa] TO [AppDevelopersPROD]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('73484baa-33ea-4b1d-ae6a-c45137f3aa4a' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT SELECT ON SCHEMA:: [tsa] TO [BatchManagers]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('73484baa-33ea-4b1d-ae6a-c45137f3aa4a' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT SELECT ON SCHEMA:: [tsa] TO [BusinessAnalystsPROD]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('73484baa-33ea-4b1d-ae6a-c45137f3aa4a' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT SELECT ON SCHEMA:: [tsa] TO [DataFeedReaders]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('73484baa-33ea-4b1d-ae6a-c45137f3aa4a' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT EXECUTE ON SCHEMA:: [tsa] TO [DataFeedReaders]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('73484baa-33ea-4b1d-ae6a-c45137f3aa4a' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT ALTER ON SCHEMA:: [tsa] TO [DataFeedWriters]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('73484baa-33ea-4b1d-ae6a-c45137f3aa4a' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT SELECT ON SCHEMA:: [tsa] TO [DataFeedWriters]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('73484baa-33ea-4b1d-ae6a-c45137f3aa4a' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT INSERT ON SCHEMA:: [tsa] TO [DataFeedWriters]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('73484baa-33ea-4b1d-ae6a-c45137f3aa4a' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT UPDATE ON SCHEMA:: [tsa] TO [DataFeedWriters]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('73484baa-33ea-4b1d-ae6a-c45137f3aa4a' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT EXECUTE ON SCHEMA:: [tsa] TO [DataFeedWriters]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('73484baa-33ea-4b1d-ae6a-c45137f3aa4a' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT ALTER ON SCHEMA:: [tsa] TO [EtlDevelopersDEV]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('73484baa-33ea-4b1d-ae6a-c45137f3aa4a' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT SELECT ON SCHEMA:: [tsa] TO [EtlDevelopersDEV]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('73484baa-33ea-4b1d-ae6a-c45137f3aa4a' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT INSERT ON SCHEMA:: [tsa] TO [EtlDevelopersDEV]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('73484baa-33ea-4b1d-ae6a-c45137f3aa4a' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT DELETE ON SCHEMA:: [tsa] TO [EtlDevelopersDEV]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('73484baa-33ea-4b1d-ae6a-c45137f3aa4a' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT UPDATE ON SCHEMA:: [tsa] TO [EtlDevelopersDEV]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('73484baa-33ea-4b1d-ae6a-c45137f3aa4a' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT EXECUTE ON SCHEMA:: [tsa] TO [EtlDevelopersDEV]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('73484baa-33ea-4b1d-ae6a-c45137f3aa4a' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT SELECT ON SCHEMA:: [tsa] TO [EtlDevelopersPROD]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('73484baa-33ea-4b1d-ae6a-c45137f3aa4a' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT SELECT ON SCHEMA:: [tsa] TO [EtlDevelopersTEST]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('73484baa-33ea-4b1d-ae6a-c45137f3aa4a' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT INSERT ON SCHEMA:: [tsa] TO [EtlDevelopersTEST]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('73484baa-33ea-4b1d-ae6a-c45137f3aa4a' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT DELETE ON SCHEMA:: [tsa] TO [EtlDevelopersTEST]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('73484baa-33ea-4b1d-ae6a-c45137f3aa4a' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT UPDATE ON SCHEMA:: [tsa] TO [EtlDevelopersTEST]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('73484baa-33ea-4b1d-ae6a-c45137f3aa4a' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT SHOWPLAN TO [AppDevelopersDEV]
GRANT VIEW DEFINITION TO [AppDevelopersDEV]
GRANT SHOWPLAN TO [AppDevelopersPROD]
GRANT VIEW DEFINITION TO [AppDevelopersPROD]
GRANT SHOWPLAN TO [AppDevelopersTEST]
GRANT VIEW DEFINITION TO [AppDevelopersTEST]
GRANT VIEW DEFINITION TO [BusinessAnalystsDEV]
GRANT VIEW DEFINITION TO [BusinessAnalystsPROD]
GRANT VIEW DEFINITION TO [BusinessAnalystsTEST]
GRANT VIEW DEFINITION TO [CodeReviewers]
GRANT SHOWPLAN TO [EtlDevelopersDEV]
GRANT VIEW DEFINITION TO [EtlDevelopersDEV]
GRANT VIEW DEFINITION TO [EtlDevelopersPROD]
GRANT SHOWPLAN TO [EtlDevelopersTEST]
GRANT EXECUTE TO [SqlDevelopersDEV]
GRANT SHOWPLAN TO [SqlDevelopersPROD]
GRANT VIEW DEFINITION TO [SqlDevelopersPROD]
GRANT EXECUTE TO [SqlDevelopersTEST]
GRANT SHOWPLAN TO [SqlDevelopersTEST]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('73484baa-33ea-4b1d-ae6a-c45137f3aa4a' AS UNIQUEIDENTIFIER))
  PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\1.0.1\002_TSA_PSA_permissions.sql", ID: {73484baa-33ea-4b1d-ae6a-c45137f3aa4a} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('73484baa-33ea-4b1d-ae6a-c45137f3aa4a' AS UNIQUEIDENTIFIER))
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('73484baa-33ea-4b1d-ae6a-c45137f3aa4a' AS UNIQUEIDENTIFIER), '76B11D3D5CC4E3C6723076B2B596EC949D47A2E44542ADDEC49774DEAC3FA6C8', 'Migrations\1.0.1\002_TSA_PSA_permissions.sql', SYSDATETIME(), SYSTEM_USER, 1, '1.0.1', '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1a402813-d7d3-4872-a90d-0df61ef4ae47' AS UNIQUEIDENTIFIER))
  PRINT '

***** EXECUTING MIGRATION "Migrations\1.0.1\003_add_Country_Table.sql", ID: {1a402813-d7d3-4872-a90d-0df61ef4ae47} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1a402813-d7d3-4872-a90d-0df61ef4ae47' AS UNIQUEIDENTIFIER))
  EXECUTE ('
print N''Creating [dbo].[Country]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1a402813-d7d3-4872-a90d-0df61ef4ae47' AS UNIQUEIDENTIFIER))
  EXECUTE ('create table [dbo].[Country]
(
[CountryHistoryId] [bigint] not null constraint [DF_Country_CountryHistoryId] default (next value for [dbo].[ReferenceTypeHistorySequence]),
[CountryKey] [int] not null constraint [DF_Country_CountryKey] default (next value for [dbo].[ReferenceTypeKeySequence]),
[RowValidFromUTC] [datetime] not null constraint [DF_Country_RowValidFromUTC] default (getutcdate()),
[RowValidToUTC] [datetime] not null constraint [DF_Country_RowValidToUTC] default (''99991231 00:00:00''),
[IsCurrent] [char] (1) not null constraint [DF_Country_IsCurrent] default (''I''),
[PreviousHistoryId] [bigint] null,
[IsDeleted] [char] (1) not null constraint [DF_Country_IsDeleted] default (''N''),
[LastTouchedOn] [datetime] not null,
[EtlCreatedOn] [datetime] not null,
[EtlCreatedBy] [varchar] (200) not null,
[EtlUpdatedOn] [datetime] not null,
[EtlUpdatedBy] [varchar] (200) not null,
[EtlDeletedOn] [datetime] null,
[EtlDeletedBy] [varchar] (200) null,
[EtlBatchRunId] [int] not null,
[EtlStepRunId] [int] not null,
[EtlThreadRunId] [int] not null,
[EtlDeltaHash] [varchar] (100) null,
[ISO3166Alpha2Code] [char] (2) not null,
[ISO3166Alpha3Code] [char] (3) not null,
[ISO3166OfficialEnglishShortName] [varchar] (100) not null,
[CountryNameEnglish] [nvarchar] (200) null,
[CountryNameLocal] [nvarchar] (200) not null,
[RegionCode] [varchar] (4) not null
)
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1a402813-d7d3-4872-a90d-0df61ef4ae47' AS UNIQUEIDENTIFIER))
  EXECUTE ('print N''Creating primary key [PK_Country] on [dbo].[Country]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1a402813-d7d3-4872-a90d-0df61ef4ae47' AS UNIQUEIDENTIFIER))
  EXECUTE ('alter table [dbo].[Country] add constraint [PK_Country] primary key clustered  ([CountryHistoryId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1a402813-d7d3-4872-a90d-0df61ef4ae47' AS UNIQUEIDENTIFIER))
  EXECUTE ('print N''Adding constraints to [dbo].[Country]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1a402813-d7d3-4872-a90d-0df61ef4ae47' AS UNIQUEIDENTIFIER))
  EXECUTE ('alter table [dbo].[Country] add constraint [AK_Country_CountryKey_RowValidFromUTC] unique nonclustered  ([CountryKey], [RowValidFromUTC])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1a402813-d7d3-4872-a90d-0df61ef4ae47' AS UNIQUEIDENTIFIER))
  EXECUTE ('print N''Adding constraints to [dbo].[Country]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1a402813-d7d3-4872-a90d-0df61ef4ae47' AS UNIQUEIDENTIFIER))
  EXECUTE ('alter table [dbo].[Country] add constraint [AK_Country_CountryKey_RowValidToUTC] unique nonclustered  ([CountryKey], [RowValidToUTC], [IsCurrent])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1a402813-d7d3-4872-a90d-0df61ef4ae47' AS UNIQUEIDENTIFIER))
  EXECUTE ('print N''Adding constraints to [dbo].[Country]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1a402813-d7d3-4872-a90d-0df61ef4ae47' AS UNIQUEIDENTIFIER))
  EXECUTE ('alter table [dbo].[Country] add constraint [AK_Country_ISO3166Alpha2Code_RowValidToUTC] unique nonclustered  ([ISO3166Alpha2Code], [RowValidToUTC], [IsCurrent])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1a402813-d7d3-4872-a90d-0df61ef4ae47' AS UNIQUEIDENTIFIER))
  EXECUTE ('print N''Adding constraints to [dbo].[Country]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1a402813-d7d3-4872-a90d-0df61ef4ae47' AS UNIQUEIDENTIFIER))
  EXECUTE ('alter table [dbo].[Country] add constraint [AK_Country_ISO3166Alpha3Code_RowValidToUTC] unique nonclustered  ([ISO3166Alpha3Code], [RowValidToUTC], [IsCurrent])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1a402813-d7d3-4872-a90d-0df61ef4ae47' AS UNIQUEIDENTIFIER))
  EXECUTE ('print N''Adding constraints to [dbo].[Country]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1a402813-d7d3-4872-a90d-0df61ef4ae47' AS UNIQUEIDENTIFIER))
  EXECUTE ('alter table [dbo].[Country] add constraint [CK_Country_IsCurrent] check (([IsCurrent]=''N'' or [IsCurrent]=''Y'' or [IsCurrent]=''I''))
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1a402813-d7d3-4872-a90d-0df61ef4ae47' AS UNIQUEIDENTIFIER))
  EXECUTE ('alter table [dbo].[Country] add constraint [CK_Country_IsDeleted] check (([IsDeleted]=''N'' or [IsDeleted]=''Y''))
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1a402813-d7d3-4872-a90d-0df61ef4ae47' AS UNIQUEIDENTIFIER))
  EXECUTE ('alter table [dbo].[Country] add constraint [CK_Country_RowValidFromUTC_LessThan_RowValidToUTC] check (([RowValidFromUTC]<[RowValidToUTC]))
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1a402813-d7d3-4872-a90d-0df61ef4ae47' AS UNIQUEIDENTIFIER))
  EXECUTE ('print N''Adding foreign keys to [dbo].[Country]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1a402813-d7d3-4872-a90d-0df61ef4ae47' AS UNIQUEIDENTIFIER))
  EXECUTE ('alter table [dbo].[Country] add constraint [FK_Country_Country] foreign key ([PreviousHistoryId]) references [dbo].[Country] ([CountryHistoryId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1a402813-d7d3-4872-a90d-0df61ef4ae47' AS UNIQUEIDENTIFIER))
  EXECUTE ('
exec sp_addextendedproperty N''MS_Description'', N''This table record all countries and related information. This also records any changes to the details of each country'', ''SCHEMA'', N''dbo'', ''TABLE'', N''Country'', null, null
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1a402813-d7d3-4872-a90d-0df61ef4ae47' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N'' DW-specific unique identifier for a change record in the history of data changes for a Country (of any type).  Is unique across the entire table.'', ''SCHEMA'', N''dbo'', ''TABLE'', N''Country'', ''COLUMN'', N''CountryHistoryId''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1a402813-d7d3-4872-a90d-0df61ef4ae47' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''The DW-specific surrogate key that uniquely identifies a Country (of any type).  Only unique in this table in conjunction with  RowValidFromUTC/To.'', ''SCHEMA'', N''dbo'', ''TABLE'', N''Country'', ''COLUMN'', N''CountryKey''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1a402813-d7d3-4872-a90d-0df61ef4ae47' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''Descriptive name of Country in English'', ''SCHEMA'', N''dbo'', ''TABLE'', N''Country'', ''COLUMN'', N''CountryNameEnglish''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1a402813-d7d3-4872-a90d-0df61ef4ae47' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''Descriptive name of Country in the local language'', ''SCHEMA'', N''dbo'', ''TABLE'', N''Country'', ''COLUMN'', N''CountryNameLocal''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1a402813-d7d3-4872-a90d-0df61ef4ae47' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''The ETL Batch that added or last updated this record – soft link back to the BAT_MAN database which supports the Batch Control Framework'', ''SCHEMA'', N''dbo'', ''TABLE'', N''Country'', ''COLUMN'', N''EtlBatchRunId''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1a402813-d7d3-4872-a90d-0df61ef4ae47' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''The name of the module or mapping within the ETL process that was responsible for this record being added.'', ''SCHEMA'', N''dbo'', ''TABLE'', N''Country'', ''COLUMN'', N''EtlCreatedBy''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1a402813-d7d3-4872-a90d-0df61ef4ae47' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''The ETL system date and time that the ETL process first added this record'', ''SCHEMA'', N''dbo'', ''TABLE'', N''Country'', ''COLUMN'', N''EtlCreatedOn''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1a402813-d7d3-4872-a90d-0df61ef4ae47' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''An MD5 hash of all non-key, changeable values in this record - used by ETL processes to identify changed rows (included columns are defined within the ETL).'', ''SCHEMA'', N''dbo'', ''TABLE'', N''Country'', ''COLUMN'', N''EtlDeltaHash''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1a402813-d7d3-4872-a90d-0df61ef4ae47' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''The name of the module or mapping within the ETL process that was responsible for the last update for this record; will be the same as EtlCreatedBy when the record is first added'', ''SCHEMA'', N''dbo'', ''TABLE'', N''Country'', ''COLUMN'', N''EtlUpdatedBy''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1a402813-d7d3-4872-a90d-0df61ef4ae47' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''The ETL system date and time that the ETL process last updated this record; will be the same as EtlCreatedOn when the record is first added.'', ''SCHEMA'', N''dbo'', ''TABLE'', N''Country'', ''COLUMN'', N''EtlUpdatedOn''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1a402813-d7d3-4872-a90d-0df61ef4ae47' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''Indicates that this row is the current version of a Country change history.   Where Y indicates TRUE, N indicates FALSE and I indicates Excluded - typically whilst data is mid-load.'', ''SCHEMA'', N''dbo'', ''TABLE'', N''Country'', ''COLUMN'', N''IsCurrent''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1a402813-d7d3-4872-a90d-0df61ef4ae47' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''Indicates that this record is marked as or has been physically deleted in the source system of record.'', ''SCHEMA'', N''dbo'', ''TABLE'', N''Country'', ''COLUMN'', N''IsDeleted''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1a402813-d7d3-4872-a90d-0df61ef4ae47' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''Unique ISO two-character abbreviation for country'', ''SCHEMA'', N''dbo'', ''TABLE'', N''Country'', ''COLUMN'', N''ISO3166Alpha2Code''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1a402813-d7d3-4872-a90d-0df61ef4ae47' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''Unique ISO three-character abbreviation for country'', ''SCHEMA'', N''dbo'', ''TABLE'', N''Country'', ''COLUMN'', N''ISO3166Alpha3Code''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1a402813-d7d3-4872-a90d-0df61ef4ae47' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''ISO approved short form of country name '', ''SCHEMA'', N''dbo'', ''TABLE'', N''Country'', ''COLUMN'', N''ISO3166OfficialEnglishShortName''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1a402813-d7d3-4872-a90d-0df61ef4ae47' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''The UTC date and time that this record was last touched by any process which includes but is not limited to any ETL process.  For example, this value would be updated if planned data migration release affects this record.'', ''SCHEMA'', N''dbo'', ''TABLE'', N''Country'', ''COLUMN'', N''LastTouchedOn''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1a402813-d7d3-4872-a90d-0df61ef4ae47' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''Link to the EDW-specific unique identifier for the previous data change history record (if any).'', ''SCHEMA'', N''dbo'', ''TABLE'', N''Country'', ''COLUMN'', N''PreviousHistoryId''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1a402813-d7d3-4872-a90d-0df61ef4ae47' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''BMI Business Region in which the Country is located'', ''SCHEMA'', N''dbo'', ''TABLE'', N''Country'', ''COLUMN'', N''RegionCode''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1a402813-d7d3-4872-a90d-0df61ef4ae47' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''The UTC date and time from which this record was valid, defaults to UTC date and time of insert. On a row that represents a change, this value should be one second ahead of the Valid To Date/Time of the immediately preceding historic record for this entity instance.'', ''SCHEMA'', N''dbo'', ''TABLE'', N''Country'', ''COLUMN'', N''RowValidFromUTC''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1a402813-d7d3-4872-a90d-0df61ef4ae47' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''The UTC date and time, up to which this record is valid, if the current record this will always be 00:00:00.000 on 31-Dec-9999.  In a non-current record, this value should be one second behind the Valid From point of immediately following historic record for this entity instance.'', ''SCHEMA'', N''dbo'', ''TABLE'', N''Country'', ''COLUMN'', N''RowValidToUTC''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1a402813-d7d3-4872-a90d-0df61ef4ae47' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''The name of the module or mapping within the ETL process that was responsible for the last soft-delete of this record; will NOT be set back to null if this record is subsequently re-activated'', ''SCHEMA'', N''dbo'', ''TABLE'', N''Country'', ''COLUMN'', N''EtlDeletedBy''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1a402813-d7d3-4872-a90d-0df61ef4ae47' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''The ETL system date and time that the ETL process last soft-deleted this record; will NOT be set back to null if this record is subsequently re-activated.'', ''SCHEMA'', N''dbo'', ''TABLE'', N''Country'', ''COLUMN'', N''EtlDeletedOn''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1a402813-d7d3-4872-a90d-0df61ef4ae47' AS UNIQUEIDENTIFIER))
  PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\1.0.1\003_add_Country_Table.sql", ID: {1a402813-d7d3-4872-a90d-0df61ef4ae47} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1a402813-d7d3-4872-a90d-0df61ef4ae47' AS UNIQUEIDENTIFIER))
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('1a402813-d7d3-4872-a90d-0df61ef4ae47' AS UNIQUEIDENTIFIER), '6EB754CD940EC310B969D4AC01A61B6E438AD8693F4DF234D915DA90D591347C', 'Migrations\1.0.1\003_add_Country_Table.sql', SYSDATETIME(), SYSTEM_USER, 1, '1.0.1', '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('cd5e77ff-5b3d-4a19-9a6d-cf38d3bc9085' AS UNIQUEIDENTIFIER))
  PRINT '

***** EXECUTING MIGRATION "Migrations\1.0.1\004_add_Culture_table.sql", ID: {cd5e77ff-5b3d-4a19-9a6d-cf38d3bc9085} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('cd5e77ff-5b3d-4a19-9a6d-cf38d3bc9085' AS UNIQUEIDENTIFIER))
  EXECUTE ('
PRINT N''Creating [dbo].[Culture]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('cd5e77ff-5b3d-4a19-9a6d-cf38d3bc9085' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE TABLE [dbo].[Culture]
(
[CultureHistoryId] [bigint] NOT NULL CONSTRAINT [DF_Culture_CultureHistoryId] DEFAULT (NEXT VALUE FOR [dbo].[ReferenceTypeHistorySequence]),
[CultureKey] [int] NOT NULL CONSTRAINT [DF_Culture_CultureKey] DEFAULT (NEXT VALUE FOR [dbo].[ReferenceTypeKeySequence]),
[ValidFromUTC] [datetime] NOT NULL CONSTRAINT [DF_Culture_ValidFromUTC] DEFAULT (getutcdate()),
[ValidToUTC] [datetime] NOT NULL CONSTRAINT [DF_Culture_ValidToUTC] DEFAULT (''99991231 00:00:00''),
[IsCurrent] [char] (1) NOT NULL CONSTRAINT [DF_Culture_IsCurrent] DEFAULT (''I''),
[PreviousHistoryId] [bigint] NULL,
[IsDeleted] [char] (1) NOT NULL CONSTRAINT [DF_Culture_IsDeleted] DEFAULT (''N''),
[LastTouchedOn] [datetime] NOT NULL,
[EtlCreatedOn] [datetime] NOT NULL,
[EtlCreatedBy] [varchar] (200) NOT NULL,
[EtlUpdatedOn] [datetime] NOT NULL,
[EtlUpdatedBy] [varchar] (200) NOT NULL,
[EtlDeletedOn] [datetime] NULL,
[EtlDeletedBy] [varchar] (200) NULL,
[EtlBatchRunId] [int] NOT NULL,
[EtlStepRunId] [int] NOT NULL,
[EtlThreadRunId] [int] NOT NULL,
[EtlDeltaHash] [varchar] (100) NULL,
[CultureInfoCode] [varchar] (20) NOT NULL,
[LanguageNameEnglish] [varchar] (100) NOT NULL,
[LanguageNameLocal] [nvarchar] (100) NULL,
[CountryKey] [int] NOT NULL,
[CountryHistoryIdAsIs] [bigint] NOT NULL
)
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('cd5e77ff-5b3d-4a19-9a6d-cf38d3bc9085' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating primary key [PK_Culture] on [dbo].[Culture]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('cd5e77ff-5b3d-4a19-9a6d-cf38d3bc9085' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [dbo].[Culture] ADD CONSTRAINT [PK_Culture] PRIMARY KEY CLUSTERED  ([CultureHistoryId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('cd5e77ff-5b3d-4a19-9a6d-cf38d3bc9085' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding constraints to [dbo].[Culture]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('cd5e77ff-5b3d-4a19-9a6d-cf38d3bc9085' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [dbo].[Culture] ADD CONSTRAINT [AK_Culture_CultureInfoCode_ValidFromUTC] UNIQUE NONCLUSTERED  ([CultureInfoCode], [ValidFromUTC])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('cd5e77ff-5b3d-4a19-9a6d-cf38d3bc9085' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding constraints to [dbo].[Culture]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('cd5e77ff-5b3d-4a19-9a6d-cf38d3bc9085' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [dbo].[Culture] ADD CONSTRAINT [AK_Culture_CultureInfoCode_ValidToUTC] UNIQUE NONCLUSTERED  ([CultureInfoCode], [ValidToUTC], [IsCurrent])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('cd5e77ff-5b3d-4a19-9a6d-cf38d3bc9085' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding constraints to [dbo].[Culture]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('cd5e77ff-5b3d-4a19-9a6d-cf38d3bc9085' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [dbo].[Culture] ADD CONSTRAINT [AK_Culture_CultureKey_ValidFromUTC] UNIQUE NONCLUSTERED  ([CultureKey], [ValidFromUTC])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('cd5e77ff-5b3d-4a19-9a6d-cf38d3bc9085' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding constraints to [dbo].[Culture]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('cd5e77ff-5b3d-4a19-9a6d-cf38d3bc9085' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [dbo].[Culture] ADD CONSTRAINT [AK_Culture_CultureKey_ValidToUTC] UNIQUE NONCLUSTERED  ([CultureKey], [ValidToUTC], [IsCurrent])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('cd5e77ff-5b3d-4a19-9a6d-cf38d3bc9085' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding constraints to [dbo].[Culture]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('cd5e77ff-5b3d-4a19-9a6d-cf38d3bc9085' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [dbo].[Culture] ADD CONSTRAINT [CK_Culture_IsCurrent] CHECK (([IsCurrent]=''N'' OR [IsCurrent]=''Y'' OR [IsCurrent]=''I''))
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('cd5e77ff-5b3d-4a19-9a6d-cf38d3bc9085' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [dbo].[Culture] ADD CONSTRAINT [CK_Culture_IsDeleted] CHECK (([IsDeleted]=''N'' OR [IsDeleted]=''Y''))
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('cd5e77ff-5b3d-4a19-9a6d-cf38d3bc9085' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [dbo].[Culture] ADD CONSTRAINT [CK_Culture_ValidFromUTC_LessThan_ValidToUTC] CHECK (([ValidFromUTC]<[ValidToUTC]))
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('cd5e77ff-5b3d-4a19-9a6d-cf38d3bc9085' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding foreign keys to [dbo].[Culture]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('cd5e77ff-5b3d-4a19-9a6d-cf38d3bc9085' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [dbo].[Culture] ADD CONSTRAINT [FK_Culture_Culture] FOREIGN KEY ([PreviousHistoryId]) REFERENCES [dbo].[Culture] ([CultureHistoryId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('cd5e77ff-5b3d-4a19-9a6d-cf38d3bc9085' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [dbo].[Culture] ADD CONSTRAINT [FK_Culture_Country_AsIs] FOREIGN KEY ([CountryHistoryIdAsIs]) REFERENCES [dbo].[Country] ([CountryHistoryId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('cd5e77ff-5b3d-4a19-9a6d-cf38d3bc9085' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''This table has an entry for each language/culture. This supports product names and descriptions etc in different languages'', ''SCHEMA'', N''dbo'', ''TABLE'', N''Culture'', null, null
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('cd5e77ff-5b3d-4a19-9a6d-cf38d3bc9085' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''Mandatory reference to the current state record of the System/ISO Country in which this culture/language is used'', ''SCHEMA'', N''dbo'', ''TABLE'', N''Culture'', ''COLUMN'', N''CountryHistoryIdAsIs''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('cd5e77ff-5b3d-4a19-9a6d-cf38d3bc9085' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''Mandatory reference to the DW-specific key of the System/ISO Country in which this culture/language is used'', ''SCHEMA'', N''dbo'', ''TABLE'', N''Culture'', ''COLUMN'', N''CountryKey''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('cd5e77ff-5b3d-4a19-9a6d-cf38d3bc9085' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N'' DW-specific unique identifier for a change record in the history of data changes for a Culture.  Is unique across the entire table.'', ''SCHEMA'', N''dbo'', ''TABLE'', N''Culture'', ''COLUMN'', N''CultureHistoryId''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('cd5e77ff-5b3d-4a19-9a6d-cf38d3bc9085' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''Unique, standard .Net culture code that represents a particular language/culture as used in a particular country.'', ''SCHEMA'', N''dbo'', ''TABLE'', N''Culture'', ''COLUMN'', N''CultureInfoCode''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('cd5e77ff-5b3d-4a19-9a6d-cf38d3bc9085' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''DW-specific unique identifier for a culture/language'', ''SCHEMA'', N''dbo'', ''TABLE'', N''Culture'', ''COLUMN'', N''CultureKey''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('cd5e77ff-5b3d-4a19-9a6d-cf38d3bc9085' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''The ID of the ETL Batch that added or last updated this record – soft link back to the BAT_MAN database which supports the Batch Control Framework'', ''SCHEMA'', N''dbo'', ''TABLE'', N''Culture'', ''COLUMN'', N''EtlBatchRunId''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('cd5e77ff-5b3d-4a19-9a6d-cf38d3bc9085' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''The name of the module or mapping within the ETL process that was responsible for this record being added.'', ''SCHEMA'', N''dbo'', ''TABLE'', N''Culture'', ''COLUMN'', N''EtlCreatedBy''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('cd5e77ff-5b3d-4a19-9a6d-cf38d3bc9085' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''The ETL system date and time that the ETL process first added this record'', ''SCHEMA'', N''dbo'', ''TABLE'', N''Culture'', ''COLUMN'', N''EtlCreatedOn''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('cd5e77ff-5b3d-4a19-9a6d-cf38d3bc9085' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''An MD5 hash of all non-key, changeable values in this record - used by ETL processes to identify changed rows (included columns are defined within the ETL).'', ''SCHEMA'', N''dbo'', ''TABLE'', N''Culture'', ''COLUMN'', N''EtlDeltaHash''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('cd5e77ff-5b3d-4a19-9a6d-cf38d3bc9085' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''The name of the module or mapping within the ETL process that was responsible for the last update for this record; will be the same as EtlCreatedBy when the record is first added'', ''SCHEMA'', N''dbo'', ''TABLE'', N''Culture'', ''COLUMN'', N''EtlUpdatedBy''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('cd5e77ff-5b3d-4a19-9a6d-cf38d3bc9085' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''The ETL system date and time that the ETL process last updated this record; will be the same as EtlCreatedOn when the record is first added.'', ''SCHEMA'', N''dbo'', ''TABLE'', N''Culture'', ''COLUMN'', N''EtlUpdatedOn''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('cd5e77ff-5b3d-4a19-9a6d-cf38d3bc9085' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''Indicates that this row is the current version of a Culture change history.   Where Y indicates TRUE, N indicates FALSE and I indicates Excluded - typically whilst data is mid-load.'', ''SCHEMA'', N''dbo'', ''TABLE'', N''Culture'', ''COLUMN'', N''IsCurrent''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('cd5e77ff-5b3d-4a19-9a6d-cf38d3bc9085' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''Indicates that this record is marked as or has been physically deleted in the source system of record.'', ''SCHEMA'', N''dbo'', ''TABLE'', N''Culture'', ''COLUMN'', N''IsDeleted''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('cd5e77ff-5b3d-4a19-9a6d-cf38d3bc9085' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''The name of this language applicable to this culture in English'', ''SCHEMA'', N''dbo'', ''TABLE'', N''Culture'', ''COLUMN'', N''LanguageNameEnglish''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('cd5e77ff-5b3d-4a19-9a6d-cf38d3bc9085' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''The name of this language applicable to this culture in the local language (if available)'', ''SCHEMA'', N''dbo'', ''TABLE'', N''Culture'', ''COLUMN'', N''LanguageNameLocal''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('cd5e77ff-5b3d-4a19-9a6d-cf38d3bc9085' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''The UTC date and time that this record was last touched by any process which includes but is not limited to the ETL process.  For example, this value would be updated if planned data migration release affects this record.'', ''SCHEMA'', N''dbo'', ''TABLE'', N''Culture'', ''COLUMN'', N''LastTouchedOn''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('cd5e77ff-5b3d-4a19-9a6d-cf38d3bc9085' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''Link to the DW-specific unique identifier for the previous data change history record (if any).'', ''SCHEMA'', N''dbo'', ''TABLE'', N''Culture'', ''COLUMN'', N''PreviousHistoryId''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('cd5e77ff-5b3d-4a19-9a6d-cf38d3bc9085' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''The UTC date and time from which this record was valid, defaults to UTC date and time of insert. On a row that represents a change, this value should be one second ahead of the Valid To Date/Time of the immediately preceding historic record for this entity instance.'', ''SCHEMA'', N''dbo'', ''TABLE'', N''Culture'', ''COLUMN'', N''ValidFromUTC''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('cd5e77ff-5b3d-4a19-9a6d-cf38d3bc9085' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''The UTC date and time, up to which this record is valid, if the current record this will always be 00:00:00 on 31-Dec-9999.  In a non-current record, this value should be one second behind the Valid From point of immediately following historic record for this entity instance.'', ''SCHEMA'', N''dbo'', ''TABLE'', N''Culture'', ''COLUMN'', N''ValidToUTC''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('cd5e77ff-5b3d-4a19-9a6d-cf38d3bc9085' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''The name of the module or mapping within the ETL process that was responsible for the last soft-delete of this record; will NOT be set back to null if this record is subsequently re-activated'', ''SCHEMA'', N''dbo'', ''TABLE'', N''Culture'', ''COLUMN'', N''EtlDeletedBy''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('cd5e77ff-5b3d-4a19-9a6d-cf38d3bc9085' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''The ETL system date and time that the ETL process last soft-deleted this record; will NOT be set back to null if this record is subsequently re-activated.'', ''SCHEMA'', N''dbo'', ''TABLE'', N''Culture'', ''COLUMN'', N''EtlDeletedOn''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('cd5e77ff-5b3d-4a19-9a6d-cf38d3bc9085' AS UNIQUEIDENTIFIER))
  PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\1.0.1\004_add_Culture_table.sql", ID: {cd5e77ff-5b3d-4a19-9a6d-cf38d3bc9085} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('cd5e77ff-5b3d-4a19-9a6d-cf38d3bc9085' AS UNIQUEIDENTIFIER))
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('cd5e77ff-5b3d-4a19-9a6d-cf38d3bc9085' AS UNIQUEIDENTIFIER), '39DF2764F5A382ED2D167F9BB81F3E8F42B8DF4F80A584D0DC6E5D00AEE46E7D', 'Migrations\1.0.1\004_add_Culture_table.sql', SYSDATETIME(), SYSTEM_USER, 1, '1.0.1', '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f8a0c4bf-ceb2-464c-b2ab-043f731d7152' AS UNIQUEIDENTIFIER))
  PRINT '

***** EXECUTING MIGRATION "Migrations\1.0.1\005_add_ProductTranslation_tables_01.sql", ID: {f8a0c4bf-ceb2-464c-b2ab-043f731d7152} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f8a0c4bf-ceb2-464c-b2ab-043f731d7152' AS UNIQUEIDENTIFIER))
  EXECUTE ('
print N''Creating [qvstg].[ProductTranslation]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f8a0c4bf-ceb2-464c-b2ab-043f731d7152' AS UNIQUEIDENTIFIER))
  EXECUTE ('create table [qvstg].[ProductTranslation]
(
[ProductTranslationId] [bigint] not null identity(1, 1),
[EtlDeltaHash] [char] (32) not null,
[EtlCreatedOn] [datetime] not null,
[EtlCreatedBy] [varchar] (200) not null,
[EtlUpdatedOn] [datetime] not null,
[EtlUpdatedBy] [varchar] (200) not null,
[ProductKey] [int] not null,
[SourceCultureHistoryIdAsIs] [bigint] not null,
[SourceCountryHistoryIdAsIs] [bigint] not null,
[TranslationService] [nvarchar] (50) not null,
[TranslatedCultureHistoryIdAsIs] [bigint] not null,
[TranslationStatusId] [int] not null constraint [DF_qvstg_ProductTranslation_TranslationStatusId] default ((1)),
[NativeProductName] [nvarchar] (100) null,
[NativeProductTypeName] [nvarchar] (50) null,
[NativeProductDescription1] [nvarchar] (100) null,
[NativeProductDescription2] [nvarchar] (100) null,
[BrandNameFromWords] [nvarchar] (200) null,
[BrandNameFromSentence] [nvarchar] (200) null,
[BrandNameFromManualInput] [nvarchar] (200) null,
[ProductNameFromWords] [nvarchar] (200) null,
[ProductNameFromSentence] [nvarchar] (200) null,
[ProductNameFromManualInput] [nvarchar] (200) null,
[ProductTypeNameFromWords] [nvarchar] (50) null,
[ProductTypeNameFromSentence] [nvarchar] (50) null,
[ProductTypeNameFromManualInput] [nvarchar] (50) null,
[ProductDescriptionFromWords] [nvarchar] (500) null,
[ProductDescriptionFromSentence] [nvarchar] (500) null,
[ProductDescriptionFromManualInput] [nvarchar] (500) null,
[ColourFromWords] [nvarchar] (200) null,
[ColourFromSentence] [nvarchar] (200) null,
[ColourFromManualInput] [nvarchar] (200) null,
[MaterialFromWords] [nvarchar] (200) null,
[MaterialFromSentence] [nvarchar] (200) null,
[MaterialFromManualInput] [nvarchar] (200) null,
[SizeFromWords] [nvarchar] (200) null,
[SizeFromSentence] [nvarchar] (200) null,
[SizeFromManualInput] [nvarchar] (200) null
)
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f8a0c4bf-ceb2-464c-b2ab-043f731d7152' AS UNIQUEIDENTIFIER))
  EXECUTE ('print N''Creating primary key [PK_qvstg_ProductTranslation] on [qvstg].[ProductTranslation]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f8a0c4bf-ceb2-464c-b2ab-043f731d7152' AS UNIQUEIDENTIFIER))
  EXECUTE ('alter table [qvstg].[ProductTranslation] add constraint [PK_qvstg_ProductTranslation] primary key clustered  ([ProductTranslationId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f8a0c4bf-ceb2-464c-b2ab-043f731d7152' AS UNIQUEIDENTIFIER))
  EXECUTE ('print N''Adding constraints to [qvstg].[ProductTranslation]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f8a0c4bf-ceb2-464c-b2ab-043f731d7152' AS UNIQUEIDENTIFIER))
  EXECUTE ('alter table [qvstg].[ProductTranslation] add constraint [AK_qvstg_ProductTranslation] unique nonclustered  ([ProductKey], [SourceCultureHistoryIdAsIs], [SourceCountryHistoryIdAsIs], [TranslationService], [TranslatedCultureHistoryIdAsIs])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f8a0c4bf-ceb2-464c-b2ab-043f731d7152' AS UNIQUEIDENTIFIER))
  EXECUTE ('print N''Creating [qvstg].[ProductColourTranslation]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f8a0c4bf-ceb2-464c-b2ab-043f731d7152' AS UNIQUEIDENTIFIER))
  EXECUTE ('create table [qvstg].[ProductColourTranslation]
(
[ProductColourTranslationId] [bigint] not null identity(1, 1),
[EtlDeltaHash] [char] (32) not null,
[EtlCreatedOn] [datetime] not null,
[EtlCreatedBy] [varchar] (200) not null,
[EtlUpdatedOn] [datetime] not null,
[EtlUpdatedBy] [varchar] (200) not null,
[UserUpdatedOn] [datetime] null,
[UserUpdatedBy] [varchar] (200) null,
[UserApprovedOn] [datetime] null,
[UserApprovedBy] [varchar] (200) null,
[ProductKey] [int] not null,
[SourceCultureHistoryIdAsIs] [bigint] not null,
[SourceCountryHistoryIdAsIs] [bigint] not null,
[TranslationService] [nvarchar] (50) not null,
[TranslatedCultureHistoryIdAsIs] [bigint] not null,
[TranslationStatusId] [int] not null constraint [DF_qvstg_ProductColourTranslation_TranslationStatusId] default ((1)),
[ExtractColourName] [nvarchar] (100) null,
[ColourFromWords] [nvarchar] (200) null,
[ColourFromSentence] [nvarchar] (200) null,
[ColourFromManualInput] [nvarchar] (200) null,
[OtherColour01] [nvarchar] (200) null,
[OtherColour02] [nvarchar] (200) null,
[OtherColour03] [nvarchar] (200) null,
[OtherColour04] [nvarchar] (200) null,
[OtherColour05] [nvarchar] (200) null,
[OtherColour06] [nvarchar] (200) null,
[OtherColour07] [nvarchar] (200) null,
[OtherColour08] [nvarchar] (200) null,
[OtherColour09] [nvarchar] (200) null,
[OtherColour10] [nvarchar] (200) null
)
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f8a0c4bf-ceb2-464c-b2ab-043f731d7152' AS UNIQUEIDENTIFIER))
  EXECUTE ('print N''Creating primary key [PK_qvstg_ProductColourTranslation] on [qvstg].[ProductColourTranslation]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f8a0c4bf-ceb2-464c-b2ab-043f731d7152' AS UNIQUEIDENTIFIER))
  EXECUTE ('alter table [qvstg].[ProductColourTranslation] add constraint [PK_qvstg_ProductColourTranslation] primary key clustered  ([ProductColourTranslationId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f8a0c4bf-ceb2-464c-b2ab-043f731d7152' AS UNIQUEIDENTIFIER))
  EXECUTE ('print N''Adding constraints to [qvstg].[ProductColourTranslation]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f8a0c4bf-ceb2-464c-b2ab-043f731d7152' AS UNIQUEIDENTIFIER))
  EXECUTE ('alter table [qvstg].[ProductColourTranslation] add constraint [AK_qvstg_ProductColourTranslation] unique nonclustered  ([ProductKey], [SourceCultureHistoryIdAsIs], [SourceCountryHistoryIdAsIs], [TranslationService], [TranslatedCultureHistoryIdAsIs])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f8a0c4bf-ceb2-464c-b2ab-043f731d7152' AS UNIQUEIDENTIFIER))
  EXECUTE ('print N''Creating [dbo].[TranslationStatus]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f8a0c4bf-ceb2-464c-b2ab-043f731d7152' AS UNIQUEIDENTIFIER))
  EXECUTE ('create table [dbo].[TranslationStatus]
(
[TranslationStatusId] [int] not null,
[TranslationStatusName] [varchar] (50) not null,
[Narrative] [varchar] (500) not null
)
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f8a0c4bf-ceb2-464c-b2ab-043f731d7152' AS UNIQUEIDENTIFIER))
  EXECUTE ('print N''Creating primary key [PK_TranslationStatus] on [dbo].[TranslationStatus]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f8a0c4bf-ceb2-464c-b2ab-043f731d7152' AS UNIQUEIDENTIFIER))
  EXECUTE ('alter table [dbo].[TranslationStatus] add constraint [PK_TranslationStatus] primary key clustered  ([TranslationStatusId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f8a0c4bf-ceb2-464c-b2ab-043f731d7152' AS UNIQUEIDENTIFIER))
  EXECUTE ('print N''Adding constraints to [dbo].[TranslationStatus]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f8a0c4bf-ceb2-464c-b2ab-043f731d7152' AS UNIQUEIDENTIFIER))
  EXECUTE ('alter table [dbo].[TranslationStatus] add constraint [AK_TranslationStatus] unique nonclustered  ([TranslationStatusName])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f8a0c4bf-ceb2-464c-b2ab-043f731d7152' AS UNIQUEIDENTIFIER))
  EXECUTE ('print N''Adding foreign keys to [qvstg].[ProductColourTranslation]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f8a0c4bf-ceb2-464c-b2ab-043f731d7152' AS UNIQUEIDENTIFIER))
  EXECUTE ('alter table [qvstg].[ProductColourTranslation] add constraint [FK_qvstg_ProductColourTranslation_TranslationStatus] foreign key ([TranslationStatusId]) references [dbo].[TranslationStatus] ([TranslationStatusId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f8a0c4bf-ceb2-464c-b2ab-043f731d7152' AS UNIQUEIDENTIFIER))
  EXECUTE ('alter table [qvstg].[ProductColourTranslation] add constraint [FK_qvstg_ProductColourTranslation_qvstg_Product] foreign key ([ProductKey]) references [qvstg].[Product] ([ProductKey])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f8a0c4bf-ceb2-464c-b2ab-043f731d7152' AS UNIQUEIDENTIFIER))
  EXECUTE ('alter table [qvstg].[ProductColourTranslation] add constraint [FK_qvstg_ProductColourTranslation_Culture_Source] foreign key ([SourceCultureHistoryIdAsIs]) references [dbo].[Culture] ([CultureHistoryId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f8a0c4bf-ceb2-464c-b2ab-043f731d7152' AS UNIQUEIDENTIFIER))
  EXECUTE ('alter table [qvstg].[ProductColourTranslation] add constraint [FK_qvstg_ProductColourTranslation_Country_Source] foreign key ([SourceCountryHistoryIdAsIs]) references [dbo].[Country] ([CountryHistoryId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f8a0c4bf-ceb2-464c-b2ab-043f731d7152' AS UNIQUEIDENTIFIER))
  EXECUTE ('alter table [qvstg].[ProductColourTranslation] add constraint [FK_qvstg_ProductColourTranslation_Culture_Translated] foreign key ([TranslatedCultureHistoryIdAsIs]) references [dbo].[Culture] ([CultureHistoryId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f8a0c4bf-ceb2-464c-b2ab-043f731d7152' AS UNIQUEIDENTIFIER))
  EXECUTE ('print N''Adding foreign keys to [qvstg].[ProductTranslation]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f8a0c4bf-ceb2-464c-b2ab-043f731d7152' AS UNIQUEIDENTIFIER))
  EXECUTE ('alter table [qvstg].[ProductTranslation] add constraint [FK_qvstg_ProductTranslation_TranslationStatus] foreign key ([TranslationStatusId]) references [dbo].[TranslationStatus] ([TranslationStatusId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f8a0c4bf-ceb2-464c-b2ab-043f731d7152' AS UNIQUEIDENTIFIER))
  EXECUTE ('alter table [qvstg].[ProductTranslation] add constraint [FK_qvstg_ProductTranslation_qvstg_Product] foreign key ([ProductKey]) references [qvstg].[Product] ([ProductKey])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f8a0c4bf-ceb2-464c-b2ab-043f731d7152' AS UNIQUEIDENTIFIER))
  EXECUTE ('alter table [qvstg].[ProductTranslation] add constraint [FK_qvstg_ProductTranslation_Culture_Source] foreign key ([SourceCultureHistoryIdAsIs]) references [dbo].[Culture] ([CultureHistoryId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f8a0c4bf-ceb2-464c-b2ab-043f731d7152' AS UNIQUEIDENTIFIER))
  EXECUTE ('alter table [qvstg].[ProductTranslation] add constraint [FK_qvstg_ProductTranslation_Country_Source] foreign key ([SourceCountryHistoryIdAsIs]) references [dbo].[Country] ([CountryHistoryId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f8a0c4bf-ceb2-464c-b2ab-043f731d7152' AS UNIQUEIDENTIFIER))
  EXECUTE ('alter table [qvstg].[ProductTranslation] add constraint [FK_qvstg_ProductTranslation_Culture_Translated] foreign key ([TranslatedCultureHistoryIdAsIs]) references [dbo].[Culture] ([CultureHistoryId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f8a0c4bf-ceb2-464c-b2ab-043f731d7152' AS UNIQUEIDENTIFIER))
  PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\1.0.1\005_add_ProductTranslation_tables_01.sql", ID: {f8a0c4bf-ceb2-464c-b2ab-043f731d7152} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f8a0c4bf-ceb2-464c-b2ab-043f731d7152' AS UNIQUEIDENTIFIER))
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('f8a0c4bf-ceb2-464c-b2ab-043f731d7152' AS UNIQUEIDENTIFIER), '7EBA36BEF520AB1E8091A47EF8D1EFB463C23CDEC2F747042E6959E467BC6027', 'Migrations\1.0.1\005_add_ProductTranslation_tables_01.sql', SYSDATETIME(), SYSTEM_USER, 1, '1.0.1', '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('da18fd29-27d4-4a74-a98d-6d45616db944' AS UNIQUEIDENTIFIER))
  PRINT '

***** EXECUTING MIGRATION "Migrations\1.0.1\006_add_TranslationColour_table.sql", ID: {da18fd29-27d4-4a74-a98d-6d45616db944} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('da18fd29-27d4-4a74-a98d-6d45616db944' AS UNIQUEIDENTIFIER))
  EXECUTE ('
PRINT N''Creating [qvstg].[TranslationColour]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('da18fd29-27d4-4a74-a98d-6d45616db944' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE TABLE [qvstg].[TranslationColour]
(
[TranslationColourId] [bigint] NOT NULL IDENTITY(1, 1),
[EtlDeltaHash] [char] (32) NOT NULL,
[EtlCreatedOn] [datetime] NOT NULL,
[EtlCreatedBy] [varchar] (200) NOT NULL,
[EtlUpdatedOn] [datetime] NOT NULL,
[EtlUpdatedBy] [varchar] (200) NOT NULL,
[UserUpdatedOn] [datetime] NULL,
[UserUpdatedBy] [varchar] (200) NULL,
[UserApprovedOn] [datetime] NULL,
[UserApprovedBy] [varchar] (200) NULL,
[ExtractColourName] [nvarchar] (100) NULL,
[SourceCultureHistoryIdAsIs] [bigint] NOT NULL,
[SourceCountryHistoryIdAsIs] [bigint] NOT NULL,
[TranslationService] [nvarchar] (50) NOT NULL,
[TranslatedCultureHistoryIdAsIs] [bigint] NOT NULL,
[TranslationStatusId] [int] NOT NULL CONSTRAINT [DF_qvstg_TranslationColour_TranslationStatusId] DEFAULT ((1)),
[ColourFromWords] [nvarchar] (200) NULL,
[ColourFromSentence] [nvarchar] (200) NULL,
[ColourFromManualInput] [nvarchar] (200) NULL,
[OtherColour01] [nvarchar] (200) NULL,
[OtherColour02] [nvarchar] (200) NULL,
[OtherColour03] [nvarchar] (200) NULL,
[OtherColour04] [nvarchar] (200) NULL,
[OtherColour05] [nvarchar] (200) NULL,
[OtherColour06] [nvarchar] (200) NULL,
[OtherColour07] [nvarchar] (200) NULL,
[OtherColour08] [nvarchar] (200) NULL,
[OtherColour09] [nvarchar] (200) NULL,
[OtherColour10] [nvarchar] (200) NULL
)
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('da18fd29-27d4-4a74-a98d-6d45616db944' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating primary key [PK_qvstg_TranslationColour] on [qvstg].[TranslationColour]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('da18fd29-27d4-4a74-a98d-6d45616db944' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [qvstg].[TranslationColour] ADD CONSTRAINT [PK_qvstg_TranslationColour] PRIMARY KEY CLUSTERED  ([TranslationColourId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('da18fd29-27d4-4a74-a98d-6d45616db944' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding constraints to [qvstg].[TranslationColour]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('da18fd29-27d4-4a74-a98d-6d45616db944' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [qvstg].[TranslationColour] ADD CONSTRAINT [AK_qvstg_TranslationColour] UNIQUE NONCLUSTERED  ([ExtractColourName], [SourceCultureHistoryIdAsIs], [SourceCountryHistoryIdAsIs], [TranslationService], [TranslatedCultureHistoryIdAsIs])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('da18fd29-27d4-4a74-a98d-6d45616db944' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding foreign keys to [qvstg].[TranslationColour]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('da18fd29-27d4-4a74-a98d-6d45616db944' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [qvstg].[TranslationColour] ADD CONSTRAINT [FK_qvstg_TranslationColour_Culture_Source] FOREIGN KEY ([SourceCultureHistoryIdAsIs]) REFERENCES [dbo].[Culture] ([CultureHistoryId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('da18fd29-27d4-4a74-a98d-6d45616db944' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [qvstg].[TranslationColour] ADD CONSTRAINT [FK_qvstg_TranslationColour_Country_Source] FOREIGN KEY ([SourceCountryHistoryIdAsIs]) REFERENCES [dbo].[Country] ([CountryHistoryId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('da18fd29-27d4-4a74-a98d-6d45616db944' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [qvstg].[TranslationColour] ADD CONSTRAINT [FK_qvstg_TranslationColour_Culture_Translated] FOREIGN KEY ([TranslatedCultureHistoryIdAsIs]) REFERENCES [dbo].[Culture] ([CultureHistoryId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('da18fd29-27d4-4a74-a98d-6d45616db944' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [qvstg].[TranslationColour] ADD CONSTRAINT [FK_qvstg_TranslationColour_TranslationStatus] FOREIGN KEY ([TranslationStatusId]) REFERENCES [dbo].[TranslationStatus] ([TranslationStatusId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('da18fd29-27d4-4a74-a98d-6d45616db944' AS UNIQUEIDENTIFIER))
  PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\1.0.1\006_add_TranslationColour_table.sql", ID: {da18fd29-27d4-4a74-a98d-6d45616db944} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('da18fd29-27d4-4a74-a98d-6d45616db944' AS UNIQUEIDENTIFIER))
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('da18fd29-27d4-4a74-a98d-6d45616db944' AS UNIQUEIDENTIFIER), '0B077DD7E21C74138B475F3828DAF0F019A31595FA90C3B16C178F027BE7A9AE', 'Migrations\1.0.1\006_add_TranslationColour_table.sql', SYSDATETIME(), SYSTEM_USER, 1, '1.0.1', '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('5aca517d-212d-4a19-a512-50d18e21ae31' AS UNIQUEIDENTIFIER))
  PRINT '

***** EXECUTING MIGRATION "Migrations\1.0.1\007_Rename_dimDate_to_Calendar.sql", ID: {5aca517d-212d-4a19-a512-50d18e21ae31} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('5aca517d-212d-4a19-a512-50d18e21ae31' AS UNIQUEIDENTIFIER))
  EXECUTE ('print N''Renaming [dbo].[dimDate] to Calendar''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('5aca517d-212d-4a19-a512-50d18e21ae31' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_rename N''[dbo].[dimDate]'', N''Calendar'', N''OBJECT''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('5aca517d-212d-4a19-a512-50d18e21ae31' AS UNIQUEIDENTIFIER))
  EXECUTE ('print N''Renaming primary key [PK_dimDate] to PK_Calendar''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('5aca517d-212d-4a19-a512-50d18e21ae31' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_rename N''[dbo].[PK_dimDate]'', N''PK_Calendar'', N''OBJECT''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('5aca517d-212d-4a19-a512-50d18e21ae31' AS UNIQUEIDENTIFIER))
  PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\1.0.1\007_Rename_dimDate_to_Calendar.sql", ID: {5aca517d-212d-4a19-a512-50d18e21ae31} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('5aca517d-212d-4a19-a512-50d18e21ae31' AS UNIQUEIDENTIFIER))
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('5aca517d-212d-4a19-a512-50d18e21ae31' AS UNIQUEIDENTIFIER), '276EDD31C12DC26DA452402307D151068DEA51DC5ED05394540672EB64E027E3', 'Migrations\1.0.1\007_Rename_dimDate_to_Calendar.sql', SYSDATETIME(), SYSTEM_USER, 1, '1.0.1', '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ff6c22f0-34e6-51d1-9b8a-1e9e18d39e88' AS UNIQUEIDENTIFIER) AND [script_checksum] = '23C5BBB432C905255FAC41314717ABD387D25015848D67B33135DBA6731CBD42')
  PRINT '

***** EXECUTING MIGRATION "Static Data\log4Private.JournalControl.data.sql", ID: {ff6c22f0-34e6-51d1-9b8a-1e9e18d39e88} *****';

GO
SET NOCOUNT ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ff6c22f0-34e6-51d1-9b8a-1e9e18d39e88' AS UNIQUEIDENTIFIER) AND [script_checksum] = '23C5BBB432C905255FAC41314717ABD387D25015848D67B33135DBA6731CBD42')
  EXECUTE ('
merge into [log4Private].[JournalControl] as Target
using (values
  (''SYSTEM_DEFAULT'',''ON'')
 ,(''SYSTEM_OVERRIDE'',''ON'')
) as Source ([ModuleName],[OnOffSwitch])
on (Target.[ModuleName] = Source.[ModuleName])
when matched and (
	nullif(Source.[OnOffSwitch], Target.[OnOffSwitch]) is not null or nullif(Target.[OnOffSwitch], Source.[OnOffSwitch]) is not null) then
 update set
  [OnOffSwitch] = Source.[OnOffSwitch]
when not matched by target then
 insert([ModuleName],[OnOffSwitch])
 values(Source.[ModuleName],Source.[OnOffSwitch])
when not matched by source then 
 delete
;
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ff6c22f0-34e6-51d1-9b8a-1e9e18d39e88' AS UNIQUEIDENTIFIER) AND [script_checksum] = '23C5BBB432C905255FAC41314717ABD387D25015848D67B33135DBA6731CBD42')
  EXECUTE ('declare @mergeError int
 , @mergeCount int
select @mergeError = @@error, @mergeCount = @@rowcount
if @mergeError != 0
 begin
 print ''ERROR OCCURRED IN MERGE FOR [log4Private].[JournalControl]. Rows affected: '' + cast(@mergeCount as varchar(100)); -- SQL should always return zero rows affected
 end
else
 begin
 print ''[log4Private].[JournalControl] rows affected by MERGE: '' + cast(@mergeCount as varchar(100));
 end
');

GO
SET NOCOUNT OFF;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ff6c22f0-34e6-51d1-9b8a-1e9e18d39e88' AS UNIQUEIDENTIFIER) AND [script_checksum] = '23C5BBB432C905255FAC41314717ABD387D25015848D67B33135DBA6731CBD42')
  PRINT '***** FINISHED EXECUTING MIGRATION "Static Data\log4Private.JournalControl.data.sql", ID: {ff6c22f0-34e6-51d1-9b8a-1e9e18d39e88} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ff6c22f0-34e6-51d1-9b8a-1e9e18d39e88' AS UNIQUEIDENTIFIER) AND [script_checksum] = '23C5BBB432C905255FAC41314717ABD387D25015848D67B33135DBA6731CBD42')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('ff6c22f0-34e6-51d1-9b8a-1e9e18d39e88' AS UNIQUEIDENTIFIER), '23C5BBB432C905255FAC41314717ABD387D25015848D67B33135DBA6731CBD42', 'Static Data\log4Private.JournalControl.data.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('265aaab9-1a36-5f05-b9a1-e076442aa545' AS UNIQUEIDENTIFIER) AND [script_checksum] = '81D77E42F51728BD6F579AE9AA1492B34AA0EDA4D53837AF6AD4C54B6857663C')
  PRINT '

***** EXECUTING MIGRATION "Static Data\log4Private.Severity.data.sql", ID: {265aaab9-1a36-5f05-b9a1-e076442aa545} *****';

GO
SET NOCOUNT ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('265aaab9-1a36-5f05-b9a1-e076442aa545' AS UNIQUEIDENTIFIER) AND [script_checksum] = '81D77E42F51728BD6F579AE9AA1492B34AA0EDA4D53837AF6AD4C54B6857663C')
  EXECUTE ('
merge into [log4Private].[Severity] as Target
using (values
  (1,''Showstopper/Critical Failure'')
 ,(2,''Severe Failure'')
 ,(4,''Major Failure'')
 ,(8,''Moderate Failure'')
 ,(16,''Minor Failure'')
 ,(32,''Concurrency Violation'')
 ,(256,''Informational'')
 ,(512,''Success'')
 ,(1024,''Debug'')
) as Source ([SeverityId],[SeverityName])
on (Target.[SeverityId] = Source.[SeverityId])
when matched and (
	nullif(Source.[SeverityName], Target.[SeverityName]) is not null or nullif(Target.[SeverityName], Source.[SeverityName]) is not null) then
 update set
  [SeverityName] = Source.[SeverityName]
when not matched by target then
 insert([SeverityId],[SeverityName])
 values(Source.[SeverityId],Source.[SeverityName])
when not matched by source then 
 delete
;
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('265aaab9-1a36-5f05-b9a1-e076442aa545' AS UNIQUEIDENTIFIER) AND [script_checksum] = '81D77E42F51728BD6F579AE9AA1492B34AA0EDA4D53837AF6AD4C54B6857663C')
  EXECUTE ('declare @mergeError int
 , @mergeCount int
select @mergeError = @@error, @mergeCount = @@rowcount
if @mergeError != 0
 begin
 print ''ERROR OCCURRED IN MERGE FOR [log4Private].[Severity]. Rows affected: '' + cast(@mergeCount as varchar(100)); -- SQL should always return zero rows affected
 end
else
 begin
 print ''[log4Private].[Severity] rows affected by MERGE: '' + cast(@mergeCount as varchar(100));
 end
');

GO
SET NOCOUNT OFF;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('265aaab9-1a36-5f05-b9a1-e076442aa545' AS UNIQUEIDENTIFIER) AND [script_checksum] = '81D77E42F51728BD6F579AE9AA1492B34AA0EDA4D53837AF6AD4C54B6857663C')
  PRINT '***** FINISHED EXECUTING MIGRATION "Static Data\log4Private.Severity.data.sql", ID: {265aaab9-1a36-5f05-b9a1-e076442aa545} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('265aaab9-1a36-5f05-b9a1-e076442aa545' AS UNIQUEIDENTIFIER) AND [script_checksum] = '81D77E42F51728BD6F579AE9AA1492B34AA0EDA4D53837AF6AD4C54B6857663C')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('265aaab9-1a36-5f05-b9a1-e076442aa545' AS UNIQUEIDENTIFIER), '81D77E42F51728BD6F579AE9AA1492B34AA0EDA4D53837AF6AD4C54B6857663C', 'Static Data\log4Private.Severity.data.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('23d2834b-9483-5a99-a776-a14111f1ab8a' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'CE6093EA9F4AF8424774F99C5D60399F4F97FA980C748BF6D776B0C2FC948011')
  PRINT '

***** EXECUTING MIGRATION "Static Data\dbo.DataSource.data.sql", ID: {23d2834b-9483-5a99-a776-a14111f1ab8a} *****';

GO
SET NOCOUNT ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('23d2834b-9483-5a99-a776-a14111f1ab8a' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'CE6093EA9F4AF8424774F99C5D60399F4F97FA980C748BF6D776B0C2FC948011')
  EXECUTE ('with sourceCte (DataSourceKey, DataSourceCode, DataSourceName, DataSourceGroup, HostCountry, DataCountries, QlikViewSourceSystemId, IsActive, Narrative)
as
(
			  select     -1	, ''N/S''				, ''Not Specified at Source''					, ''SYSTEM''	, ''''	, ''''	, null	, ''Y'' , ''Indicates that the value in the source system was NULL''
	union all select     -2	, ''N/F''				, ''Lookup Not Found''						, ''SYSTEM''	, ''''	, ''''	, null	, ''Y'' , ''Indicates that the source system provided a value but that there is no matching lookup''
	union all select     -3	, ''N/I''				, ''Not Implemented in Source''				, ''SYSTEM''	, ''''	, ''''	, null	, ''Y'' , ''Used when the source system does not support the concept of a data source''
	union all select     -4	, ''N/A''				, ''Not Applicable''							, ''SYSTEM''	, ''''	, ''''	, null	, ''Y'' , ''Used in a context where data source has no relevance in this context''
	union all select     -5	, ''N/D''				, ''Not Defined''								, ''SYSTEM''	, ''''	, ''''	, null	, ''Y'' , ''The logic to identify the data source has not been supplied or specified''
	union all select 100000	, ''EDW''				, ''Data Warehouse Metadata''					, ''SYSTEM''	, ''''	, ''''	, null	, ''Y'' , ''Data supplied from the BMI Enterprise data warehouse e.g. conformed static/reference data''
	union all select 100001	, ''MDM''				, ''Mastered Data Repository''				, ''MASTER''	, ''''	, ''''	, null	, ''Y'' , ''Data supplied from the BMI Master Data Management System (once implemented)''
	union all select 100101 , ''UK''				, ''Icopal UK - SAP''							, ''''		, ''''	, ''''	, 1		, ''Y'' , ''''		
	union all select 100102 , ''DK''				, ''DK/SKF/SKS/BE/SE - Movex''				, ''''		, ''''	, ''''	, 2		, ''Y'' , ''''		
	union all select 100103 , ''US''				, ''Icopal US''								, ''''		, ''''	, ''''	, 3		, ''Y'' , ''''		
	union all select 100104 , ''SK''				, ''Icopal SK - SAP''							, ''''		, ''''	, ''''	, 4		, ''Y'' , ''''		
	union all select 100105 , ''NO''				, ''Icopal NO -''								, ''''		, ''''	, ''''	, 5		, ''Y'' , ''''		
	union all select 100106 , ''MFX''				, ''Monarflex SK - Movex''					, ''''		, ''''	, ''''	, 6		, ''Y'' , ''''		
	union all select 100107 , ''NL''				, ''Icopal NL (Esha) - Baan 4''				, ''''		, ''''	, ''''	, 7		, ''Y'' , ''''		
	union all select 100108 , ''NLS''				, ''Van Besouw, NL -  Baan 4''				, ''''		, ''''	, ''''	, 8		, ''Y'' , ''''		
	union all select 100109 , ''SE''				, ''Icopal SE - Movex''						, ''''		, ''''	, ''''	, 9		, ''Y'' , ''''		
	union all select 100110 , ''BE''				, ''Icopal BE - MFG pro''						, ''''		, ''''	, ''''	, 10	, ''Y'' , ''''		
	union all select 100111 , ''CZ''				, ''Icopal CZ - SAP''							, ''''		, ''''	, ''''	, 11	, ''Y'' , ''''		
	union all select 100112 , ''FI''				, ''Icopal FI - IBS''							, ''''		, ''''	, ''''	, 12	, ''Y'' , ''''		
	union all select 100113 , ''PL''				, ''Icopal PL - Movex''						, ''''		, ''''	, ''''	, 13	, ''Y'' , ''''		
	union all select 100114 , ''DE''				, ''Icopal DE - Invers''						, ''''		, ''''	, ''''	, 14	, ''Y'' , ''''		
	union all select 100115 , ''FR''				, ''France - Movex''							, ''''		, ''''	, ''''	, 15	, ''Y'' , ''''		
	union all select 100116 , ''Vedag-SAP''		, ''VEDAG - SAP''								, ''''		, ''''	, ''''	, 16	, ''Y'' , ''''		
	union all select 100117 , ''RU (old)''		, ''Icopal RU (before 2015)''					, ''''		, ''''	, ''''	, 17	, ''Y'' , ''''		
	union all select 100119 , ''AT''				, ''VILLAS Austria - SAP''					, ''''		, ''''	, ''''	, 19	, ''Y'' , ''''		
	union all select 100120 , ''Villas-HUM''		, ''Villas - Hungary''						, ''''		, ''''	, ''''	, 20	, ''Y'' , ''''		
	union all select 100122 , ''DEU-SAP''			, ''Icopal Germany - SAP (from 2011.05.01)''	, ''''		, ''''	, ''''	, 22	, ''Y'' , ''''		
	union all select 100125 , ''CAN''				, ''Icopal Canada  (US)''						, ''''		, ''''	, ''''	, 25	, ''Y'' , ''''		
	union all select 100126 , ''DES-IKV''			, ''DES (IKV)''								, ''''		, ''''	, ''''	, 26	, ''Y'' , ''''		
	union all select 100127 , ''RU-SA''			, ''Icopal RU - SAP''							, ''''		, ''''	, ''''	, 27	, ''Y'' , ''''		
	union all select 100129 , ''Poly-Cegid''		, ''Polytuil - Cegid''						, ''''		, ''''	, ''''	, 29	, ''Y'' , ''''		
	union all select 100130 , ''Symph-POL''		, ''Poland - Symphonia''						, ''''		, ''''	, ''''	, 30	, ''Y'' , ''''		
	union all select 100131 , ''Comptoir-Cegid''	, ''Comptoir - Cegid''						, ''''		, ''''	, ''''	, 31	, ''Y'' , ''''		
	union all select 100132 , ''Sage-FRA''		, ''France - Sage Forte''						, ''''		, ''''	, ''''	, 32	, ''Y'' , ''''		
	union all select 100133 , ''Wolfin - SAP''	, ''Wolfin - SAP''							, ''''		, ''''	, ''''	, 33	, ''Y'' , ''''		
	union all select 100134 , ''Decra-DEU-SAP''	, ''Decra - Germany SAP''						, ''''		, ''''	, ''''	, 34	, ''Y'' , ''''		
	union all select 100135 , ''Feumas-DEU-SAP''	, ''Feumas - Germany SAP''					, ''''		, ''''	, ''''	, 35	, ''Y'' , ''''		
	union all select 100136 , ''Nav-ESP''			, ''Spain - Navision''						, ''''		, ''''	, ''''	, 36	, ''Y'' , ''''		
	union all select 100137 , ''Nav-ITA''			, ''Italy - Navision''						, ''''		, ''''	, ''''	, 37	, ''Y'' , ''''		
	union all select 100138 , ''Nav-ROU''			, ''Romania - Navision''						, ''''		, ''''	, ''''	, 38	, ''Y'' , ''''		
	union all select 100139 , ''Nav-BGR''			, ''Bulgaria - Navision''						, ''''		, ''''	, ''''	, 39	, ''Y'' , ''''		
	union all select 100140 , ''Vedag-POL-M3''	, ''Vedag Poland - M3''						, ''''		, ''''	, ''''	, 40	, ''Y'' , ''''		
	union all select 100141 , ''Villas-POL-M3''	, ''Villas Poland - M3''						, ''''		, ''''	, ''''	, 41	, ''Y'' , ''''		
	union all select 100142 , ''Baan-NLD''		, ''NL ?? - Baan''							, ''''		, ''''	, ''''	, 42	, ''Y'' , ''''		
	union all select 100143 , ''Wijo-SWE''		, ''Wijo - Sweden''							, ''''		, ''''	, ''''	, 43	, ''Y'' , ''''		
)
merge into dbo.DataSource as tgt
using sourceCte as src
on src.DataSourceKey = tgt.DataSourceKey
when matched
		and tgt.DataSourceCode <> src.DataSourceCode
		or tgt.DataSourceName <> src.DataSourceName
		or tgt.DataSourceGroup <> src.DataSourceGroup
		or tgt.HostCountry <> src.HostCountry
		or tgt.DataCountries <> src.DataCountries
		or coalesce(tgt.QlikViewSourceSystemId, -1) <> coalesce(src.QlikViewSourceSystemId, -1)
		or tgt.IsActive <> src.IsActive
		or tgt.Narrative <> src.Narrative
	then update set
		  tgt.DataSourceCode = src.DataSourceCode
		, tgt.DataSourceName = src.DataSourceName
		, tgt.DataSourceGroup = src.DataSourceGroup
		, tgt.HostCountry = src.HostCountry
		, tgt.DataCountries = src.DataCountries
		, tgt.QlikViewSourceSystemId = src.QlikViewSourceSystemId
		, tgt.IsActive = src.IsActive
		, tgt.Narrative = src.Narrative
when not matched then
	insert
	(
	  DataSourceKey
	, DataSourceCode
	, DataSourceName
	, DataSourceGroup
	, HostCountry
	, DataCountries
	, QlikViewSourceSystemId
	, IsActive
	, Narrative
	)
	values
	(
	  src.DataSourceKey
	, src.DataSourceCode
	, src.DataSourceName
	, src.DataSourceGroup
	, src.HostCountry
	, src.DataCountries
	, src.QlikViewSourceSystemId
	, src.IsActive
	, src.Narrative
	);
');

GO
SET NOCOUNT OFF;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('23d2834b-9483-5a99-a776-a14111f1ab8a' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'CE6093EA9F4AF8424774F99C5D60399F4F97FA980C748BF6D776B0C2FC948011')
  PRINT '***** FINISHED EXECUTING MIGRATION "Static Data\dbo.DataSource.data.sql", ID: {23d2834b-9483-5a99-a776-a14111f1ab8a} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('23d2834b-9483-5a99-a776-a14111f1ab8a' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'CE6093EA9F4AF8424774F99C5D60399F4F97FA980C748BF6D776B0C2FC948011')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('23d2834b-9483-5a99-a776-a14111f1ab8a' AS UNIQUEIDENTIFIER), 'CE6093EA9F4AF8424774F99C5D60399F4F97FA980C748BF6D776B0C2FC948011', 'Static Data\dbo.DataSource.data.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ebde8f74-e8ec-52f4-a841-5d836fed6587' AS UNIQUEIDENTIFIER) AND [script_checksum] = '7A770C2593E1756C08A146F748666ED49EAADED1B5F7E68C90FBBC729078A9E4')
  PRINT '

***** EXECUTING MIGRATION "Static Data\dbo.Country.data.sql", ID: {ebde8f74-e8ec-52f4-a841-5d836fed6587} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ebde8f74-e8ec-52f4-a841-5d836fed6587' AS UNIQUEIDENTIFIER) AND [script_checksum] = '7A770C2593E1756C08A146F748666ED49EAADED1B5F7E68C90FBBC729078A9E4')
  EXECUTE ('--MERGE generated by ''sp_generate_merge'' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

set nocount on


merge into [dbo].[Country] as Target
using (values
  (2337,-1,''1900-01-01T00:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''X0'',''N/S'',''Not Specified at Source'',''Not Specified at Source'',''Indicates that the value in the source system was NULL'',''N/S'')
 ,(2339,-2,''1900-01-01T00:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''X1'',''N/F'',''Lookup Not Found'',''Lookup Not Found'',''Indicates that the source system provided a value but that there is no matching lookup'',''N/F'')
 ,(2341,-3,''1900-01-01T00:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''X2'',''N/I'',''Not Implemented in Source'',''Not Implemented in Source'',''Used when the source system does not support the concept of a country in this context'',''N/I'')
 ,(2343,-4,''1900-01-01T00:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''X3'',''N/A'',''Not Applicable'',''Not Applicable'',''Used in a context where reporting country has no relevance'',''N/A'')
 ,(2345,-5,''1900-01-01T00:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''X4'',''N/D'',''Not Defined'',''Not Defined'',''The logic to identify the reporting country has not been supplied or specified'',''N/D'')
 ,(2347,100003630,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''AL'',''ALB'',''Republic of Albania'',''Albania'',''Albania'',''EMEA'')
 ,(2349,100003632,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''DZ'',''DZA'',''People''''s Democratic Republic of Algeria'',''Algeria'',''Algeria'',''EMEA'')
 ,(2351,100003634,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''AS'',''ASM'',''Territory of American Samoa'',''American Samoa'',''American Samoa'',''AM'')
 ,(2353,100003636,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''AD'',''AND'',''Principality of Andorra'',''Andorra'',''Andorra'',''EMEA'')
 ,(2355,100003638,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''AO'',''AGO'',''Republic of Angola'',''Angola'',''Angola'',''EMEA'')
 ,(2357,100003640,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''AG'',''ATG'','''',''Antigua and Barbuda'',''Antigua and Barbuda'',''EMEA'')
 ,(2359,100003642,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''AZ'',''AZE'',''Republic of Azerbaijan'',''Azerbaijan'',''Azerbaijan'',''AP'')
 ,(2361,100003644,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''AR'',''ARG'',''Argentine Republic'',''Argentina'',''Argentina'',''AM'')
 ,(2363,100003646,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''AU'',''AUS'',''Commonwealth of Australia'',''Australia'',''Australia'',''AP'')
 ,(2365,100003648,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''AT'',''AUT'',''Republic of Austria'',''Austria'',''Österreich'',''EMEA'')
 ,(2367,100003650,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''BS'',''BHS'',''Commonwealth of The Bahamas'',''Bahamas, The'',''Bahamas, The'',''AM'')
 ,(2369,100003652,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''BH'',''BHR'',''Kingdom of Bahrain'',''Bahrain'',''Bahrain'',''EMEA'')
 ,(2371,100003654,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''BD'',''BGD'',''People''''s Republic of Bangladesh'',''Bangladesh'',''Bangladesh'',''AP'')
 ,(2373,100003656,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''AM'',''ARM'',''Republic of Armenia'',''Armenia'',''Armenia'',''AP'')
 ,(2375,100003658,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''BB'',''BRB'','''',''Barbados'',''Barbados'',''AM'')
 ,(2377,100003660,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''BE'',''BEL'',''Kingdom of Belgium'',''Belgium'',''Belgique'',''EMEA'')
 ,(2379,100003662,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''BM'',''BMU'','''',''Bermuda'',''Bermuda'',''AM'')
 ,(2381,100003664,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''BT'',''BTN'',''Kingdom of Bhutan'',''Bhutan'',''Bhutan'',''AP'')
 ,(2383,100003666,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''BO'',''BOL'',''Republic of Bolivia'',''Bolivia'',''Bolivia'',''AM'')
 ,(2385,100003668,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''BA'',''BIH'','''',''Bosnia and Herzegovina'',''Bosnia and Herzegovina'',''EMEA'')
 ,(2387,100003670,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''BW'',''BWA'',''Republic of Botswana'',''Botswana'',''Botswana'',''EMEA'')
 ,(2389,100003672,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''BV'',''BVT'','''',''Bouvet Island'',''Bouvet Island'',''EMEA'')
 ,(2391,100003674,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''BR'',''BRA'',''Federative Republic of Brazil'',''Brazil'',''Brazil'',''AM'')
 ,(2393,100003676,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''BZ'',''BLZ'','''',''Belize'',''Belize'',''AM'')
 ,(2395,100003678,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''IO'',''IOT'','''',''British Indian Ocean Territory'',''British Indian Ocean Territory'',''EMEA'')
 ,(2397,100003680,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''SB'',''SLB'','''',''Solomon Islands'',''Solomon Islands'',''AP'')
 ,(2399,100003682,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''VG'',''VGB'','''',''British Virgin Islands'',''British Virgin Islands'',''AM'')
 ,(2401,100003684,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''BN'',''BRN'',''Negara Brunei Darussalam'',''Brunei'',''Brunei'',''AP'')
 ,(2403,100003686,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''BG'',''BGR'',''Republic of Bulgaria'',''Bulgaria'',''Bulgaria'',''EMEA'')
 ,(2405,100003688,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''MM'',''MMR'',''Union of Myanmar'',''Myanmar (Burma)'',''Myanmar (Burma)'',''AP'')
 ,(2407,100003690,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''BI'',''BDI'',''Republic of Burundi'',''Burundi'',''Burundi'',''EMEA'')
 ,(2409,100003692,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''BY'',''BLR'',''Republic of Belarus'',''Belarus'',''Belarus'',''EMEA'')
 ,(2411,100003694,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''KH'',''KHM'',''Kingdom of Cambodia'',''Cambodia'',''Cambodia'',''AP'')
 ,(2413,100003696,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''CM'',''CMR'',''Republic of Cameroon'',''Cameroon'',''Cameroon'',''EMEA'')
 ,(2415,100003698,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''CA'',''CAN'','''',''Canada'',''Canada'',''AM'')
 ,(2417,100003700,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''CV'',''CPV'',''Republic of Cape Verde'',''Cape Verde'',''Cape Verde'',''EMEA'')
 ,(2419,100003702,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''KY'',''CYM'','''',''Cayman Islands'',''Cayman Islands'',''AM'')
 ,(2421,100003704,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''CF'',''CAF'','''',''Central African Republic'',''Central African Republic'',''EMEA'')
 ,(2423,100003706,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''LK'',''LKA'',''Democratic Socialist Republic of Sri Lanka'',''Sri Lanka'',''Sri Lanka'',''AP'')
 ,(2425,100003708,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''TD'',''TCD'',''Republic of Chad'',''Chad'',''Chad'',''EMEA'')
 ,(2427,100003710,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''CL'',''CHL'',''Republic of Chile'',''Chile'',''Chile'',''AM'')
 ,(2429,100003712,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''CN'',''CHN'',''People''''s Republic of China'',''China, People''''s Republic of'',''China, People''''s Republic of'',''AP'')
 ,(2431,100003714,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''TW'',''TWN'',''Republic of China'',''China, Republic of (Taiwan)'',''China, Republic of (Taiwan)'',''AP'')
 ,(2433,100003716,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''CX'',''CXR'',''Territory of Christmas Island'',''Christmas Island'',''Christmas Island'',''AP'')
 ,(2435,100003718,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''CC'',''CCK'',''Territory of Cocos (Keeling) Islands'',''Cocos (Keeling) Islands'',''Cocos (Keeling) Islands'',''AP'')
 ,(2437,100003720,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''CO'',''COL'',''Republic of Colombia'',''Colombia'',''Colombia'',''AM'')
 ,(2439,100003722,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''KM'',''COM'',''Union of Comoros'',''Comoros'',''Comoros'',''EMEA'')
 ,(2441,100003724,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''YT'',''MYT'',''Departmental Collectivity of Mayotte'',''Mayotte'',''Mayotte'',''EMEA'')
 ,(2443,100003726,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''CG'',''COG'',''Republic of the Congo'',''Congo, (Congo Â– Brazzaville)'',''Congo, (Congo Â– Brazzaville)'',''EMEA'')
 ,(2445,100003728,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''CD'',''COD'',''Democratic Republic of the Congo'',''Congo, (Congo Â– Kinshasa)'',''Congo, (Congo Â– Kinshasa)'',''EMEA'')
 ,(2447,100003730,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''CK'',''COK'','''',''Cook Islands'',''Cook Islands'',''AP'')
 ,(2449,100003732,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''CR'',''CRI'',''Republic of Costa Rica'',''Costa Rica'',''Costa Rica'',''AM'')
 ,(2451,100003734,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''HR'',''HRV'',''Republic of Croatia'',''Croatia'',''Croatia'',''EMEA'')
 ,(2453,100003736,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''CU'',''CUB'',''Republic of Cuba'',''Cuba'',''Cuba'',''AM'')
 ,(2455,100003738,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''CY'',''CYP'',''Republic of Cyprus'',''Cyprus'',''Cyprus'',''EMEA'')
 ,(2457,100003740,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''CZ'',''CZE'','''',''Czech Republic'',''Czech Republic'',''EMEA'')
 ,(2459,100003742,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''BJ'',''BEN'',''Republic of Benin'',''Benin'',''Benin'',''EMEA'')
 ,(2461,100003744,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''DK'',''DNK'',''Kingdom of Denmark'',''Denmark'',''Danmark'',''EMEA'')
 ,(2463,100003746,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''DM'',''DMA'',''Commonwealth of Dominica'',''Dominica'',''Dominica'',''AM'')
 ,(2465,100003748,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''DO'',''DOM'','''',''Dominican Republic'',''Dominican Republic'',''AM'')
 ,(2467,100003750,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''EC'',''ECU'',''Republic of Ecuador'',''Ecuador'',''Ecuador'',''AM'')
 ,(2469,100003752,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''SV'',''SLV'',''Republic of El Salvador'',''El Salvador'',''El Salvador'',''AM'')
 ,(2471,100003754,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''GQ'',''GNQ'',''Republic of Equatorial Guinea'',''Equatorial Guinea'',''Equatorial Guinea'',''EMEA'')
 ,(2473,100003756,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''ET'',''ETH'',''Federal Democratic Republic of Ethiopia'',''Ethiopia'',''Ethiopia'',''EMEA'')
 ,(2475,100003758,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''ER'',''ERI'',''State of Eritrea'',''Eritrea'',''Eritrea'',''EMEA'')
 ,(2477,100003760,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''EE'',''EST'',''Republic of Estonia'',''Estonia'',''Estonia'',''EMEA'')
 ,(2479,100003762,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''FO'',''FRO'','''',''Faroe Islands'',''Faroe Islands'',''EMEA'')
 ,(2481,100003764,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''FK'',''FLK'','''',''Falkland Islands (Islas Malvinas)'',''Falkland Islands'',''EMEA'')
 ,(2483,100003766,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''GS'',''SGS'','''',''South Georgia & South Sandwich Islands'',''South Georgia & South Sandwich Islands'',''EMEA'')
 ,(2485,100003768,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''FJ'',''FJI'',''Republic of the Fiji Islands'',''Fiji'',''Fiji'',''AP'')
 ,(2487,100003770,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''FI'',''FIN'',''Republic of Finland'',''Finland'',''Finland'',''EMEA'')
 ,(2489,100003772,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''AX'',''ALA'','''',''Aland'',''Aland'',''EMEA'')
 ,(2491,100003774,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''FR'',''FRA'',''French Republic'',''France'',''France'',''EMEA'')
 ,(2493,100003776,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''GF'',''GUF'',''Overseas Region of Guiana'',''French Guiana'',''French Guiana'',''AM'')
 ,(2495,100003778,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''PF'',''PYF'',''Overseas Country of French Polynesia'',''French Polynesia'',''French Polynesia'',''AP'')
 ,(2497,100003780,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''TF'',''ATF'',''Territory of the French Southern and Antarctic Lands'',''French Southern and Antarctic Lands'',''French Southern and Antarctic Lands'',''EMEA'')
 ,(2499,100003782,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''DJ'',''DJI'',''Republic of Djibouti'',''Djibouti'',''Djibouti'',''EMEA'')
 ,(2501,100003784,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''GA'',''GAB'',''Gabonese Republic'',''Gabon'',''Gabon'',''EMEA'')
 ,(2503,100003786,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''GE'',''GEO'',''Republic of Georgia'',''Georgia'',''Georgia'',''EMEA'')
 ,(2505,100003788,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''GM'',''GMB'',''Republic of The Gambia'',''Gambia, The'',''Gambia, The'',''EMEA'')
 ,(2507,100003790,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''DE'',''DEU'',''Federal Republic of Germany'',''Germany'',''Deutschland'',''EMEA'')
 ,(2509,100003792,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''GH'',''GHA'',''Republic of Ghana'',''Ghana'',''Ghana'',''EMEA'')
 ,(2511,100003794,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''GI'',''GIB'','''',''Gibraltar'',''Gibraltar'',''EMEA'')
 ,(2513,100003796,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''KI'',''KIR'',''Republic of Kiribati'',''Kiribati'',''Kiribati'',''AP'')
 ,(2515,100003798,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''GR'',''GRC'',''Hellenic Republic'',''Greece'',''Elláda'',''EMEA'')
 ,(2517,100003800,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''GL'',''GRL'','''',''Greenland'',''Greenland'',''AM'')
 ,(2519,100003802,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''GD'',''GRD'','''',''Grenada'',''Grenada'',''AM'')
 ,(2521,100003804,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''GP'',''GLP'',''Collectivity of Saint Martin'',''Saint Martin'',''Saint Martin'',''EMEA'')
 ,(2523,100003806,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''GU'',''GUM'',''Territory of Guam'',''Guam'',''Guam'',''AP'')
 ,(2525,100003808,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''GT'',''GTM'',''Republic of Guatemala'',''Guatemala'',''Guatemala'',''AM'')
 ,(2527,100003810,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''GN'',''GIN'',''Republic of Guinea'',''Guinea'',''Guinea'',''AP'')
 ,(2529,100003812,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''GY'',''GUY'',''Co-operative Republic of Guyana'',''Guyana'',''Guyana'',''AM'')
 ,(2531,100003814,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''HT'',''HTI'',''Republic of Haiti'',''Haiti'',''Haiti'',''AM'')
 ,(2533,100003816,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''HM'',''HMD'',''Territory of Heard Island and McDonald Islands'',''Heard Island and McDonald Islands'',''Heard Island and McDonald Islands'',''EMEA'')
 ,(2535,100003818,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''VA'',''VAT'',''State of the Vatican City'',''Vatican City'',''Stato della Città del Vaticano'',''EMEA'')
 ,(2537,100003820,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''HN'',''HND'',''Republic of Honduras'',''Honduras'',''Honduras'',''AM'')
 ,(2539,100003822,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''HK'',''HKG'',''Hong Kong Special Administrative Region'',''Hong Kong'',''Hong Kong'',''AP'')
 ,(2541,100003824,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''HU'',''HUN'',''Republic of Hungary'',''Hungary'',''Hungary'',''EMEA'')
 ,(2543,100003826,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''IS'',''ISL'',''Republic of Iceland'',''Iceland'','' Ísland'',''EMEA'')
 ,(2545,100003828,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''IN'',''IND'',''Republic of India'',''India'',''India'',''AP'')
 ,(2547,100003830,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''ID'',''IDN'',''Republic of Indonesia'',''Indonesia'',''Indonesia'',''AP'')
 ,(2549,100003832,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''IR'',''IRN'',''Islamic Republic of Iran'',''Iran'',''Iran'',''EMEA'')
 ,(2551,100003834,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''IQ'',''IRQ'',''Republic of Iraq'',''Iraq'',''Iraq'',''EMEA'')
 ,(2553,100003836,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''IE'',''IRL'','''',''Ireland'',''Eire'',''EMEA'')
 ,(2555,100003838,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''IL'',''ISR'',''State of Israel'',''Israel'',''Israel'',''EMEA'')
 ,(2557,100003840,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''IT'',''ITA'',''Italian Republic'',''Italy'',''Italia'',''EMEA'')
 ,(2559,100003842,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''CI'',''CIV'',''Republic of Cote d''''Ivoire'',''Cote d''''Ivoire (Ivory Coast)'',''Cote d''''Ivoire (Ivory Coast)'',''EMEA'')
 ,(2561,100003844,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''JM'',''JAM'','''',''Jamaica'',''Jamaica'',''AM'')
 ,(2563,100003846,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''JP'',''JPN'','''',''Japan'',''Japan'',''AP'')
 ,(2565,100003848,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''KZ'',''KAZ'',''Republic of Kazakhstan'',''Kazakhstan'',''Kazakhstan'',''AP'')
 ,(2567,100003850,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''JO'',''JOR'',''Hashemite Kingdom of Jordan'',''Jordan'',''Jordan'',''EMEA'')
 ,(2569,100003852,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''KE'',''KEN'',''Republic of Kenya'',''Kenya'',''Kenya'',''EMEA'')
 ,(2571,100003854,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''KP'',''PRK'',''Democratic People''''s Republic of Korea'',''Korea, North'',''Korea, North'',''AP'')
 ,(2573,100003856,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''KR'',''KOR'',''Republic of Korea'',''Korea, South'',''Korea, South'',''AP'')
 ,(2575,100003858,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''KW'',''KWT'',''State of Kuwait'',''Kuwait'',''Kuwait'',''EMEA'')
 ,(2577,100003860,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''KG'',''KGZ'',''Kyrgyz Republic'',''Kyrgyzstan'',''Kyrgyzstan'',''AP'')
 ,(2579,100003862,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''LA'',''LAO'',''Lao People''''s Democratic Republic'',''Laos'',''Laos'',''AP'')
 ,(2581,100003864,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''LB'',''LBN'',''Lebanese Republic'',''Lebanon'',''Lebanon'',''EMEA'')
 ,(2583,100003866,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''LS'',''LSO'',''Kingdom of Lesotho'',''Lesotho'',''Lesotho'',''EMEA'')
 ,(2585,100003868,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''LV'',''LVA'',''Republic of Latvia'',''Latvia'',''Latvia'',''EMEA'')
 ,(2587,100003870,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''LR'',''LBR'',''Republic of Liberia'',''Liberia'',''Liberia'',''EMEA'')
 ,(2589,100003872,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''LY'',''LBY'',''Great Socialist People''''s Libyan Arab Jamahiriya'',''Libya'',''Libya'',''EMEA'')
 ,(2591,100003874,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''LI'',''LIE'',''Principality of Liechtenstein'',''Liechtenstein'',''Liechtenstein'',''EMEA'')
 ,(2593,100003876,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''LT'',''LTU'',''Republic of Lithuania'',''Lithuania'',''Lithuania'',''EMEA'')
 ,(2595,100003878,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''LU'',''LUX'',''Grand Duchy of Luxembourg'',''Luxembourg'',''Luxembourg'',''EMEA'')
 ,(2597,100003880,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''MO'',''MAC'',''Macau Special Administrative Region'',''Macau'',''Macau'',''AP'')
 ,(2599,100003882,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''MG'',''MDG'',''Republic of Madagascar'',''Madagascar'',''Madagascar'',''EMEA'')
 ,(2601,100003884,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''MW'',''MWI'',''Republic of Malawi'',''Malawi'',''Malawi'',''EMEA'')
 ,(2603,100003886,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''MY'',''MYS'','''',''Malaysia'',''Malaysia'',''AP'')
 ,(2605,100003888,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''MV'',''MDV'',''Republic of Maldives'',''Maldives'',''Maldives'',''AP'')
 ,(2607,100003890,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''ML'',''MLI'',''Republic of Mali'',''Mali'',''Mali'',''EMEA'')
 ,(2609,100003892,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''MT'',''MLT'',''Republic of Malta'',''Malta'',''Malta'',''EMEA'')
 ,(2611,100003894,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''MQ'',''MTQ'',''Overseas Region of Martinique'',''Martinique'',''Martinique'',''EMEA'')
 ,(2613,100003896,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''MR'',''MRT'',''Islamic Republic of Mauritania'',''Mauritania'',''Mauritania'',''AM'')
 ,(2615,100003898,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''MU'',''MUS'',''Republic of Mauritius'',''Mauritius'',''Mauritius'',''EMEA'')
 ,(2617,100003900,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''MX'',''MEX'',''United Mexican States'',''Mexico'',''Mexico'',''AM'')
 ,(2619,100003902,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''MC'',''MCO'',''Principality of Monaco'',''Monaco'',''Monaco'',''EMEA'')
 ,(2621,100003904,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''MN'',''MNG'','''',''Mongolia'',''Mongolia'',''AP'')
 ,(2623,100003906,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''MD'',''MDA'',''Republic of Moldova'',''Moldova'',''Moldova'',''EMEA'')
 ,(2625,100003908,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''ME'',''MNE'',''Republic of Montenegro'',''Montenegro'',''Montenegro'',''AP'')
 ,(2627,100003910,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''MS'',''MSR'','''',''Montserrat'',''Montserrat'',''AM'')
 ,(2629,100003912,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''MA'',''MAR'',''Kingdom of Morocco'',''Morocco'',''Morocco'',''EMEA'')
 ,(2631,100003914,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''MZ'',''MOZ'',''Republic of Mozambique'',''Mozambique'',''Mozambique'',''EMEA'')
 ,(2633,100003916,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''OM'',''OMN'',''Sultanate of Oman'',''Oman'',''Oman'',''EMEA'')
 ,(2635,100003918,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''NA'',''NAM'',''Republic of Namibia'',''Namibia'',''Namibia'',''EMEA'')
 ,(2637,100003920,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''NR'',''NRU'',''Republic of Nauru'',''Nauru'',''Nauru'',''AP'')
 ,(2639,100003922,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''NP'',''NPL'','''',''Nepal'',''Nepal'',''AP'')
 ,(2641,100003924,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''NL'',''NLD'',''Kingdom of the Netherlands'',''Netherlands'',''Nederland'',''EMEA'')
 ,(2643,100003926,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''AN'',''ANT'','''',''Netherlands Antilles'',''Netherlands Antilles'',''EMEA'')
 ,(2645,100003928,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''AW'',''ABW'','''',''Aruba'',''Aruba'',''AM'')
 ,(2647,100003930,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''NC'',''NCL'','''',''New Caledonia'',''New Caledonia'',''AM'')
 ,(2649,100003932,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''VU'',''VUT'',''Republic of Vanuatu'',''Vanuatu'',''Vanuatu'',''AP'')
 ,(2651,100003934,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''NZ'',''NZL'','''',''New Zealand'',''New Zealand'',''AP'')
 ,(2653,100003936,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''NI'',''NIC'',''Republic of Nicaragua'',''Nicaragua'',''Nicaragua'',''AM'')
 ,(2655,100003938,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''NE'',''NER'',''Republic of Niger'',''Niger'',''Niger'',''EMEA'')
 ,(2657,100003940,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''NG'',''NGA'',''Federal Republic of Nigeria'',''Nigeria'',''Nigeria'',''EMEA'')
 ,(2659,100003942,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''NU'',''NIU'','''',''Niue'',''Niue'',''AP'')
 ,(2661,100003944,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''NF'',''NFK'',''Territory of Norfolk Island'',''Norfolk Island'',''Norfolk Island'',''AP'')
 ,(2663,100003946,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''NO'',''NOR'',''Kingdom of Norway'',''Norway'',''Norge'',''EMEA'')
 ,(2665,100003948,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''MP'',''MNP'',''Commonwealth of The Northern Mariana Islands'',''Northern Mariana Islands'',''Northern Mariana Islands'',''AP'')
 ,(2667,100003950,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''UM'',''UMI'','''',''Baker Island'',''Baker Island'',''AM'')
 ,(2669,100003952,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''FM'',''FSM'',''Federated States of Micronesia'',''Micronesia'',''Micronesia'',''AP'')
 ,(2671,100003954,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''MH'',''MHL'',''Republic of the Marshall Islands'',''Marshall Islands'',''Marshall Islands'',''AP'')
 ,(2673,100003956,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''PW'',''PLW'',''Republic of Palau'',''Palau'',''Palau'',''AP'')
 ,(2675,100003958,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''PK'',''PAK'',''Islamic Republic of Pakistan'',''Pakistan'',''Pakistan'',''AP'')
 ,(2677,100003960,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''PA'',''PAN'',''Republic of Panama'',''Panama'',''Panama'',''AM'')
 ,(2679,100003962,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''PG'',''PNG'',''Independent State of Papua New Guinea'',''Papua New Guinea'',''Papua New Guinea'',''AP'')
 ,(2681,100003964,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''PY'',''PRY'',''Republic of Paraguay'',''Paraguay'',''Paraguay'',''AM'')
 ,(2683,100003966,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''PE'',''PER'',''Republic of Peru'',''Peru'',''Peru'',''AM'')
 ,(2685,100003968,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''PH'',''PHL'',''Republic of the Philippines'',''Philippines'',''Philippines'',''AP'')
 ,(2687,100003970,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''PN'',''PCN'','''',''Pitcairn Islands'',''Pitcairn Islands'',''AP'')
 ,(2689,100003972,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''PL'',''POL'',''Republic of Poland'',''Poland'',''Poland'',''EMEA'')
 ,(2691,100003974,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''PT'',''PRT'',''Portuguese Republic'',''Portugal'',''Portugal'',''EMEA'')
 ,(2693,100003976,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''GW'',''GNB'',''Republic of Guinea-Bissau'',''Guinea-Bissau'',''Guinea-Bissau'',''AP'')
 ,(2695,100003978,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''TL'',''TLS'',''Democratic Republic of Timor-Leste'',''Timor-Leste (East Timor)'',''Timor-Leste (East Timor)'',''AP'')
 ,(2697,100003980,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''PR'',''PRI'',''Commonwealth of Puerto Rico'',''Puerto Rico'',''Puerto Rico'',''AM'')
 ,(2699,100003982,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''QA'',''QAT'',''State of Qatar'',''Qatar'',''Qatar'',''EMEA'')
 ,(2701,100003984,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''RE'',''REU'',''Overseas Region of Reunion'',''Reunion'',''Reunion'',''EMEA'')
 ,(2703,100003986,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''RO'',''ROU'','''',''Romania'',''Romania'',''EMEA'')
 ,(2705,100003988,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''RU'',''RUS'',''Russian Federation'',''Russia'',''Rossiya'',''EMEA'')
 ,(2707,100003990,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''RW'',''RWA'',''Republic of Rwanda'',''Rwanda'',''Rwanda'',''EMEA'')
 ,(2709,100003992,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''SH'',''SHN'','''',''Saint Helena'',''Saint Helena'',''AM'')
 ,(2711,100003994,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''KN'',''KNA'',''Federation of Saint Kitts and Nevis'',''Saint Kitts and Nevis'',''Saint Kitts and Nevis'',''AM'')
 ,(2713,100003996,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''AI'',''AIA'','''',''Anguilla'',''Anguilla'',''AM'')
 ,(2715,100003998,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''LC'',''LCA'','''',''Saint Lucia'',''Saint Lucia'',''AM'')
 ,(2717,100004000,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''PM'',''SPM'',''Territorial Collectivity of Saint Pierre and Miquelon'',''Saint Pierre and Miquelon'',''Saint Pierre and Miquelon'',''AM'')
 ,(2719,100004002,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''VC'',''VCT'','''',''Saint Vincent and the Grenadines'',''Saint Vincent and the Grenadines'',''AM'')
 ,(2721,100004004,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''SM'',''SMR'',''Republic of San Marino'',''San Marino'',''San Marino'',''EMEA'')
 ,(2723,100004006,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''ST'',''STP'',''Democratic Republic of Sao Tome and Principe'',''Sao Tome and Principe'',''Sao Tome and Principe'',''EMEA'')
 ,(2725,100004008,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''SA'',''SAU'',''Kingdom of Saudi Arabia'',''Saudi Arabia'',''Saudi Arabia'',''EMEA'')
 ,(2727,100004010,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''SN'',''SEN'',''Republic of Senegal'',''Senegal'',''Senegal'',''EMEA'')
 ,(2729,100004012,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''RS'',''SRB'',''Republic of Serbia'',''Serbia'',''Serbia'',''EMEA'')
 ,(2731,100004014,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''SC'',''SYC'',''Republic of Seychelles'',''Seychelles'',''Seychelles'',''AP'')
 ,(2733,100004016,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''SL'',''SLE'',''Republic of Sierra Leone'',''Sierra Leone'',''Sierra Leone'',''EMEA'')
 ,(2735,100004018,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''SG'',''SGP'',''Republic of Singapore'',''Singapore'',''Singapore'',''AP'')
 ,(2737,100004020,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''SK'',''SVK'',''Slovak Republic'',''Slovakia'',''Slovakia'',''EMEA'')
 ,(2739,100004022,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''VN'',''VNM'',''Socialist Republic of Vietnam'',''Vietnam'',''Vietnam'',''AP'')
 ,(2741,100004024,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''SI'',''SVN'',''Republic of Slovenia'',''Slovenia'',''Slovenia'',''EMEA'')
 ,(2743,100004026,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''SO'',''SOM'','''',''Somalia'',''Somalia'',''EMEA'')
 ,(2745,100004028,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''ZA'',''ZAF'',''Republic of South Africa'',''South Africa'',''South Africa'',''EMEA'')
 ,(2747,100004030,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''ZW'',''ZWE'',''Republic of Zimbabwe'',''Zimbabwe'',''Zimbabwe'',''EMEA'')
 ,(2749,100004032,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''ES'',''ESP'',''Kingdom of Spain'',''Spain'',''Spain'',''EMEA'')
 ,(2751,100004034,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''SD'',''SDN'',''Republic of the Sudan'',''Sudan'',''Sudan'',''EMEA'')
 ,(2753,100004036,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''SR'',''SUR'',''Republic of Suriname'',''Suriname'',''Suriname'',''AM'')
 ,(2755,100004038,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''SJ'',''SJM'','''',''Svalbard'',''Svalbard'',''EMEA'')
 ,(2757,100004040,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''SZ'',''SWZ'',''Kingdom of Swaziland'',''Swaziland'',''Swaziland'',''EMEA'')
 ,(2759,100004042,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''SE'',''SWE'',''Kingdom of Sweden'',''Sweden'',''Sweden'',''EMEA'')
 ,(2761,100004044,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''CH'',''CHE'',''Swiss Confederation'',''Switzerland'',''Switzerland'',''EMEA'')
 ,(2763,100004046,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''SY'',''SYR'',''Syrian Arab Republic'',''Syria'',''Syria'',''EMEA'')
 ,(2765,100004048,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''TJ'',''TJK'',''Republic of Tajikistan'',''Tajikistan'',''Tajikistan'',''AP'')
 ,(2767,100004050,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''TH'',''THA'',''Kingdom of Thailand'',''Thailand'',''Thailand'',''AP'')
 ,(2769,100004052,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''TG'',''TGO'',''Togolese Republic'',''Togo'',''Togo'',''EMEA'')
 ,(2771,100004054,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''TK'',''TKL'','''',''Tokelau'',''Tokelau'',''AP'')
 ,(2773,100004056,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''TO'',''TON'',''Kingdom of Tonga'',''Tonga'',''Tonga'',''AP'')
 ,(2775,100004058,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''TT'',''TTO'',''Republic of Trinidad and Tobago'',''Trinidad and Tobago'',''Trinidad and Tobago'',''AM'')
 ,(2777,100004060,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''AE'',''ARE'',''United Arab Emirates'',''United Arab Emirates'',''United Arab Emirates'',''EMEA'')
 ,(2779,100004062,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''TN'',''TUN'',''Tunisian Republic'',''Tunisia'',''Tunisia'',''EMEA'')
 ,(2781,100004064,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''TR'',''TUR'',''Republic of Turkey'',''Turkey'',''Türkiye'',''EMEA'')
 ,(2783,100004066,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''TM'',''TKM'','''',''Turkmenistan'',''Turkmenistan'',''AP'')
 ,(2785,100004068,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''TC'',''TCA'','''',''Turks and Caicos Islands'',''Turks and Caicos Islands'',''AM'')
 ,(2787,100004070,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''TV'',''TUV'','''',''Tuvalu'',''Tuvalu'',''AP'')
 ,(2789,100004072,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''UG'',''UGA'',''Republic of Uganda'',''Uganda'',''Uganda'',''EMEA'')
 ,(2791,100004074,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''UA'',''UKR'','''',''Ukraine'',''???????'',''EMEA'')
 ,(2793,100004076,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''MK'',''MKD'',''Republic of Macedonia'',''Macedonia'',''Macedonia'',''EMEA'')
 ,(2795,100004078,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''EG'',''EGY'',''Arab Republic of Egypt'',''Egypt'',''Egypt'',''EMEA'')
 ,(2797,100004080,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''GB'',''GBR'',''United Kingdom of Great Britain and Northern Ireland'',''United Kingdom'',''United Kingdom'',''EMEA'')
 ,(2799,100004082,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''GG'',''GGY'',''Bailiwick of Guernsey'',''Guernsey'',''Guernsey'',''EMEA'')
 ,(2801,100004084,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''JE'',''JEY'',''Bailiwick of Jersey'',''Jersey'',''Jersey'',''EMEA'')
 ,(2803,100004086,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''IM'',''IMN'','''',''Isle of Man'',''Isle of Man'',''EMEA'')
 ,(2805,100004088,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''TZ'',''TZA'',''United Republic of Tanzania'',''Tanzania'',''Tanzania'',''EMEA'')
 ,(2807,100004090,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''US'',''USA'',''United States of America'',''United States'',''United States'',''AM'')
 ,(2809,100004092,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''VI'',''VIR'',''United States Virgin Islands'',''U.S. Virgin Islands'',''U.S. Virgin Islands'',''AM'')
 ,(2811,100004094,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''BF'',''BFA'','''',''Burkina Faso'',''Burkina Faso'',''EMEA'')
 ,(2813,100004096,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''UY'',''URY'',''Oriental Republic of Uruguay'',''Uruguay'',''Uruguay'',''AM'')
 ,(2815,100004098,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''UZ'',''UZB'',''Republic of Uzbekistan'',''Uzbekistan'',''Uzbekistan'',''AP'')
 ,(2817,100004100,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''VE'',''VEN'',''Bolivarian Republic of Venezuela'',''Venezuela'',''Venezuela'',''AP'')
 ,(2819,100004102,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''WF'',''WLF'',''Collectivity of the Wallis and Futuna Islands'',''Wallis and Futuna'',''Wallis and Futuna'',''AP'')
 ,(2821,100004104,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''WS'',''WSM'',''Independent State of Samoa'',''Samoa'',''Samoa'',''AP'')
 ,(2823,100004106,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''YE'',''YEM'',''Republic of Yemen'',''Yemen'',''Yemen'',''EMEA'')
 ,(2825,100004108,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''ZM'',''ZMB'',''Republic of Zambia'',''Zambia'',''Zambia'',''EMEA'')
 ,(2827,100004110,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''AC'',''ASC'','''',''Ascension'',''Ascension'',''EMEA'')
 ,(2829,100004112,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''TA'',''TAA'','''',''Tristan da Cunha'',''Tristan da Cunha'',''EMEA'')
 ,(2831,100004114,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''AQ'',''ATA'','''',''Australian Antarctic Territory'',''Australian Antarctic Territory'',''AP'')
 ,(100001412,100004530,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''AF'',''AFG'',''Islamic State of Afghanistan'',''Afghanistan'',''Afghanistan'',''AP'')
) as Source ([CountryHistoryId],[CountryKey],[RowValidFromUTC],[RowValidToUTC],[IsCurrent],[PreviousHistoryId],[IsDeleted],[LastTouchedOn],[EtlCreatedOn],[EtlCreatedBy],[EtlUpdatedOn],[EtlUpdatedBy],[EtlDeletedOn],[EtlDeletedBy],[EtlBatchRunId],[EtlStepRunId],[EtlThreadRunId],[EtlDeltaHash],[ISO3166Alpha2Code],[ISO3166Alpha3Code],[ISO3166OfficialEnglishShortName],[CountryNameEnglish],[CountryNameLocal],[RegionCode])
on (Target.[CountryHistoryId] = Source.[CountryHistoryId])
when matched and (
	nullif(Source.[CountryKey], Target.[CountryKey]) is not null or nullif(Target.[CountryKey], Source.[CountryKey]) is not null or 
	nullif(Source.[RowValidFromUTC], Target.[RowValidFromUTC]) is not null or nullif(Target.[RowValidFromUTC], Source.[RowValidFromUTC]) is not null or 
	nullif(Source.[RowValidToUTC], Target.[RowValidToUTC]) is not null or nullif(Target.[RowValidToUTC], Source.[RowValidToUTC]) is not null or 
	nullif(Source.[IsCurrent], Target.[IsCurrent]) is not null or nullif(Target.[IsCurrent], Source.[IsCurrent]) is not null or 
	nullif(Source.[PreviousHistoryId], Target.[PreviousHistoryId]) is not null or nullif(Target.[PreviousHistoryId], Source.[PreviousHistoryId]) is not null or 
	nullif(Source.[IsDeleted], Target.[IsDeleted]) is not null or nullif(Target.[IsDeleted], Source.[IsDeleted]) is not null or 
	nullif(Source.[LastTouchedOn], Target.[LastTouchedOn]) is not null or nullif(Target.[LastTouchedOn], Source.[LastTouchedOn]) is not null or 
	nullif(Source.[EtlCreatedOn], Target.[EtlCreatedOn]) is not null or nullif(Target.[EtlCreatedOn], Source.[EtlCreatedOn]) is not null or 
	nullif(Source.[EtlCreatedBy], Target.[EtlCreatedBy]) is not null or nullif(Target.[EtlCreatedBy], Source.[EtlCreatedBy]) is not null or 
	nullif(Source.[EtlUpdatedOn], Target.[EtlUpdatedOn]) is not null or nullif(Target.[EtlUpdatedOn], Source.[EtlUpdatedOn]) is not null or 
	nullif(Source.[EtlUpdatedBy], Target.[EtlUpdatedBy]) is not null or nullif(Target.[EtlUpdatedBy], Source.[EtlUpdatedBy]) is not null or 
	nullif(Source.[EtlDeletedOn], Target.[EtlDeletedOn]) is not null or nullif(Target.[EtlDeletedOn], Source.[EtlDeletedOn]) is not null or 
	nullif(Source.[EtlDeletedBy], Target.[EtlDeletedBy]) is not null or nullif(Target.[EtlDeletedBy], Source.[EtlDeletedBy]) is not null or 
	nullif(Source.[EtlBatchRunId], Target.[EtlBatchRunId]) is not null or nullif(Target.[EtlBatchRunId], Source.[EtlBatchRunId]) is not null or 
	nullif(Source.[EtlStepRunId], Target.[EtlStepRunId]) is not null or nullif(Target.[EtlStepRunId], Source.[EtlStepRunId]) is not null or 
	nullif(Source.[EtlThreadRunId], Target.[EtlThreadRunId]) is not null or nullif(Target.[EtlThreadRunId], Source.[EtlThreadRunId]) is not null or 
	nullif(Source.[EtlDeltaHash], Target.[EtlDeltaHash]) is not null or nullif(Target.[EtlDeltaHash], Source.[EtlDeltaHash]) is not null or 
	nullif(Source.[ISO3166Alpha2Code], Target.[ISO3166Alpha2Code]) is not null or nullif(Target.[ISO3166Alpha2Code], Source.[ISO3166Alpha2Code]) is not null or 
	nullif(Source.[ISO3166Alpha3Code], Target.[ISO3166Alpha3Code]) is not null or nullif(Target.[ISO3166Alpha3Code], Source.[ISO3166Alpha3Code]) is not null or 
	nullif(Source.[ISO3166OfficialEnglishShortName], Target.[ISO3166OfficialEnglishShortName]) is not null or nullif(Target.[ISO3166OfficialEnglishShortName], Source.[ISO3166OfficialEnglishShortName]) is not null or 
	nullif(Source.[CountryNameEnglish], Target.[CountryNameEnglish]) is not null or nullif(Target.[CountryNameEnglish], Source.[CountryNameEnglish]) is not null or 
	nullif(Source.[CountryNameLocal], Target.[CountryNameLocal]) is not null or nullif(Target.[CountryNameLocal], Source.[CountryNameLocal]) is not null or 
	nullif(Source.[RegionCode], Target.[RegionCode]) is not null or nullif(Target.[RegionCode], Source.[RegionCode]) is not null) then
 update set
  [CountryKey] = Source.[CountryKey], 
  [RowValidFromUTC] = Source.[RowValidFromUTC], 
  [RowValidToUTC] = Source.[RowValidToUTC], 
  [IsCurrent] = Source.[IsCurrent], 
  [PreviousHistoryId] = Source.[PreviousHistoryId], 
  [IsDeleted] = Source.[IsDeleted], 
  [LastTouchedOn] = Source.[LastTouchedOn], 
  [EtlCreatedOn] = Source.[EtlCreatedOn], 
  [EtlCreatedBy] = Source.[EtlCreatedBy], 
  [EtlUpdatedOn] = Source.[EtlUpdatedOn], 
  [EtlUpdatedBy] = Source.[EtlUpdatedBy], 
  [EtlDeletedOn] = Source.[EtlDeletedOn], 
  [EtlDeletedBy] = Source.[EtlDeletedBy], 
  [EtlBatchRunId] = Source.[EtlBatchRunId], 
  [EtlStepRunId] = Source.[EtlStepRunId], 
  [EtlThreadRunId] = Source.[EtlThreadRunId], 
  [EtlDeltaHash] = Source.[EtlDeltaHash], 
  [ISO3166Alpha2Code] = Source.[ISO3166Alpha2Code], 
  [ISO3166Alpha3Code] = Source.[ISO3166Alpha3Code], 
  [ISO3166OfficialEnglishShortName] = Source.[ISO3166OfficialEnglishShortName], 
  [CountryNameEnglish] = Source.[CountryNameEnglish], 
  [CountryNameLocal] = Source.[CountryNameLocal], 
  [RegionCode] = Source.[RegionCode]
when not matched by target then
 insert([CountryHistoryId],[CountryKey],[RowValidFromUTC],[RowValidToUTC],[IsCurrent],[PreviousHistoryId],[IsDeleted],[LastTouchedOn],[EtlCreatedOn],[EtlCreatedBy],[EtlUpdatedOn],[EtlUpdatedBy],[EtlDeletedOn],[EtlDeletedBy],[EtlBatchRunId],[EtlStepRunId],[EtlThreadRunId],[EtlDeltaHash],[ISO3166Alpha2Code],[ISO3166Alpha3Code],[ISO3166OfficialEnglishShortName],[CountryNameEnglish],[CountryNameLocal],[RegionCode])
 values(Source.[CountryHistoryId],Source.[CountryKey],Source.[RowValidFromUTC],Source.[RowValidToUTC],Source.[IsCurrent],Source.[PreviousHistoryId],Source.[IsDeleted],Source.[LastTouchedOn],Source.[EtlCreatedOn],Source.[EtlCreatedBy],Source.[EtlUpdatedOn],Source.[EtlUpdatedBy],Source.[EtlDeletedOn],Source.[EtlDeletedBy],Source.[EtlBatchRunId],Source.[EtlStepRunId],Source.[EtlThreadRunId],Source.[EtlDeltaHash],Source.[ISO3166Alpha2Code],Source.[ISO3166Alpha3Code],Source.[ISO3166OfficialEnglishShortName],Source.[CountryNameEnglish],Source.[CountryNameLocal],Source.[RegionCode])
when not matched by source then 
 delete
;
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ebde8f74-e8ec-52f4-a841-5d836fed6587' AS UNIQUEIDENTIFIER) AND [script_checksum] = '7A770C2593E1756C08A146F748666ED49EAADED1B5F7E68C90FBBC729078A9E4')
  EXECUTE ('declare @mergeError int
 , @mergeCount int
select @mergeError = @@error, @mergeCount = @@rowcount
if @mergeError != 0
 begin
 print ''ERROR OCCURRED IN MERGE FOR [dbo].[Country]. Rows affected: '' + cast(@mergeCount as varchar(100)); -- SQL should always return zero rows affected
 end
else
 begin
 print ''[dbo].[Country] rows affected by MERGE: '' + cast(@mergeCount as varchar(100));
 end
');

GO
SET NOCOUNT OFF;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ebde8f74-e8ec-52f4-a841-5d836fed6587' AS UNIQUEIDENTIFIER) AND [script_checksum] = '7A770C2593E1756C08A146F748666ED49EAADED1B5F7E68C90FBBC729078A9E4')
  PRINT '***** FINISHED EXECUTING MIGRATION "Static Data\dbo.Country.data.sql", ID: {ebde8f74-e8ec-52f4-a841-5d836fed6587} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ebde8f74-e8ec-52f4-a841-5d836fed6587' AS UNIQUEIDENTIFIER) AND [script_checksum] = '7A770C2593E1756C08A146F748666ED49EAADED1B5F7E68C90FBBC729078A9E4')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('ebde8f74-e8ec-52f4-a841-5d836fed6587' AS UNIQUEIDENTIFIER), '7A770C2593E1756C08A146F748666ED49EAADED1B5F7E68C90FBBC729078A9E4', 'Static Data\dbo.Country.data.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('a66304c1-992d-5bee-837d-7a1ea2fe9481' AS UNIQUEIDENTIFIER) AND [script_checksum] = '3CFCF3962C9EBFFA4937F4EEF7971324745DECF31F8930EE38FD411D456E3DEB')
  PRINT '

***** EXECUTING MIGRATION "Static Data\dbo.Culture.data.sql", ID: {a66304c1-992d-5bee-837d-7a1ea2fe9481} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('a66304c1-992d-5bee-837d-7a1ea2fe9481' AS UNIQUEIDENTIFIER) AND [script_checksum] = '3CFCF3962C9EBFFA4937F4EEF7971324745DECF31F8930EE38FD411D456E3DEB')
  EXECUTE ('--MERGE generated by ''sp_generate_merge'' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

set nocount on


merge into [dbo].[Culture] as Target
using (values
  (2833,-1,''1900-01-01T00:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''N/S'',''Not Specified at Source'',''Indicates that the value in the source system was NULL'',0,2337)
 ,(2835,-2,''1900-01-01T00:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''N/F'',''Lookup Not Found'',''Indicates that the source system provided a value but that there is no matching lookup'',1,2339)
 ,(2837,-3,''1900-01-01T00:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''N/I'',''Not Implemented in Source'',''Used when the source system does not support the concept of a culture in this context'',2,2341)
 ,(2839,-4,''1900-01-01T00:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''N/A'',''Not Applicable'',''Used in a context where culture has no relevance'',3,2343)
 ,(2841,-5,''1900-01-01T00:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''N/D'',''Not Defined'',''The logic to identify the culture has not been supplied or specified'',4,2345)
 ,(2843,100004116,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''prs-AF'',''Dari'',null,4,2345)
 ,(2845,100004118,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''ps-AF'',''Pashto'',null,4,2345)
 ,(2847,100004120,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''sq-AL'',''Albanian'',null,100003630,2347)
 ,(2849,100004122,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''ar-DZ'',''Arabic'',''???????'',100003632,2349)
 ,(2851,100004124,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''tzm-Latn-DZ'',''Tamazight'',null,100003632,2349)
 ,(2853,100004126,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''az-Cyrl-AZ'',''Azeri'',null,100003642,2359)
 ,(2855,100004128,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''az-Latn-AZ'',''Azeri'',null,100003642,2359)
 ,(2857,100004130,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''es-AR'',''Spanish'',''Español'',100003644,2361)
 ,(2859,100004132,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''en-AU'',''English'',''English'',100003646,2363)
 ,(2861,100004134,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''de-AT'',''German'',''Deutsche'',100003648,2365)
 ,(2863,100004136,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''ar-BH'',''Arabic'',''???????'',100003652,2369)
 ,(2865,100004138,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''bn-BD'',''Bengali'',null,100003654,2371)
 ,(2867,100004140,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''hy-AM'',''Armenian'',null,100003656,2373)
 ,(2869,100004142,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''fr-BE'',''French'',''Français'',100003660,2377)
 ,(2871,100004144,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''nl-BE'',''Dutch'',''Nederlands'',100003660,2377)
 ,(2873,100004146,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''es-BO'',''Spanish'',''Español'',100003666,2383)
 ,(2875,100004148,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''quz-BO'',''Quechua'',null,100003666,2383)
 ,(2877,100004150,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''bs-Cyrl-BA'',''Bosnian'',null,100003668,2385)
 ,(2879,100004152,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''bs-Latn-BA'',''Bosnian'',null,100003668,2385)
 ,(2881,100004154,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''hr-BA'',''Croatian'',null,100003668,2385)
 ,(2883,100004156,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''sr-Cyrl-BA'',''Serbian'',null,100003668,2385)
 ,(2885,100004158,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''sr-Latn-BA'',''Serbian'',null,100003668,2385)
 ,(2887,100004160,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''pt-BR'',''Portuguese'',''Português'',100003674,2391)
 ,(2889,100004162,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''en-BZ'',''English'',''English'',100003676,2393)
 ,(2891,100004164,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''ms-BN'',''Malay'',null,100003684,2401)
 ,(2893,100004166,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''bg-BG'',''Bulgarian'',null,100003686,2403)
 ,(2895,100004168,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''be-BY'',''Belarusian'',null,100003692,2409)
 ,(2897,100004170,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''km-KH'',''Khmer'',null,100003694,2411)
 ,(2899,100004172,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''en-CA'',''English'',''English'',100003698,2415)
 ,(2901,100004174,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''fr-CA'',''French'',''Français'',100003698,2415)
 ,(2903,100004176,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''iu-Cans-CA'',''Inuktitut'',null,100003698,2415)
 ,(2905,100004178,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''iu-Latn-CA'',''Inuktitut'',null,100003698,2415)
 ,(2907,100004180,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''moh-CA'',''Mohawk'',null,100003698,2415)
 ,(2909,100004182,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''si-LK'',''Sinhala'',null,100003706,2423)
 ,(2911,100004184,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''arn-CL'',''Mapudungun'',null,100003710,2427)
 ,(2913,100004186,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''es-CL'',''Spanish'',''Español'',100003710,2427)
 ,(2915,100004188,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''bo-CN'',''Tibetan'',null,100003712,2429)
 ,(2917,100004190,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''ii-CN'',''Yi'',null,100003712,2429)
 ,(2919,100004192,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''mn-Mong-CN'',''Mongolian'',null,100003712,2429)
 ,(2921,100004194,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''ug-CN'',''Uyghur'',null,100003712,2429)
 ,(2923,100004196,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''zh-CN'',''Chinese'',''??'',100003712,2429)
 ,(2925,100004198,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''zh-TW'',''Chinese'',''??'',100003714,2431)
 ,(2927,100004200,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''es-CO'',''Spanish'',''Español'',100003720,2437)
 ,(2929,100004202,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''es-CR'',''Spanish'',''Español'',100003732,2449)
 ,(2931,100004204,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''hr-HR'',''Croatian'',null,100003734,2451)
 ,(2933,100004206,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''cs-CZ'',''Czech'',''ceština'',100003740,2457)
 ,(2935,100004208,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''da-DK'',''Danish'',''Danske'',100003744,2461)
 ,(2937,100004210,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''es-DO'',''Spanish'',''Español'',100003748,2465)
 ,(2939,100004212,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''es-EC'',''Spanish'',''Español'',100003750,2467)
 ,(2941,100004214,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''quz-EC'',''Quechua'',null,100003750,2467)
 ,(2943,100004216,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''es-SV'',''Spanish'',''Español'',100003752,2469)
 ,(2945,100004218,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''am-ET'',''Amharic'',null,100003756,2473)
 ,(2947,100004220,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''et-EE'',''Estonian'',null,100003760,2477)
 ,(2949,100004222,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''fo-FO'',''Faroese'',null,100003762,2479)
 ,(2951,100004224,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''fi-FI'',''Finnish'',null,100003770,2487)
 ,(2953,100004226,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''se-FI'',''Sami, Northern'',null,100003770,2487)
 ,(2955,100004228,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''smn-FI'',''Sami, Inari'',null,100003770,2487)
 ,(2957,100004230,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''sms-FI'',''Sami, Skolt'',null,100003770,2487)
 ,(2959,100004232,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''sv-FI'',''Swedish'',null,100003770,2487)
 ,(2961,100004234,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''br-FR'',''Breton'',null,100003774,2491)
 ,(2963,100004236,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''co-FR'',''Corsican'',null,100003774,2491)
 ,(2965,100004238,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''fr-FR'',''French'',''Français'',100003774,2491)
 ,(2967,100004240,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''gsw-FR'',''Alsatian'',null,100003774,2491)
 ,(2969,100004242,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''oc-FR'',''Occitan'',null,100003774,2491)
 ,(2971,100004244,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''ka-GE'',''Georgian'',null,100003786,2503)
 ,(2973,100004246,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''de-DE'',''German'',''Deutsche'',100003790,2507)
 ,(2975,100004248,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''dsb-DE'',''Lower Sorbian'',null,100003790,2507)
 ,(2977,100004250,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''hsb-DE'',''Upper Sorbian'',null,100003790,2507)
 ,(2979,100004252,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''el-GR'',''Greek'',''e???????'',100003798,2515)
 ,(2981,100004254,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''kl-GL'',''Greenlandic'',null,100003800,2517)
 ,(2983,100004256,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''es-GT'',''Spanish'',''Español'',100003808,2525)
 ,(2985,100004258,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''qut-GT'',''K''''iche'',null,100003808,2525)
 ,(2987,100004260,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''es-HN'',''Spanish'',''Español'',100003820,2537)
 ,(2989,100004262,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''zh-HK'',''Chinese'',''??'',100003822,2539)
 ,(2991,100004264,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''hu-HU'',''Hungarian'',null,100003824,2541)
 ,(2993,100004266,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''is-IS'',''Icelandic'',null,100003826,2543)
 ,(2995,100004268,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''as-IN'',''Assamese'',null,100003828,2545)
 ,(2997,100004270,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''bn-IN'',''Bengali'',null,100003828,2545)
 ,(2999,100004272,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''en-IN'',''English'',''English'',100003828,2545)
 ,(3001,100004274,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''gu-IN'',''Gujarati'',null,100003828,2545)
 ,(3003,100004276,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''hi-IN'',''Hindi'',null,100003828,2545)
 ,(3005,100004278,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''kn-IN'',''Kannada'',null,100003828,2545)
 ,(3007,100004280,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''ta-IN'',''Tamil'',null,100003828,2545)
 ,(3009,100004282,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''te-IN'',''Telugu'',null,100003828,2545)
 ,(3011,100004284,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''kok-IN'',''Konkani'',null,100003828,2545)
 ,(3013,100004286,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''ml-IN'',''Malayalam'',null,100003828,2545)
 ,(3015,100004288,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''mr-IN'',''Marathi'',null,100003828,2545)
 ,(3017,100004290,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''or-IN'',''Oriya'',null,100003828,2545)
 ,(3019,100004292,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''pa-IN'',''Punjabi'',null,100003828,2545)
 ,(3021,100004294,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''sa-IN'',''Sanskrit'',null,100003828,2545)
 ,(3023,100004296,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''id-ID'',''Indonesian'',null,100003830,2547)
 ,(3025,100004298,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''fa-IR'',''Persian'',null,100003832,2549)
 ,(3027,100004300,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''ar-IQ'',''Arabic'',''???????'',100003834,2551)
 ,(3029,100004302,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''en-IE'',''English'',''English'',100003836,2553)
 ,(3031,100004304,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''ga-IE'',''Irish'',''Gaeilge'',100003836,2553)
 ,(3033,100004306,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''he-IL'',''Hebrew'',null,100003838,2555)
 ,(3035,100004308,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''it-IT'',''Italian'',''Italiano'',100003840,2557)
 ,(3037,100004310,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''en-JM'',''English'',''English'',100003844,2561)
 ,(3039,100004312,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''ja-JP'',''Japanese'',''???'',100003846,2563)
 ,(3041,100004314,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''kk-KZ'',''Kazakh'',null,100003848,2565)
 ,(3043,100004316,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''ar-JO'',''Arabic'',''???????'',100003850,2567)
 ,(3045,100004318,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''sw-KE'',''Kiswahili'',null,100003852,2569)
 ,(3047,100004320,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''ko-KR'',''Korean'',null,100003856,2573)
 ,(3049,100004322,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''ar-KW'',''Arabic'',''???????'',100003858,2575)
 ,(3051,100004324,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''ky-KG'',''Kyrgyz'',null,100003860,2577)
 ,(3053,100004326,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''lo-LA'',''Lao'',null,100003862,2579)
 ,(3055,100004328,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''ar-LB'',''Arabic'',''???????'',100003864,2581)
 ,(3057,100004330,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''lv-LV'',''Latvian'',null,100003868,2585)
 ,(3059,100004332,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''ar-LY'',''Arabic'',''???????'',100003872,2589)
 ,(3061,100004334,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''de-LI'',''German'',''Deutsche'',100003874,2591)
 ,(3063,100004336,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''lt-LT'',''Lithuanian'',null,100003876,2593)
 ,(3065,100004338,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''de-LU'',''German'',''Deutsche'',100003878,2595)
 ,(3067,100004340,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''fr-LU'',''French'',''Français'',100003878,2595)
 ,(3069,100004342,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''lb-LU'',''Luxembourgish'',null,100003878,2595)
 ,(3071,100004344,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''zh-MO'',''Chinese'',''??'',100003880,2597)
 ,(3073,100004346,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''en-MY'',''English'',''English'',100003886,2603)
 ,(3075,100004348,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''ms-MY'',''Malay'',null,100003886,2603)
 ,(3077,100004350,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''dv-MV'',''Divehi'',null,100003888,2605)
 ,(3079,100004352,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''mt-MT'',''Maltese'',null,100003892,2609)
 ,(3081,100004354,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''es-MX'',''Spanish'',''Español'',100003900,2617)
 ,(3083,100004356,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''fr-MC'',''French'',''Français'',100003902,2619)
 ,(3085,100004358,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''mn-MN'',''Mongolian'',null,100003904,2621)
 ,(3087,100004360,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''sr-Cyrl-ME'',''Serbian'',null,100003908,2625)
 ,(3089,100004362,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''sr-Latn-ME'',''Serbian'',null,100003908,2625)
 ,(3091,100004364,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''ar-MA'',''Arabic'',''???????'',100003912,2629)
 ,(3093,100004366,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''ar-OM'',''Arabic'',''???????'',100003916,2633)
 ,(3095,100004368,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''ne-NP'',''Nepali'',null,100003922,2639)
 ,(3097,100004370,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''fy-NL'',''Frisian'',null,100003924,2641)
 ,(3099,100004372,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''nl-NL'',''Dutch'',''Nederlands'',100003924,2641)
 ,(3101,100004374,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''en-NZ'',''English'',''English'',100003934,2651)
 ,(3103,100004376,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''mi-NZ'',''Maori'',''Maori'',100003934,2651)
 ,(3105,100004378,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''es-NI'',''Spanish'',''Español'',100003936,2653)
 ,(3107,100004380,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''ha-Latn-NG'',''Hausa'',null,100003940,2657)
 ,(3109,100004382,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''ig-NG'',''Igbo'',null,100003940,2657)
 ,(3111,100004384,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''yo-NG'',''Yoruba'',''Yorùbá'',100003940,2657)
 ,(3113,100004386,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''nb-NO'',''Norwegian, Bokmål'',null,100003946,2663)
 ,(3115,100004388,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''nn-NO'',''Norwegian, Nynorsk'',null,100003946,2663)
 ,(3117,100004390,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''se-NO'',''Sami, Northern'',null,100003946,2663)
 ,(3119,100004392,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''sma-NO'',''Sami, Southern'',null,100003946,2663)
 ,(3121,100004394,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''smj-NO'',''Sami, Lule'',null,100003946,2663)
 ,(3123,100004396,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''ur-PK'',''Urdu'',null,100003958,2675)
 ,(3125,100004398,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''es-PA'',''Spanish'',''Español'',100003960,2677)
 ,(3127,100004400,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''es-PY'',''Spanish'',''Español'',100003964,2681)
 ,(3129,100004402,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''es-PE'',''Spanish'',''Español'',100003966,2683)
 ,(3131,100004404,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''quz-PE'',''Quechua'',null,100003966,2683)
 ,(3133,100004406,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''en-PH'',''English'',''English'',100003968,2685)
 ,(3135,100004408,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''fil-PH'',''Filipino'',null,100003968,2685)
 ,(3137,100004410,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''pl-PL'',''Polish'',null,100003972,2689)
 ,(3139,100004412,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''pt-PT'',''Portuguese'',''Português'',100003974,2691)
 ,(3141,100004414,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''es-PR'',''Spanish'',''Español'',100003980,2697)
 ,(3143,100004416,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''ar-QA'',''Arabic'',''???????'',100003982,2699)
 ,(3145,100004418,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''ro-RO'',''Romanian'',''Româna'',100003986,2703)
 ,(3147,100004420,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''ba-RU'',''Bashkir'',null,100003988,2705)
 ,(3149,100004422,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''ru-RU'',''Russian'',''R??????'',100003988,2705)
 ,(3151,100004424,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''sah-RU'',''Yakut'',null,100003988,2705)
 ,(3153,100004426,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''tt-RU'',''Tatar'',null,100003988,2705)
 ,(3155,100004428,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''rw-RW'',''Kinyarwanda'',null,100003990,2707)
 ,(3157,100004430,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''ar-SA'',''Arabic'',''???????'',100004008,2725)
 ,(3159,100004432,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''wo-SN'',''Wolof'',null,100004010,2727)
 ,(3161,100004434,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''sr-Cyrl-RS'',''Serbian'',null,100004012,2729)
 ,(3163,100004436,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''sr-Latn-RS'',''Serbian'',null,100004012,2729)
 ,(3165,100004438,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''en-SG'',''English'',''English'',100004018,2735)
 ,(3167,100004440,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''zh-SG'',''Chinese'',''??'',100004018,2735)
 ,(3169,100004442,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''sk-SK'',''Slovak'',null,100004020,2737)
 ,(3171,100004444,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''vi-VN'',''Vietnamese'',''Ti?ng Vi?t'',100004022,2739)
 ,(3173,100004446,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''sl-SI'',''Slovenian'',null,100004024,2741)
 ,(3175,100004448,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''af-ZA'',''Afrikaans'',null,100004028,2745)
 ,(3177,100004450,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''en-ZA'',''English'',''English'',100004028,2745)
 ,(3179,100004452,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''nso-ZA'',''Sesotho sa Leboa'',null,100004028,2745)
 ,(3181,100004454,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''tn-ZA'',''Setswana'',null,100004028,2745)
 ,(3183,100004456,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''xh-ZA'',''isiXhosa'',null,100004028,2745)
 ,(3185,100004458,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''zu-ZA'',''isiZulu'',null,100004028,2745)
 ,(3187,100004460,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''en-ZW'',''English'',''English'',100004030,2747)
 ,(3189,100004462,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''ca-ES'',''Catalan'',''Català'',100004032,2749)
 ,(3191,100004464,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''es-ES'',''Spanish'',''Español'',100004032,2749)
 ,(3193,100004466,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''eu-ES'',''Basque'',''Euskal'',100004032,2749)
 ,(3195,100004468,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''gl-ES'',''Galician'',null,100004032,2749)
 ,(3197,100004470,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''se-SE'',''Sami, Northern'',null,100004042,2759)
 ,(3199,100004472,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''sma-SE'',''Sami, Southern'',null,100004042,2759)
 ,(3201,100004474,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''smj-SE'',''Sami, Lule'',null,100004042,2759)
 ,(3203,100004476,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''sv-SE'',''Swedish'',null,100004042,2759)
 ,(3205,100004478,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''de-CH'',''German'',''Deutsche'',100004044,2761)
 ,(3207,100004480,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''fr-CH'',''French'',''Français'',100004044,2761)
 ,(3209,100004482,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''it-CH'',''Italian'',null,100004044,2761)
 ,(3211,100004484,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''rm-CH'',''Romansh'',null,100004044,2761)
 ,(3213,100004486,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''ar-SY'',''Arabic'',''???????'',100004046,2763)
 ,(3215,100004488,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''syr-SY'',''Syriac'',null,100004046,2763)
 ,(3217,100004490,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''tg-Cyrl-TJ'',''Tajik'',null,100004048,2765)
 ,(3219,100004492,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''th-TH'',''Thai'',null,100004050,2767)
 ,(3221,100004494,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''en-TT'',''English'',''English'',100004058,2775)
 ,(3223,100004496,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''ar-AE'',''Arabic'',''???????'',100004060,2777)
 ,(3225,100004498,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''ar-TN'',''Arabic'',''???????'',100004062,2779)
 ,(3227,100004500,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''tr-TR'',''Turkish'',null,100004064,2781)
 ,(3229,100004502,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''tk-TM'',''Turkmen'',null,100004066,2783)
 ,(3231,100004504,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''uk-UA'',''Ukrainian'',null,100004074,2791)
 ,(3233,100004506,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''mk-MK'',''Macedonian'',null,100004076,2793)
 ,(3235,100004508,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''ar-EG'',''Arabic'',''???????'',100004078,2795)
 ,(3237,100004510,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''cy-GB'',''Welsh'',''Cymraeg'',100004080,2797)
 ,(3239,100004512,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''en-GB'',''English'',''English'',100004080,2797)
 ,(3241,100004514,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''gd-GB'',''Scottish Gaelic'',null,100004080,2797)
 ,(3243,100004516,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''en-US'',''English'',''English'',100004090,2807)
 ,(3245,100004518,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''es-US'',''Spanish'',''Español'',100004090,2807)
 ,(3247,100004520,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''es-UY'',''Spanish'',''Español'',100004096,2813)
 ,(3249,100004522,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''uz-Cyrl-UZ'',''Uzbek'',null,100004098,2815)
 ,(3251,100004524,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''uz-Latn-UZ'',''Uzbek'',null,100004098,2815)
 ,(3253,100004526,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''es-VE'',''Spanish'',''Español'',100004100,2817)
 ,(3255,100004528,''2017-07-12T14:00:00'',''9999-12-31T00:00:00'',''Y'',null,''N'',''2017-07-12T14:00:00'',''2017-07-12T14:00:00'',''Initial Population'',''2017-07-12T14:00:00'',''Initial Population'',null,null,0,0,0,null,''ar-YE'',''Arabic'',''???????'',100004106,2823)
) as Source ([CultureHistoryId],[CultureKey],[ValidFromUTC],[ValidToUTC],[IsCurrent],[PreviousHistoryId],[IsDeleted],[LastTouchedOn],[EtlCreatedOn],[EtlCreatedBy],[EtlUpdatedOn],[EtlUpdatedBy],[EtlDeletedOn],[EtlDeletedBy],[EtlBatchRunId],[EtlStepRunId],[EtlThreadRunId],[EtlDeltaHash],[CultureInfoCode],[LanguageNameEnglish],[LanguageNameLocal],[CountryKey],[CountryHistoryIdAsIs])
on (Target.[CultureHistoryId] = Source.[CultureHistoryId])
when matched and (
	nullif(Source.[CultureKey], Target.[CultureKey]) is not null or nullif(Target.[CultureKey], Source.[CultureKey]) is not null or 
	nullif(Source.[ValidFromUTC], Target.[ValidFromUTC]) is not null or nullif(Target.[ValidFromUTC], Source.[ValidFromUTC]) is not null or 
	nullif(Source.[ValidToUTC], Target.[ValidToUTC]) is not null or nullif(Target.[ValidToUTC], Source.[ValidToUTC]) is not null or 
	nullif(Source.[IsCurrent], Target.[IsCurrent]) is not null or nullif(Target.[IsCurrent], Source.[IsCurrent]) is not null or 
	nullif(Source.[PreviousHistoryId], Target.[PreviousHistoryId]) is not null or nullif(Target.[PreviousHistoryId], Source.[PreviousHistoryId]) is not null or 
	nullif(Source.[IsDeleted], Target.[IsDeleted]) is not null or nullif(Target.[IsDeleted], Source.[IsDeleted]) is not null or 
	nullif(Source.[LastTouchedOn], Target.[LastTouchedOn]) is not null or nullif(Target.[LastTouchedOn], Source.[LastTouchedOn]) is not null or 
	nullif(Source.[EtlCreatedOn], Target.[EtlCreatedOn]) is not null or nullif(Target.[EtlCreatedOn], Source.[EtlCreatedOn]) is not null or 
	nullif(Source.[EtlCreatedBy], Target.[EtlCreatedBy]) is not null or nullif(Target.[EtlCreatedBy], Source.[EtlCreatedBy]) is not null or 
	nullif(Source.[EtlUpdatedOn], Target.[EtlUpdatedOn]) is not null or nullif(Target.[EtlUpdatedOn], Source.[EtlUpdatedOn]) is not null or 
	nullif(Source.[EtlUpdatedBy], Target.[EtlUpdatedBy]) is not null or nullif(Target.[EtlUpdatedBy], Source.[EtlUpdatedBy]) is not null or 
	nullif(Source.[EtlDeletedOn], Target.[EtlDeletedOn]) is not null or nullif(Target.[EtlDeletedOn], Source.[EtlDeletedOn]) is not null or 
	nullif(Source.[EtlDeletedBy], Target.[EtlDeletedBy]) is not null or nullif(Target.[EtlDeletedBy], Source.[EtlDeletedBy]) is not null or 
	nullif(Source.[EtlBatchRunId], Target.[EtlBatchRunId]) is not null or nullif(Target.[EtlBatchRunId], Source.[EtlBatchRunId]) is not null or 
	nullif(Source.[EtlStepRunId], Target.[EtlStepRunId]) is not null or nullif(Target.[EtlStepRunId], Source.[EtlStepRunId]) is not null or 
	nullif(Source.[EtlThreadRunId], Target.[EtlThreadRunId]) is not null or nullif(Target.[EtlThreadRunId], Source.[EtlThreadRunId]) is not null or 
	nullif(Source.[EtlDeltaHash], Target.[EtlDeltaHash]) is not null or nullif(Target.[EtlDeltaHash], Source.[EtlDeltaHash]) is not null or 
	nullif(Source.[CultureInfoCode], Target.[CultureInfoCode]) is not null or nullif(Target.[CultureInfoCode], Source.[CultureInfoCode]) is not null or 
	nullif(Source.[LanguageNameEnglish], Target.[LanguageNameEnglish]) is not null or nullif(Target.[LanguageNameEnglish], Source.[LanguageNameEnglish]) is not null or 
	nullif(Source.[LanguageNameLocal], Target.[LanguageNameLocal]) is not null or nullif(Target.[LanguageNameLocal], Source.[LanguageNameLocal]) is not null or 
	nullif(Source.[CountryKey], Target.[CountryKey]) is not null or nullif(Target.[CountryKey], Source.[CountryKey]) is not null or 
	nullif(Source.[CountryHistoryIdAsIs], Target.[CountryHistoryIdAsIs]) is not null or nullif(Target.[CountryHistoryIdAsIs], Source.[CountryHistoryIdAsIs]) is not null) then
 update set
  [CultureKey] = Source.[CultureKey], 
  [ValidFromUTC] = Source.[ValidFromUTC], 
  [ValidToUTC] = Source.[ValidToUTC], 
  [IsCurrent] = Source.[IsCurrent], 
  [PreviousHistoryId] = Source.[PreviousHistoryId], 
  [IsDeleted] = Source.[IsDeleted], 
  [LastTouchedOn] = Source.[LastTouchedOn], 
  [EtlCreatedOn] = Source.[EtlCreatedOn], 
  [EtlCreatedBy] = Source.[EtlCreatedBy], 
  [EtlUpdatedOn] = Source.[EtlUpdatedOn], 
  [EtlUpdatedBy] = Source.[EtlUpdatedBy], 
  [EtlDeletedOn] = Source.[EtlDeletedOn], 
  [EtlDeletedBy] = Source.[EtlDeletedBy], 
  [EtlBatchRunId] = Source.[EtlBatchRunId], 
  [EtlStepRunId] = Source.[EtlStepRunId], 
  [EtlThreadRunId] = Source.[EtlThreadRunId], 
  [EtlDeltaHash] = Source.[EtlDeltaHash], 
  [CultureInfoCode] = Source.[CultureInfoCode], 
  [LanguageNameEnglish] = Source.[LanguageNameEnglish], 
  [LanguageNameLocal] = Source.[LanguageNameLocal], 
  [CountryKey] = Source.[CountryKey], 
  [CountryHistoryIdAsIs] = Source.[CountryHistoryIdAsIs]
when not matched by target then
 insert([CultureHistoryId],[CultureKey],[ValidFromUTC],[ValidToUTC],[IsCurrent],[PreviousHistoryId],[IsDeleted],[LastTouchedOn],[EtlCreatedOn],[EtlCreatedBy],[EtlUpdatedOn],[EtlUpdatedBy],[EtlDeletedOn],[EtlDeletedBy],[EtlBatchRunId],[EtlStepRunId],[EtlThreadRunId],[EtlDeltaHash],[CultureInfoCode],[LanguageNameEnglish],[LanguageNameLocal],[CountryKey],[CountryHistoryIdAsIs])
 values(Source.[CultureHistoryId],Source.[CultureKey],Source.[ValidFromUTC],Source.[ValidToUTC],Source.[IsCurrent],Source.[PreviousHistoryId],Source.[IsDeleted],Source.[LastTouchedOn],Source.[EtlCreatedOn],Source.[EtlCreatedBy],Source.[EtlUpdatedOn],Source.[EtlUpdatedBy],Source.[EtlDeletedOn],Source.[EtlDeletedBy],Source.[EtlBatchRunId],Source.[EtlStepRunId],Source.[EtlThreadRunId],Source.[EtlDeltaHash],Source.[CultureInfoCode],Source.[LanguageNameEnglish],Source.[LanguageNameLocal],Source.[CountryKey],Source.[CountryHistoryIdAsIs])
when not matched by source then 
 delete
;
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('a66304c1-992d-5bee-837d-7a1ea2fe9481' AS UNIQUEIDENTIFIER) AND [script_checksum] = '3CFCF3962C9EBFFA4937F4EEF7971324745DECF31F8930EE38FD411D456E3DEB')
  EXECUTE ('declare @mergeError int
 , @mergeCount int
select @mergeError = @@error, @mergeCount = @@rowcount
if @mergeError != 0
 begin
 print ''ERROR OCCURRED IN MERGE FOR [dbo].[Culture]. Rows affected: '' + cast(@mergeCount as varchar(100)); -- SQL should always return zero rows affected
 end
else
 begin
 print ''[dbo].[Culture] rows affected by MERGE: '' + cast(@mergeCount as varchar(100));
 end
');

GO
SET NOCOUNT OFF;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('a66304c1-992d-5bee-837d-7a1ea2fe9481' AS UNIQUEIDENTIFIER) AND [script_checksum] = '3CFCF3962C9EBFFA4937F4EEF7971324745DECF31F8930EE38FD411D456E3DEB')
  PRINT '***** FINISHED EXECUTING MIGRATION "Static Data\dbo.Culture.data.sql", ID: {a66304c1-992d-5bee-837d-7a1ea2fe9481} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('a66304c1-992d-5bee-837d-7a1ea2fe9481' AS UNIQUEIDENTIFIER) AND [script_checksum] = '3CFCF3962C9EBFFA4937F4EEF7971324745DECF31F8930EE38FD411D456E3DEB')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('a66304c1-992d-5bee-837d-7a1ea2fe9481' AS UNIQUEIDENTIFIER), '3CFCF3962C9EBFFA4937F4EEF7971324745DECF31F8930EE38FD411D456E3DEB', 'Static Data\dbo.Culture.data.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('65fec69e-b638-50da-86c8-46cc842d126b' AS UNIQUEIDENTIFIER) AND [script_checksum] = '65358EB98D3B253D252E9EF61233077F624C1A168BF79BE09DEAC031729B9187')
  PRINT '

***** EXECUTING MIGRATION "Static Data\dbo.TranslationStatus.data.sql", ID: {65fec69e-b638-50da-86c8-46cc842d126b} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('65fec69e-b638-50da-86c8-46cc842d126b' AS UNIQUEIDENTIFIER) AND [script_checksum] = '65358EB98D3B253D252E9EF61233077F624C1A168BF79BE09DEAC031729B9187')
  EXECUTE ('--MERGE generated by ''sp_generate_merge'' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

set nocount on


merge into [dbo].[TranslationStatus] as Target
using (values
  (1,''Queued'',''Translation processing not started/pending the first attempt'')
 ,(2,''Re-queued'',''Translation has been marked for re-try'')
 ,(4,''In-Progress'',''Translation has started/is in progress'')
 ,(8,''Failed'',''Translation attempt has resulted in an error or other failure'')
 ,(16,''Complete'',''Translation has completed but not yet approved. Will not be attemnpted again unless status is changed to Re-queued (1)'')
 ,(32,''Approved'',''Translation has been approved and will not be processed'')
) as Source ([TranslationStatusId],[TranslationStatusName],[Narrative])
on (Target.[TranslationStatusId] = Source.[TranslationStatusId])
when matched and (
	nullif(Source.[TranslationStatusName], Target.[TranslationStatusName]) is not null or nullif(Target.[TranslationStatusName], Source.[TranslationStatusName]) is not null or 
	nullif(Source.[Narrative], Target.[Narrative]) is not null or nullif(Target.[Narrative], Source.[Narrative]) is not null) then
 update set
  [TranslationStatusName] = Source.[TranslationStatusName], 
  [Narrative] = Source.[Narrative]
when not matched by target then
 insert([TranslationStatusId],[TranslationStatusName],[Narrative])
 values(Source.[TranslationStatusId],Source.[TranslationStatusName],Source.[Narrative])
when not matched by source then 
 delete
;
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('65fec69e-b638-50da-86c8-46cc842d126b' AS UNIQUEIDENTIFIER) AND [script_checksum] = '65358EB98D3B253D252E9EF61233077F624C1A168BF79BE09DEAC031729B9187')
  EXECUTE ('declare @mergeError int
 , @mergeCount int
select @mergeError = @@error, @mergeCount = @@rowcount
if @mergeError != 0
 begin
 print ''ERROR OCCURRED IN MERGE FOR [dbo].[TranslationStatus]. Rows affected: '' + cast(@mergeCount as varchar(100)); -- SQL should always return zero rows affected
 end
else
 begin
 print ''[dbo].[TranslationStatus] rows affected by MERGE: '' + cast(@mergeCount as varchar(100));
 end
');

GO
SET NOCOUNT OFF;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('65fec69e-b638-50da-86c8-46cc842d126b' AS UNIQUEIDENTIFIER) AND [script_checksum] = '65358EB98D3B253D252E9EF61233077F624C1A168BF79BE09DEAC031729B9187')
  PRINT '***** FINISHED EXECUTING MIGRATION "Static Data\dbo.TranslationStatus.data.sql", ID: {65fec69e-b638-50da-86c8-46cc842d126b} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('65fec69e-b638-50da-86c8-46cc842d126b' AS UNIQUEIDENTIFIER) AND [script_checksum] = '65358EB98D3B253D252E9EF61233077F624C1A168BF79BE09DEAC031729B9187')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('65fec69e-b638-50da-86c8-46cc842d126b' AS UNIQUEIDENTIFIER), '65358EB98D3B253D252E9EF61233077F624C1A168BF79BE09DEAC031729B9187', 'Static Data\dbo.TranslationStatus.data.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('7597bbd1-fd62-5b52-bd6d-1a10d7bec00a' AS UNIQUEIDENTIFIER) AND [script_checksum] = '52516540A6879644AA62E3823ADEC320EDD15B520CB79197CD0FDD05A59AE46B')
  PRINT '

***** EXECUTING MIGRATION "Static Data\stg.SSIS_BUDGET_RegionLookup.data.sql", ID: {7597bbd1-fd62-5b52-bd6d-1a10d7bec00a} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('7597bbd1-fd62-5b52-bd6d-1a10d7bec00a' AS UNIQUEIDENTIFIER) AND [script_checksum] = '52516540A6879644AA62E3823ADEC320EDD15B520CB79197CD0FDD05A59AE46B')
  EXECUTE ('--MERGE generated by ''sp_generate_merge'' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

set nocount on


merge into [stg].[SSIS_BUDGET_RegionLookup] as Target
using (values
  (''DIV_TOT'',''Icopal/GAF'',''Icopal/GAF Europe division'')
 ,(''ELIM'',''ELIM Icopal/GAF'',''ELIM Icopal/GAF Europe division'')
 ,(''REC'',''Central'',''Region Central (REC)'')
 ,(''REE'',''East'',''Region East (REE)'')
 ,(''REN'',''North'',''Region North (REN)'')
 ,(''REW'',''West'',''Region West (REW)'')
 ,(''RPM'',''Plastic and Metal'',''Region Plastic and Metal (RPM)'')
) as Source ([RegionCode],[RegionName],[RegionLookup])
on (Target.[RegionCode] = Source.[RegionCode])
when matched and (
	nullif(Source.[RegionName], Target.[RegionName]) is not null or nullif(Target.[RegionName], Source.[RegionName]) is not null or 
	nullif(Source.[RegionLookup], Target.[RegionLookup]) is not null or nullif(Target.[RegionLookup], Source.[RegionLookup]) is not null) then
 update set
  [RegionName] = Source.[RegionName], 
  [RegionLookup] = Source.[RegionLookup]
when not matched by target then
 insert([RegionCode],[RegionName],[RegionLookup])
 values(Source.[RegionCode],Source.[RegionName],Source.[RegionLookup])
when not matched by source then 
 delete
;
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('7597bbd1-fd62-5b52-bd6d-1a10d7bec00a' AS UNIQUEIDENTIFIER) AND [script_checksum] = '52516540A6879644AA62E3823ADEC320EDD15B520CB79197CD0FDD05A59AE46B')
  EXECUTE ('declare @mergeError int
 , @mergeCount int
select @mergeError = @@error, @mergeCount = @@rowcount
if @mergeError != 0
 begin
 print ''ERROR OCCURRED IN MERGE FOR [stg].[SSIS_BUDGET_RegionLookup]. Rows affected: '' + cast(@mergeCount as varchar(100)); -- SQL should always return zero rows affected
 end
else
 begin
 print ''[stg].[SSIS_BUDGET_RegionLookup] rows affected by MERGE: '' + cast(@mergeCount as varchar(100));
 end
');

GO
SET NOCOUNT OFF;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('7597bbd1-fd62-5b52-bd6d-1a10d7bec00a' AS UNIQUEIDENTIFIER) AND [script_checksum] = '52516540A6879644AA62E3823ADEC320EDD15B520CB79197CD0FDD05A59AE46B')
  PRINT '***** FINISHED EXECUTING MIGRATION "Static Data\stg.SSIS_BUDGET_RegionLookup.data.sql", ID: {7597bbd1-fd62-5b52-bd6d-1a10d7bec00a} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('7597bbd1-fd62-5b52-bd6d-1a10d7bec00a' AS UNIQUEIDENTIFIER) AND [script_checksum] = '52516540A6879644AA62E3823ADEC320EDD15B520CB79197CD0FDD05A59AE46B')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('7597bbd1-fd62-5b52-bd6d-1a10d7bec00a' AS UNIQUEIDENTIFIER), '52516540A6879644AA62E3823ADEC320EDD15B520CB79197CD0FDD05A59AE46B', 'Static Data\stg.SSIS_BUDGET_RegionLookup.data.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('b1c20a6d-7953-59a4-9b34-a58b9b00dd1b' AS UNIQUEIDENTIFIER) AND [script_checksum] = '9359A61BD55ABA221E3C91BBFEBF02BE120E7A2965DAEF348D5C13F2F878FF52')
  PRINT '

***** EXECUTING MIGRATION "Static Data\stg.SSIS_BUDGET_BusinessUnitLookup.data.sql", ID: {b1c20a6d-7953-59a4-9b34-a58b9b00dd1b} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('b1c20a6d-7953-59a4-9b34-a58b9b00dd1b' AS UNIQUEIDENTIFIER) AND [script_checksum] = '9359A61BD55ABA221E3C91BBFEBF02BE120E7A2965DAEF348D5C13F2F878FF52')
  EXECUTE ('--MERGE generated by ''sp_generate_merge'' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

set nocount on


merge into [stg].[SSIS_BUDGET_BusinessUnitLookup] as Target
using (values
  (''REC'',''ATP'',''Austria'',''Austria (ATP)'')
 ,(''RPM'',''BED'',''Decra'',''Decra (BED)'')
 ,(''REE'',''CZP'',''Czech'',''Czech (CZP)'')
 ,(''REC'',''DEI'',''Germany'',''Germany (DEI)'')
 ,(''REC'',''DEV'',''Vedag'',''Vedag (DEV)'')
 ,(''REC'',''DEW'',''Wolfin'',''Wolfin (DEW)'')
 ,(''REN'',''DKT'',''Denmark'',''Denmark (DKT)'')
 ,(''REC'',''ELIM-C'',''ELIM - Central'',''ELIM Region Central (REC)'')
 ,(''REE'',''ELIM-E'',''ELIM - East'',''ELIM Region East (REE)'')
 ,(''REN'',''ELIM-N'',''ELIM - North'',''ELIM Region North (REN)'')
 ,(''RPM'',''ELIM-RPM'',''ELIM Plastic and Metal'',''ELIM Region Plastic and Metal (RPM)'')
 ,(''REW'',''ELIM-W'',''ELIM - West'',''ELIM Region West (REW)'')
 ,(''REN'',''FIT'',''Finland'',''Finland (FIT)'')
 ,(''REW'',''FRT'',''France'',''France (FRT)'')
 ,(''REW'',''GBP'',''UK'',''UK (GBP)'')
 ,(''REE'',''HUP'',''Hungary'',''Hungary (HUP)'')
 ,(''RPM'',''ISM'',''Synthetics'',''Synthetics (ISM)'')
 ,(''REW'',''NLT'',''Benelux'',''Benelux (NLT)'')
 ,(''REN'',''NOT'',''Norway'',''Norway (NOT)'')
 ,(''REE'',''PLT'',''Poland'',''Poland (PLT)'')
 ,(''REE'',''RUP'',''Russia'',''Russia (RUP)'')
 ,(''RPM'',''SEG'',''Wijo'',''Wijo (SEG)'')
 ,(''REN'',''SET'',''Sweden'',''Sweden (SET)'')
 ,(''RPM'',''SKF'',''Monarflex'',''Monarflex (SKF)'')
 ,(''REE'',''SKP'',''Slovakia'',''Slovakia (SKP)'')
) as Source ([RegionCode],[SBU],[BusinessUnitName],[BusinessUnitLookup])
on (Target.[SBU] = Source.[SBU])
when matched and (
	nullif(Source.[RegionCode], Target.[RegionCode]) is not null or nullif(Target.[RegionCode], Source.[RegionCode]) is not null or 
	nullif(Source.[BusinessUnitName], Target.[BusinessUnitName]) is not null or nullif(Target.[BusinessUnitName], Source.[BusinessUnitName]) is not null or 
	nullif(Source.[BusinessUnitLookup], Target.[BusinessUnitLookup]) is not null or nullif(Target.[BusinessUnitLookup], Source.[BusinessUnitLookup]) is not null) then
 update set
  [RegionCode] = Source.[RegionCode], 
  [BusinessUnitName] = Source.[BusinessUnitName], 
  [BusinessUnitLookup] = Source.[BusinessUnitLookup]
when not matched by target then
 insert([RegionCode],[SBU],[BusinessUnitName],[BusinessUnitLookup])
 values(Source.[RegionCode],Source.[SBU],Source.[BusinessUnitName],Source.[BusinessUnitLookup])
when not matched by source then 
 delete
;
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('b1c20a6d-7953-59a4-9b34-a58b9b00dd1b' AS UNIQUEIDENTIFIER) AND [script_checksum] = '9359A61BD55ABA221E3C91BBFEBF02BE120E7A2965DAEF348D5C13F2F878FF52')
  EXECUTE ('declare @mergeError int
 , @mergeCount int
select @mergeError = @@error, @mergeCount = @@rowcount
if @mergeError != 0
 begin
 print ''ERROR OCCURRED IN MERGE FOR [stg].[SSIS_BUDGET_BusinessUnitLookup]. Rows affected: '' + cast(@mergeCount as varchar(100)); -- SQL should always return zero rows affected
 end
else
 begin
 print ''[stg].[SSIS_BUDGET_BusinessUnitLookup] rows affected by MERGE: '' + cast(@mergeCount as varchar(100));
 end
');

GO
SET NOCOUNT OFF;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('b1c20a6d-7953-59a4-9b34-a58b9b00dd1b' AS UNIQUEIDENTIFIER) AND [script_checksum] = '9359A61BD55ABA221E3C91BBFEBF02BE120E7A2965DAEF348D5C13F2F878FF52')
  PRINT '***** FINISHED EXECUTING MIGRATION "Static Data\stg.SSIS_BUDGET_BusinessUnitLookup.data.sql", ID: {b1c20a6d-7953-59a4-9b34-a58b9b00dd1b} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('b1c20a6d-7953-59a4-9b34-a58b9b00dd1b' AS UNIQUEIDENTIFIER) AND [script_checksum] = '9359A61BD55ABA221E3C91BBFEBF02BE120E7A2965DAEF348D5C13F2F878FF52')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('b1c20a6d-7953-59a4-9b34-a58b9b00dd1b' AS UNIQUEIDENTIFIER), '9359A61BD55ABA221E3C91BBFEBF02BE120E7A2965DAEF348D5C13F2F878FF52', 'Static Data\stg.SSIS_BUDGET_BusinessUnitLookup.data.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('2e5debb3-ba03-5abf-aa73-8c7ab0f5e419' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'AAD0DEA9CC7825E604D8223D8FAE50D6174F50AAE6F41083D32B9339F36E3C0C')
  PRINT '

***** EXECUTING MIGRATION "Static Data\stg.SSIS_BUDGET_ProductCategoryGroupLookup.data.sql", ID: {2e5debb3-ba03-5abf-aa73-8c7ab0f5e419} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('2e5debb3-ba03-5abf-aa73-8c7ab0f5e419' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'AAD0DEA9CC7825E604D8223D8FAE50D6174F50AAE6F41083D32B9339F36E3C0C')
  EXECUTE ('--MERGE generated by ''sp_generate_merge'' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

set nocount on


merge into [stg].[SSIS_BUDGET_ProductCategoryGroupLookup] as Target
using (values
  (1000,''Flat Roofing Total'',''Flat Roofing'',46257)
 ,(2000,''Pitched Roofing Tot'',''Pitched Roofing'',46297)
 ,(3000,''Building Membranes Tot'',''Building Membranes'',46317)
 ,(4000,''Civil Engineering Total'',''Civil Engineering'',46346)
 ,(5000,''Products Total'',''Other'',46357)
 ,(5500,''Not Exported to Qlikview'',''Not Exported to Qlikview'',46377)
 ,(6000,''Installation Services'',''Installation Services'',null)
 ,(8800,''Unmapped L2 Categories'',''UnMapped Items'',46247)
 ,(9900,''Total'','''',null)
) as Source ([ProductCategoryGroupId],[ProductCategoryGroupName],[QlikViewCategoryLevel2Name],[QlikViewCategoryLevel2Id])
on (Target.[ProductCategoryGroupId] = Source.[ProductCategoryGroupId])
when matched and (
	nullif(Source.[ProductCategoryGroupName], Target.[ProductCategoryGroupName]) is not null or nullif(Target.[ProductCategoryGroupName], Source.[ProductCategoryGroupName]) is not null or 
	nullif(Source.[QlikViewCategoryLevel2Name], Target.[QlikViewCategoryLevel2Name]) is not null or nullif(Target.[QlikViewCategoryLevel2Name], Source.[QlikViewCategoryLevel2Name]) is not null or 
	nullif(Source.[QlikViewCategoryLevel2Id], Target.[QlikViewCategoryLevel2Id]) is not null or nullif(Target.[QlikViewCategoryLevel2Id], Source.[QlikViewCategoryLevel2Id]) is not null) then
 update set
  [ProductCategoryGroupName] = Source.[ProductCategoryGroupName], 
  [QlikViewCategoryLevel2Name] = Source.[QlikViewCategoryLevel2Name], 
  [QlikViewCategoryLevel2Id] = Source.[QlikViewCategoryLevel2Id]
when not matched by target then
 insert([ProductCategoryGroupId],[ProductCategoryGroupName],[QlikViewCategoryLevel2Name],[QlikViewCategoryLevel2Id])
 values(Source.[ProductCategoryGroupId],Source.[ProductCategoryGroupName],Source.[QlikViewCategoryLevel2Name],Source.[QlikViewCategoryLevel2Id])
when not matched by source then 
 delete
;
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('2e5debb3-ba03-5abf-aa73-8c7ab0f5e419' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'AAD0DEA9CC7825E604D8223D8FAE50D6174F50AAE6F41083D32B9339F36E3C0C')
  EXECUTE ('declare @mergeError int
 , @mergeCount int
select @mergeError = @@error, @mergeCount = @@rowcount
if @mergeError != 0
 begin
 print ''ERROR OCCURRED IN MERGE FOR [stg].[SSIS_BUDGET_ProductCategoryGroupLookup]. Rows affected: '' + cast(@mergeCount as varchar(100)); -- SQL should always return zero rows affected
 end
else
 begin
 print ''[stg].[SSIS_BUDGET_ProductCategoryGroupLookup] rows affected by MERGE: '' + cast(@mergeCount as varchar(100));
 end
');

GO
SET NOCOUNT OFF;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('2e5debb3-ba03-5abf-aa73-8c7ab0f5e419' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'AAD0DEA9CC7825E604D8223D8FAE50D6174F50AAE6F41083D32B9339F36E3C0C')
  PRINT '***** FINISHED EXECUTING MIGRATION "Static Data\stg.SSIS_BUDGET_ProductCategoryGroupLookup.data.sql", ID: {2e5debb3-ba03-5abf-aa73-8c7ab0f5e419} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('2e5debb3-ba03-5abf-aa73-8c7ab0f5e419' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'AAD0DEA9CC7825E604D8223D8FAE50D6174F50AAE6F41083D32B9339F36E3C0C')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('2e5debb3-ba03-5abf-aa73-8c7ab0f5e419' AS UNIQUEIDENTIFIER), 'AAD0DEA9CC7825E604D8223D8FAE50D6174F50AAE6F41083D32B9339F36E3C0C', 'Static Data\stg.SSIS_BUDGET_ProductCategoryGroupLookup.data.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('23c4ee75-8ae4-5d0f-b7c7-ab6d750e7aef' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'D047A4C066BE0E344C1D70D559E9CA7E8FEA1D743EC21BD6CA979DEB8FF5CA35')
  PRINT '

***** EXECUTING MIGRATION "Static Data\stg.SSIS_BUDGET_ProductCategoryLookup.data.sql", ID: {23c4ee75-8ae4-5d0f-b7c7-ab6d750e7aef} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('23c4ee75-8ae4-5d0f-b7c7-ab6d750e7aef' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'D047A4C066BE0E344C1D70D559E9CA7E8FEA1D743EC21BD6CA979DEB8FF5CA35')
  EXECUTE ('--MERGE generated by ''sp_generate_merge'' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

set nocount on


merge into [stg].[SSIS_BUDGET_ProductCategoryLookup] as Target
using (values
  (1000,1001,''Bitumen membranes'','''',null,''Bitumen membranes'',46258,90)
 ,(1000,1002,''Synthetic membranes - Polymeric (DEW)'','''',null,''Synthetic membranes, Polymeric'',46260,80)
 ,(1000,1003,''Synthetic membranes - Monomeric'',''Synthetic membranes, Monomeric PVC'',46290,''Synthetic Membranes, Monomeric & TPO'',46259,80)
 ,(1000,1004,''Synthetic membranes - TPO'',''Synthetic membranes, TPO'',46291,''Synthetic Membranes, Monomeric & TPO'',46259,80)
 ,(1000,1005,''Liquid products'','''',null,''Liquid products'',46261,90)
 ,(1000,1006,''Skylights & Smoke ventilation'','''',null,''Skylights & Smoke ventilation'',46262,90)
 ,(1000,1007,''Thermal Insulation'','''',null,''Thermal Insulation'',46263,90)
 ,(1000,1008,''Flat Roofing Accessories'','''',null,''Flat Roofing Accessories'',46264,90)
 ,(2000,2001,''Shingles'','''',null,''Shingles'',46298,90)
 ,(2000,2002,''Steel roof tiles (Decra)'','''',null,''Steel Roof Tiles (Decra)'',46300,90)
 ,(2000,2003,''Steel roof accessories (Decra)'','''',null,'''',null,0)
 ,(2000,2004,''Other Pitched Roof Products'','''',null,''Other Pitched Roof Products'',46301,90)
 ,(3000,3001,''Underroofs'','''',null,''Underroofs'',46318,90)
 ,(3000,3002,''Underroofs (SKF)'','''',null,'''',null,0)
 ,(3000,3003,''Wall Barriers'','''',null,''Wall Barriers'',46324,90)
 ,(3000,3004,''Wall Barriers (SKF)'','''',null,'''',null,0)
 ,(3000,3005,''Below Ground'','''',null,''Below Ground'',46329,90)
 ,(3000,3006,''Below Ground (SKF)'','''',null,'''',null,0)
 ,(3000,3007,''Scaffold Sheeting & Tarpaulins (SKF)'','''',null,''Scaffold Sheeting & Tarpaulins'',46336,70)
 ,(3000,3008,''Sound deadening'','''',null,''Sound deadening'',46341,90)
 ,(4000,4001,''Civil eng. & structural waterproofing'','''',null,''Civil eng. & structural waterproofing'',46347,90)
 ,(4000,4002,''Civil eng. & structural waterproofing (SKF)'','''',null,'''',null,0)
 ,(4000,4003,''PMB'',''PMB'',46354,''PMB and Road Emulsions'',46353,80)
 ,(4000,4004,''Road Emulsions'',''Road Emulsions'',46355,''PMB and Road Emulsions'',46353,80)
 ,(5000,5001,''Other Products'','''',null,'''',null,0)
 ,(6000,6001,''Installation Services'','''',null,'''',null,0)
) as Source ([ProductCategoryGroupId],[ProductCategoryId],[ProductCategoryName],[QlikViewCategoryLevel4Name],[QlikViewCategoryLevel4Id],[QlikViewCategoryLevel3Name],[QlikViewCategoryLevel3Id],[MatchConfidence])
on (Target.[ProductCategoryId] = Source.[ProductCategoryId])
when matched and (
	nullif(Source.[ProductCategoryGroupId], Target.[ProductCategoryGroupId]) is not null or nullif(Target.[ProductCategoryGroupId], Source.[ProductCategoryGroupId]) is not null or 
	nullif(Source.[ProductCategoryName], Target.[ProductCategoryName]) is not null or nullif(Target.[ProductCategoryName], Source.[ProductCategoryName]) is not null or 
	nullif(Source.[QlikViewCategoryLevel4Name], Target.[QlikViewCategoryLevel4Name]) is not null or nullif(Target.[QlikViewCategoryLevel4Name], Source.[QlikViewCategoryLevel4Name]) is not null or 
	nullif(Source.[QlikViewCategoryLevel4Id], Target.[QlikViewCategoryLevel4Id]) is not null or nullif(Target.[QlikViewCategoryLevel4Id], Source.[QlikViewCategoryLevel4Id]) is not null or 
	nullif(Source.[QlikViewCategoryLevel3Name], Target.[QlikViewCategoryLevel3Name]) is not null or nullif(Target.[QlikViewCategoryLevel3Name], Source.[QlikViewCategoryLevel3Name]) is not null or 
	nullif(Source.[QlikViewCategoryLevel3Id], Target.[QlikViewCategoryLevel3Id]) is not null or nullif(Target.[QlikViewCategoryLevel3Id], Source.[QlikViewCategoryLevel3Id]) is not null or 
	nullif(Source.[MatchConfidence], Target.[MatchConfidence]) is not null or nullif(Target.[MatchConfidence], Source.[MatchConfidence]) is not null) then
 update set
  [ProductCategoryGroupId] = Source.[ProductCategoryGroupId], 
  [ProductCategoryName] = Source.[ProductCategoryName], 
  [QlikViewCategoryLevel4Name] = Source.[QlikViewCategoryLevel4Name], 
  [QlikViewCategoryLevel4Id] = Source.[QlikViewCategoryLevel4Id], 
  [QlikViewCategoryLevel3Name] = Source.[QlikViewCategoryLevel3Name], 
  [QlikViewCategoryLevel3Id] = Source.[QlikViewCategoryLevel3Id], 
  [MatchConfidence] = Source.[MatchConfidence]
when not matched by target then
 insert([ProductCategoryGroupId],[ProductCategoryId],[ProductCategoryName],[QlikViewCategoryLevel4Name],[QlikViewCategoryLevel4Id],[QlikViewCategoryLevel3Name],[QlikViewCategoryLevel3Id],[MatchConfidence])
 values(Source.[ProductCategoryGroupId],Source.[ProductCategoryId],Source.[ProductCategoryName],Source.[QlikViewCategoryLevel4Name],Source.[QlikViewCategoryLevel4Id],Source.[QlikViewCategoryLevel3Name],Source.[QlikViewCategoryLevel3Id],Source.[MatchConfidence])
when not matched by source then 
 delete
;
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('23c4ee75-8ae4-5d0f-b7c7-ab6d750e7aef' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'D047A4C066BE0E344C1D70D559E9CA7E8FEA1D743EC21BD6CA979DEB8FF5CA35')
  EXECUTE ('declare @mergeError int
 , @mergeCount int
select @mergeError = @@error, @mergeCount = @@rowcount
if @mergeError != 0
 begin
 print ''ERROR OCCURRED IN MERGE FOR [stg].[SSIS_BUDGET_ProductCategoryLookup]. Rows affected: '' + cast(@mergeCount as varchar(100)); -- SQL should always return zero rows affected
 end
else
 begin
 print ''[stg].[SSIS_BUDGET_ProductCategoryLookup] rows affected by MERGE: '' + cast(@mergeCount as varchar(100));
 end
');

GO
SET NOCOUNT OFF;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('23c4ee75-8ae4-5d0f-b7c7-ab6d750e7aef' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'D047A4C066BE0E344C1D70D559E9CA7E8FEA1D743EC21BD6CA979DEB8FF5CA35')
  PRINT '***** FINISHED EXECUTING MIGRATION "Static Data\stg.SSIS_BUDGET_ProductCategoryLookup.data.sql", ID: {23c4ee75-8ae4-5d0f-b7c7-ab6d750e7aef} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('23c4ee75-8ae4-5d0f-b7c7-ab6d750e7aef' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'D047A4C066BE0E344C1D70D559E9CA7E8FEA1D743EC21BD6CA979DEB8FF5CA35')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('23c4ee75-8ae4-5d0f-b7c7-ab6d750e7aef' AS UNIQUEIDENTIFIER), 'D047A4C066BE0E344C1D70D559E9CA7E8FEA1D743EC21BD6CA979DEB8FF5CA35', 'Static Data\stg.SSIS_BUDGET_ProductCategoryLookup.data.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('15a0517b-b658-5cbc-bd7b-cbc0ce53aeb8' AS UNIQUEIDENTIFIER) AND [script_checksum] = '37D50D8B43B15F6D0E61C54BC1047E48127F9704923CC5C9F39E85EB3DF13D25')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\log4Private\Stored Procedures\SessionInfoOutput.sql", ID: {15a0517b-b658-5cbc-bd7b-cbc0ce53aeb8} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('15a0517b-b658-5cbc-bd7b-cbc0ce53aeb8' AS UNIQUEIDENTIFIER) AND [script_checksum] = '37D50D8B43B15F6D0E61C54BC1047E48127F9704923CC5C9F39E85EB3DF13D25')
  EXECUTE ('IF OBJECT_ID(''[log4Private].[SessionInfoOutput]'') IS NOT NULL
	DROP PROCEDURE [log4Private].[SessionInfoOutput];

');

GO
SET QUOTED_IDENTIFIER ON;

GO
SET ANSI_NULLS ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('15a0517b-b658-5cbc-bd7b-cbc0ce53aeb8' AS UNIQUEIDENTIFIER) AND [script_checksum] = '37D50D8B43B15F6D0E61C54BC1047E48127F9704923CC5C9F39E85EB3DF13D25')
  EXECUTE ('
/*************************************************************************************************/
--</MaintenanceHeader>

CREATE PROCEDURE [log4Private].[SessionInfoOutput]
(
  @SessionId          int
, @HostName           nvarchar( 128 ) = null  out
, @ProgramName        nvarchar( 128 ) = null  out
, @NTDomain           nvarchar( 128 ) = null  out
, @NTUsername         nvarchar( 128 ) = null  out
, @LoginName          nvarchar( 128 ) = null  out
, @OriginalLoginName  nvarchar( 128 ) = null  out
, @SessionLoginTime   datetime        = null  out
)

as

--<CommentHeader>
/**********************************************************************************************************************

Properties
=====================================================================================================================
PROCEDURE NAME:  SessionInfoOutput
DESCRIPTION:     Outputs session info from master.sys.dm_exec_sessions for the current @@SPID
DATE OF ORIGIN:  15-APR-2008
ORIGINAL AUTHOR: Greg M. Lucas (data-centric solutions ltd. http://www.data-centric.co.uk)
BUILD DATE:      13-MAR-2012
BUILD VERSION:   0.0.11
DEPENDANTS:      log4.ExceptionHandler
                 log4.JournalWriter
DEPENDENCIES:    Called functions

Returns
=====================================================================================================================
@@ERROR - always zero on success

Additional Notes
=====================================================================================================================


Revision history
=====================================================================================================================
ChangeDate		Author	Version		Narrative
============	======	=======		=================================================================================
15-APR-2008		GML		vX.Y.z		Created
------------	------	-------		---------------------------------------------------------------------------------
17-OCT-2015		GML		vX.Y.z		Now works on SQL Azure DB
------------	------	-------		---------------------------------------------------------------------------------

=====================================================================================================================
(C) Copyright 2006-14 data-centric solutions ltd. (http://log4tsql.sourceforge.net/)

This library is free software; you can redistribute it and/or modify it under the terms of the
GNU Lesser General Public License as published by the Free Software Foundation (www.fsf.org);
either version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along with this
library; if not, you can find it at http://www.opensource.org/licenses/lgpl-3.0.html
or http://www.gnu.org/licenses/lgpl.html

**********************************************************************************************************************/
--</CommentHeader>

begin
	SET NOCOUNT ON

	begin try
		--! These system attributes come from master.sys.dm_exec_sessions which isn''t available in Azure
		set @HostName			= ''N/S in Azure''
		set @ProgramName		= ''N/S in Azure''
		set @NTDomain			= ''N/S in Azure''
		set @NTUsername			= ''N/S in Azure''
		set @LoginName			= ''N/S in Azure''
		set @OriginalLoginName	= ''N/S in Azure''
		set @SessionLoginTime	= ''19000101 00:00:00''

	end try
	begin catch
		--! Make sure we return non-null values
		set @SessionId			= 0
		set @HostName			= ''''
		set @ProgramName		= ''log4.SessionInfoOutput Error!''
		set @NTDomain			= ''''
		set @NTUsername			= ''''
		set @LoginName			= ''log4.SessionInfoOutput Error!''
		set @OriginalLoginName	= ''''

		declare @context nvarchar(512); set @context = ''log4.SessionInfoOutput failed to retrieve session info'';

		--! Only rollback if we have an uncommitable transaction
		if (xact_state() = -1)
		or (@@trancount > 0 and xact_state() != 1)
			begin
				rollback tran;
				set @context = @context + '' (Forced rolled back of all changes due to uncommitable transaction)'';
			end

		--! Log this error directly
		--! Don''t call ExceptionHandler in case we get another
		--! SessionInfoOutput error and and up in a never-ending loop)
		insert log4Private.SqlException
		(
		  UtcDate
		, SystemDate
		, ErrorContext
		, ErrorNumber
		, ErrorSeverity
		, ErrorState
		, ErrorProcedure
		, ErrorLine
		, ErrorMessage
		, ErrorDatabase
		, SessionIdent
		, ServerName
		, HostName
		, ProgramName
		, NTDomain
		, NTUsername
		, LoginName
		, OriginalLoginName
		, SessionLoginTime
		)
		select
			  getutcdate()
			, getdate()
			, @context
			, error_number()
			, error_severity()
			, error_state()
			, error_procedure()
			, error_line()
			, error_message()
			, db_name()
			, @@spid
			, @@servername
			, '''' -- HostName
			, '''' -- ProgramName
			, '''' -- NTDomain
			, '''' -- NTUsername
			, '''' -- LoginName
			, '''' -- OriginalLoginName
			, null
	end catch

	set nocount off
end
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('15a0517b-b658-5cbc-bd7b-cbc0ce53aeb8' AS UNIQUEIDENTIFIER) AND [script_checksum] = '37D50D8B43B15F6D0E61C54BC1047E48127F9704923CC5C9F39E85EB3DF13D25')
  EXECUTE ('GRANT EXECUTE ON  [log4Private].[SessionInfoOutput] TO [public]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('15a0517b-b658-5cbc-bd7b-cbc0ce53aeb8' AS UNIQUEIDENTIFIER) AND [script_checksum] = '37D50D8B43B15F6D0E61C54BC1047E48127F9704923CC5C9F39E85EB3DF13D25')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Outputs session info from master.sys.dm_exec_sessions for the current @@SPID'', ''SCHEMA'', N''log4Private'', ''PROCEDURE'', N''SessionInfoOutput'', NULL, NULL
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('15a0517b-b658-5cbc-bd7b-cbc0ce53aeb8' AS UNIQUEIDENTIFIER) AND [script_checksum] = '37D50D8B43B15F6D0E61C54BC1047E48127F9704923CC5C9F39E85EB3DF13D25')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\log4Private\Stored Procedures\SessionInfoOutput.sql", ID: {15a0517b-b658-5cbc-bd7b-cbc0ce53aeb8} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('15a0517b-b658-5cbc-bd7b-cbc0ce53aeb8' AS UNIQUEIDENTIFIER) AND [script_checksum] = '37D50D8B43B15F6D0E61C54BC1047E48127F9704923CC5C9F39E85EB3DF13D25')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('15a0517b-b658-5cbc-bd7b-cbc0ce53aeb8' AS UNIQUEIDENTIFIER), '37D50D8B43B15F6D0E61C54BC1047E48127F9704923CC5C9F39E85EB3DF13D25', 'Programmable Objects\log4Private\Stored Procedures\SessionInfoOutput.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('28783bd6-0909-5fd2-bcad-81dede3f3869' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'B651E6B71EDECBC0A2CE04DE53DDDC59BBA6511F1B32671C5C8F7F3ACBAB6AA2')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\log4\Stored Procedures\ExceptionHandler.sql", ID: {28783bd6-0909-5fd2-bcad-81dede3f3869} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('28783bd6-0909-5fd2-bcad-81dede3f3869' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'B651E6B71EDECBC0A2CE04DE53DDDC59BBA6511F1B32671C5C8F7F3ACBAB6AA2')
  EXECUTE ('IF OBJECT_ID(''[log4].[ExceptionHandler]'') IS NOT NULL
	DROP PROCEDURE [log4].[ExceptionHandler];

');

GO
SET QUOTED_IDENTIFIER ON;

GO
SET ANSI_NULLS ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('28783bd6-0909-5fd2-bcad-81dede3f3869' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'B651E6B71EDECBC0A2CE04DE53DDDC59BBA6511F1B32671C5C8F7F3ACBAB6AA2')
  EXECUTE ('
/*************************************************************************************************/
--</MaintenanceHeader>

CREATE   PROCEDURE [log4].[ExceptionHandler]
(
  @ErrorContext		nvarchar(512)	= NULL
, @ErrorProcedure	nvarchar(128)	= NULL	OUT
, @ErrorNumber		int				= NULL	OUT
, @ErrorSeverity	int				= NULL	OUT
, @ErrorState		int				= NULL	OUT
, @ErrorLine		int				= NULL	OUT
, @ErrorMessage		nvarchar(4000)	= NULL	OUT
, @ReturnMessage	nvarchar(1000)	= NULL	OUT
, @ExceptionId		int				= NULL	OUT
)
AS

--<CommentHeader>
/**********************************************************************************************************************

Properties
=====================================================================================================================
PROCEDURE NAME:		log4.ExceptionHandler
DESCRIPTION:		Returns error info as output parameters and writes info to Exception table
DATE OF ORIGIN:		01-DEC-2006
ORIGINAL AUTHOR:	Greg M. Lucas (data-centric solutions ltd. http://www.data-centric.co.uk)
BUILD DATE:			01-MAR-2015
BUILD VERSION:		0.0.13
DEPENDANTS:			Various
DEPENDENCIES:		log4.SessionInfoOutput

Outputs
=====================================================================================================================
Outputs all values collected within the CATCH block plus a formatted error message built from context and error msg

Returns
=====================================================================================================================
- @@ERROR - always zero on success


Additional Notes
=====================================================================================================================
-

Revision history
=====================================================================================================================
ChangeDate		Author	Version		Narrative
============	======	=======		=================================================================================
01-DEC-2006		GML		v0.0.1		Created
------------	------	-------		---------------------------------------------------------------------------------
15-APR-2008		GML		v0.0.3		Now utilises SessionInfoOutput sproc for session values
------------	------	-------		---------------------------------------------------------------------------------

=====================================================================================================================
(C) Copyright 2006-14 data-centric solutions ltd. (http://log4tsql.sourceforge.net/)

This library is free software; you can redistribute it and/or modify it under the terms of the
GNU Lesser General Public License as published by the Free Software Foundation (www.fsf.org);
either version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along with this
library; if not, you can find it at http://www.opensource.org/licenses/lgpl-3.0.html
or http://www.gnu.org/licenses/lgpl.html

**********************************************************************************************************************/
--</CommentHeader>

BEGIN
	SET NOCOUNT ON;

	DECLARE @ErrorDatabase nvarchar(128) = DB_NAME();

	SET @ErrorContext	= COALESCE(@ErrorContext, '''');
	SET @ErrorProcedure	= COALESCE(NULLIF(@ErrorProcedure, ''''), ERROR_PROCEDURE(), '''');
	SET @ErrorNumber		= COALESCE(ERROR_NUMBER(), 0);
	SET @ErrorSeverity	= COALESCE(ERROR_SEVERITY(), 0);
	SET @ErrorState		= COALESCE(ERROR_STATE(), 0);
	SET @ErrorLine		= COALESCE(ERROR_LINE(), 0);
	SET @ErrorMessage	= COALESCE(ERROR_MESSAGE()
							, ''ERROR_MESSAGE() Not Found for @@ERROR: ''
								+ COALESCE(CAST(ERROR_NUMBER() AS varchar(16)), ''NULL''));

	--!
	--! Generate a detailed, nicely formatted error message to return to the caller
	--!
	DECLARE @context nvarchar(512); SET @context = COALESCE(NULLIF(@ErrorContext, '''') + '' due to '', ''ERROR! '');
	SET @ReturnMessage	= @context
						+ CASE
							WHEN LEN(ERROR_MESSAGE()) > (994 - LEN(@context))
								THEN ''"'' + SUBSTRING(@ErrorMessage, 1, (994 - LEN(@context))) + ''..."''
							ELSE
								''"'' + @ErrorMessage + ''"''
						  END;

	--!
	--! Session variables (keep it SQL2005 compatible)
	--!
	DECLARE @SessionId	int				; SET @SessionId	= @@SPID;
	DECLARE @ServerName	nvarchar(128)	; SET @ServerName	= @@SERVERNAME;

	--!
	--! log4.SessionInfoOutput variables
	--!
	DECLARE   @HostName				nvarchar(128)
			, @ProgramName			nvarchar(128)
			, @NTDomain				nvarchar(128)
			, @NTUsername			nvarchar(128)
			, @LoginName			nvarchar(128)
			, @OriginalLoginName	nvarchar(128)
			, @SessionLoginTime		datetime

	--! Working variables
	DECLARE @tblExceptionId         table	(ExceptionId int NOT NULL UNIQUE);

	--!
	--! Get the details for the current session
	--!
	EXEC log4Private.SessionInfoOutput
			  @SessionId			= @SessionId
			, @HostName				= @HostName				OUT
			, @ProgramName			= @ProgramName			OUT
			, @NTDomain				= @NTDomain				OUT
			, @NTUsername			= @NTUsername			OUT
			, @LoginName			= @LoginName			OUT
			, @OriginalLoginName	= @OriginalLoginName	OUT
			, @SessionLoginTime		= @SessionLoginTime		OUT

	--!
	--! Record what we have
	--!
	INSERT [log4Private].[SqlException]
	(
	  [ErrorContext]
	, [ErrorNumber]
	, [ErrorSeverity]
	, [ErrorState]
	, [ErrorProcedure]
	, [ErrorLine]
	, [ErrorMessage]
	, [ErrorDatabase]
	, [SessionIdent]
	, [ServerName]
	, [HostName]
	, [ProgramName]
	, [NTDomain]
	, [NTUsername]
	, [LoginName]
	, [OriginalLoginName]
	, [SessionLoginTime]
	)
	OUTPUT inserted.ExceptionId INTO @tblExceptionId
	VALUES
	(
	  @ErrorContext
	, @ErrorNumber
	, @ErrorSeverity
	, @ErrorState
	, @ErrorProcedure
	, @ErrorLine
	, @ErrorMessage
	, @ErrorDatabase
	, @SessionId
	, @ServerName
	, @HostName
	, @ProgramName
	, @NTDomain
	, @NTUsername
	, @LoginName
	, @OriginalLoginName
	, @SessionLoginTime
	);

	SELECT @ExceptionId = ExceptionId FROM @tblExceptionId;

--/////////////////////////////////////////////////////////////////////////////////////////////////
OnComplete:
--/////////////////////////////////////////////////////////////////////////////////////////////////

	SET NOCOUNT OFF;

	RETURN;
END
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('28783bd6-0909-5fd2-bcad-81dede3f3869' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'B651E6B71EDECBC0A2CE04DE53DDDC59BBA6511F1B32671C5C8F7F3ACBAB6AA2')
  EXECUTE ('GRANT EXECUTE ON  [log4].[ExceptionHandler] TO [public]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('28783bd6-0909-5fd2-bcad-81dede3f3869' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'B651E6B71EDECBC0A2CE04DE53DDDC59BBA6511F1B32671C5C8F7F3ACBAB6AA2')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Returns error info as output parameters and writes info to Exception table'', ''SCHEMA'', N''log4'', ''PROCEDURE'', N''ExceptionHandler'', NULL, NULL
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('28783bd6-0909-5fd2-bcad-81dede3f3869' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'B651E6B71EDECBC0A2CE04DE53DDDC59BBA6511F1B32671C5C8F7F3ACBAB6AA2')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\log4\Stored Procedures\ExceptionHandler.sql", ID: {28783bd6-0909-5fd2-bcad-81dede3f3869} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('28783bd6-0909-5fd2-bcad-81dede3f3869' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'B651E6B71EDECBC0A2CE04DE53DDDC59BBA6511F1B32671C5C8F7F3ACBAB6AA2')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('28783bd6-0909-5fd2-bcad-81dede3f3869' AS UNIQUEIDENTIFIER), 'B651E6B71EDECBC0A2CE04DE53DDDC59BBA6511F1B32671C5C8F7F3ACBAB6AA2', 'Programmable Objects\log4\Stored Procedures\ExceptionHandler.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('9b6216f6-590d-5cd1-9162-2d51fd502792' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'B997F40396B3106D4E5D3D4BAA20F8B74A6F22DA9FBE5B3873A8637DA4DC5E5B')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\etl\Stored Procedures\SSIS_BUDGET_2017_StageSales.sql", ID: {9b6216f6-590d-5cd1-9162-2d51fd502792} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('9b6216f6-590d-5cd1-9162-2d51fd502792' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'B997F40396B3106D4E5D3D4BAA20F8B74A6F22DA9FBE5B3873A8637DA4DC5E5B')
  EXECUTE ('IF OBJECT_ID(''[etl].[SSIS_BUDGET_2017_StageSales]'') IS NOT NULL
	DROP PROCEDURE [etl].[SSIS_BUDGET_2017_StageSales];

');

GO
SET QUOTED_IDENTIFIER ON;

GO
SET ANSI_NULLS ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('9b6216f6-590d-5cd1-9162-2d51fd502792' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'B997F40396B3106D4E5D3D4BAA20F8B74A6F22DA9FBE5B3873A8637DA4DC5E5B')
  EXECUTE ('CREATE procedure [etl].[SSIS_BUDGET_2017_StageSales]
(
  @BudgetYear char(4) = ''2017''
)
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
PROCEDURE NAME:		etl.SSIS_BUDGET_2017_StageSales
DESCRIPTION:		Transforms raw, landed sales data to interim staging table ready for further processing and validation
ORIGIN DATE:		21-JUN-2017
ORIGINAL AUTHOR:	Greg M. Lucas

Returns
=======
@@Error - always zero on success

Additional Notes
================

REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		21-JUN-2017		GML		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------

**********************************************************************************************************************/
--</CommentHeader>

begin
	set nocount on;

	--! Standard/ExceptionHandler variables
	declare	@_FunctionName nvarchar(255) = quotename(object_schema_name(@@procid)) + ''.'' + quotename(object_name(@@procid));
	declare	@_Error int = 0;
	declare @_ReturnValue int
	declare	@_Message nvarchar(512);
	declare	@_ErrorContext nvarchar(512);
	declare	@_Step varchar(128);
	declare	@_Now datetime = getdate();

	--! Find out if we are already in a transaction
	declare	@_TxnIsExternal bit = case when @@trancount > 0 then 1 else 0 end;

	begin try
		--! If there no outer transaction, use an explicit transaction so we can roll this piece back if required 
		if @_TxnIsExternal = 0 begin tran;

		set @_Step = ''Clear Down SSIS_STG_BUDGET_2017_Sales''

		truncate table stg.SSIS_STG_BUDGET_2017_Sales;

		set @_Step = ''Clear Down SSIS_STG_BUDGET_2017_SalesCheck''

		truncate table stg.SSIS_STG_BUDGET_2017_SalesCheck;

		--!
		--!
		--!
		set @_Step = ''Populate SSIS_STG_BUDGET_2017_Sales''

		; with dateKeyCte
		as
		(
			select
				  min(DateKey) as [DateKey]
				, FiscalPeriodCode
			from
				dbo.Calendar
			where
				cast(FiscalYear as char(4)) = @BudgetYear
			group by
				FiscalPeriodCode
		)
		insert stg.SSIS_STG_BUDGET_2017_Sales
		(   
		  NativeBusinessUnit
		, NativeMonthCode
		, NativeRegionName
		, BusinessUnitKey
		, DateKey
		, InstallationServices_10000
		, ProducedGoods_10100
		, GroupGoods_10200
		, CommercialGoods_10300
		, ExternalSales_11890
		, IC_Transf_SBU_11000
		, IC_Transf_Region_11100
		, IC_Transf_Abroad_11200
		, IC_Transf_US_11300
		, Total_IC_Sales
		, TotalSalesAndTransfers_11990
		)
		select
			  src.RowHeader as [NativeBusinessUnit]
			, src.MonthCode as [NativeMonthCode]
			, r.RegionLookup as [NativeRegionName]
			---------------------------------------------------------------------------------------------------
			, case
				when coalesce(src.RowHeader, '''') = '''' then -1 -- Not Specified at Source
				else coalesce(bu.BusinessUnitKey, -2) -- Lookup Not Found
			  end as [BusinessUnitKey]
			---------------------------------------------------------------------------------------------------
			, case
				when coalesce(src.MonthCode, '''') = '''' then -1 -- Not Specified at Source
				else coalesce(dk.DateKey, -8) -- Invalid Source Format
			  end as [DateKey]
			---------------------------------------------------------------------------------------------------
			, try_cast(replace(src.InstallationServices_10000, '','', '''') as decimal(38,16)) as [InstallationServices_10000]
			, try_cast(replace(src.ProducedGoods_10100, '','', '''') as decimal(38,16)) as [ProducedGoods_10100]
			, try_cast(replace(src.GroupGoods_10200, '','', '''') as decimal(38,16)) as [GroupGoods_10200]
			, try_cast(replace(src.CommercialGoods_10300, '','', '''') as decimal(38,16)) as [CommercialGoods_10300]
			, try_cast(replace(src.ExternalSales_11890, '','', '''') as decimal(38,16)) as [ExternalSales_11890]
			, try_cast(replace(src.IC_Transf_SBU_11000, '','', '''') as decimal(38,16)) as [IC_Transf_SBU_11000]
			, try_cast(replace(src.IC_Transf_Region_11100, '','', '''') as decimal(38,16)) as [IC_Transf_Region_11100]
			, try_cast(replace(src.IC_Transf_Abroad_11200, '','', '''') as decimal(38,16)) as [IC_Transf_Abroad_11200]
			, try_cast(replace(src.IC_Transf_US_11300, '','', '''') as decimal(38,16)) as [IC_Transf_US_11300]
			, try_cast(replace(src.Total_IC_Sales, '','', '''') as decimal(38,16)) as [Total_IC_Sales]
			, try_cast(replace(src.TotalSalesAndTransfers_11990, '','', '''') as decimal(38,16)) as [TotalSalesAndTransfers_11990]
		from
			stg.SSIS_LAND_BUDGET_2017_Sales as src
		inner join stg.SSIS_BUDGET_BusinessUnitLookup as lubu
			on lubu.BusinessUnitLookup = src.RowHeader
		inner join stg.SSIS_BUDGET_RegionLookup as r
			on r.RegionCode = lubu.RegionCode
		left join dateKeyCte as dk
			on dk.FiscalPeriodCode = src.MonthCode
		left join qvstg.BusinessUnit as bu
			on bu.SalesCenterSbuCode = lubu.SBU
		;

		--!
		--!
		--!
		set @_Step = ''Populate SSIS_STG_BUDGET_2017_SalesCheck''

		insert stg.SSIS_STG_BUDGET_2017_SalesCheck
		(   
		  RegionName
		, MonthCode
		, InstallationServices_10000
		, ProducedGoods_10100
		, GroupGoods_10200
		, CommercialGoods_10300
		, ExternalSales_11890
		, IC_Transf_SBU_11000
		, IC_Transf_Region_11100
		, IC_Transf_Abroad_11200
		, IC_Transf_US_11300
		, Total_IC_Sales
		, TotalSalesAndTransfers_11990
		)
		select
			  src.RowHeader as [RegionName]
			, src.MonthCode as [MonthCode]
			---------------------------------------------------------------------------------------------------
			, try_cast(replace(src.InstallationServices_10000, '','', '''') as decimal(38,16)) as [InstallationServices_10000]
			, try_cast(replace(src.ProducedGoods_10100, '','', '''') as decimal(38,16)) as [ProducedGoods_10100]
			, try_cast(replace(src.GroupGoods_10200, '','', '''') as decimal(38,16)) as [GroupGoods_10200]
			, try_cast(replace(src.CommercialGoods_10300, '','', '''') as decimal(38,16)) as [CommercialGoods_10300]
			, try_cast(replace(src.ExternalSales_11890, '','', '''') as decimal(38,16)) as [ExternalSales_11890]
			, try_cast(replace(src.IC_Transf_SBU_11000, '','', '''') as decimal(38,16)) as [IC_Transf_SBU_11000]
			, try_cast(replace(src.IC_Transf_Region_11100, '','', '''') as decimal(38,16)) as [IC_Transf_Region_11100]
			, try_cast(replace(src.IC_Transf_Abroad_11200, '','', '''') as decimal(38,16)) as [IC_Transf_Abroad_11200]
			, try_cast(replace(src.IC_Transf_US_11300, '','', '''') as decimal(38,16)) as [IC_Transf_US_11300]
			, try_cast(replace(src.Total_IC_Sales, '','', '''') as decimal(38,16)) as [Total_IC_Sales]
			, try_cast(replace(src.TotalSalesAndTransfers_11990, '','', '''') as decimal(38,16)) as [TotalSalesAndTransfers_11990]
		from
			stg.SSIS_LAND_BUDGET_2017_Sales as src
		inner join stg.SSIS_BUDGET_RegionLookup as lur
			on lur.RegionLookup = src.RowHeader
		;

		--!
		--! Only commit transactions started within this procedure
		--!
		if @_TxnIsExternal = 0 and (xact_state() = 1 or @@trancount > 0) commit tran ;
	end try
	begin catch
		set @_ErrorContext = ''Failed to reset Business Unit control at step ''
			+ coalesce(''['' + @_Step + '']'', ''NULL'');

		--! If we have an uncommittable external transaction (see BOL), or a deadlock
		--! we can''t do anything else until we roll that back. Alternatively, if we
		--! started the transaction we should roll it back otherwise or let the caller
		--! handle its own external txn 
		if (xact_state() = -1) or (xact_state() = 1 and error_number() = 1205) or (xact_state() = 1 and @_TxnIsExternal = 0)
			begin
				rollback tran;
				set @_ErrorContext = @_ErrorContext + '' (Forced roll back all changes)'';
			end
		
		exec log4.ExceptionHandler
				  @ErrorContext   = @_ErrorContext
				, @ErrorProcedure = @_FunctionName
				, @ErrorNumber    = @_Error out
				, @ReturnMessage  = @_Message out;
	end catch

--/////////////////////////////////////////////////////////////////////////////////////////////////
EndProc:
--/////////////////////////////////////////////////////////////////////////////////////////////////

	--! Finally, throw an exception that will be detected by the caller
	if @_Error > 0 raiserror(@_Message, 16, 99);

	set nocount off;

	--! Return the value of @@ERROR (which will be zero on success)
	return (@_Error);
end
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('9b6216f6-590d-5cd1-9162-2d51fd502792' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'B997F40396B3106D4E5D3D4BAA20F8B74A6F22DA9FBE5B3873A8637DA4DC5E5B')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', ''Transforms raw, landed sales data to interim staging table ready for further processing and validation'', ''SCHEMA'', N''etl'', ''PROCEDURE'', N''SSIS_BUDGET_2017_StageSales'', NULL, NULL
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('9b6216f6-590d-5cd1-9162-2d51fd502792' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'B997F40396B3106D4E5D3D4BAA20F8B74A6F22DA9FBE5B3873A8637DA4DC5E5B')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\etl\Stored Procedures\SSIS_BUDGET_2017_StageSales.sql", ID: {9b6216f6-590d-5cd1-9162-2d51fd502792} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('9b6216f6-590d-5cd1-9162-2d51fd502792' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'B997F40396B3106D4E5D3D4BAA20F8B74A6F22DA9FBE5B3873A8637DA4DC5E5B')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('9b6216f6-590d-5cd1-9162-2d51fd502792' AS UNIQUEIDENTIFIER), 'B997F40396B3106D4E5D3D4BAA20F8B74A6F22DA9FBE5B3873A8637DA4DC5E5B', 'Programmable Objects\etl\Stored Procedures\SSIS_BUDGET_2017_StageSales.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('c0d556c8-ce9a-5bea-9d20-58b5127859f1' AS UNIQUEIDENTIFIER) AND [script_checksum] = '952616DBF0F44D3D79BC088154A313E7186254FDD43CD8D3C2137DFE7B5285E2')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\etl\Stored Procedures\SSIS_BUDGET_2017_StageVolumes.sql", ID: {c0d556c8-ce9a-5bea-9d20-58b5127859f1} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('c0d556c8-ce9a-5bea-9d20-58b5127859f1' AS UNIQUEIDENTIFIER) AND [script_checksum] = '952616DBF0F44D3D79BC088154A313E7186254FDD43CD8D3C2137DFE7B5285E2')
  EXECUTE ('IF OBJECT_ID(''[etl].[SSIS_BUDGET_2017_StageVolumes]'') IS NOT NULL
	DROP PROCEDURE [etl].[SSIS_BUDGET_2017_StageVolumes];

');

GO
SET QUOTED_IDENTIFIER ON;

GO
SET ANSI_NULLS ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('c0d556c8-ce9a-5bea-9d20-58b5127859f1' AS UNIQUEIDENTIFIER) AND [script_checksum] = '952616DBF0F44D3D79BC088154A313E7186254FDD43CD8D3C2137DFE7B5285E2')
  EXECUTE ('create procedure [etl].[SSIS_BUDGET_2017_StageVolumes]
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
PROCEDURE NAME:		etl.SSIS_BUDGET_2017_StageVolumes
DESCRIPTION:		Transforms raw, landed volumes data to interim staging table ready for further processing and validation
ORIGIN DATE:		21-JUN-2017
ORIGINAL AUTHOR:	Greg M. Lucas

Returns
=======
@@Error - always zero on success

Additional Notes
================

REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		21-JUN-2017		GML		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------

**********************************************************************************************************************/
--</CommentHeader>

begin
	set nocount on;

	--! Standard/ExceptionHandler variables
	declare	@_FunctionName nvarchar(255) = quotename(object_schema_name(@@procid)) + ''.'' + quotename(object_name(@@procid));
	declare	@_Error int = 0;
	declare @_ReturnValue int
	declare	@_Message nvarchar(512);
	declare	@_ErrorContext nvarchar(512);
	declare	@_Step varchar(128);
	declare	@_Now datetime = getdate();

	--! Find out if we are already in a transaction
	declare	@_TxnIsExternal bit = case when @@trancount > 0 then 1 else 0 end;

	begin try
		--! If there no outer transaction, use an explicit transaction so we can roll this piece back if required 
		if @_TxnIsExternal = 0 begin tran;

		set @_Step = ''Clear Down SSIS_STG_BUDGET_2017_Volume''

		truncate table stg.SSIS_STG_BUDGET_2017_Volume;

		set @_Step = ''Clear Down SSIS_STG_BUDGET_2017_VolumeCheck''

		truncate table stg.SSIS_STG_BUDGET_2017_VolumeCheck;

		--!
		--!
		--!
		set @_Step = ''Populate SSIS_STG_BUDGET_2017_Volume''

		insert stg.SSIS_STG_BUDGET_2017_Volume
		(
		  NativeBusinessUnit
		, NativeProductCategory
		, BusinessUnitKey
		, ProductCategoryKey
		, Jan_YTD
		, Feb_YTD
		, Mar_YTD
		, Apr_YTD
		, May_YTD
		, Jun_YTD
		, Jul_YTD
		, Aug_YTD
		, Sep_YTD
		, Oct_YTD
		, Nov_YTD
		, Dec_YTD
		)
		select
			  src.BusinessUnit as [NativeBusinessUnit]
			, src.ProductGroup as [NativeProductCategory]
			-------------------------------------------------------------------------------
			, case
				when coalesce(src.BusinessUnit, '''') = '''' then -1 -- Not Specified at Source
				else coalesce(bu.BusinessUnitKey, -2) -- Lookup Not Found
			  end as [BusinessUnitKey]
			-------------------------------------------------------------------------------
			, case
				when coalesce(src.ProductGroup, '''') = '''' then -1 -- Not Specified at Source
				else coalesce(pc.ProductCategoryKey, -2) -- Lookup Not Found
			  end as [ProductCategoryKey]
			-------------------------------------------------------------------------------
			, try_cast(replace(src.Jan_YTD, '','', '''') as decimal(38,16)) as [Jan_YTD]
			, try_cast(replace(src.Feb_YTD, '','', '''') as decimal(38,16)) as [Feb_YTD]
			, try_cast(replace(src.Mar_YTD, '','', '''') as decimal(38,16)) as [Mar_YTD]
			, try_cast(replace(src.Apr_YTD, '','', '''') as decimal(38,16)) as [Apr_YTD]
			, try_cast(replace(src.May_YTD, '','', '''') as decimal(38,16)) as [May_YTD]
			, try_cast(replace(src.Jun_YTD, '','', '''') as decimal(38,16)) as [Jun_YTD]
			, try_cast(replace(src.Jul_YTD, '','', '''') as decimal(38,16)) as [Jul_YTD]
			, try_cast(replace(src.Aug_YTD, '','', '''') as decimal(38,16)) as [Aug_YTD]
			, try_cast(replace(src.Sep_YTD, '','', '''') as decimal(38,16)) as [Sep_YTD]
			, try_cast(replace(src.Oct_YTD, '','', '''') as decimal(38,16)) as [Oct_YTD]
			, try_cast(replace(src.Nov_YTD, '','', '''') as decimal(38,16)) as [Nov_YTD]
			, try_cast(replace(src.Dec_YTD, '','', '''') as decimal(38,16)) as [Dec_YTD]
		from
			stg.SSIS_LAND_BUDGET_2017_Volume as src
		inner join stg.SSIS_BUDGET_BusinessUnitLookup as lubu
			on lubu.BusinessUnitLookup = src.BusinessUnit
		inner join stg.SSIS_BUDGET_ProductCategoryLookup as lupc
			on lupc.ProductCategoryName = src.ProductGroup
		left join qvstg.BusinessUnit as bu
			on bu.NativeBusinessUnitKey = lubu.SBU
		left join qvstg.ProductCategory as pc
			on pc.NativeProductCategoryKey = cast(coalesce(lupc.QlikViewCategoryLevel4Id, lupc.QlikViewCategoryLevel3Id) as nvarchar(50))
		;

		--!
		--!
		--!
		set @_Step = ''Populate SSIS_STG_BUDGET_2017_VolumeCheck''

		insert stg.SSIS_STG_BUDGET_2017_VolumeCheck
		(
		  RegionName
		, ProductGroup
		, Jan_YTD
		, Feb_YTD
		, Mar_YTD
		, Apr_YTD
		, May_YTD
		, Jun_YTD
		, Jul_YTD
		, Aug_YTD
		, Sep_YTD
		, Oct_YTD
		, Nov_YTD
		, Dec_YTD
		)
		select
			  src.BusinessUnit as [RegionName]
			, src.ProductGroup as [ProductGroup]
			, try_cast(replace(src.Jan_YTD, '','', '''') as decimal(38,16)) as [Jan_YTD]
			, try_cast(replace(src.Feb_YTD, '','', '''') as decimal(38,16)) as [Feb_YTD]
			, try_cast(replace(src.Mar_YTD, '','', '''') as decimal(38,16)) as [Mar_YTD]
			, try_cast(replace(src.Apr_YTD, '','', '''') as decimal(38,16)) as [Apr_YTD]
			, try_cast(replace(src.May_YTD, '','', '''') as decimal(38,16)) as [May_YTD]
			, try_cast(replace(src.Jun_YTD, '','', '''') as decimal(38,16)) as [Jun_YTD]
			, try_cast(replace(src.Jul_YTD, '','', '''') as decimal(38,16)) as [Jul_YTD]
			, try_cast(replace(src.Aug_YTD, '','', '''') as decimal(38,16)) as [Aug_YTD]
			, try_cast(replace(src.Sep_YTD, '','', '''') as decimal(38,16)) as [Sep_YTD]
			, try_cast(replace(src.Oct_YTD, '','', '''') as decimal(38,16)) as [Oct_YTD]
			, try_cast(replace(src.Nov_YTD, '','', '''') as decimal(38,16)) as [Nov_YTD]
			, try_cast(replace(src.Dec_YTD, '','', '''') as decimal(38,16)) as [Dec_YTD]
		from
			stg.SSIS_LAND_BUDGET_2017_Volume as src
		inner join stg.SSIS_BUDGET_ProductCategoryGroupLookup as lupcg
			on lupcg.ProductCategoryGroupName = src.ProductGroup
		inner join stg.SSIS_BUDGET_RegionLookup as lur
			on lur.RegionLookup = src.BusinessUnit
		;

		--!
		--! Only commit transactions started within this procedure
		--!
		if @_TxnIsExternal = 0 and (xact_state() = 1 or @@trancount > 0) commit tran ;
	end try
	begin catch
		set @_ErrorContext = ''Failed to reset Business Unit control at step ''
			+ coalesce(''['' + @_Step + '']'', ''NULL'');

		--! If we have an uncommittable external transaction (see BOL), or a deadlock
		--! we can''t do anything else until we roll that back. Alternatively, if we
		--! started the transaction we should roll it back otherwise or let the caller
		--! handle its own external txn 
		if (xact_state() = -1) or (xact_state() = 1 and error_number() = 1205) or (xact_state() = 1 and @_TxnIsExternal = 0)
			begin
				rollback tran;
				set @_ErrorContext = @_ErrorContext + '' (Forced roll back all changes)'';
			end
		
		exec log4.ExceptionHandler
				  @ErrorContext   = @_ErrorContext
				, @ErrorProcedure = @_FunctionName
				, @ErrorNumber    = @_Error out
				, @ReturnMessage  = @_Message out;
	end catch

--/////////////////////////////////////////////////////////////////////////////////////////////////
EndProc:
--/////////////////////////////////////////////////////////////////////////////////////////////////

	--! Finally, throw an exception that will be detected by the caller
	if @_Error > 0 raiserror(@_Message, 16, 99);

	set nocount off;

	--! Return the value of @@ERROR (which will be zero on success)
	return (@_Error);
end
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('c0d556c8-ce9a-5bea-9d20-58b5127859f1' AS UNIQUEIDENTIFIER) AND [script_checksum] = '952616DBF0F44D3D79BC088154A313E7186254FDD43CD8D3C2137DFE7B5285E2')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', ''Transforms raw, landed volumes data to interim staging table ready for further processing and validation'', ''SCHEMA'', N''etl'', ''PROCEDURE'', N''SSIS_BUDGET_2017_StageVolumes'', NULL, NULL
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('c0d556c8-ce9a-5bea-9d20-58b5127859f1' AS UNIQUEIDENTIFIER) AND [script_checksum] = '952616DBF0F44D3D79BC088154A313E7186254FDD43CD8D3C2137DFE7B5285E2')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\etl\Stored Procedures\SSIS_BUDGET_2017_StageVolumes.sql", ID: {c0d556c8-ce9a-5bea-9d20-58b5127859f1} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('c0d556c8-ce9a-5bea-9d20-58b5127859f1' AS UNIQUEIDENTIFIER) AND [script_checksum] = '952616DBF0F44D3D79BC088154A313E7186254FDD43CD8D3C2137DFE7B5285E2')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('c0d556c8-ce9a-5bea-9d20-58b5127859f1' AS UNIQUEIDENTIFIER), '952616DBF0F44D3D79BC088154A313E7186254FDD43CD8D3C2137DFE7B5285E2', 'Programmable Objects\etl\Stored Procedures\SSIS_BUDGET_2017_StageVolumes.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ec8184f0-82d7-5ef9-b351-539162651d6c' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'CF6E99E88BD3ED9EEF14CA62AB3B07B03C18C522E18F331301ECA8C67429771F')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\etl\Stored Procedures\SSIS_BUDGET_2017_TransformSales.sql", ID: {ec8184f0-82d7-5ef9-b351-539162651d6c} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ec8184f0-82d7-5ef9-b351-539162651d6c' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'CF6E99E88BD3ED9EEF14CA62AB3B07B03C18C522E18F331301ECA8C67429771F')
  EXECUTE ('IF OBJECT_ID(''[etl].[SSIS_BUDGET_2017_TransformSales]'') IS NOT NULL
	DROP PROCEDURE [etl].[SSIS_BUDGET_2017_TransformSales];

');

GO
SET QUOTED_IDENTIFIER ON;

GO
SET ANSI_NULLS ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ec8184f0-82d7-5ef9-b351-539162651d6c' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'CF6E99E88BD3ED9EEF14CA62AB3B07B03C18C522E18F331301ECA8C67429771F')
  EXECUTE ('CREATE procedure [etl].[SSIS_BUDGET_2017_TransformSales]
(
  @LoadStart datetime = null
, @RowsAffected int = null out
)
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
PROCEDURE NAME:		etl.SSIS_BUDGET_2017_TransformSales
DESCRIPTION:		Transforms Budget Sales data in preparation for loading to the mart
ORIGIN DATE:		21-JUN-2017
ORIGINAL AUTHOR:	Greg M. Lucas

Returns
=======
@@Error - always zero on success

Additional Notes
================

REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		21-JUN-2017		GML		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------

**********************************************************************************************************************/
--</CommentHeader>

begin
	set nocount on;

	--! Standard/ExceptionHandler variables
	declare	@_FunctionName nvarchar(255) = quotename(object_schema_name(@@procid)) + ''.'' + quotename(object_name(@@procid));
	declare	@_Error int = 0;
	declare @_ReturnValue int
	declare	@_Message nvarchar(512);
	declare	@_ErrorContext nvarchar(512);
	declare	@_Step varchar(128);

	--! Find out if we are already in a transaction
	declare	@_TxnIsExternal bit = case when @@trancount > 0 then 1 else 0 end;

	begin try
		--! If Load Start time hasn''t been passed in then set it now
		set @LoadStart = coalesce(@LoadStart, getdate())

		--! If there no outer transaction, use an explicit transaction so we can roll this piece back if required 
		if @_TxnIsExternal = 0 begin tran;

		set @_Step = ''Upsert BudgetSales'' ;

		;with aggregateCte
		as
		(
			select
				  BusinessUnitKey
				, DateKey
				, count(*) as [LineCount]
				, cast(round(sum(coalesce(InstallationServices_10000 * 1000, 0)), 4) as decimal(28,4)) as [InstallationServices]
				, cast(round(sum(coalesce(ProducedGoods_10100 * 1000, 0)), 4) as decimal(28,4)) as [ProducedGoods]
				, cast(round(sum(coalesce(GroupGoods_10200 * 1000, 0)), 4) as decimal(28,4)) as [GroupGoods]
				, cast(round(sum(coalesce(CommercialGoods_10300 * 1000, 0)), 4) as decimal(28,4)) as [CommercialGoods]
				, cast(round(sum(coalesce(ExternalSales_11890 * 1000, 0)), 4) as decimal(28,4)) as [ExternalSales]
				, cast(round(sum(coalesce(IC_Transf_SBU_11000 * 1000, 0)), 4) as decimal(28,4)) as [IC_Transf_SBU]
				, cast(round(sum(coalesce(IC_Transf_Region_11100 * 1000, 0)), 4) as decimal(28,4)) as [IC_Transf_Region]
				, cast(round(sum(coalesce(IC_Transf_Abroad_11200 * 1000, 0)), 4) as decimal(28,4)) as [IC_Transf_Abroad]
				, cast(round(sum(coalesce(IC_Transf_US_11300 * 1000, 0)), 4) as decimal(28,4)) as [IC_Transf_US]
				, cast(round(sum(coalesce(Total_IC_Sales * 1000, 0)), 4) as decimal(28,4)) as [Total_IC_Sales]
				, cast(round(sum(coalesce(TotalSalesAndTransfers_11990 * 1000, 0)), 4) as decimal(28,4)) as [TotalSalesAndTransfers]
			from
				stg.SSIS_STG_BUDGET_2017_Sales
			group by
				  BusinessUnitKey
				, DateKey
		)
		, sourceCte
		as
		(
			select
				  BusinessUnitKey
				, DateKey
				, LineCount
                , InstallationServices
                , ProducedGoods
                , GroupGoods
                , CommercialGoods
                , ExternalSales
                , IC_Transf_SBU
                , IC_Transf_Region
                , IC_Transf_Abroad
                , IC_Transf_US
                , Total_IC_Sales
                , TotalSalesAndTransfers
				---------------------------------------------------------------------------------------------------
				--! Encapsulate ALL non-key columns into a hash value to speed up CDC checks during susbseqent loads
				, convert(nvarchar(32), hashbytes(''MD5''
					, coalesce(cast(LineCount as nvarchar(30)), ''LineCount'')
					+ coalesce(cast(InstallationServices as nvarchar(30)), ''ProducedGoods'')
					+ coalesce(cast(ProducedGoods as nvarchar(30)), ''ProducedGoods'')
					+ coalesce(cast(GroupGoods as nvarchar(30)), ''GroupGoods'')
					+ coalesce(cast(CommercialGoods as nvarchar(30)), ''CommercialGoods'')
					+ coalesce(cast(ExternalSales as nvarchar(30)), ''ExternalSales'')
					+ coalesce(cast(IC_Transf_SBU as nvarchar(30)), ''IC_Transf_SBU'')
					+ coalesce(cast(IC_Transf_Region as nvarchar(30)), ''IC_Transf_Region'')
					+ coalesce(cast(IC_Transf_Abroad as nvarchar(30)), ''IC_Transf_Abroad'')
					+ coalesce(cast(IC_Transf_US as nvarchar(30)), ''IC_Transf_US'')
					+ coalesce(cast(Total_IC_Sales as nvarchar(30)), ''Total_IC_Sales'')
					+ coalesce(cast(TotalSalesAndTransfers as nvarchar(30)), ''TotalSalesAndTransfers'')), 2) as [EtlDeltaHash]
				---------------------------------------------------------------------------------------------------
			from
				aggregateCte
		)
		merge into qvstg.BudgetSales as tgt
		using sourceCte as src
			on src.BusinessUnitKey = tgt.BusinessUnitKey
			and src.DateKey = tgt.BudgetMonthDateKey
		when not matched by target
			then insert
			(  
			  EtlDeltaHash
			, EtlCreatedOn
			, EtlCreatedBy
			, EtlUpdatedOn
			, EtlUpdatedBy
			, EtlDeletedOn
			, EtlDeletedBy
			, IsDeleted
			, LineCount
			, BusinessUnitKey
			, BudgetMonthDateKey
			, InstallationServices
			, ProducedGoods
			, GroupGoods
			, CommercialGoods
			, ExternalSales
			, IC_Transf_SBU
			, IC_Transf_Region
			, IC_Transf_Abroad
			, IC_Transf_US
			, Total_IC_Sales
			, TotalSalesAndTransfers
			)
			values
			(  
			  src.EtlDeltaHash
			, @LoadStart
			, @_FunctionName
			, @LoadStart
			, @_FunctionName
			, null -- EtlDeletedOn
			, null -- EtlDeletedBy
			, ''N'' -- IsDeleted
			, src.LineCount
			, src.BusinessUnitKey
			, src.DateKey
			, src.InstallationServices
			, src.ProducedGoods
			, src.GroupGoods
			, src.CommercialGoods
			, src.ExternalSales
			, src.IC_Transf_SBU
			, src.IC_Transf_Region
			, src.IC_Transf_Abroad
			, src.IC_Transf_US
			, src.Total_IC_Sales
			, src.TotalSalesAndTransfers
			)
		when matched and tgt.EtlDeltaHash <> src.EtlDeltaHash
			then update set
					  tgt.EtlDeltaHash = src.EtlDeltaHash
					, tgt.EtlUpdatedOn = @LoadStart
					, tgt.EtlUpdatedBy = @_FunctionName
					, tgt.IsDeleted = ''N''
					, tgt.LineCount = src.LineCount
					, tgt.InstallationServices = src.InstallationServices
					, tgt.ProducedGoods = src.ProducedGoods
					, tgt.GroupGoods = src.GroupGoods
					, tgt.CommercialGoods = src.CommercialGoods
					, tgt.ExternalSales = src.ExternalSales
					, tgt.IC_Transf_SBU = src.IC_Transf_SBU
					, tgt.IC_Transf_Region = src.IC_Transf_Region
					, tgt.IC_Transf_Abroad = src.IC_Transf_Abroad
					, tgt.IC_Transf_US = src.IC_Transf_US
					, tgt.Total_IC_Sales = src.Total_IC_Sales
					, tgt.TotalSalesAndTransfers = src.TotalSalesAndTransfers
		when not matched by source
			then update set
					  tgt.IsDeleted = ''Y''
					, tgt.EtlDeletedOn = @LoadStart
					, tgt.EtlDeletedBy = @_FunctionName
					, tgt.EtlUpdatedOn = @LoadStart
					, tgt.EtlUpdatedBy = @_FunctionName
		;

		set @RowsAffected = @@rowcount;

		--!
		--! Only commit transactions started within this procedure
		--!
		if @_TxnIsExternal = 0 and (xact_state() = 1 or @@trancount > 0) commit tran ;
	end try
	begin catch
		set @_ErrorContext = ''Failed to refresh product dimension at step ''
			+ coalesce(''['' + @_Step + '']'', ''NULL'');

		--! If we have an uncommittable external transaction (see BOL), or a deadlock
		--! we can''t do anything else until we roll that back. Alternatively, if we
		--! started the transaction we should roll it back otherwise or let the caller
		--! handle its own external txn 
		if (xact_state() = -1) or (xact_state() = 1 and error_number() = 1205) or (xact_state() = 1 and @_TxnIsExternal = 0)
			begin
				rollback tran;
				set @_ErrorContext = @_ErrorContext + '' (Forced roll back all changes)'';
			end
		
		exec log4.ExceptionHandler
				  @ErrorContext   = @_ErrorContext
				, @ErrorProcedure = @_FunctionName
				, @ErrorNumber    = @_Error out
				, @ReturnMessage  = @_Message out;
	end catch

--/////////////////////////////////////////////////////////////////////////////////////////////////
EndProc:
--/////////////////////////////////////////////////////////////////////////////////////////////////

	--! Finally, throw an exception that will be detected by the caller
	if @_Error > 0 raiserror(@_Message, 16, 99);

	set nocount off;

	--! Return the value of @@ERROR (which will be zero on success)
	return (@_Error);
end
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ec8184f0-82d7-5ef9-b351-539162651d6c' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'CF6E99E88BD3ED9EEF14CA62AB3B07B03C18C522E18F331301ECA8C67429771F')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', ''Transforms Budget Sales data in preparation for loading to the mart'', ''SCHEMA'', N''etl'', ''PROCEDURE'', N''SSIS_BUDGET_2017_TransformSales'', NULL, NULL
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ec8184f0-82d7-5ef9-b351-539162651d6c' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'CF6E99E88BD3ED9EEF14CA62AB3B07B03C18C522E18F331301ECA8C67429771F')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\etl\Stored Procedures\SSIS_BUDGET_2017_TransformSales.sql", ID: {ec8184f0-82d7-5ef9-b351-539162651d6c} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ec8184f0-82d7-5ef9-b351-539162651d6c' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'CF6E99E88BD3ED9EEF14CA62AB3B07B03C18C522E18F331301ECA8C67429771F')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('ec8184f0-82d7-5ef9-b351-539162651d6c' AS UNIQUEIDENTIFIER), 'CF6E99E88BD3ED9EEF14CA62AB3B07B03C18C522E18F331301ECA8C67429771F', 'Programmable Objects\etl\Stored Procedures\SSIS_BUDGET_2017_TransformSales.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('baa3fc97-2ffd-521e-bf0e-b384f9abcc58' AS UNIQUEIDENTIFIER) AND [script_checksum] = '30F426F4095BCAB95CB684177F48D0EEE92639010063A1D84CE2224199E43C99')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\etl\Stored Procedures\SSIS_BUDGET_2017_TransformVolumes.sql", ID: {baa3fc97-2ffd-521e-bf0e-b384f9abcc58} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('baa3fc97-2ffd-521e-bf0e-b384f9abcc58' AS UNIQUEIDENTIFIER) AND [script_checksum] = '30F426F4095BCAB95CB684177F48D0EEE92639010063A1D84CE2224199E43C99')
  EXECUTE ('IF OBJECT_ID(''[etl].[SSIS_BUDGET_2017_TransformVolumes]'') IS NOT NULL
	DROP PROCEDURE [etl].[SSIS_BUDGET_2017_TransformVolumes];

');

GO
SET QUOTED_IDENTIFIER ON;

GO
SET ANSI_NULLS ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('baa3fc97-2ffd-521e-bf0e-b384f9abcc58' AS UNIQUEIDENTIFIER) AND [script_checksum] = '30F426F4095BCAB95CB684177F48D0EEE92639010063A1D84CE2224199E43C99')
  EXECUTE ('create procedure [etl].[SSIS_BUDGET_2017_TransformVolumes]
(
  @LoadStart datetime = null
, @RowsAffected int = null out
)
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
PROCEDURE NAME:		etl.SSIS_BUDGET_2017_TransformVolumes
DESCRIPTION:		Transforms Budget Sales data in preparation for loading to the mart
ORIGIN DATE:		21-JUN-2017
ORIGINAL AUTHOR:	Greg M. Lucas

Returns
=======
@@Error - always zero on success

Additional Notes
================

REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		21-JUN-2017		GML		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------

**********************************************************************************************************************/
--</CommentHeader>

begin
	set nocount on;

	--! Standard/ExceptionHandler variables
	declare	@_FunctionName nvarchar(255) = quotename(object_schema_name(@@procid)) + ''.'' + quotename(object_name(@@procid));
	declare	@_Error int = 0;
	declare @_ReturnValue int
	declare	@_Message nvarchar(512);
	declare	@_ErrorContext nvarchar(512);
	declare	@_Step varchar(128);

	--! Find out if we are already in a transaction
	declare	@_TxnIsExternal bit = case when @@trancount > 0 then 1 else 0 end;

	begin try
		--! If Load Start time hasn''t been passed in then set it now
		set @LoadStart = coalesce(@LoadStart, getdate())

		--! If there no outer transaction, use an explicit transaction so we can roll this piece back if required 
		if @_TxnIsExternal = 0 begin tran;

		set @_Step = ''Upsert BudgetVolumes''

		;with aggregateCte
		as
		(
			select
				  BusinessUnitKey
				, ProductCategoryKey
				, count(*) as [LineCount]
				, cast(round(sum(coalesce(Jan_YTD * 1000, 0)), 4) as decimal(28,4)) as [Jan_YTD]
				, cast(round(sum(coalesce(Feb_YTD * 1000, 0)), 4) as decimal(28,4)) as [Feb_YTD]
				, cast(round(sum(coalesce(Mar_YTD * 1000, 0)), 4) as decimal(28,4)) as [Mar_YTD]
				, cast(round(sum(coalesce(Apr_YTD * 1000, 0)), 4) as decimal(28,4)) as [Apr_YTD]
				, cast(round(sum(coalesce(May_YTD * 1000, 0)), 4) as decimal(28,4)) as [May_YTD]
				, cast(round(sum(coalesce(Jun_YTD * 1000, 0)), 4) as decimal(28,4)) as [Jun_YTD]
				, cast(round(sum(coalesce(Jul_YTD * 1000, 0)), 4) as decimal(28,4)) as [Jul_YTD]
				, cast(round(sum(coalesce(Aug_YTD * 1000, 0)), 4) as decimal(28,4)) as [Aug_YTD]
				, cast(round(sum(coalesce(Sep_YTD * 1000, 0)), 4) as decimal(28,4)) as [Sep_YTD]
				, cast(round(sum(coalesce(Oct_YTD * 1000, 0)), 4) as decimal(28,4)) as [Oct_YTD]
				, cast(round(sum(coalesce(Nov_YTD * 1000, 0)), 4) as decimal(28,4)) as [Nov_YTD]
				, cast(round(sum(coalesce(Dec_YTD * 1000, 0)), 4) as decimal(28,4)) as [Dec_YTD]
			from
				stg.SSIS_STG_BUDGET_2017_Volume
			group by
				  BusinessUnitKey
				, ProductCategoryKey
		)
		, sourceCte
		as
		(
			select
				  BusinessUnitKey
				, ProductCategoryKey
				, LineCount
                , Jan_YTD
                , Feb_YTD
                , Mar_YTD
                , Apr_YTD
                , May_YTD
                , Jun_YTD
                , Jul_YTD
                , Aug_YTD
                , Sep_YTD
                , Oct_YTD
                , Nov_YTD
                , Dec_YTD
				---------------------------------------------------------------------------------------------------
				--! Encapsulate ALL non-key columns into a hash value to speed up CDC checks during susbseqent loads
				, convert(nvarchar(32), hashbytes(''MD5''
					, coalesce(cast(nullif(LineCount, 0) as nvarchar(30)), ''LineCount'')
					+ coalesce(cast(nullif(Jan_YTD, 0) as nvarchar(30)), ''Jan_YTD'')
					+ coalesce(cast(nullif(Feb_YTD, 0) as nvarchar(30)), ''Feb_YTD'')
					+ coalesce(cast(nullif(Mar_YTD, 0) as nvarchar(30)), ''Mar_YTD'')
					+ coalesce(cast(nullif(Apr_YTD, 0) as nvarchar(30)), ''Apr_YTD'')
					+ coalesce(cast(nullif(May_YTD, 0) as nvarchar(30)), ''May_YTD'')
					+ coalesce(cast(nullif(Jun_YTD, 0) as nvarchar(30)), ''Jun_YTD'')
					+ coalesce(cast(nullif(Jul_YTD, 0) as nvarchar(30)), ''Jul_YTD'')
					+ coalesce(cast(nullif(Aug_YTD, 0) as nvarchar(30)), ''Aug_YTD'')
					+ coalesce(cast(nullif(Sep_YTD, 0) as nvarchar(30)), ''Sep_YTD'')
					+ coalesce(cast(nullif(Oct_YTD, 0) as nvarchar(30)), ''Oct_YTD'')
					+ coalesce(cast(nullif(Nov_YTD, 0) as nvarchar(30)), ''Nov_YTD'')
					+ coalesce(cast(nullif(Dec_YTD, 0) as nvarchar(30)), ''Dec_YTD'')), 2) as [EtlDeltaHash]
				---------------------------------------------------------------------------------------------------
			from
				aggregateCte
		)
		merge into qvstg.BudgetVolumes as tgt
		using sourceCte as src
			on src.BusinessUnitKey = tgt.BusinessUnitKey
			and src.ProductCategoryKey = tgt.ProductCategoryKey
		when not matched by target
			then insert
			(  
			  EtlDeltaHash
			, EtlCreatedOn
			, EtlCreatedBy
			, EtlUpdatedOn
			, EtlUpdatedBy
			, EtlDeletedOn
			, EtlDeletedBy
			, IsDeleted
			, LineCount
			, BusinessUnitKey
			, ProductCategoryKey
			, Jan_YTD
			, Feb_YTD
			, Mar_YTD
			, Apr_YTD
			, May_YTD
			, Jun_YTD
			, Jul_YTD
			, Aug_YTD
			, Sep_YTD
			, Oct_YTD
			, Nov_YTD
			, Dec_YTD
			)
			values
			(  
			  src.EtlDeltaHash
			, @LoadStart
			, @_FunctionName
			, @LoadStart
			, @_FunctionName
			, null -- EtlDeletedOn
			, null -- EtlDeletedBy
			, ''N'' -- IsDeleted
			, src.LineCount
			, src.BusinessUnitKey
			, src.ProductCategoryKey
			, src.Jan_YTD
			, src.Feb_YTD
			, src.Mar_YTD
			, src.Apr_YTD
			, src.May_YTD
			, src.Jun_YTD
			, src.Jul_YTD
			, src.Aug_YTD
			, src.Sep_YTD
			, src.Oct_YTD
			, src.Nov_YTD
			, src.Dec_YTD
			)
		when matched and tgt.EtlDeltaHash <> src.EtlDeltaHash
			then update set
					  tgt.EtlDeltaHash = src.EtlDeltaHash
					, tgt.EtlUpdatedOn = @LoadStart
					, tgt.EtlUpdatedBy = @_FunctionName
					, tgt.IsDeleted = ''N''
					, tgt.LineCount = src.LineCount
					, tgt.Jan_YTD = src.Jan_YTD
					, tgt.Feb_YTD = src.Feb_YTD
					, tgt.Mar_YTD = src.Mar_YTD
					, tgt.Apr_YTD = src.Apr_YTD
					, tgt.May_YTD = src.May_YTD
					, tgt.Jun_YTD = src.Jun_YTD
					, tgt.Jul_YTD = src.Jul_YTD
					, tgt.Aug_YTD = src.Aug_YTD
					, tgt.Sep_YTD = src.Sep_YTD
					, tgt.Oct_YTD = src.Oct_YTD
					, tgt.Nov_YTD = src.Nov_YTD
					, tgt.Dec_YTD = src.Dec_YTD
		when not matched by source
			then update set
					  tgt.IsDeleted = ''Y''
					, tgt.EtlDeletedOn = @LoadStart
					, tgt.EtlDeletedBy = @_FunctionName
					, tgt.EtlUpdatedOn = @LoadStart
					, tgt.EtlUpdatedBy = @_FunctionName
		;

		set @RowsAffected = @@rowcount;

		--!
		--! Only commit transactions started within this procedure
		--!
		if @_TxnIsExternal = 0 and (xact_state() = 1 or @@trancount > 0) commit tran ;
	end try
	begin catch
		set @_ErrorContext = ''Failed to refresh product dimension at step ''
			+ coalesce(''['' + @_Step + '']'', ''NULL'');

		--! If we have an uncommittable external transaction (see BOL), or a deadlock
		--! we can''t do anything else until we roll that back. Alternatively, if we
		--! started the transaction we should roll it back otherwise or let the caller
		--! handle its own external txn 
		if (xact_state() = -1) or (xact_state() = 1 and error_number() = 1205) or (xact_state() = 1 and @_TxnIsExternal = 0)
			begin
				rollback tran;
				set @_ErrorContext = @_ErrorContext + '' (Forced roll back all changes)'';
			end
		
		exec log4.ExceptionHandler
				  @ErrorContext   = @_ErrorContext
				, @ErrorProcedure = @_FunctionName
				, @ErrorNumber    = @_Error out
				, @ReturnMessage  = @_Message out;
	end catch

--/////////////////////////////////////////////////////////////////////////////////////////////////
EndProc:
--/////////////////////////////////////////////////////////////////////////////////////////////////

	--! Finally, throw an exception that will be detected by the caller
	if @_Error > 0 raiserror(@_Message, 16, 99);

	set nocount off;

	--! Return the value of @@ERROR (which will be zero on success)
	return (@_Error);
end
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('baa3fc97-2ffd-521e-bf0e-b384f9abcc58' AS UNIQUEIDENTIFIER) AND [script_checksum] = '30F426F4095BCAB95CB684177F48D0EEE92639010063A1D84CE2224199E43C99')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', ''Transforms Budget Sales data in preparation for loading to the mart'', ''SCHEMA'', N''etl'', ''PROCEDURE'', N''SSIS_BUDGET_2017_TransformVolumes'', NULL, NULL
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('baa3fc97-2ffd-521e-bf0e-b384f9abcc58' AS UNIQUEIDENTIFIER) AND [script_checksum] = '30F426F4095BCAB95CB684177F48D0EEE92639010063A1D84CE2224199E43C99')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\etl\Stored Procedures\SSIS_BUDGET_2017_TransformVolumes.sql", ID: {baa3fc97-2ffd-521e-bf0e-b384f9abcc58} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('baa3fc97-2ffd-521e-bf0e-b384f9abcc58' AS UNIQUEIDENTIFIER) AND [script_checksum] = '30F426F4095BCAB95CB684177F48D0EEE92639010063A1D84CE2224199E43C99')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('baa3fc97-2ffd-521e-bf0e-b384f9abcc58' AS UNIQUEIDENTIFIER), '30F426F4095BCAB95CB684177F48D0EEE92639010063A1D84CE2224199E43C99', 'Programmable Objects\etl\Stored Procedures\SSIS_BUDGET_2017_TransformVolumes.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('8e9c1173-a546-5dd2-830a-58c55c40ffb8' AS UNIQUEIDENTIFIER) AND [script_checksum] = '9506DFBB81BE055C22BEC7DC9D758824CB1570C1765F758893F22C2633FD82DA')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\etl\Stored Procedures\SSIS_BUDGET_2017_ValidateSales.sql", ID: {8e9c1173-a546-5dd2-830a-58c55c40ffb8} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('8e9c1173-a546-5dd2-830a-58c55c40ffb8' AS UNIQUEIDENTIFIER) AND [script_checksum] = '9506DFBB81BE055C22BEC7DC9D758824CB1570C1765F758893F22C2633FD82DA')
  EXECUTE ('IF OBJECT_ID(''[etl].[SSIS_BUDGET_2017_ValidateSales]'') IS NOT NULL
	DROP PROCEDURE [etl].[SSIS_BUDGET_2017_ValidateSales];

');

GO
SET QUOTED_IDENTIFIER ON;

GO
SET ANSI_NULLS ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('8e9c1173-a546-5dd2-830a-58c55c40ffb8' AS UNIQUEIDENTIFIER) AND [script_checksum] = '9506DFBB81BE055C22BEC7DC9D758824CB1570C1765F758893F22C2633FD82DA')
  EXECUTE ('create procedure [etl].[SSIS_BUDGET_2017_ValidateSales]
(
  @ShowResults bit = 0
)
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
PROCEDURE NAME:		etl.SSIS_BUDGET_2017_ValidateSales
DESCRIPTION:		Includes all validation checks for Budget Sales by Region and Month (will throw an exception on any failure)
ORIGIN DATE:		21-JUN-2017
ORIGINAL AUTHOR:	Greg M. Lucas

Returns
=======
@@Error - always zero on success

Additional Notes
================

REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		21-JUN-2017		GML		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------

**********************************************************************************************************************/
--</CommentHeader>

begin
	set nocount on;

	--! Standard/ExceptionHandler variables
	declare	@_FunctionName nvarchar(255) = quotename(object_schema_name(@@procid)) + ''.'' + quotename(object_name(@@procid));
	declare	@_RowCount int = 0;
	declare	@_Error int = 0;
	declare @_ReturnValue int
	declare	@_Message nvarchar(512);
	declare	@_ErrorContext nvarchar(512);
	declare	@_Step varchar(128);
	declare	@_Now datetime = getdate();

	begin try
		set @_Step = ''Check that Sales by Region and Month are correct''

		;with salesToCheckCte
		as
		(
			select
				  NativeRegionName
				, NativeMonthCode
				-------------------------------------------------------------------------------
				, sum(coalesce(InstallationServices_10000, 0))
					+ sum(coalesce(ProducedGoods_10100, 0))
					+ sum(coalesce(GroupGoods_10200, 0))
					+ sum(coalesce(CommercialGoods_10300, 0))
					+ sum(coalesce(ExternalSales_11890, 0))
					+ sum(coalesce(IC_Transf_SBU_11000, 0))
					+ sum(coalesce(IC_Transf_Region_11100, 0))
					+ sum(coalesce(IC_Transf_Abroad_11200, 0))
					+ sum(coalesce(IC_Transf_US_11300, 0))
					+ sum(coalesce(Total_IC_Sales, 0))
					+ sum(coalesce(TotalSalesAndTransfers_11990, 0)) as [SalesTotal]
				-------------------------------------------------------------------------------
				, sum(coalesce(InstallationServices_10000, 0.0)) as [InstallationServices_10000]
				, sum(coalesce(ProducedGoods_10100, 0.0)) as [ProducedGoods_10100]
				, sum(coalesce(GroupGoods_10200, 0.0)) as [GroupGoods_10200]
				, sum(coalesce(CommercialGoods_10300, 0.0)) as [CommercialGoods_10300]
				, sum(coalesce(ExternalSales_11890, 0.0)) as [ExternalSales_11890]
				, sum(coalesce(IC_Transf_SBU_11000, 0.0)) as [IC_Transf_SBU_11000]
				, sum(coalesce(IC_Transf_Region_11100, 0.0)) as [IC_Transf_Region_11100]
				, sum(coalesce(IC_Transf_Abroad_11200, 0.0)) as [IC_Transf_Abroad_11200]
				, sum(coalesce(IC_Transf_US_11300, 0.0)) as [IC_Transf_US_11300]
				, sum(coalesce(Total_IC_Sales, 0.0)) as [Total_IC_Sales]
				, sum(coalesce(TotalSalesAndTransfers_11990, 0.0)) as [TotalSalesAndTransfers_11990]
			from
				stg.SSIS_STG_BUDGET_2017_Sales
			group by
				  NativeRegionName
				, NativeMonthCode
		)
		, resultCte as
		(
			select
				  ctrl.RegionName
				, ctrl.MonthCode
				-------------------------------------------------------------------------------
				, coalesce(ctrl.InstallationServices_10000, 0)
					+ coalesce(ctrl.ProducedGoods_10100, 0)
					+ coalesce(ctrl.GroupGoods_10200, 0)
					+ coalesce(ctrl.CommercialGoods_10300, 0)
					+ coalesce(ctrl.ExternalSales_11890, 0)
					+ coalesce(ctrl.IC_Transf_SBU_11000, 0)
					+ coalesce(ctrl.IC_Transf_Region_11100, 0)
					+ coalesce(ctrl.IC_Transf_Abroad_11200, 0)
					+ coalesce(ctrl.IC_Transf_US_11300, 0)
					+ coalesce(ctrl.Total_IC_Sales, 0)
					+ coalesce(ctrl.TotalSalesAndTransfers_11990, 0) as [ControlTotal]
				-------------------------------------------------------------------------------
				, s.SalesTotal
				, ctrl.InstallationServices_10000 as [CTRL_InstallationServices]
				, s.InstallationServices_10000 as [SALES_InstallationServices]
				, ctrl.ProducedGoods_10100 as [CTRL_ProducedGoods]
				, s.ProducedGoods_10100 as [SALES_ProducedGoods]
				, ctrl.GroupGoods_10200 as [CTRL_GroupGoods]
				, s.GroupGoods_10200 as [SALES_GroupGoods]
				, ctrl.CommercialGoods_10300 as [CTRL_CommercialGoods]
				, s.CommercialGoods_10300 as [SALES_CommercialGoods]
				, ctrl.ExternalSales_11890 as [CTRL_ExternalSales]
				, s.ExternalSales_11890 as [SALES_ExternalSales]
				, ctrl.IC_Transf_SBU_11000 as [CTRL_IC_Transf_SBU]
				, s.IC_Transf_SBU_11000 as [SALES_IC_Transf_SBU]
				, ctrl.IC_Transf_Region_11100 as [CTRL_IC_Transf_Region]
				, s.IC_Transf_Region_11100 as [SALES_IC_Transf_Region]
				, ctrl.IC_Transf_Abroad_11200 as [CTRL_IC_Transf_Abroad]
				, s.IC_Transf_Abroad_11200 as [SALES_IC_Transf_Abroad]
				, ctrl.IC_Transf_US_11300 as [CTRL_IC_Transf_US]
				, s.IC_Transf_US_11300 as [SALES_IC_Transf_US]
				, ctrl.Total_IC_Sales as [CTRL_Total_IC_Sales]
				, s.Total_IC_Sales as [SALES_Total_IC_Sales]
				, ctrl.TotalSalesAndTransfers_11990 as [CTRL_TotalSalesAndTransfers]
				, s.TotalSalesAndTransfers_11990 as [SALES_TotalSalesAndTransfers]
			from
				stg.SSIS_STG_BUDGET_2017_SalesCheck as ctrl
			full outer join salesToCheckCte as s
				on s.NativeRegionName = ctrl.RegionName
				and s.NativeMonthCode = ctrl.MonthCode
			where
				ctrl.RegionName not in (''ELIM Icopal/GAF Europe division'', ''Icopal/GAF Europe division'')
		)
		select
			  RegionName
			, MonthCode
			, round(ControlTotal * 1000, 4) as [ControlTotal]
			, round(SalesTotal * 1000, 4) as [SalesTotal]
			, CTRL_InstallationServices
			, SALES_InstallationServices
			, CTRL_ProducedGoods
			, SALES_ProducedGoods
			, CTRL_GroupGoods
			, SALES_GroupGoods
			, CTRL_CommercialGoods
			, SALES_CommercialGoods
			, CTRL_ExternalSales
			, SALES_ExternalSales
			, CTRL_IC_Transf_SBU
			, SALES_IC_Transf_SBU
			, CTRL_IC_Transf_Region
			, SALES_IC_Transf_Region
			, CTRL_IC_Transf_Abroad
			, SALES_IC_Transf_Abroad
			, CTRL_IC_Transf_US
			, SALES_IC_Transf_US
			, CTRL_Total_IC_Sales
			, SALES_Total_IC_Sales
			, CTRL_TotalSalesAndTransfers
			, SALES_TotalSalesAndTransfers
		into #tmp
		from
			resultCte
		where
			round(coalesce(ControlTotal * 1000, -9999.9999), 4) <> round(coalesce(SalesTotal * 1000, -9999.9999), 4) -- 0

		set @_RowCount = @@rowcount ;

		if @ShowResults = 1
			select * from #tmp ;

		if @_RowCount > 0
			raiserror(''Found %i records with total sales value mismatch'', 16, 0, @_RowCount) ;
	end try
	begin catch
		set @_ErrorContext = ''Failed to validate Sales by Region and Month''
			+ coalesce(''['' + @_Step + '']'', ''NULL'');

		--! If we have an uncommittable external transaction (see BOL), or a deadlock
		--! we can''t do anything else until we roll that back. Alternatively, if we
		--! started the transaction we should roll it back
		if (xact_state() = -1) or (xact_state() = 1 and error_number() = 1205)
			begin
				rollback tran;
				set @_ErrorContext = @_ErrorContext + '' (Forced roll back all changes)'';
			end
		
		exec log4.ExceptionHandler
				  @ErrorContext   = @_ErrorContext
				, @ErrorProcedure = @_FunctionName
				, @ErrorNumber    = @_Error out
				, @ReturnMessage  = @_Message out;
	end catch

--/////////////////////////////////////////////////////////////////////////////////////////////////
EndProc:
--/////////////////////////////////////////////////////////////////////////////////////////////////

	--! Finally, throw an exception that will be detected by the caller
	if @_Error > 0 raiserror(@_Message, 16, 99);

	set nocount off;

	--! Return the value of @@ERROR (which will be zero on success)
	return (@_Error);
end
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('8e9c1173-a546-5dd2-830a-58c55c40ffb8' AS UNIQUEIDENTIFIER) AND [script_checksum] = '9506DFBB81BE055C22BEC7DC9D758824CB1570C1765F758893F22C2633FD82DA')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', ''Includes all validation checks for Budget Sales by Region and Month (will throw an exception on any failure)'', ''SCHEMA'', N''etl'', ''PROCEDURE'', N''SSIS_BUDGET_2017_ValidateSales'', NULL, NULL
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('8e9c1173-a546-5dd2-830a-58c55c40ffb8' AS UNIQUEIDENTIFIER) AND [script_checksum] = '9506DFBB81BE055C22BEC7DC9D758824CB1570C1765F758893F22C2633FD82DA')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\etl\Stored Procedures\SSIS_BUDGET_2017_ValidateSales.sql", ID: {8e9c1173-a546-5dd2-830a-58c55c40ffb8} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('8e9c1173-a546-5dd2-830a-58c55c40ffb8' AS UNIQUEIDENTIFIER) AND [script_checksum] = '9506DFBB81BE055C22BEC7DC9D758824CB1570C1765F758893F22C2633FD82DA')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('8e9c1173-a546-5dd2-830a-58c55c40ffb8' AS UNIQUEIDENTIFIER), '9506DFBB81BE055C22BEC7DC9D758824CB1570C1765F758893F22C2633FD82DA', 'Programmable Objects\etl\Stored Procedures\SSIS_BUDGET_2017_ValidateSales.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('27911421-928e-59e4-ac71-a22766f8d91a' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'A2261F5DF1D81D3E195B20DEAB1528073DEF9ABA968797609682837DDA881AA7')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\etl\Stored Procedures\SSIS_BUDGET_2017_ValidateVolumes.sql", ID: {27911421-928e-59e4-ac71-a22766f8d91a} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('27911421-928e-59e4-ac71-a22766f8d91a' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'A2261F5DF1D81D3E195B20DEAB1528073DEF9ABA968797609682837DDA881AA7')
  EXECUTE ('IF OBJECT_ID(''[etl].[SSIS_BUDGET_2017_ValidateVolumes]'') IS NOT NULL
	DROP PROCEDURE [etl].[SSIS_BUDGET_2017_ValidateVolumes];

');

GO
SET QUOTED_IDENTIFIER ON;

GO
SET ANSI_NULLS ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('27911421-928e-59e4-ac71-a22766f8d91a' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'A2261F5DF1D81D3E195B20DEAB1528073DEF9ABA968797609682837DDA881AA7')
  EXECUTE ('create procedure [etl].[SSIS_BUDGET_2017_ValidateVolumes]
(
  @ShowResults bit = 0
)
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
PROCEDURE NAME:		etl.SSIS_BUDGET_2017_ValidateVolumes
DESCRIPTION:		Includes all validation checks for Budget Volumes by Product Category Group (will throw an exception on any failure)
ORIGIN DATE:		21-JUN-2017
ORIGINAL AUTHOR:	Greg M. Lucas

Returns
=======
@@Error - always zero on success

Additional Notes
================

REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		21-JUN-2017		GML		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------

**********************************************************************************************************************/
--</CommentHeader>

begin
	set nocount on;

	--! Standard/ExceptionHandler variables
	declare	@_FunctionName nvarchar(255) = quotename(object_schema_name(@@procid)) + ''.'' + quotename(object_name(@@procid));
	declare	@_RowCount int = 0;
	declare	@_Error int = 0;
	declare @_ReturnValue int
	declare	@_Message nvarchar(512);
	declare	@_ErrorContext nvarchar(512);
	declare	@_Step varchar(128);
	declare	@_Now datetime = getdate();

	begin try
		set @_Step = ''Check that Volumes by Product Category Group are correct''

		;with volsToCheckCte
		as
		(
			select
				  r.RegionLookup as [RegionName]
				, pcg.ProductCategoryGroupName as [ProductGroup]
				-------------------------------------------------------------------------------
				, sum(coalesce(v.Jan_YTD, 0))
					+ sum(coalesce(v.Feb_YTD, 0))
					+ sum(coalesce(v.Mar_YTD, 0))
					+ sum(coalesce(v.Apr_YTD, 0))
					+ sum(coalesce(v.May_YTD, 0))
					+ sum(coalesce(v.Jun_YTD, 0))
					+ sum(coalesce(v.Jul_YTD, 0))
					+ sum(coalesce(v.Aug_YTD, 0))
					+ sum(coalesce(v.Sep_YTD, 0))
					+ sum(coalesce(v.Oct_YTD, 0))
					+ sum(coalesce(v.Nov_YTD, 0))
					+ sum(coalesce(v.Dec_YTD, 0)) as [TotalSum]
				-------------------------------------------------------------------------------
				, sum(coalesce(v.Jan_YTD, 0.0)) as [Jan_YTD]
				, sum(coalesce(v.Feb_YTD, 0.0)) as [Feb_YTD]
				, sum(coalesce(v.Mar_YTD, 0.0)) as [Mar_YTD]
				, sum(coalesce(v.Apr_YTD, 0.0)) as [Apr_YTD]
				, sum(coalesce(v.May_YTD, 0.0)) as [May_YTD]
				, sum(coalesce(v.Jun_YTD, 0.0)) as [Jun_YTD]
				, sum(coalesce(v.Jul_YTD, 0.0)) as [Jul_YTD]
				, sum(coalesce(v.Aug_YTD, 0.0)) as [Aug_YTD]
				, sum(coalesce(v.Sep_YTD, 0.0)) as [Sep_YTD]
				, sum(coalesce(v.Oct_YTD, 0.0)) as [Oct_YTD]
				, sum(coalesce(v.Nov_YTD, 0.0)) as [Nov_YTD]
				, sum(coalesce(v.Dec_YTD, 0.0)) as [Dec_YTD]
			from
				stg.SSIS_STG_BUDGET_2017_Volume as v
			inner join stg.SSIS_BUDGET_BusinessUnitLookup as bu
				on bu.BusinessUnitLookup = v.NativeBusinessUnit
			inner join stg.SSIS_BUDGET_RegionLookup as r
				on r.RegionCode = bu.RegionCode
			inner join stg.SSIS_BUDGET_ProductCategoryLookup as pc
				on pc.ProductCategoryName = v.NativeProductCategory
			inner join stg.SSIS_BUDGET_ProductCategoryGroupLookup as pcg
				on pcg.ProductCategoryGroupId = pc.ProductCategoryGroupId
			group by
				  r.RegionLookup
				, pcg.ProductCategoryGroupName
		)
		, resultCte
		as
		(
			select
				  ctrl.RegionName
				, ctrl.ProductGroup
				-------------------------------------------------------------------------------
				, coalesce(ctrl.Jan_YTD, 0)
					+ coalesce(ctrl.Feb_YTD, 0)
					+ coalesce(ctrl.Mar_YTD, 0)
					+ coalesce(ctrl.Apr_YTD, 0)
					+ coalesce(ctrl.May_YTD, 0)
					+ coalesce(ctrl.Jun_YTD, 0)
					+ coalesce(ctrl.Jul_YTD, 0)
					+ coalesce(ctrl.Aug_YTD, 0)
					+ coalesce(ctrl.Sep_YTD, 0)
					+ coalesce(ctrl.Oct_YTD, 0)
					+ coalesce(ctrl.Nov_YTD, 0)
					+ coalesce(ctrl.Dec_YTD, 0) as [CheckTotalSum]
				-------------------------------------------------------------------------------
				, v.TotalSum as [VolumeTotalSum]
				, ctrl.Jan_YTD as [Check_Jan]
				, v.Jan_YTD as [Volume_Jan]
				, ctrl.Feb_YTD as [Check_Feb]
				, v.Feb_YTD as [Volume_Feb]
				, ctrl.Mar_YTD as [Check_Mar]
				, v.Mar_YTD as [Volume_Mar]
				, ctrl.Apr_YTD as [Check_Apr]
				, v.Apr_YTD as [Volume_Apr]
				, ctrl.May_YTD as [Check_May]
				, v.May_YTD as [Volume_May]
				, ctrl.Jun_YTD as [Check_Jun]
				, v.Jun_YTD as [Volume_Jun]
				, ctrl.Jul_YTD as [Check_Jul]
				, v.Jul_YTD as [Volume_Jul]
				, ctrl.Aug_YTD as [Check_Aug]
				, v.Aug_YTD as [Volume_Aug]
				, ctrl.Sep_YTD as [Check_Sep]
				, v.Sep_YTD as [Volume_Sep]
				, ctrl.Oct_YTD as [Check_Oct]
				, v.Oct_YTD as [Volume_Oct]
				, ctrl.Nov_YTD as [Check_Nov]
				, v.Nov_YTD as [Volume_Nov]
				, ctrl.Dec_YTD as [Check_Dec]
				, v.Dec_YTD as [Volume_Dec]
			from
				stg.SSIS_STG_BUDGET_2017_VolumeCheck as ctrl
			full outer join volsToCheckCte as v
				on v.RegionName = ctrl.RegionName
				and v.ProductGroup = ctrl.ProductGroup
			where
					ctrl.RegionName not in (''ELIM Icopal/GAF Europe division'', ''Icopal/GAF Europe division'')
				and ctrl.ProductGroup not in (''Products Total'', ''Total'')
		)
		select
			RegionName
		  , ProductGroup
		  , round(CheckTotalSum * 1000, 2) as [CheckTotalSum]
		  , round(VolumeTotalSum * 1000, 2) as [VolumeTotalSum]
		  , Check_Jan
		  , Volume_Jan
		  , Check_Feb
		  , Volume_Feb
		  , Check_Mar
		  , Volume_Mar
		  , Check_Apr
		  , Volume_Apr
		  , Check_May
		  , Volume_May
		  , Check_Jun
		  , Volume_Jun
		  , Check_Jul
		  , Volume_Jul
		  , Check_Aug
		  , Volume_Aug
		  , Check_Sep
		  , Volume_Sep
		  , Check_Oct
		  , Volume_Oct
		  , Check_Nov
		  , Volume_Nov
		  , Check_Dec
		  , Volume_Dec
		into #tmp
		from
			resultCte
		where
			round(coalesce(CheckTotalSum * 1000, -9999.9999), 2) <> round(coalesce(VolumeTotalSum * 1000, -9999.9999), 2) -- 24

		set @_RowCount = @@rowcount ;

		if @ShowResults = 1
			select * from #tmp order by 1, 2;

		if @_RowCount > 0
			raiserror(''Found %i records with total volumes value mismatch'', 16, 0, @_RowCount) ;
	end try
	begin catch
		set @_ErrorContext = ''Failed to validate Volumes by Product Category Group''
			+ coalesce(''['' + @_Step + '']'', ''NULL'');

		--! If we have an uncommittable external transaction (see BOL), or a deadlock
		--! we can''t do anything else until we roll that back. Alternatively, if we
		--! started the transaction we should roll it back
		if (xact_state() = -1) or (xact_state() = 1 and error_number() = 1205)
			begin
				rollback tran;
				set @_ErrorContext = @_ErrorContext + '' (Forced roll back all changes)'';
			end
		
		exec log4.ExceptionHandler
				  @ErrorContext   = @_ErrorContext
				, @ErrorProcedure = @_FunctionName
				, @ErrorNumber    = @_Error out
				, @ReturnMessage  = @_Message out;
	end catch

--/////////////////////////////////////////////////////////////////////////////////////////////////
EndProc:
--/////////////////////////////////////////////////////////////////////////////////////////////////

	--! Finally, throw an exception that will be detected by the caller
	if @_Error > 0 raiserror(@_Message, 16, 99);

	set nocount off;

	--! Return the value of @@ERROR (which will be zero on success)
	return (@_Error);
end
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('27911421-928e-59e4-ac71-a22766f8d91a' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'A2261F5DF1D81D3E195B20DEAB1528073DEF9ABA968797609682837DDA881AA7')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', ''Includes all validation checks for Budget Volumes by Product Category Group (will throw an exception on any failure)'', ''SCHEMA'', N''etl'', ''PROCEDURE'', N''SSIS_BUDGET_2017_ValidateVolumes'', NULL, NULL
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('27911421-928e-59e4-ac71-a22766f8d91a' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'A2261F5DF1D81D3E195B20DEAB1528073DEF9ABA968797609682837DDA881AA7')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\etl\Stored Procedures\SSIS_BUDGET_2017_ValidateVolumes.sql", ID: {27911421-928e-59e4-ac71-a22766f8d91a} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('27911421-928e-59e4-ac71-a22766f8d91a' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'A2261F5DF1D81D3E195B20DEAB1528073DEF9ABA968797609682837DDA881AA7')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('27911421-928e-59e4-ac71-a22766f8d91a' AS UNIQUEIDENTIFIER), 'A2261F5DF1D81D3E195B20DEAB1528073DEF9ABA968797609682837DDA881AA7', 'Programmable Objects\etl\Stored Procedures\SSIS_BUDGET_2017_ValidateVolumes.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1985ff3a-104d-5014-8e85-c57cba5968f2' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'E5BE25A6A143A0DB8F74EF7652512014F4F0F25CEC1B80A9B1E1E0D3A5C830AE')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\log4\Stored Procedures\JournalWriter.sql", ID: {1985ff3a-104d-5014-8e85-c57cba5968f2} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1985ff3a-104d-5014-8e85-c57cba5968f2' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'E5BE25A6A143A0DB8F74EF7652512014F4F0F25CEC1B80A9B1E1E0D3A5C830AE')
  EXECUTE ('IF OBJECT_ID(''[log4].[JournalWriter]'') IS NOT NULL
	DROP PROCEDURE [log4].[JournalWriter];

');

GO
SET QUOTED_IDENTIFIER ON;

GO
SET ANSI_NULLS ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1985ff3a-104d-5014-8e85-c57cba5968f2' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'E5BE25A6A143A0DB8F74EF7652512014F4F0F25CEC1B80A9B1E1E0D3A5C830AE')
  EXECUTE ('
/*************************************************************************************************/
--</MaintenanceHeader>

CREATE PROCEDURE [log4].[JournalWriter]
(
  @FunctionName			varchar(256)
, @MessageText			varchar(512)
, @ExtraInfo			varchar(max)	= NULL
, @DatabaseName			nvarchar(128)	= NULL
, @Task					nvarchar(128)	= NULL
, @StepInFunction		varchar(128)	= NULL
, @Severity				smallint		= NULL
, @ExceptionId			int				= NULL
, @JournalId			int				= NULL OUT
)

AS

/**************************************************************************************************

Properties
==========
PROCEDURE NAME:		[log4].[JournalWriter]
DESCRIPTION:		Adds a journal entry summarising task progress, completion or failure msgs etc.
DATE OF ORIGIN:		01-DEC-2006
ORIGINAL AUTHOR:	Greg M. Lucas (data-centric solutions ltd. http://www.data-centric.co.uk)
BUILD DATE:			01-MAR-2015
BUILD VERSION:		0.0.13
DEPENDANTS:			Various
DEPENDENCIES:		[log4Private].[SessionInfoOutput]
					[log4].[ExceptionHandler]

Returns
=======
@@ERROR - always zero on success

Additional Notes
================
Possible options for @Severity

   1 -- Showstopper/Critical Failure
   2 -- Severe Failure
   4 -- Major Failure
   8 -- Moderate Failure
  16 -- Minor Failure
  32 -- Concurrency Violation
  64 -- Reserved for future Use
 128 -- Reserved for future Use
 256 -- Informational
 512 -- Success
1024 -- Debug
2048 -- Reserved for future Use
4096 -- Reserved for future Use



Revision history
==================================================================================================
ChangeDate		Author	Version		Narrative
============	======	=======		==============================================================
01-DEC-2006		GML		v0.0.1		Created
------------	------	-------		--------------------------------------------------------------
15-APR-2008		GML		v0.0.3		Now utilises [log4Private].[SessionInfoOutput] sproc for session values
------------	------	-------		--------------------------------------------------------------
03-MAY-2011		GML		v0.0.4		Added support for JournalDetail table
------------	------	-------		--------------------------------------------------------------
28-AUG-2011		GML		v0.0.6		Added support for ExceptionId and Task columns
------------	------	-------		--------------------------------------------------------------

=================================================================================================
(C) Copyright 2006-14 data-centric solutions ltd. (http://log4tsql.sourceforge.net/)

This library is free software; you can redistribute it and/or modify it under the terms of the
GNU Lesser General Public License as published by the Free Software Foundation (www.fsf.org);
either version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along with this
library; if not, you can find it at http://www.opensource.org/licenses/lgpl-3.0.html
or http://www.gnu.org/licenses/lgpl.html

**************************************************************************************************/

BEGIN
	SET NOCOUNT ON

	DECLARE @Error int; SET @Error = 0;

	--!
	--! Define input defaults
	--!
	SET @DatabaseName	= COALESCE(@DatabaseName, DB_NAME())
	SET @FunctionName	= COALESCE(@FunctionName, '''')
	SET @StepInFunction	= COALESCE(@StepInFunction, '''')
	SET @MessageText	= COALESCE(@MessageText, '''')
	SET @ExtraInfo		= COALESCE(@ExtraInfo, '''')
	SET @Task			= COALESCE(@Task, '''')

	--! Make sure the supplied severity fits our bitmask model
	IF ISNULL(@Severity, 0) NOT IN (1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096)
		BEGIN
			SET @ExtraInfo  = COALESCE(NULLIF(@ExtraInfo, '''') + CHAR(13), '''')
							+ ''(Severity value: '' + COALESCE(CAST(@Severity AS varchar(4)), ''NULL'') + '' is invalid so using 256)''
			SET @Severity   = 256 -- Informational
		END

	--!
	--! Session variables (keep it SQL2005 compatible)
	--!
	DECLARE @SessionId	int				; SET @SessionId	= @@SPID;
	DECLARE @ServerName	nvarchar(128)	; SET @ServerName	= @@SERVERNAME;

	--!
	--! log4.SessionInfoOutput variables
	--!
	DECLARE   @HostName				nvarchar(128)
			, @ProgramName			nvarchar(128)
			, @NTDomain				nvarchar(128)
			, @NTUsername			nvarchar(128)
			, @LoginName			nvarchar(128)
			, @OriginalLoginName	nvarchar(128)
			, @SessionLoginTime		datetime


	--!
	--! Get the details for the current session
	--!
	EXEC log4Private.SessionInfoOutput
			  @SessionId			= @SessionId
			, @HostName				= @HostName				OUT
			, @ProgramName			= @ProgramName			OUT
			, @NTDomain				= @NTDomain				OUT
			, @NTUsername			= @NTUsername			OUT
			, @LoginName			= @LoginName			OUT
			, @OriginalLoginName	= @OriginalLoginName	OUT
			, @SessionLoginTime		= @SessionLoginTime		OUT

	--! Working variables
	DECLARE @tblJournalId table	(JournalId int NOT NULL UNIQUE);

	BEGIN TRY
		INSERT [log4Private].[Journal]
		(
		  [Task]
		, [FunctionName]
		, [StepInFunction]
		, [MessageText]
		, [SeverityId]
		, [ExceptionId]
		------------------------
		, [SessionId]
		, [ServerName]
		, [DatabaseName]
		, [HostName]
		, [ProgramName]
		, [NTDomain]
		, [NTUsername]
		, [LoginName]
		, [OriginalLoginName]
		, [SessionLoginTime]
		)
	OUTPUT inserted.JournalId INTO @tblJournalId
	VALUES
		(
		  @Task
		, @FunctionName
		, @StepInFunction
		, @MessageText
		, @Severity
		, @ExceptionId
		------------------------
		, @SessionId
		, @ServerName
		, @DatabaseName
		, @HostName
		, @ProgramName
		, @NTDomain
		, @NTUsername
		, @LoginName
		, @OriginalLoginName
		, @SessionLoginTime
		)

		SELECT @JournalId = JournalId FROM @tblJournalId;

		INSERT [log4Private].[JournalDetail]
		(
		  JournalId
		, ExtraInfo
		)
		VALUES
		(
		  @JournalId
		, @ExtraInfo
		)

	END TRY
	BEGIN CATCH
		--!
		--! If we have an uncommitable transaction (XACT_STATE() = -1), if we hit a deadlock
		--! or if @@TRANCOUNT > 0 AND XACT_STATE() != 1, we HAVE to roll back.
		--! Otherwise, leaving it to the calling process
		--!
		IF (@@TRANCOUNT > 0 AND XACT_STATE() != 1) OR (XACT_STATE() = -1) OR (ERROR_NUMBER() = 1205)
			BEGIN
				ROLLBACK TRAN

				SET @MessageText    = ''Failed to write journal entry: ''
									+ CASE
										WHEN LEN(@MessageText) > 440
											THEN ''"'' + SUBSTRING(@MessageText, 1, 440) + ''..."''
										ELSE
											COALESCE(''"'' + @MessageText + ''"'', ''NULL'')
										END
									+ '' (Forced roll back of all changes)''
			END
		ELSE
			BEGIN
				SET @MessageText    = ''Failed to write journal entry: ''
									+ CASE
										WHEN LEN(@MessageText) > 475
											THEN ''"'' + SUBSTRING(@MessageText, 1, 475) + ''..."''
										ELSE
											COALESCE(''"'' + @MessageText + ''"'', ''NULL'')
										END
			END

		--! Record any failure info
		EXEC [log4].[ExceptionHandler]
				  @ErrorContext = @MessageText
				, @ErrorNumber  = @Error OUT
	END CATCH

--/////////////////////////////////////////////////////////////////////////////////////////////////
OnComplete:
--/////////////////////////////////////////////////////////////////////////////////////////////////

	SET NOCOUNT OFF

	RETURN(@Error)

END
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1985ff3a-104d-5014-8e85-c57cba5968f2' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'E5BE25A6A143A0DB8F74EF7652512014F4F0F25CEC1B80A9B1E1E0D3A5C830AE')
  EXECUTE ('GRANT EXECUTE ON  [log4].[JournalWriter] TO [public]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1985ff3a-104d-5014-8e85-c57cba5968f2' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'E5BE25A6A143A0DB8F74EF7652512014F4F0F25CEC1B80A9B1E1E0D3A5C830AE')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Adds a journal entry summarising task progress, completion or failure msgs etc.'', ''SCHEMA'', N''log4'', ''PROCEDURE'', N''JournalWriter'', NULL, NULL
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1985ff3a-104d-5014-8e85-c57cba5968f2' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'E5BE25A6A143A0DB8F74EF7652512014F4F0F25CEC1B80A9B1E1E0D3A5C830AE')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\log4\Stored Procedures\JournalWriter.sql", ID: {1985ff3a-104d-5014-8e85-c57cba5968f2} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1985ff3a-104d-5014-8e85-c57cba5968f2' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'E5BE25A6A143A0DB8F74EF7652512014F4F0F25CEC1B80A9B1E1E0D3A5C830AE')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('1985ff3a-104d-5014-8e85-c57cba5968f2' AS UNIQUEIDENTIFIER), 'E5BE25A6A143A0DB8F74EF7652512014F4F0F25CEC1B80A9B1E1E0D3A5C830AE', 'Programmable Objects\log4\Stored Procedures\JournalWriter.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('6c9d6d3a-15cc-5cef-863c-542a924944c0' AS UNIQUEIDENTIFIER) AND [script_checksum] = '37F715A34E8999DBE4E47F49CF8CBA4A0226CAC5AD89DAD2DE49940001D129B0')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\log4\Functions\FormatElapsedTime.sql", ID: {6c9d6d3a-15cc-5cef-863c-542a924944c0} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('6c9d6d3a-15cc-5cef-863c-542a924944c0' AS UNIQUEIDENTIFIER) AND [script_checksum] = '37F715A34E8999DBE4E47F49CF8CBA4A0226CAC5AD89DAD2DE49940001D129B0')
  EXECUTE ('IF OBJECT_ID(''[log4].[FormatElapsedTime]'') IS NOT NULL
	DROP FUNCTION [log4].[FormatElapsedTime];

');

GO
SET QUOTED_IDENTIFIER ON;

GO
SET ANSI_NULLS ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('6c9d6d3a-15cc-5cef-863c-542a924944c0' AS UNIQUEIDENTIFIER) AND [script_checksum] = '37F715A34E8999DBE4E47F49CF8CBA4A0226CAC5AD89DAD2DE49940001D129B0')
  EXECUTE ('
/*************************************************************************************************/
--</MaintenanceHeader>

CREATE FUNCTION [log4].[FormatElapsedTime]
(
  @StartTime                      datetime
, @EndTime                        datetime  = NULL
, @ShowMillisecsIfUnderNumSecs    tinyint   = NULL
)

RETURNS varchar(48)

AS

--<CommentHeader>
/**************************************************************************************************

Properties
==========
FUNCTION NAME:      [log4].[FormatElapsedTime]
DESCRIPTION:        Returns a string describing the time elapsed between start and end time
DATE OF ORIGIN:		16-FEB-2007
ORIGINAL AUTHOR:	Greg M. Lucas (data-centric solutions ltd. http://www.data-centric.co.uk)
BUILD DATE:			01-MAR-2015
BUILD VERSION:		0.0.13
DEPENDANTS:         Various
DEPENDENCIES:       None

Additional Notes
================
Builds a string that looks like this: "0 hr(s) 1 min(s) and 22 sec(s)" or "1345 milliseconds"

Revision history
==================================================================================================
ChangeDate		Author	Version		Narrative
============	======	=======		==============================================================
16-FEB-2007		GML		v0.0.2		Created
------------	------	-------		--------------------------------------------------------------
01-MAR-2015		GML		v0.0.13		Fixed bug when number of hours is greater than 99
------------	------	-------		--------------------------------------------------------------

=================================================================================================
(C) Copyright 2006-14 data-centric solutions ltd. (http://log4tsql.sourceforge.net/)

This library is free software; you can redistribute it and/or modify it under the terms of the
GNU Lesser General Public License as published by the Free Software Foundation (www.fsf.org);
either version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along with this
library; if not, you can find it at http://www.opensource.org/licenses/lgpl-3.0.html
or http://www.gnu.org/licenses/lgpl.html

**************************************************************************************************/
--</CommentHeader>

BEGIN
	DECLARE	  @time                     int
			, @hrs                      int
			, @mins                     int
			, @secs                     int
			, @msecs                    int
			, @Duration                 varchar(48)

	IF @StartTime IS NULL AND @EndTime IS NULL
		SET @Duration = ''Start and End Times are both NULL''
	ELSE IF @StartTime IS NULL
		SET @Duration = ''Start Time is NULL''
	ELSE
		BEGIN
			IF @EndTime IS NULL SET @EndTime = GETDATE()

			SET @time = DATEDIFF(ss, @StartTime, @EndTime)

			IF @time > ISNULL(@ShowMillisecsIfUnderNumSecs, 5)
				BEGIN
					SET @hrs        = @time / 3600
					SET @mins       = (@time % 3600) / 60
					SET @secs       = (@time % 3600) % 60
					SET @Duration   = CASE
										WHEN @hrs = 0 THEN ''''
										WHEN @hrs = 1 THEN CAST(@hrs AS varchar(4)) + '' hr, ''
										ELSE CAST(@hrs AS varchar(8)) + '' hrs, ''
									  END
									+ CASE
										WHEN @mins = 1 THEN CAST(@mins AS varchar(4)) + '' min''
										ELSE CAST(@mins AS varchar(2)) + '' mins''
									  END
									+ '' and ''
									+ CASE
										WHEN @secs = 1 THEN CAST(@secs AS varchar(2)) + '' sec''
										ELSE CAST(@secs AS varchar(2)) + '' secs''
									  END
				END
			ELSE
				BEGIN
					SET @msecs      = DATEDIFF(ms, @StartTime, @EndTime)
					SET @Duration   = CAST(@msecs AS varchar(6)) + '' milliseconds''
				END
		END

	RETURN @Duration
END
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('6c9d6d3a-15cc-5cef-863c-542a924944c0' AS UNIQUEIDENTIFIER) AND [script_checksum] = '37F715A34E8999DBE4E47F49CF8CBA4A0226CAC5AD89DAD2DE49940001D129B0')
  EXECUTE ('GRANT EXECUTE ON  [log4].[FormatElapsedTime] TO [public]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('6c9d6d3a-15cc-5cef-863c-542a924944c0' AS UNIQUEIDENTIFIER) AND [script_checksum] = '37F715A34E8999DBE4E47F49CF8CBA4A0226CAC5AD89DAD2DE49940001D129B0')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Returns a string describing the time elapsed between start and end time'', ''SCHEMA'', N''log4'', ''FUNCTION'', N''FormatElapsedTime'', NULL, NULL
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('6c9d6d3a-15cc-5cef-863c-542a924944c0' AS UNIQUEIDENTIFIER) AND [script_checksum] = '37F715A34E8999DBE4E47F49CF8CBA4A0226CAC5AD89DAD2DE49940001D129B0')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\log4\Functions\FormatElapsedTime.sql", ID: {6c9d6d3a-15cc-5cef-863c-542a924944c0} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('6c9d6d3a-15cc-5cef-863c-542a924944c0' AS UNIQUEIDENTIFIER) AND [script_checksum] = '37F715A34E8999DBE4E47F49CF8CBA4A0226CAC5AD89DAD2DE49940001D129B0')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('6c9d6d3a-15cc-5cef-863c-542a924944c0' AS UNIQUEIDENTIFIER), '37F715A34E8999DBE4E47F49CF8CBA4A0226CAC5AD89DAD2DE49940001D129B0', 'Programmable Objects\log4\Functions\FormatElapsedTime.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('2ea3489a-569e-5ce8-84e6-472f4aab2830' AS UNIQUEIDENTIFIER) AND [script_checksum] = '327C78A73C9CC0A9944B67991B7E503DF03CAE8774363C861FB0ED0813D35E3C')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\log4Utils\Stored Procedures\JournalCleanup.sql", ID: {2ea3489a-569e-5ce8-84e6-472f4aab2830} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('2ea3489a-569e-5ce8-84e6-472f4aab2830' AS UNIQUEIDENTIFIER) AND [script_checksum] = '327C78A73C9CC0A9944B67991B7E503DF03CAE8774363C861FB0ED0813D35E3C')
  EXECUTE ('IF OBJECT_ID(''[log4Utils].[JournalCleanup]'') IS NOT NULL
	DROP PROCEDURE [log4Utils].[JournalCleanup];

');

GO
SET QUOTED_IDENTIFIER ON;

GO
SET ANSI_NULLS ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('2ea3489a-569e-5ce8-84e6-472f4aab2830' AS UNIQUEIDENTIFIER) AND [script_checksum] = '327C78A73C9CC0A9944B67991B7E503DF03CAE8774363C861FB0ED0813D35E3C')
  EXECUTE ('
/*************************************************************************************************/
--</MaintenanceHeader>

CREATE PROCEDURE [log4Utils].[JournalCleanup]
(
  @DaysToKeepJournal            int
, @DaysToKeepException			int
)

AS

/**************************************************************************************************

Properties
==========
PROCEDURE NAME:		[log4Utils].[JournalCleanup]
DESCRIPTION:		Deletes all Journal and Exception entries older than the specified days
DATE OF ORIGIN:		16-FEB-2007
ORIGINAL AUTHOR:	Greg M. Lucas (data-centric solutions ltd. http://www.data-centric.co.uk)
BUILD DATE:			01-MAR-2015
BUILD VERSION:		0.0.13
DEPENDANTS:			None
DEPENDENCIES:		None

Inputs
======
@DatabaseName
@FunctionName
@MessageText
@StepInFunction
@ExtraInfo
@Severity

Outputs
=======
None

Returns
=======
@@ERROR - always zero on success

Additional Notes
================

Revision history
==================================================================================================
ChangeDate		Author	Version		Narrative
============	======	=======		==============================================================
16-FEB-2007		GML		v0.0.2		Created
------------	------	-------		--------------------------------------------------------------
29-AUG-2011		GML		v0.0.7		Added support for ExceptionId (now ensures that Exception
									deleted date is greater than Journa delete date)
------------	------	-------		--------------------------------------------------------------



=================================================================================================
(C) Copyright 2006-14 data-centric solutions ltd. (http://log4tsql.sourceforge.net/)

This library is free software; you can redistribute it and/or modify it under the terms of the
GNU Lesser General Public License as published by the Free Software Foundation (www.fsf.org);
either version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along with this
library; if not, you can find it at http://www.opensource.org/licenses/lgpl-3.0.html
or http://www.gnu.org/licenses/lgpl.html

**************************************************************************************************/

BEGIN
	SET NOCOUNT ON

	--! Standard/common variables
	DECLARE	  @_Error					int
			, @_RowCount				int
			, @_DatabaseName			nvarchar(128)
			, @_DebugMessage			varchar(2000)
			, @_SprocStartTime			datetime
			, @_StepStartTime			datetime

	--! WriteJournal variables
	DECLARE   @_FunctionName			varchar(256)
			, @_Message					varchar(512)
			, @_ProgressText			nvarchar(max)
			, @_Step					varchar(128)
			, @_Severity				smallint

	--! ExceptionHandler variables
	DECLARE   @_CustomErrorText			varchar(512)
			, @_ErrorMessage			varchar(4000)
			, @_ExceptionId				int

	--! Common Debug variables
	DECLARE	  @_LoopStartTime			datetime
			, @_StepEndTime				datetime
			, @_CRLF					char(1)

	--! Populate the common variables
	SET @_SprocStartTime	= GETDATE()
	SET @_FunctionName		= OBJECT_NAME(@@PROCID)
	SET @_DatabaseName		= DB_NAME()
	SET @_Error				= 0
	SET @_Severity			= 256 -- Informational
	SET @_CRLF				= CHAR(10)
	SET @_DebugMessage		= @_FunctionName + '' starting at '' + CONVERT(char(23), @_SprocStartTime, 121) + '' with inputs: ''
							+ @_CRLF + ''    @DaysToKeepJournal     : '' + COALESCE(CAST(@DaysToKeepJournal AS varchar(8)), ''NULL'')
							+ @_CRLF + ''    @DaysToKeepException   : '' + COALESCE(CAST(@DaysToKeepException AS varchar(8)), ''NULL'')
	SET @_ProgressText		= @_DebugMessage

	--! Define our working values
	DECLARE @_DaysToKeepJournal		int;		SET @_DaysToKeepJournal = COALESCE(@DaysToKeepJournal, 30)
	DECLARE @_DaysToKeepException	int;		SET @_DaysToKeepException = COALESCE(@DaysToKeepException, @_DaysToKeepJournal + 1)
	DECLARE @_JournalArchiveDate	datetime;	SET @_JournalArchiveDate = CONVERT(char(11), DATEADD(day, - @_DaysToKeepJournal, GETDATE()), 113)
	DECLARE @_ExceptionArchiveDate	datetime;	SET @_ExceptionArchiveDate = CONVERT(char(11), DATEADD(day, - @_DaysToKeepException, GETDATE()), 113)

	SET @_ProgressText		= @_ProgressText
							+ @_CRLF + ''and working values...''
							+ @_CRLF + ''    @_DaysToKeepJournal     : '' + COALESCE(CAST(@_DaysToKeepJournal AS varchar(8)), ''NULL'')
							+ @_CRLF + ''    @_DaysToKeepException   : '' + COALESCE(CAST(@_DaysToKeepException AS varchar(8)), ''NULL'')
							+ @_CRLF + ''    @_JournalArchiveDate   : '' + COALESCE(CONVERT(char(19), @_JournalArchiveDate, 120), ''NULL'')
							+ @_CRLF + ''    @_ExceptionArchiveDate : '' + COALESCE(CONVERT(char(19), @_ExceptionArchiveDate, 120), ''NULL'')

	--!
	--!
	--!
	BEGIN TRY
		SET @_Step = ''Validate inputs'';

		--!
		--! There is an FK between Journal and Exception so we can''t delete more from Exception
		--! than we do from Journal
		--!
		IF @_JournalArchiveDate >= @_ExceptionArchiveDate
			BEGIN
				SET @_Message	= ''Failed to clean up Journal and Exception tables as Journal delete Date: ''
								+ COALESCE(CONVERT(char(19), @_JournalArchiveDate, 120), ''NULL'')
								+ '' must be less than Exception delete date: ''
								+ COALESCE(CONVERT(char(19), @_ExceptionArchiveDate, 120), ''NULL'')
				RAISERROR(@_Message, 16, 1);
			END

		SET @_Step = ''Delete old Journal entries'';
		SET @_StepStartTime = GETDATE();

		BEGIN TRAN

		--! Don''t need to DELETE JournalDetail as FK cascades
		DELETE
			[log4Private].[Journal]
		WHERE
			SystemDate < @_JournalArchiveDate

		SET @_RowCount		= @@ROWCOUNT;
		SET @_DebugMessage	= ''Completed step: "'' +  COALESCE(@_Step, ''NULL'') + ''"''
							+ '' in '' + [log4].[FormatElapsedTime](@_StepStartTime, NULL, 3)
							+ '' '' + COALESCE(CAST(@_RowCount AS varchar(8)), ''NULL'') + '' row(s) affected''
		SET @_ProgressText	= @_ProgressText + @_CRLF + @_DebugMessage

		IF  @@TRANCOUNT > 0 COMMIT TRAN
	END TRY
	BEGIN CATCH
		IF ABS(XACT_STATE()) = 1 OR @@TRANCOUNT > 0 ROLLBACK TRAN;

		SET @_CustomErrorText	= ''Failed to cleanup Journal and Exception at step: '' + COALESCE(@_Step, ''NULL'')

		EXEC [log4].[ExceptionHandler]
				  @ErrorContext    = @_CustomErrorText
				, @ErrorProcedure  = @_FunctionName
				, @ErrorNumber     = @_Error OUT
				, @ReturnMessage   = @_Message OUT
				, @ExceptionId     = @_ExceptionId OUT

		GOTO OnComplete;
	END CATCH

	--!
	--!
	--!
	BEGIN TRY
		SET @_Step = ''Delete old Exception entries'';
		SET @_StepStartTime = GETDATE();

		BEGIN TRAN

		DELETE
			[log4Private].[SqlException]
		WHERE
			SystemDate < @_ExceptionArchiveDate

		SET @_RowCount		= @@ROWCOUNT;
		SET @_DebugMessage	= ''Completed step: "'' +  COALESCE(@_Step, ''NULL'') + ''"''
							+ '' in '' + [log4].[FormatElapsedTime](@_StepStartTime, NULL, 3)
							+ '' '' + COALESCE(CAST(@_RowCount AS varchar(8)), ''NULL'') + '' row(s) affected''
		SET @_ProgressText	= @_ProgressText + @_CRLF + @_DebugMessage

		IF  @@TRANCOUNT > 0 COMMIT TRAN

		SET @_Message		= ''Completed all Journal and Exception cleanup activities;''
							+ '' retaining '' + COALESCE(CAST(@DaysToKeepJournal AS varchar(8)), ''NULL'') + '' days'''' Journal entries''
							+ '' and '' + COALESCE(CAST(@DaysToKeepException AS varchar(8)), ''NULL'') + '' days'''' Exception entries''
	END TRY
	BEGIN CATCH
		IF ABS(XACT_STATE()) = 1 OR @@TRANCOUNT > 0 ROLLBACK TRAN;

		SET @_CustomErrorText	= ''Failed to cleanup Journal and Exception at step: '' + COALESCE(@_Step, ''NULL'')

		EXEC [log4].[ExceptionHandler]
				  @ErrorContext    = @_CustomErrorText
				, @ErrorProcedure  = @_FunctionName
				, @ErrorNumber     = @_Error OUT
				, @ReturnMessage   = @_Message OUT
				, @ExceptionId     = @_ExceptionId OUT

		GOTO OnComplete;
	END CATCH


--/////////////////////////////////////////////////////////////////////////////////////////////////
OnComplete:
--/////////////////////////////////////////////////////////////////////////////////////////////////

	IF @_Error = 0
		BEGIN
			SET @_Step			= ''OnComplete''
			SET @_Severity		= 512 -- Success
			SET @_Message		= COALESCE(@_Message, @_Step) + '' in a total run time of '' + [log4].[FormatElapsedTime](@_SprocStartTime, NULL, 3)
		END
	ELSE
		BEGIN
			SET @_Step			= COALESCE(@_Step, ''OnError'')
			SET @_Severity		= 2 -- Severe Failure
			SET @_Message		= COALESCE(@_Message, @_Step) + '' after a total run time of '' + [log4].[FormatElapsedTime](@_SprocStartTime, NULL, 3)
		END

	--! Always log completion of this call
	EXEC [log4].[JournalWriter]
			  @FunctionName		= @_FunctionName
			, @StepInFunction	= @_Step
			, @MessageText		= @_Message
			, @ExtraInfo		= @_ProgressText
			, @DatabaseName		= @_DatabaseName
			, @Severity			= @_Severity
			, @ExceptionId		= @_ExceptionId

	--! Finaly, throw an exception that will be detected by SQL Agent
	IF @_Error > 0 RAISERROR(@_Message, 16, 1);

	SET NOCOUNT OFF;

	RETURN (@_Error);
END
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('2ea3489a-569e-5ce8-84e6-472f4aab2830' AS UNIQUEIDENTIFIER) AND [script_checksum] = '327C78A73C9CC0A9944B67991B7E503DF03CAE8774363C861FB0ED0813D35E3C')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Deletes all Journal and Exception entries older than the specified days'', ''SCHEMA'', N''log4Utils'', ''PROCEDURE'', N''JournalCleanup'', NULL, NULL
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('2ea3489a-569e-5ce8-84e6-472f4aab2830' AS UNIQUEIDENTIFIER) AND [script_checksum] = '327C78A73C9CC0A9944B67991B7E503DF03CAE8774363C861FB0ED0813D35E3C')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\log4Utils\Stored Procedures\JournalCleanup.sql", ID: {2ea3489a-569e-5ce8-84e6-472f4aab2830} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('2ea3489a-569e-5ce8-84e6-472f4aab2830' AS UNIQUEIDENTIFIER) AND [script_checksum] = '327C78A73C9CC0A9944B67991B7E503DF03CAE8774363C861FB0ED0813D35E3C')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('2ea3489a-569e-5ce8-84e6-472f4aab2830' AS UNIQUEIDENTIFIER), '327C78A73C9CC0A9944B67991B7E503DF03CAE8774363C861FB0ED0813D35E3C', 'Programmable Objects\log4Utils\Stored Procedures\JournalCleanup.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('3225b809-e790-51bb-9b80-895f9adf2f08' AS UNIQUEIDENTIFIER) AND [script_checksum] = '729126C7B05C4647B00B8FDA31DBDEDAE8942A86F2341EC3E61AAE08B96F549A')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\log4Utils\Stored Procedures\PrintString.sql", ID: {3225b809-e790-51bb-9b80-895f9adf2f08} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('3225b809-e790-51bb-9b80-895f9adf2f08' AS UNIQUEIDENTIFIER) AND [script_checksum] = '729126C7B05C4647B00B8FDA31DBDEDAE8942A86F2341EC3E61AAE08B96F549A')
  EXECUTE ('IF OBJECT_ID(''[log4Utils].[PrintString]'') IS NOT NULL
	DROP PROCEDURE [log4Utils].[PrintString];

');

GO
SET QUOTED_IDENTIFIER ON;

GO
SET ANSI_NULLS ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('3225b809-e790-51bb-9b80-895f9adf2f08' AS UNIQUEIDENTIFIER) AND [script_checksum] = '729126C7B05C4647B00B8FDA31DBDEDAE8942A86F2341EC3E61AAE08B96F549A')
  EXECUTE ('
/*************************************************************************************************/
--</MaintenanceHeader>

CREATE PROCEDURE [log4Utils].[PrintString]
(
  @InputString		nvarchar(max)	= NULL
, @MaxPrintLength	int				= 4000
)

AS

--<CommentHeader>
/**********************************************************************************************************************

Properties
=====================================================================================================================
PROCEDURE NAME:		[log4Utils].[PrintString]
DESCRIPTION:		Prints the supplied string respecting all line feeds and/or carriage returns except where no
					line feeds are found, in which case the output is printed in user-specified lengths
DATE OF ORIGIN:		05-NOV-2011
ORIGINAL AUTHOR:	Greg M. Lucas (data-centric solutions ltd. http://www.data-centric.co.uk)
BUILD DATE:			01-MAR-2015
BUILD VERSION:		0.0.13
DEPENDANTS:			None
DEPENDENCIES:		None

Inputs
======
@InputString - optional, the string to print
@MaxPrintLength - Max length of string to print before inserting an unnatural break

Outputs
=======
None

Returns
=======
NULL

Additional Notes
================

Revision history
=====================================================================================================================
ChangeDate    Author   Version  Narrative
============  =======  =======  =====================================================================================
05-NOV-2011   GML      v0.0.8   Created
------------  -------  -------  -------------------------------------------------------------------------------------
13-MAR-2012   GML      v0.0.10  Fixed backwards-compatability issue with @LineFeedPos
------------  -------  -------  -------------------------------------------------------------------------------------


=====================================================================================================================
(C) Copyright 2006-14 data-centric solutions ltd. (http://log4tsql.sourceforge.net/)

This library is free software; you can redistribute it and/or modify it under the terms of the
GNU Lesser General Public License as published by the Free Software Foundation (www.fsf.org);
either version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along with this
library; if not, you can find it at http://www.opensource.org/licenses/lgpl-3.0.html
or http://www.gnu.org/licenses/lgpl.html

**********************************************************************************************************************/
--</CommentHeader>

BEGIN
	SET NOCOUNT ON

	--! CONSTANTS (keep it SQL2005 compatible)
	DECLARE @LF					char(1); SET @LF			= CHAR(10);
	DECLARE @CR					char(1); SET @CR			= CHAR(13);
	DECLARE @CRLF				char(2); SET @CRLF		= CHAR(13) + CHAR(10);
	DECLARE @LINE_BREAK			char(3); SET @LINE_BREAK	= ''%'' + @LF + ''%'';

	--! Working Values
	DECLARE @WorkingLength		bigint
	DECLARE @WorkingString		nvarchar(max)
	DECLARE @SubString			nvarchar(max)
	DECLARE @SubStringLength	bigint

	--! Validate/correct inputs
	SET @MaxPrintLength = COALESCE(NULLIF(@MaxPrintLength, 0), 4000)

	IF @MaxPrintLength > 4000
		BEGIN
			RAISERROR(''The @MaxPrintLength value of %i is greater than the maximum length supported by PRINT for unicode strings (4000)'', 17, 1, @MaxPrintLength);
			RETURN(60000);
		END

	IF @MaxPrintLength < 1
		BEGIN
			RAISERROR(''The @MaxPrintLength must be greater than or equal to 1 but is %i'', 17, 2, @MaxPrintLength);
			RETURN(60000);
		END

	--! Working variables
	DECLARE @InputLength bigint; SET @InputLength = LEN(@InputString);

	IF @InputLength = 0
		GOTO OnComplete;

	--!
	--! Our input string may contain either carriage returns, line feeds or both
	--! to separate printing lines so we need to standardise on one of these (LF)
	--!
	SET @WorkingString = REPLACE(REPLACE(@InputString, @CRLF, @LF), @CR, @LF);

	--!
	--! If there are line feeds we use those to break down the text
	--! into individual printed lines, otherwise we print it in
	--! bite-size chunks suitable for consumption by PRINT
	--!
	IF PATINDEX(@LINE_BREAK, @InputString) > 0

		BEGIN --[BREAK_BY_LINE_FEED]

			--! Add a line feed on the end so the final iteration works as expected
			SET @WorkingString	= @WorkingString + @LF;
			SET @WorkingLength	= LEN(@WorkingString);

			DECLARE @LineFeedPos bigint; SET @LineFeedPos = 0;

			WHILE @WorkingLength > 0
				BEGIN
					--!
					--! Get the position of the next line feed
					--!
					SET @LineFeedPos = PATINDEX(@LINE_BREAK, @WorkingString);

					IF @LineFeedPos > 0
						BEGIN
							SET @SubString			= SUBSTRING(@WorkingString, 1, @LineFeedPos - 1);
							SET @SubStringLength	= LEN(@SubString);

							--!
							--! If this string is too long for a single PRINT, we pass it back
							--! to PrintString which will process the string in suitably sized chunks
							--!
							IF LEN(@SubString) > @MaxPrintLength
								EXEC [log4Utils].[PrintString] @InputString = @SubString
							ELSE
								PRINT @SubString;

							--! Remove the text we''ve just processed
							SET @WorkingLength	= @WorkingLength - @LineFeedPos;
							SET @WorkingString	= SUBSTRING(@WorkingString, @LineFeedPos + 1, @WorkingLength);
						END
				END

		END --[BREAK_BY_LINE_FEED]
	ELSE
		BEGIN --[BREAK_BY_LENGTH]
			--!
			--! If there are no line feeds we may have to break it down
			--! into smaller bit size chunks suitable for PRINT
			--!
			IF @InputLength > @MaxPrintLength
				BEGIN
					SET @WorkingString		= @InputString;
					SET @WorkingLength		= LEN(@WorkingString);
					SET @SubStringLength	= @MaxPrintLength;

					WHILE @WorkingLength > 0
						BEGIN
							SET @SubString			= SUBSTRING(@WorkingString, 1, @SubStringLength);
							SET @SubStringLength	= LEN(@SubString)

							--!
							--! If we still have text to process, set working values
							--!
							IF (@WorkingLength - @SubStringLength + 1) > 0
								BEGIN
									PRINT @SubString;
									--! Remove the text we''ve just processed
									SET @WorkingString	= SUBSTRING(@WorkingString, @SubStringLength + 1, @WorkingLength);
									SET @WorkingLength	= LEN(@WorkingString);
								END
						END
				END
			ELSE
				PRINT @InputString;

		END --[BREAK_BY_LENGTH]

--/////////////////////////////////////////////////////////////////////////////////////////////////
OnComplete:
--/////////////////////////////////////////////////////////////////////////////////////////////////

	SET NOCOUNT OFF

	RETURN

END
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('3225b809-e790-51bb-9b80-895f9adf2f08' AS UNIQUEIDENTIFIER) AND [script_checksum] = '729126C7B05C4647B00B8FDA31DBDEDAE8942A86F2341EC3E61AAE08B96F549A')
  EXECUTE ('GRANT EXECUTE ON  [log4Utils].[PrintString] TO [public]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('3225b809-e790-51bb-9b80-895f9adf2f08' AS UNIQUEIDENTIFIER) AND [script_checksum] = '729126C7B05C4647B00B8FDA31DBDEDAE8942A86F2341EC3E61AAE08B96F549A')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Prints the supplied string respecting all line feeds and/or carriage returns except where no line feeds are found, in which case the output is printed in user-specified lengths'', ''SCHEMA'', N''log4Utils'', ''PROCEDURE'', N''PrintString'', NULL, NULL
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('3225b809-e790-51bb-9b80-895f9adf2f08' AS UNIQUEIDENTIFIER) AND [script_checksum] = '729126C7B05C4647B00B8FDA31DBDEDAE8942A86F2341EC3E61AAE08B96F549A')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\log4Utils\Stored Procedures\PrintString.sql", ID: {3225b809-e790-51bb-9b80-895f9adf2f08} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('3225b809-e790-51bb-9b80-895f9adf2f08' AS UNIQUEIDENTIFIER) AND [script_checksum] = '729126C7B05C4647B00B8FDA31DBDEDAE8942A86F2341EC3E61AAE08B96F549A')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('3225b809-e790-51bb-9b80-895f9adf2f08' AS UNIQUEIDENTIFIER), '729126C7B05C4647B00B8FDA31DBDEDAE8942A86F2341EC3E61AAE08B96F549A', 'Programmable Objects\log4Utils\Stored Procedures\PrintString.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('670576e6-3bc5-5ece-a037-8b11d9f6c0fc' AS UNIQUEIDENTIFIER) AND [script_checksum] = '9E9B90A51830E3489B8B053D6C088A6285033E030C423A5CD284DE6AC5D16871')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\log4Utils\Stored Procedures\JournalPrinter.sql", ID: {670576e6-3bc5-5ece-a037-8b11d9f6c0fc} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('670576e6-3bc5-5ece-a037-8b11d9f6c0fc' AS UNIQUEIDENTIFIER) AND [script_checksum] = '9E9B90A51830E3489B8B053D6C088A6285033E030C423A5CD284DE6AC5D16871')
  EXECUTE ('IF OBJECT_ID(''[log4Utils].[JournalPrinter]'') IS NOT NULL
	DROP PROCEDURE [log4Utils].[JournalPrinter];

');

GO
SET QUOTED_IDENTIFIER ON;

GO
SET ANSI_NULLS ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('670576e6-3bc5-5ece-a037-8b11d9f6c0fc' AS UNIQUEIDENTIFIER) AND [script_checksum] = '9E9B90A51830E3489B8B053D6C088A6285033E030C423A5CD284DE6AC5D16871')
  EXECUTE ('
/*************************************************************************************************/
--</MaintenanceHeader>

CREATE PROCEDURE [log4Utils].[JournalPrinter]
(
  @JournalId		int
)

AS

/**************************************************************************************************

Properties
==========
PROCEDURE NAME:		[log4Utils].[JournalPrinter]
DESCRIPTION:		Prints the contents of JournalDetail for the specified Journal ID respecting all
					line feeds and/or carriage returns
DATE OF ORIGIN:		03-MAY-2011
ORIGINAL AUTHOR:	Greg M. Lucas (data-centric solutions ltd. http://www.data-centric.co.uk)
BUILD DATE:			01-MAR-2015
BUILD VERSION:		0.0.13
DEPENDANTS:			None
DEPENDENCIES:		None

Inputs
======
@JournalId - if -1, just processes any provided input string
@InputString - optional, the string to print

Outputs
=======
None

Returns
=======
NULL

Additional Notes
================

Revision history
==================================================================================================
ChangeDate		Author	Version		Narrative
============	======	=======		==============================================================
03-MAY-2011		GML		v0.0.4		Created
------------	------	-------		--------------------------------------------------------------
05-NOV-2011		GML		v0.0.8		Now calls log4.PrintString (which is SQL2005 compatible)
------------	------	-------		--------------------------------------------------------------

=================================================================================================
(C) Copyright 2006-14 data-centric solutions ltd. (http://log4tsql.sourceforge.net/)

This library is free software; you can redistribute it and/or modify it under the terms of the
GNU Lesser General Public License as published by the Free Software Foundation (www.fsf.org);
either version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along with this
library; if not, you can find it at http://www.opensource.org/licenses/lgpl-3.0.html
or http://www.gnu.org/licenses/lgpl.html

**************************************************************************************************/

BEGIN
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
	SET NOCOUNT ON;

	--! Working Values
	DECLARE @WorkingString		varchar(max)

	SELECT @WorkingString = ExtraInfo FROM [log4Private].[JournalDetail] WHERE JournalId = @JournalId

	IF COALESCE(@WorkingString, '''') = ''''
		BEGIN
			RAISERROR(''No Extra Info for Journal ID: %d!'', 0, 1, @JournalId);
		END
	ELSE
		BEGIN
			PRINT '''';
			PRINT REPLICATE(''='', 120);

			EXEC [log4Utils].[PrintString] @WorkingString

			PRINT '''';
			PRINT REPLICATE(''='', 120);
			RAISERROR(''Completed processing journal detail for Journal ID: %d'', 0, 1, @JournalId) WITH NOWAIT;
		END

	SET NOCOUNT OFF;

	RETURN;
END
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('670576e6-3bc5-5ece-a037-8b11d9f6c0fc' AS UNIQUEIDENTIFIER) AND [script_checksum] = '9E9B90A51830E3489B8B053D6C088A6285033E030C423A5CD284DE6AC5D16871')
  EXECUTE ('GRANT EXECUTE ON  [log4Utils].[JournalPrinter] TO [public]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('670576e6-3bc5-5ece-a037-8b11d9f6c0fc' AS UNIQUEIDENTIFIER) AND [script_checksum] = '9E9B90A51830E3489B8B053D6C088A6285033E030C423A5CD284DE6AC5D16871')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Prints the contents of JournalDetail for the specified Journal ID respecting all line feeds and/or carriage returns'', ''SCHEMA'', N''log4Utils'', ''PROCEDURE'', N''JournalPrinter'', NULL, NULL
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('670576e6-3bc5-5ece-a037-8b11d9f6c0fc' AS UNIQUEIDENTIFIER) AND [script_checksum] = '9E9B90A51830E3489B8B053D6C088A6285033E030C423A5CD284DE6AC5D16871')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\log4Utils\Stored Procedures\JournalPrinter.sql", ID: {670576e6-3bc5-5ece-a037-8b11d9f6c0fc} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('670576e6-3bc5-5ece-a037-8b11d9f6c0fc' AS UNIQUEIDENTIFIER) AND [script_checksum] = '9E9B90A51830E3489B8B053D6C088A6285033E030C423A5CD284DE6AC5D16871')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('670576e6-3bc5-5ece-a037-8b11d9f6c0fc' AS UNIQUEIDENTIFIER), '9E9B90A51830E3489B8B053D6C088A6285033E030C423A5CD284DE6AC5D16871', 'Programmable Objects\log4Utils\Stored Procedures\JournalPrinter.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('67693b34-7581-5c4d-9fd7-a11538fae713' AS UNIQUEIDENTIFIER) AND [script_checksum] = '0CA60414C4F196AEE5042474B5E2415C36A0A47CACC344C9EFFA0F27CBA4C70A')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\dbo\Functions\Numbers.sql", ID: {67693b34-7581-5c4d-9fd7-a11538fae713} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('67693b34-7581-5c4d-9fd7-a11538fae713' AS UNIQUEIDENTIFIER) AND [script_checksum] = '0CA60414C4F196AEE5042474B5E2415C36A0A47CACC344C9EFFA0F27CBA4C70A')
  EXECUTE ('IF OBJECT_ID(''[dbo].[Numbers]'') IS NOT NULL
	DROP FUNCTION [dbo].[Numbers];

');

GO
SET QUOTED_IDENTIFIER ON;

GO
SET ANSI_NULLS ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('67693b34-7581-5c4d-9fd7-a11538fae713' AS UNIQUEIDENTIFIER) AND [script_checksum] = '0CA60414C4F196AEE5042474B5E2415C36A0A47CACC344C9EFFA0F27CBA4C70A')
  EXECUTE ('create function [dbo].[Numbers]
(
  @size int
)
returns table
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
FUNCTION NAME:  dbo.Numbers
DESCRIPTION:    Returns a dynamically created set of N sequential numbers starting at 1 where N is the value of @size
AUTHOR:         Greg M. Lucas
ORIGIN DATE:    14-Jun-2017

Additional Notes
================
select max(Number) from  dbo.Numbers(255) -- tinyint
select max(Number) from  dbo.Numbers(32767) -- smallint
select max(Number) from  dbo.Numbers(2147483647) -- int
select max(Number) from  dbo.Numbers(9223372036854775807) -- bigint not supported

REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		14-Jun-2017		GML		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------

**********************************************************************************************************************/
--</CommentHeader>
return
	(
		with
			  cte0 (num) as (select 1 union all select 1)
			, cte1 (num) as (select 1 from cte0 as x cross join cte0 as y)
			, cte2 (num) as (select 1 from cte1 as x cross join cte1 as y)
			, cte3 (num) as (select 1 from cte2 as x cross join cte2 as y)
			, cte4 (num) as (select 1 from cte3 as x cross join cte3 as y)
			, cte5 (num) as (select 1 from cte4 as x cross join cte4 as y)
			, cte6 (num) as (select 1 from cte5 as x cross join cte5 as y)

		select top(case when @size > 0 then @size else 0 end)
			row_number() over (order by num) as [Number]
		from
			cte6
	)
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('67693b34-7581-5c4d-9fd7-a11538fae713' AS UNIQUEIDENTIFIER) AND [script_checksum] = '0CA60414C4F196AEE5042474B5E2415C36A0A47CACC344C9EFFA0F27CBA4C70A')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Returns a dynamically created set of N sequential numbers starting at 1 (up to a maximum of 2,147,483,647) where N is the value of @size'', ''SCHEMA'', N''dbo'', ''FUNCTION'', N''Numbers'', NULL, NULL
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('67693b34-7581-5c4d-9fd7-a11538fae713' AS UNIQUEIDENTIFIER) AND [script_checksum] = '0CA60414C4F196AEE5042474B5E2415C36A0A47CACC344C9EFFA0F27CBA4C70A')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\dbo\Functions\Numbers.sql", ID: {67693b34-7581-5c4d-9fd7-a11538fae713} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('67693b34-7581-5c4d-9fd7-a11538fae713' AS UNIQUEIDENTIFIER) AND [script_checksum] = '0CA60414C4F196AEE5042474B5E2415C36A0A47CACC344C9EFFA0F27CBA4C70A')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('67693b34-7581-5c4d-9fd7-a11538fae713' AS UNIQUEIDENTIFIER), '0CA60414C4F196AEE5042474B5E2415C36A0A47CACC344C9EFFA0F27CBA4C70A', 'Programmable Objects\dbo\Functions\Numbers.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('6fa1ede2-33fa-52c4-9851-10d1307aeabc' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'B30AE00B980AFCF4880339673721C427598F0244FEBC781DB7624535CBD54C0D')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\log4\Functions\GetJournalControl.sql", ID: {6fa1ede2-33fa-52c4-9851-10d1307aeabc} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('6fa1ede2-33fa-52c4-9851-10d1307aeabc' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'B30AE00B980AFCF4880339673721C427598F0244FEBC781DB7624535CBD54C0D')
  EXECUTE ('IF OBJECT_ID(''[log4].[GetJournalControl]'') IS NOT NULL
	DROP FUNCTION [log4].[GetJournalControl];

');

GO
SET QUOTED_IDENTIFIER ON;

GO
SET ANSI_NULLS ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('6fa1ede2-33fa-52c4-9851-10d1307aeabc' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'B30AE00B980AFCF4880339673721C427598F0244FEBC781DB7624535CBD54C0D')
  EXECUTE ('
/*************************************************************************************************/
--</MaintenanceHeader>

CREATE FUNCTION [log4].[GetJournalControl]
(
  @ModuleName		varchar(255)
, @GroupName		varchar(255)
)

RETURNS varchar(3)

AS

--<CommentHeader>
/**************************************************************************************************

Properties
==========
FUNCTION NAME:      [log4].[GetJournalControl]
DESCRIPTION:		Returns the ON/OFF value for the specified Journal Name, or Group Name if
					Module not found or the system default if neither is found
DATE OF ORIGIN:		15-APR-2008
ORIGINAL AUTHOR:	Greg M. Lucas (data-centric solutions ltd. http://www.data-centric.co.uk)
BUILD DATE:			01-MAR-2015
BUILD VERSION:		0.0.13
DEPENDANTS:         Various
DEPENDENCIES:       None

Additional Notes
================
Builds a string that looks like this: "0 hr(s) 1 min(s) and 22 sec(s)" or "1345 milliseconds"

Revision history
==================================================================================================
ChangeDate		Author	Version		Narrative
============	======	=======		==============================================================
15-APR-2008		GML		v0.0.3		Created
------------	------	-------		--------------------------------------------------------------

=================================================================================================
(C) Copyright 2006-14 data-centric solutions ltd. (http://log4tsql.sourceforge.net/)

This library is free software; you can redistribute it and/or modify it under the terms of the
GNU Lesser General Public License as published by the Free Software Foundation (www.fsf.org);
either version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along with this
library; if not, you can find it at http://www.opensource.org/licenses/lgpl-3.0.html
or http://www.gnu.org/licenses/lgpl.html

**************************************************************************************************/
--</CommentHeader>

BEGIN
	RETURN
		(
			SELECT
				TOP 1 OnOffSwitch
			FROM
				(
						SELECT
							  OnOffSwitch
							, 1 AS [Precedence]
						FROM
							[log4Private].[JournalControl]
						WHERE
							ModuleName = ''SYSTEM_OVERRIDE''
						AND
							OnOffSwitch = ''OFF'' -- only care about the override when it''s OFF
					UNION
						SELECT
							  OnOffSwitch
							, 10 AS [Precedence]
						FROM
							[log4Private].[JournalControl]
						WHERE
							ModuleName = @ModuleName
					UNION
						SELECT
							  OnOffSwitch
							, 100 AS [Precedence]
						FROM
							[log4Private].[JournalControl]
						WHERE
							ModuleName = @GroupName
					UNION
						SELECT
							  OnOffSwitch
							, 200 AS [Precedence]
						FROM
							[log4Private].[JournalControl]
						WHERE
							ModuleName = ''SYSTEM_DEFAULT''
					UNION
						SELECT
							  ''OFF''		AS [OnOffSwitch]
							, 300		AS [Precedence]
				) AS [x]
			ORDER BY
				[Precedence] ASC
		)
END
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('6fa1ede2-33fa-52c4-9851-10d1307aeabc' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'B30AE00B980AFCF4880339673721C427598F0244FEBC781DB7624535CBD54C0D')
  EXECUTE ('GRANT EXECUTE ON  [log4].[GetJournalControl] TO [public]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('6fa1ede2-33fa-52c4-9851-10d1307aeabc' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'B30AE00B980AFCF4880339673721C427598F0244FEBC781DB7624535CBD54C0D')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Returns the ON/OFF value for the specified Journal Name, or Group Name if Module not found or the system default if neither is found'', ''SCHEMA'', N''log4'', ''FUNCTION'', N''GetJournalControl'', NULL, NULL
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('6fa1ede2-33fa-52c4-9851-10d1307aeabc' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'B30AE00B980AFCF4880339673721C427598F0244FEBC781DB7624535CBD54C0D')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\log4\Functions\GetJournalControl.sql", ID: {6fa1ede2-33fa-52c4-9851-10d1307aeabc} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('6fa1ede2-33fa-52c4-9851-10d1307aeabc' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'B30AE00B980AFCF4880339673721C427598F0244FEBC781DB7624535CBD54C0D')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('6fa1ede2-33fa-52c4-9851-10d1307aeabc' AS UNIQUEIDENTIFIER), 'B30AE00B980AFCF4880339673721C427598F0244FEBC781DB7624535CBD54C0D', 'Programmable Objects\log4\Functions\GetJournalControl.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f1c132d0-a9be-559e-9b9f-df02fa90e78b' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'AA9FCC7A282B767D2896304902AC1A1EDE73D385F93B9D264702524CD344E3B4')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\log4Utils\Stored Procedures\ExceptionReader.sql", ID: {f1c132d0-a9be-559e-9b9f-df02fa90e78b} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f1c132d0-a9be-559e-9b9f-df02fa90e78b' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'AA9FCC7A282B767D2896304902AC1A1EDE73D385F93B9D264702524CD344E3B4')
  EXECUTE ('IF OBJECT_ID(''[log4Utils].[ExceptionReader]'') IS NOT NULL
	DROP PROCEDURE [log4Utils].[ExceptionReader];

');

GO
SET QUOTED_IDENTIFIER ON;

GO
SET ANSI_NULLS ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f1c132d0-a9be-559e-9b9f-df02fa90e78b' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'AA9FCC7A282B767D2896304902AC1A1EDE73D385F93B9D264702524CD344E3B4')
  EXECUTE ('
/*************************************************************************************************/
--</MaintenanceHeader>

CREATE PROCEDURE [log4Utils].[ExceptionReader]
(
  @StartDate			datetime		= NULL
, @EndDate				datetime		= NULL
, @TimeZoneOffset		smallint		= NULL
, @ErrorProcedure		varchar(256)	= NULL
, @ProcedureSearchType	tinyint			= NULL
, @ErrorMessage			varchar(512)	= NULL
, @MessageSearchType	tinyint			= NULL
, @ResultSetSize		int				= NULL
)

AS

/**************************************************************************************************

Properties
==========
PROCEDURE NAME:		[log4Utils].[ExceptionReader]
DESCRIPTION:		Returns all Exceptions matching the specified search criteria
DATE OF ORIGIN:		01-DEC-2006
ORIGINAL AUTHOR:	Greg M. Lucas (data-centric solutions ltd. http://www.data-centric.co.uk)
BUILD DATE:			29-AUG-2011
BUILD VERSION:		0.0.6
DEPENDANTS:			None
DEPENDENCIES:		None

Returns
=======
@@ERROR - always zero on success

Additional Notes
================

Function and Message Search Types:

0 = Exclude from Search
1 = Begins With
2 = Ends With
3 = Contains
4 = Exact Match

Revision history
==================================================================================================
ChangeDate		Author	Version		Narrative
============	======	=======		==============================================================
01-DEC-2006		GML		v0.0.1		Created
------------	------	-------		--------------------------------------------------------------
03-MAY-2011		GML		v0.0.4		Added @TimeZoneOffset for ease of use in other timezones
------------	------	-------		--------------------------------------------------------------

=================================================================================================
(C) Copyright 2006-14 data-centric solutions ltd. (http://log4tsql.sourceforge.net/)

This library is free software; you can redistribute it and/or modify it under the terms of the
GNU Lesser General Public License as published by the Free Software Foundation (www.fsf.org);
either version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along with this
library; if not, you can find it at http://www.opensource.org/licenses/lgpl-3.0.html
or http://www.gnu.org/licenses/lgpl.html

**************************************************************************************************/

BEGIN
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
	SET NOCOUNT ON;

	--! Working variables
	DECLARE	  @Error            int
			, @RowCount         int

	SET @Error 			= 0
	SET @TimeZoneOffset	= COALESCE(@TimeZoneOffset, 0)

	--!
	--! Format the Function search string according to the required search criteria
	--!
	IF LEN(ISNULL(@ErrorProcedure, '''')) = 0 OR @ProcedureSearchType = 0
		SET @ErrorProcedure = ''%''
	ELSE IF LEN(@ErrorProcedure) < 256
		BEGIN
			IF @ProcedureSearchType & 1 = 1 AND SUBSTRING(REVERSE(@ErrorProcedure), 1, 1) != ''%''
				SET @ErrorProcedure = @ErrorProcedure + ''%''

			IF @ProcedureSearchType & 2 = 2 AND SUBSTRING(@ErrorProcedure, 1, 1) != ''%''
				SET @ErrorProcedure = ''%'' + @ErrorProcedure

			--! If @ProcedureSearchType = 4, do nothing as we want an exact match
		END

	--!
	--! Format the Message search string according to the required search criteria
	--!
	IF LEN(ISNULL(@ErrorMessage, '''')) = 0 OR @MessageSearchType = 0
		SET @ErrorMessage = ''%''
	ELSE IF LEN(@ErrorMessage) < 512
		BEGIN
			IF @MessageSearchType & 1 = 1 AND SUBSTRING(REVERSE(@ErrorMessage), 1, 1) != ''%''
				SET @ErrorMessage = @ErrorMessage + ''%''

			IF @MessageSearchType & 2 = 2 AND SUBSTRING(@ErrorMessage, 1, 1) != ''%''
				SET @ErrorMessage = ''%'' + @ErrorMessage

			--! If @MessageSearchType = 4, do nothing as we want an exact match
		END

	--!
	--! If @ResultSetSize is invalid, just return the last 100 rows
	--!
	IF ISNULL(@ResultSetSize, -1) < 1 SET @ResultSetSize = 100
	IF @StartDate IS NULL SET @StartDate = CONVERT(datetime, CONVERT(char(8), DATEADD(day, -10, GETDATE())) + '' 00:00:00'', 112)
	IF @EndDate IS NULL SET @EndDate = CONVERT(datetime, CONVERT(char(8), GETDATE(), 112) + '' 23:59:59'', 112)

	--! Reverse any time zone offset so we are searching on system time
	SET @StartDate	= DATEADD(hour, @TimeZoneOffset * -1, @StartDate)
	SET @EndDate	= DATEADD(hour, @TimeZoneOffset * -1, @EndDate)

	--!
	--! Return the required results
	--!
	SELECT TOP (@ResultSetSize)
		  ExceptionId
		, DATEADD(hour, @TimeZoneOffset, SystemDate)						AS [LocalTime]
		---------------------------------------------------------------------------------------------------
		, ErrorNumber
		, ErrorContext
		, REPLACE(REPLACE(ErrorMessage, CHAR(13), ''  ''), CHAR(10), ''  '')	AS [ErrorMessage]
		, ErrorSeverity
		, ErrorState
		, ErrorProcedure
		, ErrorLine
		, ErrorDatabase
		---------------------------------------------------------------------------------------------------
		, SystemDate
		, SessionIdent
		, [ProgramName]
		, [NTDomain]
		, [NTUsername]
		, [LoginName]
	FROM
		[log4Private].[SqlException]
	WHERE
		SystemDate BETWEEN @StartDate AND @EndDate
	AND
		ErrorProcedure LIKE @ErrorProcedure
	AND
		ErrorMessage LIKE @ErrorMessage
	ORDER BY
		ExceptionId DESC

	SELECT @Error = @@ERROR, @RowCount = @@ROWCOUNT

--/////////////////////////////////////////////////////////////////////////////////////////////////
OnComplete:
--/////////////////////////////////////////////////////////////////////////////////////////////////

	SET NOCOUNT OFF

	RETURN(@Error)

END
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f1c132d0-a9be-559e-9b9f-df02fa90e78b' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'AA9FCC7A282B767D2896304902AC1A1EDE73D385F93B9D264702524CD344E3B4')
  EXECUTE ('GRANT EXECUTE ON  [log4Utils].[ExceptionReader] TO [public]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f1c132d0-a9be-559e-9b9f-df02fa90e78b' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'AA9FCC7A282B767D2896304902AC1A1EDE73D385F93B9D264702524CD344E3B4')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Returns all Exceptions matching the specified search criteria'', ''SCHEMA'', N''log4Utils'', ''PROCEDURE'', N''ExceptionReader'', NULL, NULL
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f1c132d0-a9be-559e-9b9f-df02fa90e78b' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'AA9FCC7A282B767D2896304902AC1A1EDE73D385F93B9D264702524CD344E3B4')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\log4Utils\Stored Procedures\ExceptionReader.sql", ID: {f1c132d0-a9be-559e-9b9f-df02fa90e78b} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f1c132d0-a9be-559e-9b9f-df02fa90e78b' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'AA9FCC7A282B767D2896304902AC1A1EDE73D385F93B9D264702524CD344E3B4')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('f1c132d0-a9be-559e-9b9f-df02fa90e78b' AS UNIQUEIDENTIFIER), 'AA9FCC7A282B767D2896304902AC1A1EDE73D385F93B9D264702524CD344E3B4', 'Programmable Objects\log4Utils\Stored Procedures\ExceptionReader.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('a36600a2-33f7-5123-b295-e43d787c3464' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'CF00BFC83C9370D28FFC70B6A16857A4BD6AAE630EB899A93FFC190478D4A6CA')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\log4Utils\Stored Procedures\JournalReader.sql", ID: {a36600a2-33f7-5123-b295-e43d787c3464} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('a36600a2-33f7-5123-b295-e43d787c3464' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'CF00BFC83C9370D28FFC70B6A16857A4BD6AAE630EB899A93FFC190478D4A6CA')
  EXECUTE ('IF OBJECT_ID(''[log4Utils].[JournalReader]'') IS NOT NULL
	DROP PROCEDURE [log4Utils].[JournalReader];

');

GO
SET QUOTED_IDENTIFIER ON;

GO
SET ANSI_NULLS ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('a36600a2-33f7-5123-b295-e43d787c3464' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'CF00BFC83C9370D28FFC70B6A16857A4BD6AAE630EB899A93FFC190478D4A6CA')
  EXECUTE ('
/*************************************************************************************************/
--</MaintenanceHeader>

CREATE PROCEDURE [log4Utils].[JournalReader]
(
  @StartDate			datetime		= NULL
, @EndDate				datetime		= NULL
, @TimeZoneOffset		smallint		= NULL
, @FunctionName			varchar(256)	= NULL
, @FunctionSearchType	tinyint			= NULL
, @MessageText			varchar(512)	= NULL
, @MessageSearchType	tinyint			= NULL
, @Task					varchar(128)	= NULL
, @SeverityBitMask		smallint		= 8191 -- 8191 All Severities or 7167 to exclude debug
, @ResultSetSize		int				= NULL
)

AS

/**************************************************************************************************

Properties
==========
PROCEDURE NAME:		[log4Utils].[JournalReader]
DESCRIPTION:		Returns all Journal entries matching the specified search criteria
DATE OF ORIGIN:		01-DEC-2006
ORIGINAL AUTHOR:	Greg M. Lucas (data-centric solutions ltd. http://www.data-centric.co.uk)
BUILD DATE:			01-MAR-2015
BUILD VERSION:		0.0.13
DEPENDANTS:			None
DEPENDENCIES:		None

Inputs
======
@DatabaseName
@FunctionName
@MessageText
@StepInFunction
@ExtraInfo
@Severity

Outputs
=======
None

Returns
=======
@@ERROR - always zero on success

Additional Notes
================
Severity Bits (for bitmask):

   1 -- Showstopper/Critical Failure
   2 -- Severe Failure
   4 -- Major Failure
   8 -- Moderate Failure
  16 -- Minor Failure
  32 -- Concurrency Violation
  64 -- Reserved for future Use
 128 -- Reserved for future Use
 256 -- Informational
 512 -- Success
1024 -- Debug
2048 -- Reserved for future Use
4096 -- Reserved for future Use

Function and Message Search Types:

0 = Exclude from Search
1 = Begins With
2 = Ends With
3 = Contains
4 = Exact Match

Revision history
==================================================================================================
ChangeDate		Author	Version		Narrative
============	======	=======		==============================================================
01-DEC-2006		GML		v0.0.1		Created
------------	------	-------		--------------------------------------------------------------
03-MAY-2011		GML		v0.0.4		Removed ExtraInfo from result set for performance
									Added @TimeZoneOffset for ease of use in other timezones
------------	------	-------		--------------------------------------------------------------
28-AUG-2011		GML		v0.0.6		Added support for ExceptionId and Task columns
------------	------	-------		--------------------------------------------------------------

=================================================================================================
(C) Copyright 2006-14 data-centric solutions ltd. (http://log4tsql.sourceforge.net/)

This library is free software; you can redistribute it and/or modify it under the terms of the
GNU Lesser General Public License as published by the Free Software Foundation (www.fsf.org);
either version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along with this
library; if not, you can find it at http://www.opensource.org/licenses/lgpl-3.0.html
or http://www.gnu.org/licenses/lgpl.html

**************************************************************************************************/

BEGIN
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
	SET NOCOUNT ON

	--! Working variables
	DECLARE	  @Error            int
			, @RowCount         int

	SET @Error 			= 0
	SET @TimeZoneOffset	= COALESCE(@TimeZoneOffset, 0)
	SET @Task			= COALESCE(@Task, '''')

	--!
	--! Format the Function search string according to the required search criteria
	--!
	IF LEN(ISNULL(@FunctionName, '''')) = 0 OR @FunctionSearchType = 0
		SET @FunctionName = ''%''
	ELSE IF LEN(@FunctionName) < 256
		BEGIN
			IF @FunctionSearchType & 1 = 1 AND SUBSTRING(REVERSE(@FunctionName), 1, 1) != ''%''
				SET @FunctionName = @FunctionName + ''%''

			IF @FunctionSearchType & 2 = 2 AND SUBSTRING(@FunctionName, 1, 1) != ''%''
				SET @FunctionName = ''%'' + @FunctionName

			--! If @FunctionSearchType = 4, do nothing as we want an exact match
		END

	--!
	--! Format the Message search string according to the required search criteria
	--!
	IF LEN(ISNULL(@MessageText, '''')) = 0 OR @MessageSearchType = 0
		SET @MessageText = ''%''
	ELSE IF LEN(@MessageText) < 512
		BEGIN
			IF @MessageSearchType & 1 = 1 AND SUBSTRING(REVERSE(@MessageText), 1, 1) != ''%''
				SET @MessageText = @MessageText + ''%''

			IF @MessageSearchType & 2 = 2 AND SUBSTRING(@MessageText, 1, 1) != ''%''
				SET @MessageText = ''%'' + @MessageText

			--! If @MessageSearchType = 4, do nothing as we want an exact match
		END

	--!
	--! If @ResultSetSize is invalid, just return the last 100 rows
	--!
	IF ISNULL(@ResultSetSize, -1) < 1 SET @ResultSetSize = 100
	IF @StartDate IS NULL SET @StartDate = CONVERT(datetime, CONVERT(char(8), DATEADD(day, -7, GETDATE())) + '' 00:00:00'', 112)
	IF @EndDate IS NULL SET @EndDate = CONVERT(datetime, CONVERT(char(8), GETDATE(), 112) + '' 23:59:59'', 112)

	--! Reverse any time zone offset so we are searching on system time
	SET @StartDate	= DATEADD(hour, @TimeZoneOffset * -1, @StartDate)
	SET @EndDate	= DATEADD(hour, @TimeZoneOffset * -1, @EndDate)

	--!
	--! Return the required results
	--!
	SELECT TOP (@ResultSetSize)
		  j.JournalId
		, DATEADD(hour, @TimeZoneOffset, j.SystemDate)	AS [LocalTime]
		---------------------------------------------------------------------------------------------------
		, j.Task										AS [TaskOrJobName]
		, j.FunctionName								AS [FunctionName]
		, j.StepInFunction								AS [StepInFunction]
		, j.MessageText									AS [MessageText]
		, s.SeverityName								AS [Severity]
		, j.ExceptionId									AS [ExceptionId]
		---------------------------------------------------------------------------------------------------
		, j.SystemDate
	FROM
		[log4Private].[Journal] AS [j]
	INNER JOIN
		[log4Private].[Severity] AS [s]
	ON
		s.SeverityId = j.SeverityId
	WHERE
		j.SystemDate BETWEEN @StartDate AND @EndDate
	AND
		j.SeverityId & @SeverityBitMask = j.SeverityId
	AND
		j.Task = COALESCE(NULLIF(@Task, ''''), j.Task)
	AND
		j.FunctionName LIKE @FunctionName
	AND
		j.MessageText LIKE @MessageText
	ORDER BY
		j.JournalId DESC

	SELECT @Error = @@ERROR, @RowCount = @@ROWCOUNT

--/////////////////////////////////////////////////////////////////////////////////////////////////
OnComplete:
--/////////////////////////////////////////////////////////////////////////////////////////////////

	SET NOCOUNT OFF

	RETURN(@Error)

END
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('a36600a2-33f7-5123-b295-e43d787c3464' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'CF00BFC83C9370D28FFC70B6A16857A4BD6AAE630EB899A93FFC190478D4A6CA')
  EXECUTE ('GRANT EXECUTE ON  [log4Utils].[JournalReader] TO [public]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('a36600a2-33f7-5123-b295-e43d787c3464' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'CF00BFC83C9370D28FFC70B6A16857A4BD6AAE630EB899A93FFC190478D4A6CA')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Returns all Journal entries matching the specified search criteria'', ''SCHEMA'', N''log4Utils'', ''PROCEDURE'', N''JournalReader'', NULL, NULL
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('a36600a2-33f7-5123-b295-e43d787c3464' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'CF00BFC83C9370D28FFC70B6A16857A4BD6AAE630EB899A93FFC190478D4A6CA')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\log4Utils\Stored Procedures\JournalReader.sql", ID: {a36600a2-33f7-5123-b295-e43d787c3464} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('a36600a2-33f7-5123-b295-e43d787c3464' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'CF00BFC83C9370D28FFC70B6A16857A4BD6AAE630EB899A93FFC190478D4A6CA')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('a36600a2-33f7-5123-b295-e43d787c3464' AS UNIQUEIDENTIFIER), 'CF00BFC83C9370D28FFC70B6A16857A4BD6AAE630EB899A93FFC190478D4A6CA', 'Programmable Objects\log4Utils\Stored Procedures\JournalReader.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('0f54719a-ffd1-5525-9c5a-73469c22af3e' AS UNIQUEIDENTIFIER) AND [script_checksum] = '4D7F3A80A6464C4A59092FE09DEE77DA047C5FD670123E07BB5FC536828A52DE')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\pbi\Views\dimActualDeliveryDate.sql", ID: {0f54719a-ffd1-5525-9c5a-73469c22af3e} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('0f54719a-ffd1-5525-9c5a-73469c22af3e' AS UNIQUEIDENTIFIER) AND [script_checksum] = '4D7F3A80A6464C4A59092FE09DEE77DA047C5FD670123E07BB5FC536828A52DE')
  EXECUTE ('IF OBJECT_ID(''[pbi].[dimActualDeliveryDate]'') IS NOT NULL
	DROP VIEW [pbi].[dimActualDeliveryDate];

');

GO
SET QUOTED_IDENTIFIER ON;

GO
SET ANSI_NULLS ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('0f54719a-ffd1-5525-9c5a-73469c22af3e' AS UNIQUEIDENTIFIER) AND [script_checksum] = '4D7F3A80A6464C4A59092FE09DEE77DA047C5FD670123E07BB5FC536828A52DE')
  EXECUTE ('CREATE view [pbi].[dimActualDeliveryDate]
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
VIEW NAME:      pbi.dimActualDeliveryDate
DESCRIPTION:    Exposes date information for use with factInvoice.ActualDeliveryDateKey
AUTHOR:         Greg M. Lucas
ORIGIN DATE:    21-JUN-2017

Additional Notes
================


REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		21-JUN-2017		GML		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------


**********************************************************************************************************************/
--</CommentHeader>

	select
		  DateKey as [ActualDeliveryDateKey]
		, ActualDate as [ActualDeliveryDate]
		, DateNameEU as [ActualDeliveryDateNameEU]
		, DateNameUS as [ActualDeliveryDateNameUS]
		, EnglishMonthCode as [ActualDeliveryDateEnglishMonthCode]
		, EnglishMonthName as [ActualDeliveryDateEnglishMonthName]
		, EnglishDayCode as [ActualDeliveryDateEnglishDayCode]
		, EnglishDayName as [ActualDeliveryDateEnglishDayName]
		, CalendarYear as [ActualDeliveryDateCalendarYear]
		, CalendarQuarter as [ActualDeliveryDateCalendarQuarter]
		, MonthNumberInYear as [ActualDeliveryDateMonthNumberInYear]
		, WeekNumberInYear as [ActualDeliveryDateWeekNumberInYear]
		, DayNumberInYear as [ActualDeliveryDateDayNumberInYear]
		, DayNumberInMonth as [ActualDeliveryDateDayNumberInMonth]
		, DayNumberInWeek as [ActualDeliveryDateDayNumberInWeek]
		, YearMonth as [ActualDeliveryDateYearMonth]
		, YearQuarter as [ActualDeliveryDateYearQuarter]
		, IsWeekend as [ActualDeliveryDateIsWeekend]
		, IsLastDayInMonth as [ActualDeliveryDateIsLastDayInMonth]
		, MondayWeekCommencing as [ActualDeliveryDateMondayWeekCommencing]
		, WorkDaysInMonthTotal as [ActualDeliveryDateWorkDaysInMonthTotal]
		, WorkDaysInMonthToDate as [ActualDeliveryDateWorkDaysInMonthToDate]
		, FiscalPeriod as [ActualDeliveryFiscalPeriod]
		, FiscalQuarter as [ActualDeliveryFiscalQuarter]
		, FiscalYear as [ActualDeliveryFiscalYear]
		, FiscalPeriodCode as [ActualDeliveryFiscalPeriodCode]
		, FiscalPeriodName as [ActualDeliveryFiscalPeriodName]
		, FiscalYearPeriod as [ActualDeliveryFiscalYearPeriod]
		, FiscalYearQuarter as [ActualDeliveryFiscalYearQuarter]
		, WorkDaysInFiscalPeriodTotal as [ActualDeliveryWorkDaysInFiscalPeriodTotal]
		, WorkDaysInFiscalPeriodToDate as [ActualDeliveryWorkDaysInFiscalPeriodToDate]
	from
		dbo.Calendar
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('0f54719a-ffd1-5525-9c5a-73469c22af3e' AS UNIQUEIDENTIFIER) AND [script_checksum] = '4D7F3A80A6464C4A59092FE09DEE77DA047C5FD670123E07BB5FC536828A52DE')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\pbi\Views\dimActualDeliveryDate.sql", ID: {0f54719a-ffd1-5525-9c5a-73469c22af3e} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('0f54719a-ffd1-5525-9c5a-73469c22af3e' AS UNIQUEIDENTIFIER) AND [script_checksum] = '4D7F3A80A6464C4A59092FE09DEE77DA047C5FD670123E07BB5FC536828A52DE')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('0f54719a-ffd1-5525-9c5a-73469c22af3e' AS UNIQUEIDENTIFIER), '4D7F3A80A6464C4A59092FE09DEE77DA047C5FD670123E07BB5FC536828A52DE', 'Programmable Objects\pbi\Views\dimActualDeliveryDate.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('60e2482f-8260-5b78-b625-8eb6ce7b7bc3' AS UNIQUEIDENTIFIER) AND [script_checksum] = '2D6A4BFBDBF1839AA8FE67CB024B8B44552D201C975D380387BA9D54ECCA9F50')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\pbi\Views\dimActualPaymentDate.sql", ID: {60e2482f-8260-5b78-b625-8eb6ce7b7bc3} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('60e2482f-8260-5b78-b625-8eb6ce7b7bc3' AS UNIQUEIDENTIFIER) AND [script_checksum] = '2D6A4BFBDBF1839AA8FE67CB024B8B44552D201C975D380387BA9D54ECCA9F50')
  EXECUTE ('IF OBJECT_ID(''[pbi].[dimActualPaymentDate]'') IS NOT NULL
	DROP VIEW [pbi].[dimActualPaymentDate];

');

GO
SET QUOTED_IDENTIFIER ON;

GO
SET ANSI_NULLS ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('60e2482f-8260-5b78-b625-8eb6ce7b7bc3' AS UNIQUEIDENTIFIER) AND [script_checksum] = '2D6A4BFBDBF1839AA8FE67CB024B8B44552D201C975D380387BA9D54ECCA9F50')
  EXECUTE ('CREATE view [pbi].[dimActualPaymentDate]
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
VIEW NAME:      pbi.dimActualPaymentDate
DESCRIPTION:    Exposes date information for use with factInvoice.ActualPaymentDateKey
AUTHOR:         Greg M. Lucas
ORIGIN DATE:    21-JUN-2017

Additional Notes
================


REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		21-JUN-2017		GML		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------


**********************************************************************************************************************/
--</CommentHeader>

	select
		  DateKey as [ActualPaymentDateKey]
		, ActualDate as [ActualPaymentDate]
		, DateNameEU as [ActualPaymentDateNameEU]
		, DateNameUS as [ActualPaymentDateNameUS]
		, EnglishMonthCode as [ActualPaymentDateEnglishMonthCode]
		, EnglishMonthName as [ActualPaymentDateEnglishMonthName]
		, EnglishDayCode as [ActualPaymentDateEnglishDayCode]
		, EnglishDayName as [ActualPaymentDateEnglishDayName]
		, CalendarYear as [ActualPaymentDateCalendarYear]
		, CalendarQuarter as [ActualPaymentDateCalendarQuarter]
		, MonthNumberInYear as [ActualPaymentDateMonthNumberInYear]
		, WeekNumberInYear as [ActualPaymentDateWeekNumberInYear]
		, DayNumberInYear as [ActualPaymentDateDayNumberInYear]
		, DayNumberInMonth as [ActualPaymentDateDayNumberInMonth]
		, DayNumberInWeek as [ActualPaymentDateDayNumberInWeek]
		, YearMonth as [ActualPaymentDateYearMonth]
		, YearQuarter as [ActualPaymentDateYearQuarter]
		, IsWeekend as [ActualPaymentDateIsWeekend]
		, IsLastDayInMonth as [ActualPaymentDateIsLastDayInMonth]
		, MondayWeekCommencing as [ActualPaymentDateMondayWeekCommencing]
		, WorkDaysInMonthTotal as [ActualPaymentDateWorkDaysInMonthTotal]
		, WorkDaysInMonthToDate as [ActualPaymentDateWorkDaysInMonthToDate]
		, FiscalPeriod as [ActualPaymentDateFiscalPeriod]
		, FiscalQuarter as [ActualPaymentDateFiscalQuarter]
		, FiscalYear as [ActualPaymentDateFiscalYear]
		, FiscalPeriodCode as [ActualPaymentDateFiscalPeriodCode]
		, FiscalPeriodName as [ActualPaymentDateFiscalPeriodName]
		, FiscalYearPeriod as [ActualPaymentDateFiscalYearPeriod]
		, FiscalYearQuarter as [ActualPaymentDateFiscalYearQuarter]
		, WorkDaysInFiscalPeriodTotal as [ActualPaymentDateWorkDaysInFiscalPeriodTotal]
		, WorkDaysInFiscalPeriodToDate as [ActualPaymentDateWorkDaysInFiscalPeriodToDate]
	from
		dbo.Calendar
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('60e2482f-8260-5b78-b625-8eb6ce7b7bc3' AS UNIQUEIDENTIFIER) AND [script_checksum] = '2D6A4BFBDBF1839AA8FE67CB024B8B44552D201C975D380387BA9D54ECCA9F50')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\pbi\Views\dimActualPaymentDate.sql", ID: {60e2482f-8260-5b78-b625-8eb6ce7b7bc3} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('60e2482f-8260-5b78-b625-8eb6ce7b7bc3' AS UNIQUEIDENTIFIER) AND [script_checksum] = '2D6A4BFBDBF1839AA8FE67CB024B8B44552D201C975D380387BA9D54ECCA9F50')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('60e2482f-8260-5b78-b625-8eb6ce7b7bc3' AS UNIQUEIDENTIFIER), '2D6A4BFBDBF1839AA8FE67CB024B8B44552D201C975D380387BA9D54ECCA9F50', 'Programmable Objects\pbi\Views\dimActualPaymentDate.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('8731163d-c2c7-56dd-a9f2-3d463589223c' AS UNIQUEIDENTIFIER) AND [script_checksum] = '17EA9D04E4D551E972233DBFCF759D69D7E433310ADB5C420C31ABCB51495CCE')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\pbi\Views\dimBudgetMonth.sql", ID: {8731163d-c2c7-56dd-a9f2-3d463589223c} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('8731163d-c2c7-56dd-a9f2-3d463589223c' AS UNIQUEIDENTIFIER) AND [script_checksum] = '17EA9D04E4D551E972233DBFCF759D69D7E433310ADB5C420C31ABCB51495CCE')
  EXECUTE ('IF OBJECT_ID(''[pbi].[dimBudgetMonth]'') IS NOT NULL
	DROP VIEW [pbi].[dimBudgetMonth];

');

GO
SET QUOTED_IDENTIFIER ON;

GO
SET ANSI_NULLS ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('8731163d-c2c7-56dd-a9f2-3d463589223c' AS UNIQUEIDENTIFIER) AND [script_checksum] = '17EA9D04E4D551E972233DBFCF759D69D7E433310ADB5C420C31ABCB51495CCE')
  EXECUTE ('CREATE view [pbi].[dimBudgetMonth]
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
VIEW NAME:      pbi.dimBudgetMonth
DESCRIPTION:    Exposes date information for use with factInvoice.InvoiceDateKey
AUTHOR:         Greg M. Lucas
ORIGIN DATE:    20-JUN-2017

Additional Notes
================


REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		20-JUN-2017		GML		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------


**********************************************************************************************************************/
--</CommentHeader>

	select
		  min(DateKey) as [BudgetMonthKey]
		, FiscalPeriod as [BudgetFiscalPeriod]
		, FiscalQuarter as [BudgetFiscalQuarter]
		, FiscalYear as [BudgetFiscalYear]
		, FiscalPeriodCode as [BudgetFiscalPeriodCode]
		, FiscalPeriodName as [BudgetFiscalPeriodName]
		, FiscalYearPeriod as [BudgetFiscalYearPeriod]
		, FiscalYearQuarter as [BudgetFiscalYearQuarter]
		, WorkDaysInFiscalPeriodTotal as [BudgetWorkDaysInFiscalPeriodTotal]
	from
		dbo.Calendar
	group by
		  FiscalPeriod
		, FiscalQuarter
		, FiscalYear
		, FiscalPeriodCode
		, FiscalPeriodName
		, FiscalYearPeriod
		, FiscalYearQuarter
		, WorkDaysInFiscalPeriodTotal
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('8731163d-c2c7-56dd-a9f2-3d463589223c' AS UNIQUEIDENTIFIER) AND [script_checksum] = '17EA9D04E4D551E972233DBFCF759D69D7E433310ADB5C420C31ABCB51495CCE')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\pbi\Views\dimBudgetMonth.sql", ID: {8731163d-c2c7-56dd-a9f2-3d463589223c} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('8731163d-c2c7-56dd-a9f2-3d463589223c' AS UNIQUEIDENTIFIER) AND [script_checksum] = '17EA9D04E4D551E972233DBFCF759D69D7E433310ADB5C420C31ABCB51495CCE')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('8731163d-c2c7-56dd-a9f2-3d463589223c' AS UNIQUEIDENTIFIER), '17EA9D04E4D551E972233DBFCF759D69D7E433310ADB5C420C31ABCB51495CCE', 'Programmable Objects\pbi\Views\dimBudgetMonth.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('4e167367-a91f-57ec-bcad-9f8d22d44823' AS UNIQUEIDENTIFIER) AND [script_checksum] = '60A18FB0FBEDBF6710EB044C321D9C1B32AAA5B02D7C96AF4D19CA70A58E2509')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\pbi\Views\dimBusinessUnit.sql", ID: {4e167367-a91f-57ec-bcad-9f8d22d44823} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('4e167367-a91f-57ec-bcad-9f8d22d44823' AS UNIQUEIDENTIFIER) AND [script_checksum] = '60A18FB0FBEDBF6710EB044C321D9C1B32AAA5B02D7C96AF4D19CA70A58E2509')
  EXECUTE ('IF OBJECT_ID(''[pbi].[dimBusinessUnit]'') IS NOT NULL
	DROP VIEW [pbi].[dimBusinessUnit];

');

GO
SET QUOTED_IDENTIFIER ON;

GO
SET ANSI_NULLS ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('4e167367-a91f-57ec-bcad-9f8d22d44823' AS UNIQUEIDENTIFIER) AND [script_checksum] = '60A18FB0FBEDBF6710EB044C321D9C1B32AAA5B02D7C96AF4D19CA70A58E2509')
  EXECUTE ('create view [pbi].[dimBusinessUnit]
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
VIEW NAME:      pbi.dimBusinessUnit
DESCRIPTION:    Exposes current state of the Business Unit dimension imported from QlikView (no history available)
AUTHOR:         Greg M. Lucas
ORIGIN DATE:    16-JUN-2017

Additional Notes
================


REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		16-JUN-2017		GML		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------


**********************************************************************************************************************/
--</CommentHeader>

	select
		s.BusinessUnitKey
	  , s.SalesCenterSbuCode as [SBU]
	  , s.BusinessUnitName
	  , s.RegionName
	  , s.RegionDescription
	  , cast(''19000101 00:00:00'' as datetime) as [RowValidFromUTC]
	  , cast(''99991231 23:59:59'' as datetime) as [RowValidToUTC]
	  , cast(''Y'' as char(1)) as [IsCurrent]
	  , s.IsDeleted
	from
		qvstg.BusinessUnit as s
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('4e167367-a91f-57ec-bcad-9f8d22d44823' AS UNIQUEIDENTIFIER) AND [script_checksum] = '60A18FB0FBEDBF6710EB044C321D9C1B32AAA5B02D7C96AF4D19CA70A58E2509')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\pbi\Views\dimBusinessUnit.sql", ID: {4e167367-a91f-57ec-bcad-9f8d22d44823} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('4e167367-a91f-57ec-bcad-9f8d22d44823' AS UNIQUEIDENTIFIER) AND [script_checksum] = '60A18FB0FBEDBF6710EB044C321D9C1B32AAA5B02D7C96AF4D19CA70A58E2509')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('4e167367-a91f-57ec-bcad-9f8d22d44823' AS UNIQUEIDENTIFIER), '60A18FB0FBEDBF6710EB044C321D9C1B32AAA5B02D7C96AF4D19CA70A58E2509', 'Programmable Objects\pbi\Views\dimBusinessUnit.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d2908534-c307-5a54-8ab0-a04f61f9b5c2' AS UNIQUEIDENTIFIER) AND [script_checksum] = '65D48C43F2D36E45EAC30B6787B8F16B50501AB4BF9173A3F90642150E5E19E8')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\pbi\Views\dimCustomerShippedTo.sql", ID: {d2908534-c307-5a54-8ab0-a04f61f9b5c2} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d2908534-c307-5a54-8ab0-a04f61f9b5c2' AS UNIQUEIDENTIFIER) AND [script_checksum] = '65D48C43F2D36E45EAC30B6787B8F16B50501AB4BF9173A3F90642150E5E19E8')
  EXECUTE ('IF OBJECT_ID(''[pbi].[dimCustomerShippedTo]'') IS NOT NULL
	DROP VIEW [pbi].[dimCustomerShippedTo];

');

GO
SET QUOTED_IDENTIFIER ON;

GO
SET ANSI_NULLS ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d2908534-c307-5a54-8ab0-a04f61f9b5c2' AS UNIQUEIDENTIFIER) AND [script_checksum] = '65D48C43F2D36E45EAC30B6787B8F16B50501AB4BF9173A3F90642150E5E19E8')
  EXECUTE ('create view [pbi].[dimCustomerShippedTo]
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
VIEW NAME:      pbi.dimCustomerShippedTo
DESCRIPTION:    Exposes current state of the Customer dimension imported from QlikView (no history available)
AUTHOR:         Greg M. Lucas
ORIGIN DATE:    12-JUN-2017

Additional Notes
================


REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		12-JUN-2017		GML		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------


**********************************************************************************************************************/
--</CommentHeader>

	select
		  c.CustomerKey
		, c.CustomerNumber
		, c.CustomerName
		, c.CustomerAddress1
		, c.CustomerAddress2
		, c.CustomerAddress3
		, c.CustomerZipCode
		, c.CustomerCity
		, c.CustomerCountry
		, c.CustomerVatNumber
		, c.CustomerTypeId
		, c.CustomerTypeName
		, c.CustomerGroup1
		, c.CustomerGroup2
		, c.CustomerGroup3
		, c.CustomerGroup4
		, c.CustomerGroup5
		, c.CategoryIsMapped
		, c.CustomerCategoryBaseLevel
		, c.CustomerCategoryLevel1
		, c.CustomerCategoryLevel2
		, c.CustomerCategoryLevel3
		, c.CustomerCategoryLevel4
		, c.CustomerCategoryLevel5
		, c.CustomerCategoryLevel6
		, c.CustomerCategoryLevel7
		, c.CustomerCategoryLevel8
		, cast(''19000101 00:00:00'' as datetime) as [RowValidFromUTC]
		, cast(''99991231 23:59:59'' as datetime) as [RowValidToUTC]
		, cast(''Y'' as char(1)) as [IsCurrent]
		, c.IsDeleted
	from
		qvstg.Customer as c
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d2908534-c307-5a54-8ab0-a04f61f9b5c2' AS UNIQUEIDENTIFIER) AND [script_checksum] = '65D48C43F2D36E45EAC30B6787B8F16B50501AB4BF9173A3F90642150E5E19E8')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\pbi\Views\dimCustomerShippedTo.sql", ID: {d2908534-c307-5a54-8ab0-a04f61f9b5c2} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d2908534-c307-5a54-8ab0-a04f61f9b5c2' AS UNIQUEIDENTIFIER) AND [script_checksum] = '65D48C43F2D36E45EAC30B6787B8F16B50501AB4BF9173A3F90642150E5E19E8')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('d2908534-c307-5a54-8ab0-a04f61f9b5c2' AS UNIQUEIDENTIFIER), '65D48C43F2D36E45EAC30B6787B8F16B50501AB4BF9173A3F90642150E5E19E8', 'Programmable Objects\pbi\Views\dimCustomerShippedTo.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('55e15bee-bf14-54b9-98dd-9336e6878bc2' AS UNIQUEIDENTIFIER) AND [script_checksum] = '44ECC18B44651A57981155CF2037774772F579DEFC9B78A73D127E574CD378DB')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\pbi\Views\dimCustomerSoldTo.sql", ID: {55e15bee-bf14-54b9-98dd-9336e6878bc2} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('55e15bee-bf14-54b9-98dd-9336e6878bc2' AS UNIQUEIDENTIFIER) AND [script_checksum] = '44ECC18B44651A57981155CF2037774772F579DEFC9B78A73D127E574CD378DB')
  EXECUTE ('IF OBJECT_ID(''[pbi].[dimCustomerSoldTo]'') IS NOT NULL
	DROP VIEW [pbi].[dimCustomerSoldTo];

');

GO
SET QUOTED_IDENTIFIER ON;

GO
SET ANSI_NULLS ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('55e15bee-bf14-54b9-98dd-9336e6878bc2' AS UNIQUEIDENTIFIER) AND [script_checksum] = '44ECC18B44651A57981155CF2037774772F579DEFC9B78A73D127E574CD378DB')
  EXECUTE ('create view [pbi].[dimCustomerSoldTo]
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
VIEW NAME:      pbi.dimCustomerSoldTo
DESCRIPTION:    Exposes current state of the Customer dimension imported from QlikView (no history available)
AUTHOR:         Greg M. Lucas
ORIGIN DATE:    20-JUN-2017

Additional Notes
================


REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		20-JUN-2017		GML		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------


**********************************************************************************************************************/
--</CommentHeader>

	select
		  c.CustomerKey
		, c.CustomerNumber
		, c.CustomerName
		, c.CustomerAddress1
		, c.CustomerAddress2
		, c.CustomerAddress3
		, c.CustomerZipCode
		, c.CustomerCity
		, c.CustomerCountry
		, c.CustomerVatNumber
		, c.CustomerTypeId
		, c.CustomerTypeName
		, c.CustomerGroup1
		, c.CustomerGroup2
		, c.CustomerGroup3
		, c.CustomerGroup4
		, c.CustomerGroup5
		, c.CategoryIsMapped
		, c.CustomerCategoryBaseLevel
		, c.CustomerCategoryLevel1
		, c.CustomerCategoryLevel2
		, c.CustomerCategoryLevel3
		, c.CustomerCategoryLevel4
		, c.CustomerCategoryLevel5
		, c.CustomerCategoryLevel6
		, c.CustomerCategoryLevel7
		, c.CustomerCategoryLevel8
		, cast(''19000101 00:00:00'' as datetime) as [RowValidFromUTC]
		, cast(''99991231 23:59:59'' as datetime) as [RowValidToUTC]
		, cast(''Y'' as char(1)) as [IsCurrent]
		, c.IsDeleted
	from
		qvstg.Customer as c
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('55e15bee-bf14-54b9-98dd-9336e6878bc2' AS UNIQUEIDENTIFIER) AND [script_checksum] = '44ECC18B44651A57981155CF2037774772F579DEFC9B78A73D127E574CD378DB')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\pbi\Views\dimCustomerSoldTo.sql", ID: {55e15bee-bf14-54b9-98dd-9336e6878bc2} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('55e15bee-bf14-54b9-98dd-9336e6878bc2' AS UNIQUEIDENTIFIER) AND [script_checksum] = '44ECC18B44651A57981155CF2037774772F579DEFC9B78A73D127E574CD378DB')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('55e15bee-bf14-54b9-98dd-9336e6878bc2' AS UNIQUEIDENTIFIER), '44ECC18B44651A57981155CF2037774772F579DEFC9B78A73D127E574CD378DB', 'Programmable Objects\pbi\Views\dimCustomerSoldTo.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('775044da-6739-563d-a790-777d96a634bf' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'CEF90B91A0009C02C853233996522C4F71F42C0117F2B9F7DB0489753D077DDA')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\pbi\Views\dimExpectedPaymentDate.sql", ID: {775044da-6739-563d-a790-777d96a634bf} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('775044da-6739-563d-a790-777d96a634bf' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'CEF90B91A0009C02C853233996522C4F71F42C0117F2B9F7DB0489753D077DDA')
  EXECUTE ('IF OBJECT_ID(''[pbi].[dimExpectedPaymentDate]'') IS NOT NULL
	DROP VIEW [pbi].[dimExpectedPaymentDate];

');

GO
SET QUOTED_IDENTIFIER ON;

GO
SET ANSI_NULLS ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('775044da-6739-563d-a790-777d96a634bf' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'CEF90B91A0009C02C853233996522C4F71F42C0117F2B9F7DB0489753D077DDA')
  EXECUTE ('CREATE view [pbi].[dimExpectedPaymentDate]
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
VIEW NAME:      pbi.dimExpectedPaymentDate
DESCRIPTION:    Exposes date information for use with factInvoice.ExpectedPaymentDateKey
AUTHOR:         Greg M. Lucas
ORIGIN DATE:    21-JUN-2017

Additional Notes
================


REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		21-JUN-2017		GML		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------


**********************************************************************************************************************/
--</CommentHeader>

	select
		  DateKey as [ExpectedPaymentDateKey]
		, ActualDate as [ExpectedPaymentDate]
		, DateNameEU as [ExpectedPaymentDateNameEU]
		, DateNameUS as [ExpectedPaymentDateNameUS]
		, EnglishMonthCode as [ExpectedPaymentDateEnglishMonthCode]
		, EnglishMonthName as [ExpectedPaymentDateEnglishMonthName]
		, EnglishDayCode as [ExpectedPaymentDateEnglishDayCode]
		, EnglishDayName as [ExpectedPaymentDateEnglishDayName]
		, CalendarYear as [ExpectedPaymentDateCalendarYear]
		, CalendarQuarter as [ExpectedPaymentDateCalendarQuarter]
		, MonthNumberInYear as [ExpectedPaymentDateMonthNumberInYear]
		, WeekNumberInYear as [ExpectedPaymentDateWeekNumberInYear]
		, DayNumberInYear as [ExpectedPaymentDateDayNumberInYear]
		, DayNumberInMonth as [ExpectedPaymentDateDayNumberInMonth]
		, DayNumberInWeek as [ExpectedPaymentDateDayNumberInWeek]
		, YearMonth as [ExpectedPaymentDateYearMonth]
		, YearQuarter as [ExpectedPaymentDateYearQuarter]
		, IsWeekend as [ExpectedPaymentDateIsWeekend]
		, IsLastDayInMonth as [ExpectedPaymentDateIsLastDayInMonth]
		, MondayWeekCommencing as [ExpectedPaymentDateMondayWeekCommencing]
		, WorkDaysInMonthTotal as [ExpectedPaymentDateWorkDaysInMonthTotal]
		, WorkDaysInMonthToDate as [ExpectedPaymentDateWorkDaysInMonthToDate]
		, FiscalPeriod as [ExpectedPaymentDateFiscalPeriod]
		, FiscalQuarter as [ExpectedPaymentDateFiscalQuarter]
		, FiscalYear as [ExpectedPaymentDateFiscalYear]
		, FiscalPeriodCode as [ExpectedPaymentDateFiscalPeriodCode]
		, FiscalPeriodName as [ExpectedPaymentDateFiscalPeriodName]
		, FiscalYearPeriod as [ExpectedPaymentDateFiscalYearPeriod]
		, FiscalYearQuarter as [ExpectedPaymentDateFiscalYearQuarter]
		, WorkDaysInFiscalPeriodTotal as [ExpectedPaymentDateWorkDaysInFiscalPeriodTotal]
		, WorkDaysInFiscalPeriodToDate as [ExpectedPaymentDateWorkDaysInFiscalPeriodToDate]
	from
		dbo.Calendar
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('775044da-6739-563d-a790-777d96a634bf' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'CEF90B91A0009C02C853233996522C4F71F42C0117F2B9F7DB0489753D077DDA')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\pbi\Views\dimExpectedPaymentDate.sql", ID: {775044da-6739-563d-a790-777d96a634bf} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('775044da-6739-563d-a790-777d96a634bf' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'CEF90B91A0009C02C853233996522C4F71F42C0117F2B9F7DB0489753D077DDA')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('775044da-6739-563d-a790-777d96a634bf' AS UNIQUEIDENTIFIER), 'CEF90B91A0009C02C853233996522C4F71F42C0117F2B9F7DB0489753D077DDA', 'Programmable Objects\pbi\Views\dimExpectedPaymentDate.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('088e9de1-3504-5346-aba6-b31e57fb5cfb' AS UNIQUEIDENTIFIER) AND [script_checksum] = '251B23D82D25D237F44CC54FBEAED4E043DDD054A493C938C919119ED9044D1B')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\pbi\Views\dimInvoiceDate.sql", ID: {088e9de1-3504-5346-aba6-b31e57fb5cfb} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('088e9de1-3504-5346-aba6-b31e57fb5cfb' AS UNIQUEIDENTIFIER) AND [script_checksum] = '251B23D82D25D237F44CC54FBEAED4E043DDD054A493C938C919119ED9044D1B')
  EXECUTE ('IF OBJECT_ID(''[pbi].[dimInvoiceDate]'') IS NOT NULL
	DROP VIEW [pbi].[dimInvoiceDate];

');

GO
SET QUOTED_IDENTIFIER ON;

GO
SET ANSI_NULLS ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('088e9de1-3504-5346-aba6-b31e57fb5cfb' AS UNIQUEIDENTIFIER) AND [script_checksum] = '251B23D82D25D237F44CC54FBEAED4E043DDD054A493C938C919119ED9044D1B')
  EXECUTE ('CREATE view [pbi].[dimInvoiceDate]
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
VIEW NAME:      pbi.dimInvoiceDate
DESCRIPTION:    Exposes date information for use with factInvoice.InvoiceDateKey
AUTHOR:         Greg M. Lucas
ORIGIN DATE:    20-JUN-2017

Additional Notes
================


REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		20-JUN-2017		GML		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------


**********************************************************************************************************************/
--</CommentHeader>

	select
		  DateKey as [InvoiceDateKey]
		, ActualDate as [InvoiceDate]
		, DateNameEU as [InvoiceDateDateNameEU]
		, DateNameUS as [InvoiceDateDateNameUS]
		, EnglishMonthCode as [InvoiceDateEnglishMonthCode]
		, EnglishMonthName as [InvoiceDateEnglishMonthName]
		, EnglishDayCode as [InvoiceDateEnglishDayCode]
		, EnglishDayName as [InvoiceDateEnglishDayName]
		, CalendarYear as [InvoiceDateCalendarYear]
		, CalendarQuarter as [InvoiceDateCalendarQuarter]
		, MonthNumberInYear as [InvoiceDateMonthNumberInYear]
		, WeekNumberInYear as [InvoiceDateWeekNumberInYear]
		, DayNumberInYear as [InvoiceDateDayNumberInYear]
		, DayNumberInMonth as [InvoiceDateDayNumberInMonth]
		, DayNumberInWeek as [InvoiceDateDayNumberInWeek]
		, YearMonth as [InvoiceDateYearMonth]
		, YearQuarter as [InvoiceDateYearQuarter]
		, IsWeekend as [InvoiceDateIsWeekend]
		, IsLastDayInMonth as [InvoiceDateIsLastDayInMonth]
		, MondayWeekCommencing as [InvoiceDateMondayWeekCommencing]
		, WorkDaysInMonthTotal as [InvoiceDateWorkDaysInMonthTotal]
		, WorkDaysInMonthToDate as [InvoiceDateWorkDaysInMonthToDate]
		, FiscalPeriod as [InvoiceDateFiscalPeriod]
		, FiscalQuarter as [InvoiceDateFiscalQuarter]
		, FiscalYear as [InvoiceDateFiscalYear]
		, FiscalPeriodCode as [InvoiceDateFiscalPeriodCode]
		, FiscalPeriodName as [InvoiceDateFiscalPeriodName]
		, FiscalYearPeriod as [InvoiceDateFiscalYearPeriod]
		, FiscalYearQuarter as [InvoiceDateFiscalYearQuarter]
		, WorkDaysInFiscalPeriodTotal as [InvoiceDateWorkDaysInFiscalPeriodTotal]
		, WorkDaysInFiscalPeriodToDate as [InvoiceDateWorkDaysInFiscalPeriodToDate]
	from
		dbo.Calendar
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('088e9de1-3504-5346-aba6-b31e57fb5cfb' AS UNIQUEIDENTIFIER) AND [script_checksum] = '251B23D82D25D237F44CC54FBEAED4E043DDD054A493C938C919119ED9044D1B')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\pbi\Views\dimInvoiceDate.sql", ID: {088e9de1-3504-5346-aba6-b31e57fb5cfb} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('088e9de1-3504-5346-aba6-b31e57fb5cfb' AS UNIQUEIDENTIFIER) AND [script_checksum] = '251B23D82D25D237F44CC54FBEAED4E043DDD054A493C938C919119ED9044D1B')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('088e9de1-3504-5346-aba6-b31e57fb5cfb' AS UNIQUEIDENTIFIER), '251B23D82D25D237F44CC54FBEAED4E043DDD054A493C938C919119ED9044D1B', 'Programmable Objects\pbi\Views\dimInvoiceDate.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('67c006c4-3325-5a74-93bd-3a68d97ee549' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'BF4171C075953884A52597D029C72372CC6F967EBE2C8BFA47D6D09E02446686')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\pbi\Views\dimPaymentTerm.sql", ID: {67c006c4-3325-5a74-93bd-3a68d97ee549} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('67c006c4-3325-5a74-93bd-3a68d97ee549' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'BF4171C075953884A52597D029C72372CC6F967EBE2C8BFA47D6D09E02446686')
  EXECUTE ('IF OBJECT_ID(''[pbi].[dimPaymentTerm]'') IS NOT NULL
	DROP VIEW [pbi].[dimPaymentTerm];

');

GO
SET QUOTED_IDENTIFIER ON;

GO
SET ANSI_NULLS ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('67c006c4-3325-5a74-93bd-3a68d97ee549' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'BF4171C075953884A52597D029C72372CC6F967EBE2C8BFA47D6D09E02446686')
  EXECUTE ('create view [pbi].[dimPaymentTerm]
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
VIEW NAME:      pbi.dimPaymentTerm
DESCRIPTION:    Exposes current state of the PaymentTerm dimension imported from QlikView (no history available)
AUTHOR:         Greg M. Lucas
ORIGIN DATE:    12-JUN-2017

Additional Notes
================


REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		12-JUN-2017		GML		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------


**********************************************************************************************************************/
--</CommentHeader>

	select
		  PaymentTermKey
		, PaymentTermName
		, PaymentTermDays
		, PaymentTermDescription
		, cast(''19000101 00:00:00'' as datetime) as [RowValidFromUTC]
		, cast(''99991231 23:59:59'' as datetime) as [RowValidToUTC]
		, cast(''Y'' as char(1)) as [IsCurrent]
		, IsDeleted
	from
		qvstg.PaymentTerm
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('67c006c4-3325-5a74-93bd-3a68d97ee549' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'BF4171C075953884A52597D029C72372CC6F967EBE2C8BFA47D6D09E02446686')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\pbi\Views\dimPaymentTerm.sql", ID: {67c006c4-3325-5a74-93bd-3a68d97ee549} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('67c006c4-3325-5a74-93bd-3a68d97ee549' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'BF4171C075953884A52597D029C72372CC6F967EBE2C8BFA47D6D09E02446686')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('67c006c4-3325-5a74-93bd-3a68d97ee549' AS UNIQUEIDENTIFIER), 'BF4171C075953884A52597D029C72372CC6F967EBE2C8BFA47D6D09E02446686', 'Programmable Objects\pbi\Views\dimPaymentTerm.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('56af30bc-351d-5f3e-a4f3-76df0868ac49' AS UNIQUEIDENTIFIER) AND [script_checksum] = '49F81D3791ECF7DB15E41BA21ADD12F08C295FCB81229D8E0645A934C0626B22')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\pbi\Views\dimProduct.sql", ID: {56af30bc-351d-5f3e-a4f3-76df0868ac49} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('56af30bc-351d-5f3e-a4f3-76df0868ac49' AS UNIQUEIDENTIFIER) AND [script_checksum] = '49F81D3791ECF7DB15E41BA21ADD12F08C295FCB81229D8E0645A934C0626B22')
  EXECUTE ('IF OBJECT_ID(''[pbi].[dimProduct]'') IS NOT NULL
	DROP VIEW [pbi].[dimProduct];

');

GO
SET QUOTED_IDENTIFIER ON;

GO
SET ANSI_NULLS ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('56af30bc-351d-5f3e-a4f3-76df0868ac49' AS UNIQUEIDENTIFIER) AND [script_checksum] = '49F81D3791ECF7DB15E41BA21ADD12F08C295FCB81229D8E0645A934C0626B22')
  EXECUTE ('create view [pbi].[dimProduct]
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
VIEW NAME:      pbi.dimProduct
DESCRIPTION:    Exposes current state of the Product dimension imported from QlikView (no history available)
AUTHOR:         Greg M. Lucas
ORIGIN DATE:    12-JUN-2017

Additional Notes
================


REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		12-JUN-2017		GML		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------


**********************************************************************************************************************/
--</CommentHeader>

	select
		  p.ProductKey
		, p.ProductNumber
		, p.ProductName
		, p.ProductTypeId
		, p.ProductTypeName
		, p.ProductGnit
		, p.ProductDescription1
		, p.ProductDescription2
		, p.LocalProductGroup1
		, p.LocalProductGroup2
		, p.LocalProductGroup3
		, p.LocalProductGroup4
		, p.LocalProductGroup5
		, p.NativeProductCategoryKey
		, p.ProductCategoryBaseLevel
		, p.ProductCategoryLevel1
		, p.ProductCategoryLevel2
		, p.ProductCategoryLevel3
		, p.ProductCategoryLevel4
		, p.ProductCategoryLevel5
		, cast(''19000101 00:00:00'' as datetime) as [RowValidFromUTC]
		, cast(''99991231 23:59:59'' as datetime) as [RowValidToUTC]
		, cast(''Y'' as char(1)) as [IsCurrent]
		, p.IsDeleted
	from
		qvstg.Product as p
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('56af30bc-351d-5f3e-a4f3-76df0868ac49' AS UNIQUEIDENTIFIER) AND [script_checksum] = '49F81D3791ECF7DB15E41BA21ADD12F08C295FCB81229D8E0645A934C0626B22')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\pbi\Views\dimProduct.sql", ID: {56af30bc-351d-5f3e-a4f3-76df0868ac49} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('56af30bc-351d-5f3e-a4f3-76df0868ac49' AS UNIQUEIDENTIFIER) AND [script_checksum] = '49F81D3791ECF7DB15E41BA21ADD12F08C295FCB81229D8E0645A934C0626B22')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('56af30bc-351d-5f3e-a4f3-76df0868ac49' AS UNIQUEIDENTIFIER), '49F81D3791ECF7DB15E41BA21ADD12F08C295FCB81229D8E0645A934C0626B22', 'Programmable Objects\pbi\Views\dimProduct.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('7f523199-2243-580f-9749-99d4daa6c107' AS UNIQUEIDENTIFIER) AND [script_checksum] = '14F059D92263F0F0BD5DE104933E3FEB5C44158065BE4AB10BD7B881042269FE')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\pbi\Views\dimProductCategory.sql", ID: {7f523199-2243-580f-9749-99d4daa6c107} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('7f523199-2243-580f-9749-99d4daa6c107' AS UNIQUEIDENTIFIER) AND [script_checksum] = '14F059D92263F0F0BD5DE104933E3FEB5C44158065BE4AB10BD7B881042269FE')
  EXECUTE ('IF OBJECT_ID(''[pbi].[dimProductCategory]'') IS NOT NULL
	DROP VIEW [pbi].[dimProductCategory];

');

GO
SET QUOTED_IDENTIFIER ON;

GO
SET ANSI_NULLS ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('7f523199-2243-580f-9749-99d4daa6c107' AS UNIQUEIDENTIFIER) AND [script_checksum] = '14F059D92263F0F0BD5DE104933E3FEB5C44158065BE4AB10BD7B881042269FE')
  EXECUTE ('create view [pbi].[dimProductCategory]
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
VIEW NAME:      pbi.dimProductCategory
DESCRIPTION:    Exposes current state of the Product Category dimension imported from QlikView (no history available)
AUTHOR:         Greg M. Lucas
ORIGIN DATE:    19-JUN-2017

Additional Notes
================


REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		19-JUN-2017		GML		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------


**********************************************************************************************************************/
--</CommentHeader>

	select
		  s.ProductCategoryKey
		, ProductCategoryId
		, ProductCategoryName
		, NodeDepth
		, Level3Id
		, Level3Name
		, Level2Id
		, Level2Name
		, Level1Id
		, Level1Name
		, ProductCategoryDescription 
		, cast(''19000101 00:00:00'' as datetime) as [RowValidFromUTC]
		, cast(''99991231 23:59:59'' as datetime) as [RowValidToUTC]
		, cast(''Y'' as char(1)) as [IsCurrent]
		, s.IsDeleted
	from
		qvstg.ProductCategory as s
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('7f523199-2243-580f-9749-99d4daa6c107' AS UNIQUEIDENTIFIER) AND [script_checksum] = '14F059D92263F0F0BD5DE104933E3FEB5C44158065BE4AB10BD7B881042269FE')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\pbi\Views\dimProductCategory.sql", ID: {7f523199-2243-580f-9749-99d4daa6c107} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('7f523199-2243-580f-9749-99d4daa6c107' AS UNIQUEIDENTIFIER) AND [script_checksum] = '14F059D92263F0F0BD5DE104933E3FEB5C44158065BE4AB10BD7B881042269FE')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('7f523199-2243-580f-9749-99d4daa6c107' AS UNIQUEIDENTIFIER), '14F059D92263F0F0BD5DE104933E3FEB5C44158065BE4AB10BD7B881042269FE', 'Programmable Objects\pbi\Views\dimProductCategory.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('dc8646ca-d49d-5b78-a511-7dced9d749ab' AS UNIQUEIDENTIFIER) AND [script_checksum] = '565BA6F479214AFBBA1DAD7237A7803CD1EB3202FE0D9AA3A69ABA437E73E05D')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\pbi\Views\dimPromisedDeliveryDate.sql", ID: {dc8646ca-d49d-5b78-a511-7dced9d749ab} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('dc8646ca-d49d-5b78-a511-7dced9d749ab' AS UNIQUEIDENTIFIER) AND [script_checksum] = '565BA6F479214AFBBA1DAD7237A7803CD1EB3202FE0D9AA3A69ABA437E73E05D')
  EXECUTE ('IF OBJECT_ID(''[pbi].[dimPromisedDeliveryDate]'') IS NOT NULL
	DROP VIEW [pbi].[dimPromisedDeliveryDate];

');

GO
SET QUOTED_IDENTIFIER ON;

GO
SET ANSI_NULLS ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('dc8646ca-d49d-5b78-a511-7dced9d749ab' AS UNIQUEIDENTIFIER) AND [script_checksum] = '565BA6F479214AFBBA1DAD7237A7803CD1EB3202FE0D9AA3A69ABA437E73E05D')
  EXECUTE ('CREATE view [pbi].[dimPromisedDeliveryDate]
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
VIEW NAME:      pbi.dimPromisedDeliveryDate
DESCRIPTION:    Exposes date information for use with factOrder.PromisedDeliveryDateKey (when implemented)
AUTHOR:         Greg M. Lucas
ORIGIN DATE:    21-JUN-2017

Additional Notes
================


REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		21-JUN-2017		GML		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------


**********************************************************************************************************************/
--</CommentHeader>

	select
		  DateKey as [PromisedDeliveryDateKey]
		, ActualDate as [PromisedDeliveryDate]
		, DateNameEU as [PromisedDeliveryDateNameEU]
		, DateNameUS as [PromisedDeliveryDateNameUS]
		, EnglishMonthCode as [PromisedDeliveryDateEnglishMonthCode]
		, EnglishMonthName as [PromisedDeliveryDateEnglishMonthName]
		, EnglishDayCode as [PromisedDeliveryDateEnglishDayCode]
		, EnglishDayName as [PromisedDeliveryDateEnglishDayName]
		, CalendarYear as [PromisedDeliveryDateCalendarYear]
		, CalendarQuarter as [PromisedDeliveryDateCalendarQuarter]
		, MonthNumberInYear as [PromisedDeliveryDateMonthNumberInYear]
		, WeekNumberInYear as [PromisedDeliveryDateWeekNumberInYear]
		, DayNumberInYear as [PromisedDeliveryDateDayNumberInYear]
		, DayNumberInMonth as [PromisedDeliveryDateDayNumberInMonth]
		, DayNumberInWeek as [PromisedDeliveryDateDayNumberInWeek]
		, YearMonth as [PromisedDeliveryDateYearMonth]
		, YearQuarter as [PromisedDeliveryDateYearQuarter]
		, IsWeekend as [PromisedDeliveryDateIsWeekend]
		, IsLastDayInMonth as [PromisedDeliveryDateIsLastDayInMonth]
		, MondayWeekCommencing as [PromisedDeliveryDateMondayWeekCommencing]
		, WorkDaysInMonthTotal as [PromisedDeliveryDateWorkDaysInMonthTotal]
		, WorkDaysInMonthToDate as [PromisedDeliveryDateWorkDaysInMonthToDate]
		, FiscalPeriod as [PromisedDeliveryDateFiscalPeriod]
		, FiscalQuarter as [PromisedDeliveryDateFiscalQuarter]
		, FiscalYear as [PromisedDeliveryDateFiscalYear]
		, FiscalPeriodCode as [PromisedDeliveryDateFiscalPeriodCode]
		, FiscalPeriodName as [PromisedDeliveryDateFiscalPeriodName]
		, FiscalYearPeriod as [PromisedDeliveryDateFiscalYearPeriod]
		, FiscalYearQuarter as [PromisedDeliveryDateFiscalYearQuarter]
		, WorkDaysInFiscalPeriodTotal as [PromisedDeliveryDateWorkDaysInFiscalPeriodTotal]
		, WorkDaysInFiscalPeriodToDate as [PromisedDeliveryDateWorkDaysInFiscalPeriodToDate]
	from
		dbo.Calendar
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('dc8646ca-d49d-5b78-a511-7dced9d749ab' AS UNIQUEIDENTIFIER) AND [script_checksum] = '565BA6F479214AFBBA1DAD7237A7803CD1EB3202FE0D9AA3A69ABA437E73E05D')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\pbi\Views\dimPromisedDeliveryDate.sql", ID: {dc8646ca-d49d-5b78-a511-7dced9d749ab} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('dc8646ca-d49d-5b78-a511-7dced9d749ab' AS UNIQUEIDENTIFIER) AND [script_checksum] = '565BA6F479214AFBBA1DAD7237A7803CD1EB3202FE0D9AA3A69ABA437E73E05D')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('dc8646ca-d49d-5b78-a511-7dced9d749ab' AS UNIQUEIDENTIFIER), '565BA6F479214AFBBA1DAD7237A7803CD1EB3202FE0D9AA3A69ABA437E73E05D', 'Programmable Objects\pbi\Views\dimPromisedDeliveryDate.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('5a8c5a0f-19c9-56d6-b9f0-1069ca71458d' AS UNIQUEIDENTIFIER) AND [script_checksum] = '19F757419C575779C129D7F895D6CD627D3EE592E68771EA585ED4647A3E9700')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\pbi\Views\dimSite.sql", ID: {5a8c5a0f-19c9-56d6-b9f0-1069ca71458d} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('5a8c5a0f-19c9-56d6-b9f0-1069ca71458d' AS UNIQUEIDENTIFIER) AND [script_checksum] = '19F757419C575779C129D7F895D6CD627D3EE592E68771EA585ED4647A3E9700')
  EXECUTE ('IF OBJECT_ID(''[pbi].[dimSite]'') IS NOT NULL
	DROP VIEW [pbi].[dimSite];

');

GO
SET QUOTED_IDENTIFIER ON;

GO
SET ANSI_NULLS ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('5a8c5a0f-19c9-56d6-b9f0-1069ca71458d' AS UNIQUEIDENTIFIER) AND [script_checksum] = '19F757419C575779C129D7F895D6CD627D3EE592E68771EA585ED4647A3E9700')
  EXECUTE ('create view [pbi].[dimSite]
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
VIEW NAME:      pbi.dimSite
DESCRIPTION:    Exposes current state of the Site dimension imported from QlikView (no history available)
AUTHOR:         Greg M. Lucas
ORIGIN DATE:    12-JUN-2017

Additional Notes
================


REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		12-JUN-2017		GML		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------


**********************************************************************************************************************/
--</CommentHeader>

	select
		s.SiteKey
	  , s.SiteName
	  , s.SiteDescription
	  , s.BusinessUnitKey
	  , s.SalesCenterSbuCode as [SBU]
	  , s.BusinessUnitName
	  , s.RegionName
	  , s.RegionDescription
	  , s.SourceSystemName
	  , cast(''19000101 00:00:00'' as datetime) as [RowValidFromUTC]
	  , cast(''99991231 23:59:59'' as datetime) as [RowValidToUTC]
	  , cast(''Y'' as char(1)) as [IsCurrent]
	  , s.IsDeleted
	from
		qvstg.Site as s
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('5a8c5a0f-19c9-56d6-b9f0-1069ca71458d' AS UNIQUEIDENTIFIER) AND [script_checksum] = '19F757419C575779C129D7F895D6CD627D3EE592E68771EA585ED4647A3E9700')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\pbi\Views\dimSite.sql", ID: {5a8c5a0f-19c9-56d6-b9f0-1069ca71458d} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('5a8c5a0f-19c9-56d6-b9f0-1069ca71458d' AS UNIQUEIDENTIFIER) AND [script_checksum] = '19F757419C575779C129D7F895D6CD627D3EE592E68771EA585ED4647A3E9700')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('5a8c5a0f-19c9-56d6-b9f0-1069ca71458d' AS UNIQUEIDENTIFIER), '19F757419C575779C129D7F895D6CD627D3EE592E68771EA585ED4647A3E9700', 'Programmable Objects\pbi\Views\dimSite.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('16949ad0-cb95-5a54-a78e-b2d7459ac68b' AS UNIQUEIDENTIFIER) AND [script_checksum] = '743953FF977F3056EC9CFB5BF9BF7772DFD8D07E690D5732E7B414D1DF270D9D')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\pbi\Views\factBudgetSales.sql", ID: {16949ad0-cb95-5a54-a78e-b2d7459ac68b} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('16949ad0-cb95-5a54-a78e-b2d7459ac68b' AS UNIQUEIDENTIFIER) AND [script_checksum] = '743953FF977F3056EC9CFB5BF9BF7772DFD8D07E690D5732E7B414D1DF270D9D')
  EXECUTE ('IF OBJECT_ID(''[pbi].[factBudgetSales]'') IS NOT NULL
	DROP VIEW [pbi].[factBudgetSales];

');

GO
SET QUOTED_IDENTIFIER ON;

GO
SET ANSI_NULLS ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('16949ad0-cb95-5a54-a78e-b2d7459ac68b' AS UNIQUEIDENTIFIER) AND [script_checksum] = '743953FF977F3056EC9CFB5BF9BF7772DFD8D07E690D5732E7B414D1DF270D9D')
  EXECUTE ('create view [pbi].[factBudgetSales]
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
VIEW NAME:      pbi.factBudgetSales
DESCRIPTION:    Exposes current state of the BudgetSales facts imported from QlikView (no history available)
AUTHOR:         Greg M. Lucas
ORIGIN DATE:    20-JUN-2017

Additional Notes
================


REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		20-JUN-2017		GML		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------


**********************************************************************************************************************/
--</CommentHeader>

	select
		  BudgetSaleKey
		, LineCount
		, BusinessUnitKey
		, BudgetMonthDateKey
		, InstallationServices
		, ProducedGoods
		, GroupGoods
		, CommercialGoods
		, ExternalSales
		, IC_Transf_SBU
		, IC_Transf_Region
		, IC_Transf_Abroad
		, IC_Transf_US
		, Total_IC_Sales
		, TotalSalesAndTransfers
		, IsDeleted
	from
		qvstg.BudgetSales
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('16949ad0-cb95-5a54-a78e-b2d7459ac68b' AS UNIQUEIDENTIFIER) AND [script_checksum] = '743953FF977F3056EC9CFB5BF9BF7772DFD8D07E690D5732E7B414D1DF270D9D')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\pbi\Views\factBudgetSales.sql", ID: {16949ad0-cb95-5a54-a78e-b2d7459ac68b} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('16949ad0-cb95-5a54-a78e-b2d7459ac68b' AS UNIQUEIDENTIFIER) AND [script_checksum] = '743953FF977F3056EC9CFB5BF9BF7772DFD8D07E690D5732E7B414D1DF270D9D')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('16949ad0-cb95-5a54-a78e-b2d7459ac68b' AS UNIQUEIDENTIFIER), '743953FF977F3056EC9CFB5BF9BF7772DFD8D07E690D5732E7B414D1DF270D9D', 'Programmable Objects\pbi\Views\factBudgetSales.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f508adf0-fe95-583d-aad0-1ebf45ab1ffb' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'D0FBBE83D30657E1C56FEFCE9FFEFC3D884F3F388AEEB4E9E9BB99AFF4AA89BF')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\pbi\Views\factBudgetVolumes.sql", ID: {f508adf0-fe95-583d-aad0-1ebf45ab1ffb} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f508adf0-fe95-583d-aad0-1ebf45ab1ffb' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'D0FBBE83D30657E1C56FEFCE9FFEFC3D884F3F388AEEB4E9E9BB99AFF4AA89BF')
  EXECUTE ('IF OBJECT_ID(''[pbi].[factBudgetVolumes]'') IS NOT NULL
	DROP VIEW [pbi].[factBudgetVolumes];

');

GO
SET QUOTED_IDENTIFIER ON;

GO
SET ANSI_NULLS ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f508adf0-fe95-583d-aad0-1ebf45ab1ffb' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'D0FBBE83D30657E1C56FEFCE9FFEFC3D884F3F388AEEB4E9E9BB99AFF4AA89BF')
  EXECUTE ('create view [pbi].[factBudgetVolumes]
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
VIEW NAME:      pbi.factBudgetVolumes
DESCRIPTION:    Exposes current state of the BudgetVolume facts imported from QlikView (no history available)
AUTHOR:         Greg M. Lucas
ORIGIN DATE:    21-JUN-2017

Additional Notes
================


REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		21-JUN-2017		GML		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------


**********************************************************************************************************************/
--</CommentHeader>

	select
		  BudgetVolumesKey as [BudgetVolumeKey]
		, LineCount
		, BusinessUnitKey
		, ProductCategoryKey
		, Jan_YTD
		, Feb_YTD
		, Mar_YTD
		, Apr_YTD
		, May_YTD
		, Jun_YTD
		, Jul_YTD
		, Aug_YTD
		, Sep_YTD
		, Oct_YTD
		, Nov_YTD
		, Dec_YTD
		, IsDeleted
	from
		qvstg.BudgetVolumes
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f508adf0-fe95-583d-aad0-1ebf45ab1ffb' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'D0FBBE83D30657E1C56FEFCE9FFEFC3D884F3F388AEEB4E9E9BB99AFF4AA89BF')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\pbi\Views\factBudgetVolumes.sql", ID: {f508adf0-fe95-583d-aad0-1ebf45ab1ffb} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f508adf0-fe95-583d-aad0-1ebf45ab1ffb' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'D0FBBE83D30657E1C56FEFCE9FFEFC3D884F3F388AEEB4E9E9BB99AFF4AA89BF')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('f508adf0-fe95-583d-aad0-1ebf45ab1ffb' AS UNIQUEIDENTIFIER), 'D0FBBE83D30657E1C56FEFCE9FFEFC3D884F3F388AEEB4E9E9BB99AFF4AA89BF', 'Programmable Objects\pbi\Views\factBudgetVolumes.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('4248b9c1-c289-57a9-9657-2797fc363d49' AS UNIQUEIDENTIFIER) AND [script_checksum] = '21216F1473282AEDA5DFEC1E9DD6E70D6B2BC23C9C3B6F5B5C94CB1068660968')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\pbi\Views\factInvoice.sql", ID: {4248b9c1-c289-57a9-9657-2797fc363d49} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('4248b9c1-c289-57a9-9657-2797fc363d49' AS UNIQUEIDENTIFIER) AND [script_checksum] = '21216F1473282AEDA5DFEC1E9DD6E70D6B2BC23C9C3B6F5B5C94CB1068660968')
  EXECUTE ('IF OBJECT_ID(''[pbi].[factInvoice]'') IS NOT NULL
	DROP VIEW [pbi].[factInvoice];

');

GO
SET QUOTED_IDENTIFIER ON;

GO
SET ANSI_NULLS ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('4248b9c1-c289-57a9-9657-2797fc363d49' AS UNIQUEIDENTIFIER) AND [script_checksum] = '21216F1473282AEDA5DFEC1E9DD6E70D6B2BC23C9C3B6F5B5C94CB1068660968')
  EXECUTE ('create view [pbi].[factInvoice]
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
VIEW NAME:      pbi.factInvoice
DESCRIPTION:    Exposes current state of the Invoice facts imported from QlikView (no history available)
AUTHOR:         Greg M. Lucas
ORIGIN DATE:    13-JUN-2017

Additional Notes
================


REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		13-JUN-2017		GML		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------


**********************************************************************************************************************/
--</CommentHeader>

	select
		  i.InvoiceKey
		, i.LineCount
		, i.InvoiceDateKey
		, i.InvoiceDate
		, i.InvoiceNumber
		, i.InvoiceLineNumber
		, i.NativeInvoiceLineNumber
		, i.OrderNumber
		, i.OrderLineNumber
		, i.NativeOrderLineNumber
		, i.NativeInvoiceType
		, i.InvoiceTypeName
		, i.LocalSellingSite
		, i.SiteKey
		, i.ProductKey
		, i.SoldToCustomerKey
		, i.ShippedToCustomerKey
		, i.NativeSalesPersonId
		, i.NativeSalesPersonName
		, i.DeliveryDateKey as [ActualDeliveryDateKey]
		, i.DeliveryDate as [ActualDeliveryDate]
		, i.ExpectedPaymentDateKey
		, i.ExpectedPaymentDate
		, i.ActualPaymentDateKey
		, i.ActualPaymentDate
		, i.LocalDeliveryTerm
		, i.LocalDeliveryTermText
		, i.PaymentTermKey
		, i.LocalPaymentTerm
		, i.LocalPaymentTermText
		, i.InvoiceQuantityValue
		, i.InvoiceQuantityUnitOfMeasure
		, i.StatisticQuantityValue
		, i.StatisticQuantityUnitOfMeasure
		, i.Quantity
		, i.LocalUnitOfMeasure
		, i.LocalUnitOfMeasureHarmonised
		, i.LocalUnitOfMeasureFactor
		, i.InvoiceAmount
		, i.LocalAmount
		, i.GroupAmountEUR
		, i.InvoiceCurrency
		, i.LocalCurrency
		, i.LineDiscountAmount
		, i.InvoiceDiscountAmount
		, i.LineBonusAmount
		, i.BonusShareAmount
		, i.StandardCost
		, i.StandardFreight
		--! Quick and dirty hack for Bob''s Gross-to-Net Sales Report
		, cast(case when LocalCurrency <> InvoiceCurrency and LocalAmount > 0 and InvoiceAmount > 0 then LocalAmount / InvoiceAmount else 1 end as decimal(28,4)) as [InvoiceRate]
		, i.IsDeleted
	from
		qvstg.Invoice as i
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('4248b9c1-c289-57a9-9657-2797fc363d49' AS UNIQUEIDENTIFIER) AND [script_checksum] = '21216F1473282AEDA5DFEC1E9DD6E70D6B2BC23C9C3B6F5B5C94CB1068660968')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\pbi\Views\factInvoice.sql", ID: {4248b9c1-c289-57a9-9657-2797fc363d49} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('4248b9c1-c289-57a9-9657-2797fc363d49' AS UNIQUEIDENTIFIER) AND [script_checksum] = '21216F1473282AEDA5DFEC1E9DD6E70D6B2BC23C9C3B6F5B5C94CB1068660968')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('4248b9c1-c289-57a9-9657-2797fc363d49' AS UNIQUEIDENTIFIER), '21216F1473282AEDA5DFEC1E9DD6E70D6B2BC23C9C3B6F5B5C94CB1068660968', 'Programmable Objects\pbi\Views\factInvoice.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('932a5491-2aa7-5f8a-a962-b2368db40ae3' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'EFC728E37914942BE883FC3AA332057056E042360FD73EA8F5E6D607650BE0B1')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\pbi\Views\factOrderBacklog.sql", ID: {932a5491-2aa7-5f8a-a962-b2368db40ae3} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('932a5491-2aa7-5f8a-a962-b2368db40ae3' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'EFC728E37914942BE883FC3AA332057056E042360FD73EA8F5E6D607650BE0B1')
  EXECUTE ('IF OBJECT_ID(''[pbi].[factOrderBacklog]'') IS NOT NULL
	DROP VIEW [pbi].[factOrderBacklog];

');

GO
SET QUOTED_IDENTIFIER ON;

GO
SET ANSI_NULLS ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('932a5491-2aa7-5f8a-a962-b2368db40ae3' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'EFC728E37914942BE883FC3AA332057056E042360FD73EA8F5E6D607650BE0B1')
  EXECUTE ('create view [pbi].[factOrderBacklog]
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
VIEW NAME:      pbi.factOrderBacklog
DESCRIPTION:    Exposes current state of the Orders on backlog, i.e. promised but past or not delivered (imported
				from QlikView - no history available)
AUTHOR:         Greg M. Lucas
ORIGIN DATE:    15-JUN-2017

Additional Notes
================


REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		15-JUN-2017		GML		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------


**********************************************************************************************************************/
--</CommentHeader>

	select
		  ob.OrderBacklogKey
		, ob.LineCount
		, ob.OrderNumber
		, ob.OrderLineNumber
		, ob.NativeOrderLineNumber
		, ob.ExpectedInvoiceDateKey
		, ob.ExpectedInvoiceDate
		, ob.NativeOrderType
		, ob.OrderTypeName
		, ob.LocalSellingSite
		, ob.SiteKey
		, ob.ProductKey
		, ob.SoldToCustomerKey
		, ob.ShippedToCustomerKey
		, ob.NativeSalesPersonId
		, ob.NativeSalesPersonName
		, ob.OrderQuantityValue
		, ob.OrderQuantityUnitOfMeasure
		, ob.StatisticQuantityValue
		, ob.StatisticQuantityUnitOfMeasure
		, ob.Quantity
		, ob.LocalUnitOfMeasure
		, ob.LocalUnitOfMeasureHarmonised
		, ob.LocalUnitOfMeasureFactor
		, ob.OrderAmount
		, ob.LocalAmount
		, ob.GroupAmountEUR
		, ob.OrderCurrency
		, ob.LocalCurrency
		, ob.LineDiscountAmount
		, ob.OrderDiscountAmount
		, ob.LineBonusAmount
		, ob.BonusShareAmount
		--! Quick and dirty hack for Bob''s Gross-to-Net Sales Report
		, cast(case when LocalCurrency <> OrderCurrency and LocalAmount > 0 and OrderAmount > 0 then LocalAmount / OrderAmount else 1 end as decimal(28,4)) as [InvoiceRate]
		, ob.IsDeleted
	from
		qvstg.OrderBacklog as ob
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('932a5491-2aa7-5f8a-a962-b2368db40ae3' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'EFC728E37914942BE883FC3AA332057056E042360FD73EA8F5E6D607650BE0B1')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\pbi\Views\factOrderBacklog.sql", ID: {932a5491-2aa7-5f8a-a962-b2368db40ae3} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('932a5491-2aa7-5f8a-a962-b2368db40ae3' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'EFC728E37914942BE883FC3AA332057056E042360FD73EA8F5E6D607650BE0B1')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('932a5491-2aa7-5f8a-a962-b2368db40ae3' AS UNIQUEIDENTIFIER), 'EFC728E37914942BE883FC3AA332057056E042360FD73EA8F5E6D607650BE0B1', 'Programmable Objects\pbi\Views\factOrderBacklog.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1c8c4dc5-8292-5543-a1fb-f2b75fa1e109' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'C411C7E030D5B6287E4DBDD934FF89C5486287A537DC36DC3C879CB70CF0A88B')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\pbi\Views\factOrderShippedNotInvoiced.sql", ID: {1c8c4dc5-8292-5543-a1fb-f2b75fa1e109} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1c8c4dc5-8292-5543-a1fb-f2b75fa1e109' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'C411C7E030D5B6287E4DBDD934FF89C5486287A537DC36DC3C879CB70CF0A88B')
  EXECUTE ('IF OBJECT_ID(''[pbi].[factOrderShippedNotInvoiced]'') IS NOT NULL
	DROP VIEW [pbi].[factOrderShippedNotInvoiced];

');

GO
SET QUOTED_IDENTIFIER ON;

GO
SET ANSI_NULLS ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1c8c4dc5-8292-5543-a1fb-f2b75fa1e109' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'C411C7E030D5B6287E4DBDD934FF89C5486287A537DC36DC3C879CB70CF0A88B')
  EXECUTE ('create view [pbi].[factOrderShippedNotInvoiced]
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
VIEW NAME:      pbi.factOrderShippedNotInvoiced
DESCRIPTION:    Exposes current state of the Orders that have been shipped but not invoiced (imported from QlikView
				- no history available)
AUTHOR:         Greg M. Lucas
ORIGIN DATE:    14-JUN-2017

Additional Notes
================


REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		14-JUN-2017		GML		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------


**********************************************************************************************************************/
--</CommentHeader>

	select
		  osni.OrderShippedNotInvoicedKey
		, osni.LineCount
		, osni.OrderNumber
		, osni.OrderLineNumber
		, osni.NativeOrderLineNumber
		, osni.NativeShippingDocumentKey
		, osni.ExpectedInvoiceDateKey
		, osni.ExpectedInvoiceDate
		, osni.NativeOrderType
		, osni.OrderTypeName
		, osni.LocalSellingSite
		, osni.SiteKey
		, osni.ProductKey
		, osni.SoldToCustomerKey
		, osni.ShippedToCustomerKey
		, osni.NativeSalesPersonId
		, osni.NativeSalesPersonName
		, osni.ShippedQuantityValue
		, osni.ShippedQuantityUnitOfMeasure
		, osni.StatisticQuantityValue
		, osni.StatisticQuantityUnitOfMeasure
		, osni.Quantity
		, osni.LocalUnitOfMeasure
		, osni.LocalUnitOfMeasureHarmonised
		, osni.LocalUnitOfMeasureFactor
		, osni.ShippedAmount
		, osni.LocalAmount
		, osni.GroupAmountEUR
		, osni.ShippedCurrency
		, osni.LocalCurrency
		, osni.LineDiscountAmount
		, osni.OrderDiscountAmount
		, osni.LineBonusAmount
		, osni.BonusShareAmount
		--! Quick and dirty hack for Bob''s Gross-to-Net Sales Report
		, cast(case when LocalCurrency <> ShippedCurrency and LocalAmount > 0 and ShippedAmount > 0 then LocalAmount / ShippedAmount else 1 end as decimal(28,4)) as [InvoiceRate]
		, osni.IsDeleted
	from
		qvstg.OrderShippedNotInvoiced as osni
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1c8c4dc5-8292-5543-a1fb-f2b75fa1e109' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'C411C7E030D5B6287E4DBDD934FF89C5486287A537DC36DC3C879CB70CF0A88B')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\pbi\Views\factOrderShippedNotInvoiced.sql", ID: {1c8c4dc5-8292-5543-a1fb-f2b75fa1e109} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1c8c4dc5-8292-5543-a1fb-f2b75fa1e109' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'C411C7E030D5B6287E4DBDD934FF89C5486287A537DC36DC3C879CB70CF0A88B')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('1c8c4dc5-8292-5543-a1fb-f2b75fa1e109' AS UNIQUEIDENTIFIER), 'C411C7E030D5B6287E4DBDD934FF89C5486287A537DC36DC3C879CB70CF0A88B', 'Programmable Objects\pbi\Views\factOrderShippedNotInvoiced.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('131969b2-c406-5950-a8d9-e7a552a86a97' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'D4A8ADED8CD296F672654F12BA3562AEB19351125F9A2D300913378D458A643B')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\pbi\Views\factSaleForecastTotal.sql", ID: {131969b2-c406-5950-a8d9-e7a552a86a97} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('131969b2-c406-5950-a8d9-e7a552a86a97' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'D4A8ADED8CD296F672654F12BA3562AEB19351125F9A2D300913378D458A643B')
  EXECUTE ('IF OBJECT_ID(''[pbi].[factSaleForecastTotal]'') IS NOT NULL
	DROP VIEW [pbi].[factSaleForecastTotal];

');

GO
SET QUOTED_IDENTIFIER ON;

GO
SET ANSI_NULLS ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('131969b2-c406-5950-a8d9-e7a552a86a97' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'D4A8ADED8CD296F672654F12BA3562AEB19351125F9A2D300913378D458A643B')
  EXECUTE ('create view [pbi].[factSaleForecastTotal]
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
VIEW NAME:      pbi.factSaleForecastTotal
DESCRIPTION:    Exposes current state of the Invoice facts imported from QlikView (no history available)
AUTHOR:         Greg M. Lucas
ORIGIN DATE:    20-JUN-2017

Additional Notes
================


REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		20-JUN-2017		GML		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------


**********************************************************************************************************************/
--</CommentHeader>

select
	  SiteKey
	, ProductKey
	, SoldToCustomerKey
	, ShippedToCustomerKey
	, sum(TotalGroupAmountEUR) as [TotalGroupAmountEUR]
from
	(
			select
				  i.SiteKey
				, i.ProductKey
				, i.SoldToCustomerKey
				, i.ShippedToCustomerKey
				, sum(coalesce(i.GroupAmountEUR, 0)) as [TotalGroupAmountEUR]
			from
				qvstg.Invoice as i
			where
				i.IsDeleted = ''N''
			group by
				  i.SiteKey
				, i.ProductKey
				, i.SoldToCustomerKey
				, i.ShippedToCustomerKey
		union
			select
				  osni.SiteKey
				, osni.ProductKey
				, osni.SoldToCustomerKey
				, osni.ShippedToCustomerKey
				, sum(coalesce(osni.GroupAmountEUR, 0)) as [TotalGroupAmountEUR]
			from
				qvstg.OrderShippedNotInvoiced as osni
			where
				osni.IsDeleted = ''N''
			group by
				  osni.SiteKey
				, osni.ProductKey
				, osni.SoldToCustomerKey
				, osni.ShippedToCustomerKey
		union
			select
				  ob.SiteKey
				, ob.ProductKey
				, ob.SoldToCustomerKey
				, ob.ShippedToCustomerKey
				, sum(coalesce(ob.GroupAmountEUR, 0)) as [TotalGroupAmountEUR]
			from
				qvstg.OrderBacklog as ob
			where
				ob.IsDeleted = ''N''
			group by
				  ob.SiteKey
				, ob.ProductKey
				, ob.SoldToCustomerKey
				, ob.ShippedToCustomerKey
	) as x
group by
	  SiteKey
	, ProductKey
	, SoldToCustomerKey
	, ShippedToCustomerKey
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('131969b2-c406-5950-a8d9-e7a552a86a97' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'D4A8ADED8CD296F672654F12BA3562AEB19351125F9A2D300913378D458A643B')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\pbi\Views\factSaleForecastTotal.sql", ID: {131969b2-c406-5950-a8d9-e7a552a86a97} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('131969b2-c406-5950-a8d9-e7a552a86a97' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'D4A8ADED8CD296F672654F12BA3562AEB19351125F9A2D300913378D458A643B')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('131969b2-c406-5950-a8d9-e7a552a86a97' AS UNIQUEIDENTIFIER), 'D4A8ADED8CD296F672654F12BA3562AEB19351125F9A2D300913378D458A643B', 'Programmable Objects\pbi\Views\factSaleForecastTotal.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('4a776900-95a8-558b-ad88-94adaa4564f3' AS UNIQUEIDENTIFIER) AND [script_checksum] = '28E23EEEB9DE14DFE150F046F11A578297E7E168ED8A10B45C13A154996EEE37')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\pbi\Views\Today.sql", ID: {4a776900-95a8-558b-ad88-94adaa4564f3} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('4a776900-95a8-558b-ad88-94adaa4564f3' AS UNIQUEIDENTIFIER) AND [script_checksum] = '28E23EEEB9DE14DFE150F046F11A578297E7E168ED8A10B45C13A154996EEE37')
  EXECUTE ('if object_id(''[pbi].[Today]'') is not null
	drop view [pbi].[Today];
');

GO
SET QUOTED_IDENTIFIER ON;

GO
SET ANSI_NULLS ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('4a776900-95a8-558b-ad88-94adaa4564f3' AS UNIQUEIDENTIFIER) AND [script_checksum] = '28E23EEEB9DE14DFE150F046F11A578297E7E168ED8A10B45C13A154996EEE37')
  EXECUTE ('CREATE view [pbi].[Today]
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
VIEW NAME:      pbi.Today
DESCRIPTION:    Exposes date information for the current date (used to spoof getdate() in Power BI)
AUTHOR:         Greg M. Lucas
ORIGIN DATE:    17-JUL-2017

Additional Notes
================


REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		17-JUL-2017		GML		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------


**********************************************************************************************************************/
--</CommentHeader>

	select
		  DateKey as [TodayDateKey]
		, ActualDate as [TodayDate]
		, DateNameEU as [TodayDateNameEU]
		, DateNameUS as [TodayDateNameUS]
		, EnglishMonthCode as [TodayEnglishMonthCode]
		, EnglishMonthName as [TodayEnglishMonthName]
		, EnglishDayCode as [TodayEnglishDayCode]
		, EnglishDayName as [TodayEnglishDayName]
		, CalendarYear as [TodayCalendarYear]
		, CalendarQuarter as [TodayCalendarQuarter]
		, MonthNumberInYear as [TodayMonthNumberInYear]
		, WeekNumberInYear as [TodayWeekNumberInYear]
		, DayNumberInYear as [TodayDayNumberInYear]
		, DayNumberInMonth as [TodayDayNumberInMonth]
		, DayNumberInWeek as [TodayDayNumberInWeek]
		, YearMonth as [TodayYearMonth]
		, YearQuarter as [TodayYearQuarter]
		, IsWeekend as [TodayIsWeekend]
		, IsLastDayInMonth as [TodayIsLastDayInMonth]
		, MondayWeekCommencing as [TodayMondayWeekCommencing]
		, WorkDaysInMonthTotal as [TodayWorkDaysInMonthTotal]
		, WorkDaysInMonthToDate as [TodayWorkDaysInMonthToDate]
		, FiscalPeriod as [TodayFiscalPeriod]
		, FiscalQuarter as [TodayFiscalQuarter]
		, FiscalYear as [TodayFiscalYear]
		, FiscalPeriodCode as [TodayFiscalPeriodCode]
		, FiscalPeriodName as [TodayFiscalPeriodName]
		, FiscalYearPeriod as [TodayFiscalYearPeriod]
		, FiscalYearQuarter as [TodayFiscalYearQuarter]
		, WorkDaysInFiscalPeriodTotal as [TodayWorkDaysInFiscalPeriodTotal]
		, WorkDaysInFiscalPeriodToDate as [TodayWorkDaysInFiscalPeriodToDate]
	from
		dbo.Calendar
	where
		ActualDate = cast(getdate() as date)
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('4a776900-95a8-558b-ad88-94adaa4564f3' AS UNIQUEIDENTIFIER) AND [script_checksum] = '28E23EEEB9DE14DFE150F046F11A578297E7E168ED8A10B45C13A154996EEE37')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\pbi\Views\Today.sql", ID: {4a776900-95a8-558b-ad88-94adaa4564f3} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('4a776900-95a8-558b-ad88-94adaa4564f3' AS UNIQUEIDENTIFIER) AND [script_checksum] = '28E23EEEB9DE14DFE150F046F11A578297E7E168ED8A10B45C13A154996EEE37')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('4a776900-95a8-558b-ad88-94adaa4564f3' AS UNIQUEIDENTIFIER), '28E23EEEB9DE14DFE150F046F11A578297E7E168ED8A10B45C13A154996EEE37', 'Programmable Objects\pbi\Views\Today.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('5a56a1ba-2923-5dc8-8aee-8c9ec0a54378' AS UNIQUEIDENTIFIER) AND [script_checksum] = '8965403F0F3D8027EEB275A48D29E383AC065E6235EA90445DD87381444C3ABC')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\utils\Stored Procedures\LoadCalendarDimension.sql", ID: {5a56a1ba-2923-5dc8-8aee-8c9ec0a54378} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('5a56a1ba-2923-5dc8-8aee-8c9ec0a54378' AS UNIQUEIDENTIFIER) AND [script_checksum] = '8965403F0F3D8027EEB275A48D29E383AC065E6235EA90445DD87381444C3ABC')
  EXECUTE ('if object_id(''[utils].[LoadCalendarDimension]'') is not null
	drop procedure [utils].[LoadCalendarDimension];

');

GO
SET QUOTED_IDENTIFIER ON;

GO
SET ANSI_NULLS ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('5a56a1ba-2923-5dc8-8aee-8c9ec0a54378' AS UNIQUEIDENTIFIER) AND [script_checksum] = '8965403F0F3D8027EEB275A48D29E383AC065E6235EA90445DD87381444C3ABC')
  EXECUTE ('create procedure [utils].[LoadCalendarDimension]
(
  @Year char(4)
, @DoOutputInfo bit = 1
)
as --<CommentHeader>
/**********************************************************************************************************************

Properties
==========
FUNCTION NAME:  utils.LoadCalendarDimension
DESCRIPTION:    Loads dbo.Calendar table with dates within provided date range
AUTHOR:         Greg M Lucas
ORIGIN DATE:    09-Jun-2017

Additional Notes
================

REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		09-Jun-2017		GML		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------


**********************************************************************************************************************/
--</CommentHeader>
begin
	set nocount on;
	
	--! Find out if we are already in a transaction
	declare	@_TxnIsExternal bit = case when @@trancount > 0 then 1 else 0 end;

	begin try
		if @Year not between ''2000'' and ''2099''
			raiserror(''@Year parameter is out of range, expected "2000" to "2099" but was %s'', 16, 1, @Year) ;

		declare @_StartRange int = try_convert(int, right(@Year, 2) + ''0101'') ;
		declare @_EndRange int = try_convert(int, right(@Year, 2) + ''1231'') ;
		declare @_YearStart date = try_convert(date, @Year + ''0101'', 112) ;
		declare @_YearEnd date = try_convert(date, @Year + ''1231'', 112) ;

		--! As we have multiple steps if there no outer transaction,
		--! use an explicit transaction from this point forward 
		if @_TxnIsExternal = 0 begin tran;

		declare @_UpsertCount int, @_P445Count int;

		declare @tblRowCounts table (Change varchar(30));

		set datefirst 1; -- Monday
			
		; with	dateRangeCte(DateKey, ActualDate)
		as
		(
			select
				  20000000 + n.Number
				, try_convert(date, cast(20000000 + n.Number as char(8)))
			from
				dbo.Numbers (999999) as n
			where
				n.Number between @_StartRange and @_EndRange
		)
		, sourceCte(DateKey, ActualDate, DateNameEU, DateNameUS, EnglishMonthCode, EnglishMonthName, EnglishDayCode, EnglishDayName, YearMonth, YearQuarter, IsWeekend, IsLastDayInMonth
				, FiscalPeriod, FiscalQuarter, FiscalYear, FiscalPeriodCode, FiscalPeriodName, FiscalYearPeriod, FiscalYearQuarter)
		as
		(
				select
				  cast(-999 as int)			-- DateKey
				, cast(null as date)		-- ActualDate
				, cast('''' as varchar(50))	-- DateNameEU
				, cast('''' as varchar(50))	-- DateNameUS
				, cast('''' as varchar(50))	-- EnglishMonthCode
				, cast('''' as varchar(50))	-- EnglishMonthName
				, cast('''' as varchar(50))	-- EnglishDayCode
				, cast('''' as varchar(50))	-- EnglishDayName
				, cast('''' as varchar(50))	-- YearMonth
				, cast('''' as varchar(50))	-- YearQuarter
				, cast('''' as varchar(50))	-- IsWeekend
				, cast('''' as varchar(50))	-- IsLastDayInMonth
				, cast(null as tinyint)		-- FiscalPeriod tinyint null
				, cast(null as tinyint)		-- FiscalQuarter tinyint null
				, cast(null as int)		-- FiscalYear int null
				, cast('''' as char(3))	-- FiscalPeriodCode char(3) not null
				, cast('''' as varchar(50))	-- FiscalPeriodName varchar(10) not null
				, cast('''' as varchar(50))	-- FiscalYearPeriod varchar(10) not null
				, cast('''' as varchar(50))	-- FiscalYearQuarter varchar(10) not null
			union all
				select
					  19000101			-- DateKey
					, ''19000101''		-- ActualDate
					, ''Unknown Start Date''	-- DateNameEU
					, ''Unknown Start Date''	-- DateNameUS
					, ''N/A''	-- EnglishMonthCode
					, ''N/A''	-- EnglishMonthName
					, ''N/A''	-- EnglishDayCode
					, ''N/A''	-- EnglishDayName
					, ''N/A''	-- YearMonth
					, ''N/A''	-- YearQuarter
					, ''N/A''	-- IsWeekend
					, ''N/A''	-- IsLastDayInMonth
					, null -- FiscalPeriod
					, null -- FiscalQuarter
					, null -- FiscalYear
					, ''N/A''	-- FiscalPeriodCode
					, ''N/A''	-- FiscalPeriodName
					, ''N/A''	-- FiscalYearPeriod
					, ''N/A''	-- FiscalYearQuarter
			union all
				select
					  99991231			-- DateKey
					, ''99991231''		-- ActualDate
					, ''Open End Date/Ongoing''	-- DateNameEU
					, ''Open End Date/Ongoing''	-- DateNameUS
					, ''N/A''	-- EnglishMonthCode
					, ''N/A''	-- EnglishMonthName
					, ''N/A''	-- EnglishDayCode
					, ''N/A''	-- EnglishDayName
					, ''N/A''	-- YearMonth
					, ''N/A''	-- YearQuarter
					, ''N/A''	-- IsWeekend
					, ''N/A''	-- IsLastDayInMonth
					, null -- FiscalPeriod
					, null -- FiscalQuarter
					, null -- FiscalYear
					, ''N/A''	-- FiscalPeriodCode
					, ''N/A''	-- FiscalPeriodName
					, ''N/A''	-- FiscalYearPeriod
					, ''N/A''	-- FiscalYearQuarter
			union all
				select
					  -1		-- DateKey
					, null		-- ActualDate
					, ''Not Specified at Source''	-- DateNameEU
					, ''Not Specified at Source''	-- DateNameUS
					, ''N/A''	-- EnglishMonthCode
					, ''N/A''	-- EnglishMonthName
					, ''N/A''	-- EnglishDayCode
					, ''N/A''	-- EnglishDayName
					, ''N/A''	-- YearMonth
					, ''N/A''	-- YearQuarter
					, ''N/A''	-- IsWeekend
					, ''N/A''	-- IsLastDayInMonth
					, null -- FiscalPeriod
					, null -- FiscalQuarter
					, null -- FiscalYear
					, ''N/A''	-- FiscalPeriodCode
					, ''N/A''	-- FiscalPeriodName
					, ''N/A''	-- FiscalYearPeriod
					, ''N/A''	-- FiscalYearQuarter
			union all
				select
					  -2		-- DateKey
					, null		-- ActualDate
					, ''Lookup Not Found''	-- DateNameEU
					, ''Lookup Not Found''	-- DateNameUS
					, ''N/A''	-- EnglishMonthCode
					, ''N/A''	-- EnglishMonthName
					, ''N/A''	-- EnglishDayCode
					, ''N/A''	-- EnglishDayName
					, ''N/A''	-- YearMonth
					, ''N/A''	-- YearQuarter
					, ''N/A''	-- IsWeekend
					, ''N/A''	-- IsLastDayInMonth
					, null -- FiscalPeriod
					, null -- FiscalQuarter
					, null -- FiscalYear
					, ''N/A''	-- FiscalPeriodCode
					, ''N/A''	-- FiscalPeriodName
					, ''N/A''	-- FiscalYearPeriod
					, ''N/A''	-- FiscalYearQuarter
			union all
				select
					  -3		-- DateKey
					, null		-- ActualDate
					, ''Not Implemented in Source''	-- DateNameEU
					, ''Not Implemented in Source''	-- DateNameUS
					, ''N/A''	-- EnglishMonthCode
					, ''N/A''	-- EnglishMonthName
					, ''N/A''	-- EnglishDayCode
					, ''N/A''	-- EnglishDayName
					, ''N/A''	-- YearMonth
					, ''N/A''	-- YearQuarter
					, ''N/A''	-- IsWeekend
					, ''N/A''	-- IsLastDayInMonth
					, null -- FiscalPeriod
					, null -- FiscalQuarter
					, null -- FiscalYear
					, ''N/A''	-- FiscalPeriodCode
					, ''N/A''	-- FiscalPeriodName
					, ''N/A''	-- FiscalYearPeriod
					, ''N/A''	-- FiscalYearQuarter
			union all
				select
					  -4		-- DateKey
					, null		-- ActualDate
					, ''Not Applicable in this Context''	-- DateNameEU
					, ''Not Applicable in this Context''	-- DateNameUS
					, ''N/A''	-- EnglishMonthCode
					, ''N/A''	-- EnglishMonthName
					, ''N/A''	-- EnglishDayCode
					, ''N/A''	-- EnglishDayName
					, ''N/A''	-- YearMonth
					, ''N/A''	-- YearQuarter
					, ''N/A''	-- IsWeekend
					, ''N/A''	-- IsLastDayInMonth
					, null -- FiscalPeriod
					, null -- FiscalQuarter
					, null -- FiscalYear
					, ''N/A''	-- FiscalPeriodCode
					, ''N/A''	-- FiscalPeriodName
					, ''N/A''	-- FiscalYearPeriod
					, ''N/A''	-- FiscalYearQuarter
			union all
				select
					  -5		-- DateKey
					, null		-- ActualDate
					, ''Logic Not Defined''	-- DateNameEU
					, ''Logic Not Defined''	-- DateNameUS
					, ''N/A''	-- EnglishMonthCode
					, ''N/A''	-- EnglishMonthName
					, ''N/A''	-- EnglishDayCode
					, ''N/A''	-- EnglishDayName
					, ''N/A''	-- YearMonth
					, ''N/A''	-- YearQuarter
					, ''N/A''	-- IsWeekend
					, ''N/A''	-- IsLastDayInMonth
					, null -- FiscalPeriod
					, null -- FiscalQuarter
					, null -- FiscalYear
					, ''N/A''	-- FiscalPeriodCode
					, ''N/A''	-- FiscalPeriodName
					, ''N/A''	-- FiscalYearPeriod
					, ''N/A''	-- FiscalYearQuarter
			union all
				select
					  -6		-- DateKey
					, null		-- ActualDate
					, ''Expected in Future''	-- DateNameEU
					, ''Expected in Future''	-- DateNameUS
					, ''N/A''	-- EnglishMonthCode
					, ''N/A''	-- EnglishMonthName
					, ''N/A''	-- EnglishDayCode
					, ''N/A''	-- EnglishDayName
					, ''N/A''	-- YearMonth
					, ''N/A''	-- YearQuarter
					, ''N/A''	-- IsWeekend
					, ''N/A''	-- IsLastDayInMonth
					, null -- FiscalPeriod
					, null -- FiscalQuarter
					, null -- FiscalYear
					, ''N/A''	-- FiscalPeriodCode
					, ''N/A''	-- FiscalPeriodName
					, ''N/A''	-- FiscalYearPeriod
					, ''N/A''	-- FiscalYearQuarter
			union all
				select
					  -7		-- DateKey
					, null		-- ActualDate
					, ''Deliberately Blank''	-- DateNameEU
					, ''Deliberately Blank''	-- DateNameUS
					, ''N/A''	-- EnglishMonthCode
					, ''N/A''	-- EnglishMonthName
					, ''N/A''	-- EnglishDayCode
					, ''N/A''	-- EnglishDayName
					, ''N/A''	-- YearMonth
					, ''N/A''	-- YearQuarter
					, ''N/A''	-- IsWeekend
					, ''N/A''	-- IsLastDayInMonth
					, null -- FiscalPeriod
					, null -- FiscalQuarter
					, null -- FiscalYear
					, ''N/A''	-- FiscalPeriodCode
					, ''N/A''	-- FiscalPeriodName
					, ''N/A''	-- FiscalYearPeriod
					, ''N/A''	-- FiscalYearQuarter
			union all
				select
					 -8		-- DateKey
					, null		-- ActualDate
					, ''Invalid Source Format''	-- DateNameEU
					, ''Invalid Source Format''	-- DateNameUS
					, ''N/A''	-- EnglishMonthCode
					, ''N/A''	-- EnglishMonthName
					, ''N/A''	-- EnglishDayCode
					, ''N/A''	-- EnglishDayName
					, ''N/A''	-- YearMonth
					, ''N/A''	-- YearQuarter
					, ''N/A''	-- IsWeekend
					, ''N/A''	-- IsLastDayInMonth
					, null -- FiscalPeriod
					, null -- FiscalQuarter
					, null -- FiscalYear
					, ''N/A''	-- FiscalPeriodCode
					, ''N/A''	-- FiscalPeriodName
					, ''N/A''	-- FiscalYearPeriod
					, ''N/A''	-- FiscalYearQuarter
			union all
				select
					  dr.DateKey
					, dr.ActualDate
					, null	-- DateNameEU
					, null	-- DateNameUS
					, null	-- EnglishMonthCode
					, null	-- EnglishMonthName
					, null	-- EnglishDayCode
					, null	-- EnglishDayName
					, null	-- YearMonth
					, null	-- YearQuarter
					, null	-- IsWeekend
					, null	-- IsLastDayInMonth
					, null -- FiscalPeriod
					, null -- FiscalQuarter
					, null -- FiscalYear
					, ''N/D''	-- FiscalPeriodCode
					, ''N/D''	-- FiscalPeriodName
					, ''N/D''	-- FiscalYearPeriod
					, ''N/D''	-- FiscalYearQuarter
				from
					dateRangeCte as dr
				where
					dr.ActualDate is not null
		)
		, ValidDatesCte
		as
		(
			select
				  src.DateKey
				, src.ActualDate
				, coalesce(src.DateNameEU, format(src.ActualDate, ''dd/MM/yyyy''), ''Oops! Date Not Recognised'') as [DateNameEU]
				, coalesce(src.DateNameUS, format(src.ActualDate, ''MM/dd/yyyy''), ''Oops! Date Not Recognised'') as [DateNameUS]
				, coalesce(src.EnglishMonthCode, upper(left(datename(month, src.ActualDate), 3)), ''???'') as [EnglishMonthCode]
				, coalesce(src.EnglishMonthName, datename(month, src.ActualDate), ''Oops! Date Not Recognised'') as [EnglishMonthName]
				, coalesce(src.EnglishDayCode, upper(left(datename(dw, src.ActualDate), 3)), ''???'') as [EnglishDayCode]
				, coalesce(src.EnglishDayName, datename(dw, src.ActualDate), ''Oops! Date Not Recognised'') as [EnglishDayName]
				, datepart(year, src.ActualDate) as [CalendarYear]
				, datepart(quarter, src.ActualDate) as [CalendarQuarter]
				, datepart(month, src.ActualDate) as [MonthNumberInYear]
				, datepart(week, src.ActualDate) as [WeekNumberInYear]
				, datepart(dayofyear, src.ActualDate) as [DayNumberInYear]
				, datename(dd, src.ActualDate) as [DayNumberInMonth]
				, datepart(dw, src.ActualDate) as [DayNumberInWeek]
				, coalesce(src.YearMonth, format(src.ActualDate, ''yyyy-MM''), ''Oops!'') as [YearMonth]
				, coalesce(src.YearQuarter, format(src.ActualDate, ''yyyy-Q'') + cast(datepart(quarter, src.ActualDate) as char(1)), ''Oops!'') as [YearQuarter]
				-------------------------------------------------------------------------------------------------------------------------------------------
				, case
					when src.IsWeekend is null and datename(dw, src.ActualDate) in (''Saturday'', ''Sunday'')
						then ''Weekend''
					when src.IsWeekend is null and datename(dw, src.ActualDate) in (''Monday'', ''Tuesday'', ''Wednesday'', ''Thursday'', ''Friday'')
						then ''Weekday''
					else coalesce(src.IsWeekend, '''')
				  end as [IsWeekend]
				-------------------------------------------------------------------------------------------------------------------------------------------
				, case
					when src.IsLastDayInMonth is null and month(src.ActualDate) = month(dateadd(d, 1, src.ActualDate))
						then ''N''
					when src.IsLastDayInMonth is null and month(src.ActualDate) + 1 = month(dateadd(d, 1, src.ActualDate))
						then ''Y''
					else coalesce(src.IsLastDayInMonth, '''')
				  end as [IsLastDayInMonth]
				-------------------------------------------------------------------------------------------------------------------------------------------
				, cast(case when DateKey between 19000102 and 99991230
					then dateadd(day, datediff(day, 0, ActualDate) / 7 * 7, 0)
					else null
				  end as date) as [MondayWeekCommencing]
				-------------------------------------------------------------------------------------------------------------------------------------------
				, case when src.IsWeekend is null and datename(dw, src.ActualDate) in (''Saturday'', ''Sunday'') then 0 else 1 end as [WorkDayCount]
				-------------------------------------------------------------------------------------------------------------------------------------------
				, src.FiscalPeriod
				, src.FiscalQuarter
				, src.FiscalYear
				, src.FiscalPeriodCode
				, src.FiscalPeriodName
				, src.FiscalYearPeriod
				, src.FiscalYearQuarter
			from
				sourceCte as src
			where
				src.DateKey > -999
		)
		, workDaysInMonthCte
		as
		(
			select
				  DateKey
				, sum(WorkDayCount) over(partition by YearMonth) as [WorkDaysInMonthTotal]
				, sum(WorkDayCount) over(partition by YearMonth order by DateKey rows unbounded preceding) as [WorkDaysInMonthToDate]
			from
				ValidDatesCte
			where
				DateKey between 19000102 and 99991230
		)
		, finalCte
		as
		(
			select
				  d.DateKey
				, d.ActualDate
				, d.DateNameEU
				, d.DateNameUS
				, d.EnglishMonthCode
				, d.EnglishMonthName
				, d.EnglishDayCode
				, d.EnglishDayName
				, d.CalendarYear
				, d.CalendarQuarter
				, d.MonthNumberInYear
				, d.WeekNumberInYear
				, d.DayNumberInYear
				, d.DayNumberInMonth
				, d.DayNumberInWeek
				, d.YearMonth
				, d.YearQuarter
				, d.IsWeekend
				, d.IsLastDayInMonth
				, d.MondayWeekCommencing
				-------------------------------------------------------------------------------
				, case when d.ActualDate is not null
					then cast(wdim.WorkDaysInMonthTotal as tinyint)
					else null
				  end as [WorkDaysInMonthTotal]
				-------------------------------------------------------------------------------
				, case when d.ActualDate is not null
					then cast(wdim.WorkDaysInMonthToDate as tinyint)
					else null
				  end as [WorkDaysInMonthToDate]
				-------------------------------------------------------------------------------
				, d.FiscalPeriod
				, d.FiscalQuarter
				, d.FiscalYear
				, d.FiscalPeriodCode
				, d.FiscalPeriodName
				, d.FiscalYearPeriod
				, d.FiscalYearQuarter
			from
				ValidDatesCte as d
			left join workDaysInMonthCte as wdim
				on wdim.DateKey = d.DateKey
		)
		merge into dbo.Calendar tgt
		using finalCte as src
		on src.DateKey = tgt.DateKey
		when not matched by target
			then
				insert
				(
				  DateKey
				, ActualDate
				, DateNameEU
				, DateNameUS
				, EnglishMonthCode
				, EnglishMonthName
				, EnglishDayCode
				, EnglishDayName
				, CalendarYear
				, CalendarQuarter
				, MonthNumberInYear
				, WeekNumberInYear
				, DayNumberInYear
				, DayNumberInMonth
				, DayNumberInWeek
				, YearMonth
				, YearQuarter
				, IsWeekend
				, IsLastDayInMonth
				, MondayWeekCommencing
				, WorkDaysInMonthTotal
				, WorkDaysInMonthToDate
				, FiscalPeriod
				, FiscalQuarter
				, FiscalYear
				, FiscalPeriodCode
				, FiscalPeriodName
				, FiscalYearPeriod
				, FiscalYearQuarter
				)
				values
				(
				  src.DateKey
				, src.ActualDate
				, src.DateNameEU
				, src.DateNameUS
				, src.EnglishMonthCode
				, src.EnglishMonthName
				, src.EnglishDayCode
				, src.EnglishDayName
				, src.CalendarYear
				, src.CalendarQuarter
				, src.MonthNumberInYear
				, src.WeekNumberInYear
				, src.DayNumberInYear
				, src.DayNumberInMonth
				, src.DayNumberInWeek
				, src.YearMonth
				, src.YearQuarter
				, src.IsWeekend
				, src.IsLastDayInMonth
				, src.MondayWeekCommencing
				, src.WorkDaysInMonthTotal
				, src.WorkDaysInMonthToDate
				, src.FiscalPeriod
				, src.FiscalQuarter
				, src.FiscalYear
				, src.FiscalPeriodCode
				, src.FiscalPeriodName
				, src.FiscalYearPeriod
				, src.FiscalYearQuarter
				)
		when matched
			and
				(
						(tgt.ActualDate <> src.ActualDate)
					or
						(tgt.ActualDate is null and src.ActualDate is not null)
					or
						(tgt.ActualDate is not null and src.ActualDate is null)
				)
			or tgt.DateNameEU <> src.DateNameEU
			or tgt.DateNameUS <> src.DateNameUS
			or tgt.EnglishMonthCode <> src.EnglishMonthCode
			or tgt.EnglishMonthName <> src.EnglishMonthName
			or tgt.EnglishDayCode <> src.EnglishDayCode
			or tgt.EnglishDayName <> src.EnglishDayName
			or coalesce(tgt.CalendarYear, -999999) <> coalesce(src.CalendarYear, -999999)
			or coalesce(tgt.CalendarQuarter, -999999) <> coalesce(src.CalendarQuarter, -999999)
			or coalesce(tgt.MonthNumberInYear, -999999) <> coalesce(src.MonthNumberInYear, -999999)
			or coalesce(tgt.WeekNumberInYear, -999999) <> coalesce(src.WeekNumberInYear, -999999)
			or coalesce(tgt.DayNumberInYear, -999999) <> coalesce(src.DayNumberInYear, -999999)
			or coalesce(tgt.DayNumberInMonth, -999999) <> coalesce(src.DayNumberInMonth, -999999)
			or coalesce(tgt.DayNumberInWeek, -999999) <> coalesce(src.DayNumberInWeek, -999999)
			or tgt.YearMonth <> src.YearMonth
			or tgt.YearQuarter <> src.YearQuarter
			or tgt.IsWeekend <> src.IsWeekend
			or tgt.IsLastDayInMonth <> src.IsLastDayInMonth
			or coalesce(tgt.MondayWeekCommencing, ''19000101'') <> coalesce(src.MondayWeekCommencing, ''19000101'')
			or coalesce(tgt.WorkDaysInMonthTotal, -999999) <> coalesce(src.WorkDaysInMonthTotal, -999999)
			or coalesce(tgt.WorkDaysInMonthToDate, -999999) <> coalesce(src.WorkDaysInMonthToDate, -999999)
			or coalesce(tgt.FiscalPeriod, -999999) <> coalesce(src.FiscalPeriod, -999999)
			or coalesce(tgt.FiscalQuarter, -999999) <> coalesce(src.FiscalQuarter, -999999)
			or coalesce(tgt.FiscalYear, -999999) <> coalesce(src.FiscalYear, -999999)
			or tgt.FiscalPeriodCode <> src.FiscalPeriodCode
			or tgt.FiscalPeriodName <> src.FiscalPeriodName
			or tgt.FiscalYearPeriod <> src.FiscalYearPeriod
			or tgt.FiscalYearQuarter <> src.FiscalYearQuarter
		then
			update set
				  tgt.ActualDate = src.ActualDate
				, tgt.DateNameEU = src.DateNameEU
				, tgt.DateNameUS = src.DateNameUS
				, tgt.EnglishMonthCode = src.EnglishMonthCode
				, tgt.EnglishMonthName = src.EnglishMonthName
				, tgt.EnglishDayCode = src.EnglishDayCode
				, tgt.EnglishDayName = src.EnglishDayName
				, tgt.CalendarYear = src.CalendarYear
				, tgt.CalendarQuarter = src.CalendarQuarter
				, tgt.MonthNumberInYear = src.MonthNumberInYear
				, tgt.WeekNumberInYear = src.WeekNumberInYear
				, tgt.DayNumberInYear = src.DayNumberInYear
				, tgt.DayNumberInMonth = src.DayNumberInMonth
				, tgt.DayNumberInWeek = src.DayNumberInWeek
				, tgt.YearMonth = src.YearMonth
				, tgt.YearQuarter = src.YearQuarter
				, tgt.IsWeekend = src.IsWeekend
				, tgt.IsLastDayInMonth = src.IsLastDayInMonth
				, tgt.MondayWeekCommencing = src.MondayWeekCommencing
				, tgt.WorkDaysInMonthTotal = src.WorkDaysInMonthTotal
				, tgt.WorkDaysInMonthToDate = src.WorkDaysInMonthToDate
				, tgt.FiscalPeriod = src.FiscalPeriod
				, tgt.FiscalQuarter = src.FiscalQuarter
				, tgt.FiscalYear = src.FiscalYear
				, tgt.FiscalPeriodCode = src.FiscalPeriodCode
				, tgt.FiscalPeriodName = src.FiscalPeriodName
				, tgt.FiscalYearPeriod = src.FiscalYearPeriod
				, tgt.FiscalYearQuarter = src.FiscalYearQuarter
		output $action into @tblRowCounts (Change);

		set @_UpsertCount = @@rowcount;

		--!
		--! We have to generate the 4-4-5 fiscal calendar values separately
		--! as some of the required dates may already be in the table but
		--! not within the date range we are upserting.
		--!
		;with periodNamesCte
		as
		(
			select distinct
				  CalendarYear as [FiscalYear]
				, MonthNumberInYear as [FiscalPeriod]
				, CalendarQuarter as [FiscalQuarter]
				, EnglishMonthCode as [FiscalPeriodCode]
				, EnglishMonthName as [FiscalPeriodName]
				, YearMonth as [FiscalYearPeriod]
				, YearQuarter as [FiscalYearQuarter]
			from
				dbo.Calendar
			where
				ActualDate between @_YearStart and @_YearEnd
		)
		, fiscalWeeksCte
		as
		(
			select
				  MondayWeekCommencing
				, case
					when MondayWeekCommencing <= @_YearStart
						then 1
					else row_number() over(order by MondayWeekCommencing asc) - 1
				  end as [FiscalWeekNumber]
			from
				dbo.Calendar
			where
					ActualDate between @_YearStart and @_YearEnd
				and MondayWeekCommencing is not null
			group by
				MondayWeekCommencing
		)
		, fiscalPeriodCte
		as
		(
			select
				  MondayWeekCommencing
				, case
					when FiscalWeekNumber between 1 and 4 then 1
					when FiscalWeekNumber between 5 and 8 then 2
					when FiscalWeekNumber between 9 and 13 then 3
					when FiscalWeekNumber between 14 and 17 then 4
					when FiscalWeekNumber between 18 and 21 then 5
					when FiscalWeekNumber between 22 and 26 then 6
					when FiscalWeekNumber between 27 and 30 then 7
					when FiscalWeekNumber between 31 and 34 then 8
					when FiscalWeekNumber between 35 and 39 then 9
					when FiscalWeekNumber between 40 and 43 then 10
					when FiscalWeekNumber between 44 and 47 then 11
					else 12
				  end as [FiscalPeriod]
			from
				fiscalWeeksCte
		)
		update
			tgt
		set
			  tgt.FiscalPeriod = fp.FiscalPeriod
			, tgt.FiscalQuarter = pn.FiscalQuarter
			, tgt.FiscalYear = pn.FiscalYear
			, tgt.FiscalPeriodCode = pn.FiscalPeriodCode
			, tgt.FiscalPeriodName = pn.FiscalPeriodName
			, tgt.FiscalYearPeriod = pn.FiscalYearPeriod
			, tgt.FiscalYearQuarter = pn.FiscalYearQuarter
		from
			dbo.Calendar as tgt
		inner join fiscalPeriodCte as fp
			on fp.MondayWeekCommencing = tgt.MondayWeekCommencing
		inner join periodNamesCte as pn
			on pn.FiscalYear = tgt.CalendarYear
			and pn.FiscalPeriod = fp.FiscalPeriod
		where
			tgt.ActualDate between @_YearStart and @_YearEnd
			
		set @_P445Count = @@rowcount ;

		;with workDaysInPeriodCte
		as
		(
			select
				  DateKey
				, sum(case when IsWeekend = ''Weekday'' then 1 else 0 end) over(partition by FiscalYearPeriod) as [WorkDaysInPeriodTotal]
				, sum(case when IsWeekend = ''Weekday'' then 1 else 0 end) over(partition by FiscalYearPeriod order by DateKey rows unbounded preceding) as [WorkDaysInPeriodToDate]
			from
				dbo.Calendar
			where
					ActualDate between @_YearStart and @_YearEnd
				and FiscalPeriod is not null
		)
		update
			tgt
		set
			  tgt.WorkDaysInFiscalPeriodTotal = src.WorkDaysInPeriodTotal
			, tgt.WorkDaysInFiscalPeriodToDate = src.WorkDaysInPeriodToDate
		from
			dbo.Calendar as tgt
		inner join workDaysInPeriodCte as src
			on src.DateKey = tgt.DateKey
		where
			tgt.ActualDate between @_YearStart and @_YearEnd

		if @DoOutputInfo = 1
			begin
				raiserror(''Upserted %i records in Calendar table and set Period 4-4-5 values on %i rows'', 0, 1, @_UpsertCount, @_P445Count) with nowait;

				select Change as [Calendar Management Action], count(*) as [Rows Affected] from @tblRowCounts group by Change ;
			end
			
		--!
		--! Only commit transactions started within this procedure
		--!
		if @_TxnIsExternal = 0 and (xact_state() = 1 or @@trancount > 0) commit tran ;
	end try
	begin catch
		--! If we have an uncommittable external transaction (see BOL), or a deadlock
		--! we can''t do anything else until we roll that back. Alternatively, if we
		--! started the transaction we should roll it back otherwise or let the caller
		--! handle its own external txn 
		if (xact_state() = -1) or (xact_state() = 1 and error_number() = 1205) or (xact_state() = 1 and @_TxnIsExternal = 0)
			rollback tran;
		throw;
	end catch;

	set nocount off;
end;
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('5a56a1ba-2923-5dc8-8aee-8c9ec0a54378' AS UNIQUEIDENTIFIER) AND [script_checksum] = '8965403F0F3D8027EEB275A48D29E383AC065E6235EA90445DD87381444C3ABC')
  EXECUTE ('grant execute on  [utils].[LoadCalendarDimension] to [BatchManagers]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('5a56a1ba-2923-5dc8-8aee-8c9ec0a54378' AS UNIQUEIDENTIFIER) AND [script_checksum] = '8965403F0F3D8027EEB275A48D29E383AC065E6235EA90445DD87381444C3ABC')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\utils\Stored Procedures\LoadCalendarDimension.sql", ID: {5a56a1ba-2923-5dc8-8aee-8c9ec0a54378} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('5a56a1ba-2923-5dc8-8aee-8c9ec0a54378' AS UNIQUEIDENTIFIER) AND [script_checksum] = '8965403F0F3D8027EEB275A48D29E383AC065E6235EA90445DD87381444C3ABC')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('5a56a1ba-2923-5dc8-8aee-8c9ec0a54378' AS UNIQUEIDENTIFIER), '8965403F0F3D8027EEB275A48D29E383AC065E6235EA90445DD87381444C3ABC', 'Programmable Objects\utils\Stored Procedures\LoadCalendarDimension.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
PRINT '# Committing transaction';

COMMIT TRANSACTION;

GO







------------------------------------------------------------------------------------------------------------------------
------------------------------------------       POST-DEPLOYMENT SCRIPTS      ------------------------------------------
------------------------------------------------------------------------------------------------------------------------


SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

PRINT '----- executing post-deployment script "Post-Deployment\01_Finalize_Deployment.sql" -----';

---------------------- BEGIN POST-DEPLOYMENT SCRIPT: "Post-Deployment\01_Finalize_Deployment.sql" ------------------------
GO
/*
Post-Deployment Script Template
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.
 Use SQLCMD syntax to include a file in the post-deployment script.
 Example:      :r .\myfile.sql
 Use SQLCMD syntax to reference a variable in the post-deployment script.
 Example:      :setvar TableName MyTable
               SELECT * FROM [$(TableName)]
--------------------------------------------------------------------------------------
*/

GO
----------------------- END POST-DEPLOYMENT SCRIPT: "Post-Deployment\01_Finalize_Deployment.sql" -------------------------


PRINT 'Deployment completed successfully.'




SET NOEXEC OFF; -- Resume statement execution if an error occurred within the script pre-amble
