/*
	Target database:	BMI_BAT_MAN (configurable)
	Target instance:	(any)
	Generated date:		04/11/2017 08:37:37
	Generated on:		UKX260-003
	Package version:	0.0.1
	Migration version:	0.0.1
	Baseline version:	(undefined)
	ReadyRoll version:	1.14.11.4593
	Migrations pending:	(variable)

	IMPORTANT! "SQLCMD Mode" must be activated prior to execution (under the Query menu in SSMS).

	BEFORE EXECUTING THIS SCRIPT, WE STRONGLY RECOMMEND YOU TAKE A BACKUP OF YOUR DATABASE.

	This SQLCMD script is designed to be executed through MSBuild (via the .sqlproj Deploy target) however 
	it can also be run manually using SQL Management Studio. 

	It was generated by the ReadyRoll build task and contains logic to deploy the database, ensuring that 
	each of the incremental migrations is executed a single time only in alphabetical (filename) 
	order. If any errors occur within those scripts, the deployment will be aborted and the transaction
	rolled-back.

	NOTE: Automatic transaction management is provided for incremental migrations, so you don't need to
		  add any special BEGIN TRAN/COMMIT/ROLLBACK logic in those script files. 
		  However if you require transaction handling in your Pre/Post-Deployment scripts, you will
		  need to add this logic to the source .sql files yourself.
*/

----====================================================================================================================
---- SQLCMD Variables
---- This script is designed to be called by SQLCMD.EXE with variables specified on the command line.
---- However you can also run it in SQL Management Studio by uncommenting this section (CTRL+K, CTRL+U).
:setvar DatabaseName "BMI_BAT_MAN_PROD"
:setvar ReleaseVersion "v0.0.1"
:setvar ForceDeployWithoutBaseline "False"
--:setvar DeployPath ""
--:setvar DefaultFilePrefix "BMI_BAT_MAN"
--:setvar DefaultDataPath ""
--:setvar DefaultLogPath ""
--:setvar DefaultBackupPath ""
----====================================================================================================================

:on error exit -- Instructs SQLCMD to abort execution as soon as an erroneous batch is encountered

:setvar PackageVersion "0.0.1"

GO
:setvar IsSqlCmdEnabled "True"
GO

IF N'$(DatabaseName)' = N'$' + N'(DatabaseName)' OR
   N'$(ReleaseVersion)' = N'$' + N'(ReleaseVersion)' OR
   N'$(ForceDeployWithoutBaseline)' = N'$' + N'(ForceDeployWithoutBaseline)'
      RAISERROR('(This will not throw). Please make sure that all SQLCMD variables are defined before running this script.', 0, 0);
GO

SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;
SET XACT_ABORT ON; -- Abort the current batch immediately if a statement raises a run-time error and rollback any open transaction(s)

IF N'$(IsSqlCmdEnabled)' <> N'True' -- Is SQLCMD mode not enabled within the execution context (eg. SSMS)
	BEGIN
		IF IS_SRVROLEMEMBER(N'sysadmin') = 1
			BEGIN -- User is sysadmin; abort execution by disconnect the script from the database server
				RAISERROR(N'This script must be run in SQLCMD Mode (under the Query menu in SSMS). Aborting connection to suppress subsequent errors.', 20, 127, N'UNKNOWN') WITH LOG;
			END
		ELSE
			BEGIN -- User is not sysadmin; abort execution by switching off statement execution (script will continue to the end without performing any actual deployment work)
				RAISERROR(N'This script must be run in SQLCMD Mode (under the Query menu in SSMS). Script execution has been halted.', 16, 127, N'UNKNOWN') WITH NOWAIT;
			END
	END
GO
IF @@ERROR != 0
	BEGIN
		SET NOEXEC ON; -- SQLCMD is NOT enabled so prevent any further statements from executing
	END
GO
-- Beyond this point, no further explicit error handling is required because it can be assumed that SQLCMD mode is enabled

IF SERVERPROPERTY('EngineEdition') = 5 AND DB_NAME() != N'$(DatabaseName)'
  RAISERROR(N'Azure SQL Database does not support switching between databases. Connect to [$(DatabaseName)] and then re-run the script.', 16, 127);








------------------------------------------------------------------------------------------------------------------------
------------------------------------------       PRE-DEPLOYMENT SCRIPTS       ------------------------------------------
------------------------------------------------------------------------------------------------------------------------

SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

PRINT '----- executing pre-deployment script "Pre-Deployment\01_Create_Database.sql" -----';

------------------------- BEGIN PRE-DEPLOYMENT SCRIPT: "Pre-Deployment\01_Create_Database.sql" ---------------------------
GO
IF (DB_ID(N'$(DatabaseName)') IS NULL)
BEGIN
	PRINT N'Creating $(DatabaseName)...';
END
GO
IF (DB_ID(N'$(DatabaseName)') IS NULL)
BEGIN
	CREATE DATABASE [$(DatabaseName)]; -- MODIFY THIS STATEMENT TO SPECIFY A COLLATION FOR YOUR DATABASE
END

GO
-------------------------- END PRE-DEPLOYMENT SCRIPT: "Pre-Deployment\01_Create_Database.sql" ----------------------------









------------------------------------------------------------------------------------------------------------------------
------------------------------------------       INCREMENTAL MIGRATIONS       ------------------------------------------
------------------------------------------------------------------------------------------------------------------------

SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
PRINT '# Beginning transaction';

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;

SET XACT_ABORT ON;

BEGIN TRANSACTION;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. Also ensure that your project scripts do not contain any "USE [OtherDbName]" statements. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF (NOT EXISTS (SELECT * FROM sys.objects WHERE [object_id] = OBJECT_ID(N'[dbo].[__MigrationLog]') AND [type] = 'U'))
  BEGIN
    IF OBJECT_ID(N'[dbo].[__MigrationLogCurrent]', 'V') IS NOT NULL
      DROP VIEW [dbo].[__MigrationLogCurrent];
    CREATE TABLE [dbo].[__MigrationLog] (
      [migration_id] UNIQUEIDENTIFIER NOT NULL,
      [script_checksum] NVARCHAR (64) NOT NULL,
      [script_filename] NVARCHAR (255) NOT NULL,
      [complete_dt] DATETIME2 NOT NULL,
      [applied_by] NVARCHAR (100) NOT NULL,
      [deployed] TINYINT CONSTRAINT [DF___MigrationLog_deployed] DEFAULT (1) NOT NULL,
      [version] VARCHAR (255) NULL,
      [package_version] VARCHAR (255) NULL,
      [release_version] VARCHAR (255) NULL,
      [sequence_no] INT IDENTITY (1, 1) NOT NULL CONSTRAINT [PK___MigrationLog] PRIMARY KEY CLUSTERED ([migration_id], [complete_dt], [script_checksum]));
    CREATE NONCLUSTERED INDEX [IX___MigrationLog_CompleteDt]
      ON [dbo].[__MigrationLog]([complete_dt]);
    CREATE NONCLUSTERED INDEX [IX___MigrationLog_Version]
      ON [dbo].[__MigrationLog]([version]);
    CREATE UNIQUE NONCLUSTERED INDEX [UX___MigrationLog_SequenceNo]
      ON [dbo].[__MigrationLog]([sequence_no]);
    EXECUTE ('
	CREATE VIEW [dbo].[__MigrationLogCurrent]
			AS
			WITH currentMigration AS
			(
			  SELECT 
				 migration_id, script_checksum, script_filename, complete_dt, applied_by, deployed, ROW_NUMBER() OVER(PARTITION BY migration_id ORDER BY sequence_no DESC) AS RowNumber
			  FROM [dbo].[__MigrationLog]
			)
			SELECT  migration_id, script_checksum, script_filename, complete_dt, applied_by, deployed
			FROM currentMigration
			WHERE RowNumber = 1
	');
    IF OBJECT_ID(N'sp_addextendedproperty', 'P') IS NOT NULL
      BEGIN
        PRINT N'Creating extended properties';
        EXECUTE sp_addextendedproperty N'MS_Description', N'This table is required by ReadyRoll SQL Projects to keep track of which migrations have been executed during deployment. Please do not alter or remove this table from the database.', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', NULL, NULL;
        EXECUTE sp_addextendedproperty N'MS_Description', N'The executing user at the time of deployment (populated using the SYSTEM_USER function).', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', 'COLUMN', N'applied_by';
        EXECUTE sp_addextendedproperty N'MS_Description', N'The date/time that the migration finished executing. This value is populated using the SYSDATETIME function in SQL Server 2008+ or by using GETDATE in SQL Server 2005.', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', 'COLUMN', N'complete_dt';
        EXECUTE sp_addextendedproperty N'MS_Description', N'This column contains a number of potential states:

0 - Marked As Deployed: The migration was not executed.
1- Deployed: The migration was executed successfully.
2- Imported: The migration was generated by importing from this DB.

"Marked As Deployed" and "Imported" are similar in that the migration was not executed on this database; it was was only marked as such to prevent it from executing during subsequent deployments.', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', 'COLUMN', N'deployed';
        EXECUTE sp_addextendedproperty N'MS_Description', N'The unique identifier of a migration script file. This value is stored within the <Migration /> Xml fragment within the header of the file itself.

Note that it is possible for this value to repeat in the [__MigrationLog] table. In the case of programmable object scripts, a record will be inserted with a particular ID each time a change is made to the source file and subsequently deployed.

In the case of a migration, you may see the same [migration_id] repeated, but only in the scenario where the "Mark As Deployed" button/command has been run.', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', 'COLUMN', N'migration_id';
        EXECUTE sp_addextendedproperty N'MS_Description', N'If you have enabled SQLCMD Packaging in your ReadyRoll project, or if you are using Octopus Deploy, this will be the version number that your database package was stamped with at build-time.', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', 'COLUMN', N'package_version';
        EXECUTE sp_addextendedproperty N'MS_Description', N'If you are using Octopus Deploy, you can use the value in this column to look-up which release was responsible for deploying this migration.
If deploying via PowerShell, set the $ReleaseVersion variable to populate this column.
If deploying via Visual Studio, this column will always be NULL.', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', 'COLUMN', N'release_version';
        EXECUTE sp_addextendedproperty N'MS_Description', N'A SHA256 representation of the migration script file at the time of build.  This value is used to determine whether a migration has been changed since it was deployed. In the case of a programmable object script, a different checksum will cause the migration to be redeployed.
Note: if any variables have been specified as part of a deployment, this will not affect the checksum value.', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', 'COLUMN', N'script_checksum';
        EXECUTE sp_addextendedproperty N'MS_Description', N'The name of the migration script file on disk, at the time of build.
If Semantic Versioning has been enabled, then this value will contain the full relative path from the root of the project folder. If it is not enabled, then it will simply contain the filename itself.', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', 'COLUMN', N'script_filename';
        EXECUTE sp_addextendedproperty N'MS_Description', N'An auto-seeded numeric identifier that can be used to determine the order in which migrations were deployed.', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', 'COLUMN', N'sequence_no';
        EXECUTE sp_addextendedproperty N'MS_Description', N'The semantic version that this migration was created under. In ReadyRoll projects, a folder can be given a version number, e.g. 1.0.0, and one or more migration scripts can be stored within that folder to provide logical grouping of related database changes.', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', 'COLUMN', N'version';
        EXECUTE sp_addextendedproperty N'MS_Description', N'This view is required by ReadyRoll SQL Projects to determine whether a migration should be executed during a deployment. The view lists the most recent [__MigrationLog] entry for a given [migration_id], which is needed to determine whether a particular programmable object script needs to be (re)executed: a non-matching checksum on the current [__MigrationLog] entry will trigger the execution of a programmable object script. Please do not alter or remove this table from the database.', N'SCHEMA', N'dbo', N'VIEW', N'__MigrationLogCurrent', NULL, NULL;
      END
  END

IF NOT EXISTS (SELECT col.COLUMN_NAME FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS tab, INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE AS col WHERE col.CONSTRAINT_NAME = tab.CONSTRAINT_NAME AND col.TABLE_NAME = tab.TABLE_NAME AND col.TABLE_SCHEMA = tab.TABLE_SCHEMA AND tab.CONSTRAINT_TYPE = 'PRIMARY KEY' AND col.TABLE_SCHEMA = 'dbo' AND col.TABLE_NAME = '__MigrationLog' AND col.COLUMN_NAME = 'complete_dt')
  BEGIN
    RAISERROR (N'The ReadyRoll [dbo].[__MigrationLog] table has an incorrect primary key specification. This may be due to the fact that the <ReadyRollToolsVersion/> element in your .sqlproj file contains the wrong version number for your database. Please check earlier versions of your .sqlproj file to determine what is the appropriate version for your database (possibly 1.7 or 1.3.1).', 16, 127, N'UNKNOWN')
      WITH NOWAIT;
    RETURN;
  END

IF COL_LENGTH(N'[dbo].[__MigrationLog]', N'sequence_no') IS NULL
  BEGIN
    RAISERROR (N'The ReadyRoll [dbo].[__MigrationLog] table is missing the [sequence_no] column. This may be due to the fact that the <ReadyRollToolsVersion/> element in your .sqlproj file contains the wrong version number for your database. Please check earlier versions of your .sqlproj file to determine what is the appropriate version for your database (possibly 1.7 or 1.3.1).', 16, 127, N'UNKNOWN')
      WITH NOWAIT;
    RETURN;
  END

IF (NOT EXISTS (SELECT * FROM sys.objects WHERE [object_id] = OBJECT_ID(N'[dbo].[__MigrationLogCurrent]') AND [type] = 'V'))
  BEGIN
    EXECUTE ('
	CREATE VIEW [dbo].[__MigrationLogCurrent]
			AS
			WITH currentMigration AS
			(
			  SELECT 
				 migration_id, script_checksum, script_filename, complete_dt, applied_by, deployed, ROW_NUMBER() OVER(PARTITION BY migration_id ORDER BY sequence_no DESC) AS RowNumber
			  FROM [dbo].[__MigrationLog]
			)
			SELECT  migration_id, script_checksum, script_filename, complete_dt, applied_by, deployed
			FROM currentMigration
			WHERE RowNumber = 1
	');
  END

GO
DECLARE @baselineRequired AS BIT;

SET @baselineRequired = 0;

IF (EXISTS (SELECT * FROM sys.objects AS o WHERE o.is_ms_shipped = 0 AND NOT o.name LIKE '%__MigrationLog%') AND (SELECT count(*) FROM [dbo].[__MigrationLog]) = 0)
  SET @baselineRequired = 1;

IF @baselineRequired = 1
  IF '$(ForceDeployWithoutBaseline)' != 'True'
    RAISERROR ('A baseline has not been set for this project, however pre-existing objects have been found in this database. Please set a baseline in the Visual Studio Project Settings, or set ForceDeployWithoutBaseline=True to continue deploying without a baseline.', 16, 127);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. Also ensure that your project scripts do not contain any "USE [OtherDbName]" statements. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('9aff08b4-4ac5-4ddf-b933-117313d00da6' AS UNIQUEIDENTIFIER))
  PRINT '

***** EXECUTING MIGRATION "Migrations\1.0.0\001_added_log4tsql_block.sql", ID: {9aff08b4-4ac5-4ddf-b933-117313d00da6} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('9aff08b4-4ac5-4ddf-b933-117313d00da6' AS UNIQUEIDENTIFIER))
  EXECUTE ('
PRINT N''Creating schemas''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('9aff08b4-4ac5-4ddf-b933-117313d00da6' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE SCHEMA [log4]
AUTHORIZATION [dbo]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('9aff08b4-4ac5-4ddf-b933-117313d00da6' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE SCHEMA [log4Private]
AUTHORIZATION [dbo]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('9aff08b4-4ac5-4ddf-b933-117313d00da6' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE SCHEMA [log4Utils]
AUTHORIZATION [dbo]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('9aff08b4-4ac5-4ddf-b933-117313d00da6' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating [log4Private].[JournalControl]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('9aff08b4-4ac5-4ddf-b933-117313d00da6' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE TABLE [log4Private].[JournalControl]
(
[ModuleName] [varchar] (255) NOT NULL,
[OnOffSwitch] [varchar] (3) NOT NULL
)
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('9aff08b4-4ac5-4ddf-b933-117313d00da6' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating primary key [PK_JournalControl] on [log4Private].[JournalControl]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('9aff08b4-4ac5-4ddf-b933-117313d00da6' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [log4Private].[JournalControl] ADD CONSTRAINT [PK_JournalControl] PRIMARY KEY CLUSTERED  ([ModuleName])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('9aff08b4-4ac5-4ddf-b933-117313d00da6' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating [log4Private].[SqlException]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('9aff08b4-4ac5-4ddf-b933-117313d00da6' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE TABLE [log4Private].[SqlException]
(
[ExceptionId] [int] NOT NULL IDENTITY(1, 1),
[UtcDate] [datetime] NOT NULL CONSTRAINT [DF_SqlException_UtcDate] DEFAULT (getutcdate()),
[SystemDate] [datetime] NOT NULL CONSTRAINT [DF_SqlException_SystemDate] DEFAULT (getdate()),
[ErrorContext] [nvarchar] (512) NOT NULL,
[ErrorNumber] [int] NOT NULL,
[ErrorSeverity] [int] NOT NULL,
[ErrorState] [int] NOT NULL,
[ErrorProcedure] [nvarchar] (128) NOT NULL,
[ErrorLine] [int] NOT NULL,
[ErrorMessage] [nvarchar] (max) NOT NULL,
[ErrorDatabase] [nvarchar] (128) NOT NULL,
[SessionIdent] [int] NOT NULL,
[ServerName] [nvarchar] (128) NOT NULL,
[HostName] [nvarchar] (128) NOT NULL,
[ProgramName] [nvarchar] (128) NOT NULL,
[NTDomain] [nvarchar] (128) NOT NULL,
[NTUsername] [nvarchar] (128) NOT NULL,
[LoginName] [nvarchar] (128) NOT NULL,
[OriginalLoginName] [nvarchar] (128) NOT NULL,
[SessionLoginTime] [datetime] NULL
)
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('9aff08b4-4ac5-4ddf-b933-117313d00da6' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating primary key [PK_SqlException] on [log4Private].[SqlException]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('9aff08b4-4ac5-4ddf-b933-117313d00da6' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [log4Private].[SqlException] ADD CONSTRAINT [PK_SqlException] PRIMARY KEY CLUSTERED  ([ExceptionId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('9aff08b4-4ac5-4ddf-b933-117313d00da6' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating [log4Private].[JournalDetail]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('9aff08b4-4ac5-4ddf-b933-117313d00da6' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE TABLE [log4Private].[JournalDetail]
(
[JournalId] [int] NOT NULL,
[ExtraInfo] [varchar] (max) NULL
)
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('9aff08b4-4ac5-4ddf-b933-117313d00da6' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating primary key [PK_JournalDetail] on [log4Private].[JournalDetail]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('9aff08b4-4ac5-4ddf-b933-117313d00da6' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [log4Private].[JournalDetail] ADD CONSTRAINT [PK_JournalDetail] PRIMARY KEY CLUSTERED  ([JournalId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('9aff08b4-4ac5-4ddf-b933-117313d00da6' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating [log4Private].[Journal]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('9aff08b4-4ac5-4ddf-b933-117313d00da6' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE TABLE [log4Private].[Journal]
(
[JournalId] [int] NOT NULL IDENTITY(1, 1),
[UtcDate] [datetime] NOT NULL CONSTRAINT [DF_Journal_UtcDate] DEFAULT (getutcdate()),
[SystemDate] [datetime] NOT NULL CONSTRAINT [DF_Journal_SystemDate] DEFAULT (getdate()),
[Task] [varchar] (128) NOT NULL CONSTRAINT [DF_Journal_Task] DEFAULT (''''),
[FunctionName] [varchar] (256) NOT NULL,
[StepInFunction] [varchar] (128) NOT NULL,
[MessageText] [varchar] (512) NOT NULL,
[SeverityId] [int] NOT NULL,
[ExceptionId] [int] NULL,
[SessionId] [int] NOT NULL,
[ServerName] [nvarchar] (128) NOT NULL,
[DatabaseName] [nvarchar] (128) NOT NULL,
[HostName] [nvarchar] (128) NULL,
[ProgramName] [nvarchar] (128) NULL,
[NTDomain] [nvarchar] (128) NULL,
[NTUsername] [nvarchar] (128) NULL,
[LoginName] [nvarchar] (128) NULL,
[OriginalLoginName] [nvarchar] (128) NULL,
[SessionLoginTime] [datetime] NULL
)
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('9aff08b4-4ac5-4ddf-b933-117313d00da6' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating primary key [PK_Journal] on [log4Private].[Journal]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('9aff08b4-4ac5-4ddf-b933-117313d00da6' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [log4Private].[Journal] ADD CONSTRAINT [PK_Journal] PRIMARY KEY CLUSTERED  ([JournalId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('9aff08b4-4ac5-4ddf-b933-117313d00da6' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating [log4Private].[Severity]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('9aff08b4-4ac5-4ddf-b933-117313d00da6' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE TABLE [log4Private].[Severity]
(
[SeverityId] [int] NOT NULL,
[SeverityName] [varchar] (128) NOT NULL
)
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('9aff08b4-4ac5-4ddf-b933-117313d00da6' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating primary key [PK_Severity] on [log4Private].[Severity]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('9aff08b4-4ac5-4ddf-b933-117313d00da6' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [log4Private].[Severity] ADD CONSTRAINT [PK_Severity] PRIMARY KEY CLUSTERED  ([SeverityId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('9aff08b4-4ac5-4ddf-b933-117313d00da6' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding constraints to [log4Private].[Severity]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('9aff08b4-4ac5-4ddf-b933-117313d00da6' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [log4Private].[Severity] ADD CONSTRAINT [UQ_Severity_SeverityName] UNIQUE NONCLUSTERED  ([SeverityName])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('9aff08b4-4ac5-4ddf-b933-117313d00da6' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding constraints to [log4Private].[JournalControl]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('9aff08b4-4ac5-4ddf-b933-117313d00da6' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [log4Private].[JournalControl] ADD CONSTRAINT [CK_JournalControl_OnOffSwitch] CHECK (([OnOffSwitch]=''OFF'' OR [OnOffSwitch]=''ON''))
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('9aff08b4-4ac5-4ddf-b933-117313d00da6' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding foreign keys to [log4Private].[JournalDetail]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('9aff08b4-4ac5-4ddf-b933-117313d00da6' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [log4Private].[JournalDetail] ADD CONSTRAINT [FK_JournalDetail_Journal] FOREIGN KEY ([JournalId]) REFERENCES [log4Private].[Journal] ([JournalId]) ON DELETE CASCADE
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('9aff08b4-4ac5-4ddf-b933-117313d00da6' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding foreign keys to [log4Private].[Journal]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('9aff08b4-4ac5-4ddf-b933-117313d00da6' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [log4Private].[Journal] ADD CONSTRAINT [FK_Journal_Severity] FOREIGN KEY ([SeverityId]) REFERENCES [log4Private].[Severity] ([SeverityId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('9aff08b4-4ac5-4ddf-b933-117313d00da6' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [log4Private].[Journal] ADD CONSTRAINT [FK_Journal_SqlException] FOREIGN KEY ([ExceptionId]) REFERENCES [log4Private].[SqlException] ([ExceptionId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('9aff08b4-4ac5-4ddf-b933-117313d00da6' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Altering permissions on SCHEMA:: [log4]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('9aff08b4-4ac5-4ddf-b933-117313d00da6' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT EXECUTE ON SCHEMA:: [log4] TO [public]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('9aff08b4-4ac5-4ddf-b933-117313d00da6' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Altering permissions on SCHEMA:: [log4Utils]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('9aff08b4-4ac5-4ddf-b933-117313d00da6' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT EXECUTE ON SCHEMA:: [log4Utils] TO [public]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('9aff08b4-4ac5-4ddf-b933-117313d00da6' AS UNIQUEIDENTIFIER))
  PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\1.0.0\001_added_log4tsql_block.sql", ID: {9aff08b4-4ac5-4ddf-b933-117313d00da6} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('9aff08b4-4ac5-4ddf-b933-117313d00da6' AS UNIQUEIDENTIFIER))
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('9aff08b4-4ac5-4ddf-b933-117313d00da6' AS UNIQUEIDENTIFIER), '5305C07FB1CBB434F5DC45103F96E3FF53274A40795B4B17756DD881FCA5E5A7', 'Migrations\1.0.0\001_added_log4tsql_block.sql', SYSDATETIME(), SYSTEM_USER, 1, '1.0.0', '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. Also ensure that your project scripts do not contain any "USE [OtherDbName]" statements. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('2adb7855-a742-4460-975c-fea9bc61f853' AS UNIQUEIDENTIFIER))
  PRINT '

***** EXECUTING MIGRATION "Migrations\1.0.0\002_Add_Table_dbo_StubResultSet.sql", ID: {2adb7855-a742-4460-975c-fea9bc61f853} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('2adb7855-a742-4460-975c-fea9bc61f853' AS UNIQUEIDENTIFIER))
  EXECUTE ('
PRINT N''Creating [dbo].[StubResultSet]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('2adb7855-a742-4460-975c-fea9bc61f853' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE TABLE [dbo].[StubResultSet]
(
[FunctionName] [varchar] (255) NOT NULL,
[ProcessRunID] [int] NULL,
[SubProcessRunID] [int] NULL,
[ThreadRunID] [int] NULL,
[Instruction] [varchar] (255) NULL,
[RunType] [varchar] (10) NULL,
[Message] [varchar] (255) NULL
)
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('2adb7855-a742-4460-975c-fea9bc61f853' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating primary key [PK_StubResultSet] on [dbo].[StubResultSet]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('2adb7855-a742-4460-975c-fea9bc61f853' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [dbo].[StubResultSet] ADD CONSTRAINT [PK_StubResultSet] PRIMARY KEY CLUSTERED  ([FunctionName])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('2adb7855-a742-4460-975c-fea9bc61f853' AS UNIQUEIDENTIFIER))
  PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\1.0.0\002_Add_Table_dbo_StubResultSet.sql", ID: {2adb7855-a742-4460-975c-fea9bc61f853} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('2adb7855-a742-4460-975c-fea9bc61f853' AS UNIQUEIDENTIFIER))
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('2adb7855-a742-4460-975c-fea9bc61f853' AS UNIQUEIDENTIFIER), '5B17AE4E061472874F7D5DFD19A8F1938D1693F34B262A5EBFB4C40054878EED', 'Migrations\1.0.0\002_Add_Table_dbo_StubResultSet.sql', SYSDATETIME(), SYSTEM_USER, 1, '1.0.0', '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. Also ensure that your project scripts do not contain any "USE [OtherDbName]" statements. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('eb9c3ec3-0992-410e-875a-d11f195dd2b6' AS UNIQUEIDENTIFIER))
  PRINT '

***** EXECUTING MIGRATION "Migrations\1.0.0\003_Add_CDC_columns_to_StubResultSet.sql", ID: {eb9c3ec3-0992-410e-875a-d11f195dd2b6} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('eb9c3ec3-0992-410e-875a-d11f195dd2b6' AS UNIQUEIDENTIFIER))
  EXECUTE ('
PRINT N''Altering [dbo].[StubResultSet]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('eb9c3ec3-0992-410e-875a-d11f195dd2b6' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [dbo].[StubResultSet] ADD
[StartCapturePoint] [datetime] NULL,
[EndCapturePoint] [datetime] NULL
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('eb9c3ec3-0992-410e-875a-d11f195dd2b6' AS UNIQUEIDENTIFIER))
  PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\1.0.0\003_Add_CDC_columns_to_StubResultSet.sql", ID: {eb9c3ec3-0992-410e-875a-d11f195dd2b6} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('eb9c3ec3-0992-410e-875a-d11f195dd2b6' AS UNIQUEIDENTIFIER))
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('eb9c3ec3-0992-410e-875a-d11f195dd2b6' AS UNIQUEIDENTIFIER), '99F1B5E75002C70B541C39E9DAFE6355BAD9E9679B28D98847D3A0E492E8F3CB', 'Migrations\1.0.0\003_Add_CDC_columns_to_StubResultSet.sql', SYSDATETIME(), SYSTEM_USER, 1, '1.0.0', '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. Also ensure that your project scripts do not contain any "USE [OtherDbName]" statements. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('b6ea9d53-cb0b-4a0a-b498-440b6da4ad0c' AS UNIQUEIDENTIFIER))
  PRINT '

***** EXECUTING MIGRATION "Migrations\1.0.0\004_Add_columns_to_StubResultSet.sql", ID: {b6ea9d53-cb0b-4a0a-b498-440b6da4ad0c} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('b6ea9d53-cb0b-4a0a-b498-440b6da4ad0c' AS UNIQUEIDENTIFIER))
  EXECUTE ('
PRINT N''Altering [dbo].[StubResultSet]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('b6ea9d53-cb0b-4a0a-b498-440b6da4ad0c' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [dbo].[StubResultSet] ADD
[Outcome] [varchar] (255) NULL,
[ExpectedThreadCount] [int] NULL,
[ActualThreadCount] [int] NULL,
[ThreadsSucceeded] [int] NULL,
[ThreadsSkipped] [int] NULL,
[ThreadsStopped] [int] NULL,
[ThreadsFailed] [int] NULL
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('b6ea9d53-cb0b-4a0a-b498-440b6da4ad0c' AS UNIQUEIDENTIFIER))
  PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\1.0.0\004_Add_columns_to_StubResultSet.sql", ID: {b6ea9d53-cb0b-4a0a-b498-440b6da4ad0c} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('b6ea9d53-cb0b-4a0a-b498-440b6da4ad0c' AS UNIQUEIDENTIFIER))
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('b6ea9d53-cb0b-4a0a-b498-440b6da4ad0c' AS UNIQUEIDENTIFIER), '81179D6AA5C23BF2CB7171FA57A47EEC84D10FA172B56B0309427A02EE60DFF9', 'Migrations\1.0.0\004_Add_columns_to_StubResultSet.sql', SYSDATETIME(), SYSTEM_USER, 1, '1.0.0', '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. Also ensure that your project scripts do not contain any "USE [OtherDbName]" statements. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d8bff350-d9de-4fb0-9e49-800c100e7902' AS UNIQUEIDENTIFIER))
  PRINT '

***** EXECUTING MIGRATION "Migrations\1.0.0\005_AddRolesAndPermissions.sql", ID: {d8bff350-d9de-4fb0-9e49-800c100e7902} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d8bff350-d9de-4fb0-9e49-800c100e7902' AS UNIQUEIDENTIFIER))
  EXECUTE ('
PRINT N''Creating role BatchManagers''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d8bff350-d9de-4fb0-9e49-800c100e7902' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE ROLE [BatchManagers]
AUTHORIZATION [dbo]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d8bff350-d9de-4fb0-9e49-800c100e7902' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating role BusinessAnalystsDEV''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d8bff350-d9de-4fb0-9e49-800c100e7902' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE ROLE [BusinessAnalystsDEV]
AUTHORIZATION [dbo]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d8bff350-d9de-4fb0-9e49-800c100e7902' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating role BusinessAnalystsPROD''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d8bff350-d9de-4fb0-9e49-800c100e7902' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE ROLE [BusinessAnalystsPROD]
AUTHORIZATION [dbo]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d8bff350-d9de-4fb0-9e49-800c100e7902' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating role BusinessAnalystsTEST''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d8bff350-d9de-4fb0-9e49-800c100e7902' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE ROLE [BusinessAnalystsTEST]
AUTHORIZATION [dbo]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d8bff350-d9de-4fb0-9e49-800c100e7902' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating role CodeReviewers''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d8bff350-d9de-4fb0-9e49-800c100e7902' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE ROLE [CodeReviewers]
AUTHORIZATION [dbo]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d8bff350-d9de-4fb0-9e49-800c100e7902' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating role DeploymentManagers''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d8bff350-d9de-4fb0-9e49-800c100e7902' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE ROLE [DeploymentManagers]
AUTHORIZATION [dbo]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d8bff350-d9de-4fb0-9e49-800c100e7902' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating role EtlDevelopersDEV''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d8bff350-d9de-4fb0-9e49-800c100e7902' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE ROLE [EtlDevelopersDEV]
AUTHORIZATION [dbo]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d8bff350-d9de-4fb0-9e49-800c100e7902' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating role EtlDevelopersPROD''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d8bff350-d9de-4fb0-9e49-800c100e7902' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE ROLE [EtlDevelopersPROD]
AUTHORIZATION [dbo]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d8bff350-d9de-4fb0-9e49-800c100e7902' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating role EtlDevelopersTEST''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d8bff350-d9de-4fb0-9e49-800c100e7902' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE ROLE [EtlDevelopersTEST]
AUTHORIZATION [dbo]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d8bff350-d9de-4fb0-9e49-800c100e7902' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating role IcsDataFeeders''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d8bff350-d9de-4fb0-9e49-800c100e7902' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE ROLE [IcsDataFeeders]
AUTHORIZATION [dbo]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d8bff350-d9de-4fb0-9e49-800c100e7902' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating role SqlDevelopersDEV''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d8bff350-d9de-4fb0-9e49-800c100e7902' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE ROLE [SqlDevelopersDEV]
AUTHORIZATION [dbo]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d8bff350-d9de-4fb0-9e49-800c100e7902' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating role SqlDevelopersPROD''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d8bff350-d9de-4fb0-9e49-800c100e7902' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE ROLE [SqlDevelopersPROD]
AUTHORIZATION [dbo]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d8bff350-d9de-4fb0-9e49-800c100e7902' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating role SqlDevelopersTEST''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d8bff350-d9de-4fb0-9e49-800c100e7902' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE ROLE [SqlDevelopersTEST]
AUTHORIZATION [dbo]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d8bff350-d9de-4fb0-9e49-800c100e7902' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Altering members of role CodeReviewers''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d8bff350-d9de-4fb0-9e49-800c100e7902' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addrolemember N''CodeReviewers'', N''EtlDevelopersDEV''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d8bff350-d9de-4fb0-9e49-800c100e7902' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Altering members of role db_datareader''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d8bff350-d9de-4fb0-9e49-800c100e7902' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addrolemember N''db_datareader'', N''BusinessAnalystsDEV''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d8bff350-d9de-4fb0-9e49-800c100e7902' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addrolemember N''db_datareader'', N''BusinessAnalystsTEST''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d8bff350-d9de-4fb0-9e49-800c100e7902' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addrolemember N''db_datareader'', N''DeploymentManagers''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d8bff350-d9de-4fb0-9e49-800c100e7902' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addrolemember N''db_datareader'', N''EtlDevelopersDEV''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d8bff350-d9de-4fb0-9e49-800c100e7902' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addrolemember N''db_datareader'', N''EtlDevelopersTEST''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d8bff350-d9de-4fb0-9e49-800c100e7902' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addrolemember N''db_datareader'', N''SqlDevelopersDEV''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d8bff350-d9de-4fb0-9e49-800c100e7902' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addrolemember N''db_datareader'', N''SqlDevelopersPROD''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d8bff350-d9de-4fb0-9e49-800c100e7902' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addrolemember N''db_datareader'', N''SqlDevelopersTEST''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d8bff350-d9de-4fb0-9e49-800c100e7902' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Altering members of role db_datawriter''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d8bff350-d9de-4fb0-9e49-800c100e7902' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addrolemember N''db_datawriter'', N''DeploymentManagers''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d8bff350-d9de-4fb0-9e49-800c100e7902' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addrolemember N''db_datawriter'', N''SqlDevelopersDEV''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d8bff350-d9de-4fb0-9e49-800c100e7902' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addrolemember N''db_datawriter'', N''SqlDevelopersTEST''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d8bff350-d9de-4fb0-9e49-800c100e7902' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Altering members of role db_ddladmin''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d8bff350-d9de-4fb0-9e49-800c100e7902' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addrolemember N''db_ddladmin'', N''SqlDevelopersTEST''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d8bff350-d9de-4fb0-9e49-800c100e7902' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Altering members of role db_owner''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d8bff350-d9de-4fb0-9e49-800c100e7902' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addrolemember N''db_owner'', N''DeploymentManagers''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d8bff350-d9de-4fb0-9e49-800c100e7902' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addrolemember N''db_owner'', N''SqlDevelopersDEV''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d8bff350-d9de-4fb0-9e49-800c100e7902' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Altering permissions on  [dbo].[StubResultSet]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d8bff350-d9de-4fb0-9e49-800c100e7902' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT SELECT ON  [dbo].[StubResultSet] TO [EtlDevelopersDEV]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d8bff350-d9de-4fb0-9e49-800c100e7902' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT UPDATE ON  [dbo].[StubResultSet] TO [EtlDevelopersDEV]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d8bff350-d9de-4fb0-9e49-800c100e7902' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Altering permissions on SCHEMA:: [INFORMATION_SCHEMA]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d8bff350-d9de-4fb0-9e49-800c100e7902' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT SELECT ON SCHEMA:: [INFORMATION_SCHEMA] TO [IcsDataFeeders]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d8bff350-d9de-4fb0-9e49-800c100e7902' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Altering permissions on SCHEMA:: [dbo]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d8bff350-d9de-4fb0-9e49-800c100e7902' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT SELECT ON SCHEMA:: [dbo] TO [IcsDataFeeders]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d8bff350-d9de-4fb0-9e49-800c100e7902' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Altering permissions on SCHEMA:: [log4Private]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d8bff350-d9de-4fb0-9e49-800c100e7902' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT SELECT ON SCHEMA:: [log4Private] TO [BatchManagers]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d8bff350-d9de-4fb0-9e49-800c100e7902' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT VIEW DEFINITION TO [BusinessAnalystsDEV]
GRANT VIEW DEFINITION TO [BusinessAnalystsPROD]
GRANT VIEW DEFINITION TO [BusinessAnalystsTEST]
GRANT VIEW DEFINITION TO [CodeReviewers]
GRANT SHOWPLAN TO [EtlDevelopersDEV]
GRANT VIEW DEFINITION TO [EtlDevelopersDEV]
GRANT VIEW DEFINITION TO [EtlDevelopersPROD]
GRANT SHOWPLAN TO [EtlDevelopersTEST]
GRANT EXECUTE TO [SqlDevelopersDEV]
GRANT SHOWPLAN TO [SqlDevelopersPROD]
GRANT VIEW DEFINITION TO [SqlDevelopersPROD]
GRANT EXECUTE TO [SqlDevelopersTEST]
GRANT SHOWPLAN TO [SqlDevelopersTEST]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d8bff350-d9de-4fb0-9e49-800c100e7902' AS UNIQUEIDENTIFIER))
  PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\1.0.0\005_AddRolesAndPermissions.sql", ID: {d8bff350-d9de-4fb0-9e49-800c100e7902} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d8bff350-d9de-4fb0-9e49-800c100e7902' AS UNIQUEIDENTIFIER))
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('d8bff350-d9de-4fb0-9e49-800c100e7902' AS UNIQUEIDENTIFIER), 'E40BCD86F5894E55DB184E7CAEE3D71722D751D42BC2D583B3DD0FB648A26A81', 'Migrations\1.0.0\005_AddRolesAndPermissions.sql', SYSDATETIME(), SYSTEM_USER, 1, '1.0.0', '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. Also ensure that your project scripts do not contain any "USE [OtherDbName]" statements. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('23e6c836-e097-43df-b89d-f01f11175c38' AS UNIQUEIDENTIFIER))
  PRINT '

***** EXECUTING MIGRATION "Migrations\1.0.0\006_Add_RunState_tables.sql", ID: {23e6c836-e097-43df-b89d-f01f11175c38} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('23e6c836-e097-43df-b89d-f01f11175c38' AS UNIQUEIDENTIFIER))
  EXECUTE ('
PRINT N''Creating schemas''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('23e6c836-e097-43df-b89d-f01f11175c38' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE SCHEMA [privy]
AUTHORIZATION [dbo]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('23e6c836-e097-43df-b89d-f01f11175c38' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating [privy].[RunStateFlag]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('23e6c836-e097-43df-b89d-f01f11175c38' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE TABLE [privy].[RunStateFlag]
(
[FlagBit] [int] NOT NULL,
[FlagName] [varchar] (50) NOT NULL
)
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('23e6c836-e097-43df-b89d-f01f11175c38' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating primary key [PK_RunStateFlag] on [privy].[RunStateFlag]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('23e6c836-e097-43df-b89d-f01f11175c38' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [privy].[RunStateFlag] ADD CONSTRAINT [PK_RunStateFlag] PRIMARY KEY CLUSTERED  ([FlagBit])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('23e6c836-e097-43df-b89d-f01f11175c38' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding constraints to [privy].[RunStateFlag]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('23e6c836-e097-43df-b89d-f01f11175c38' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [privy].[RunStateFlag] ADD CONSTRAINT [AK_RunStateFlag_Name] UNIQUE NONCLUSTERED  ([FlagName])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('23e6c836-e097-43df-b89d-f01f11175c38' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating [privy].[RunState]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('23e6c836-e097-43df-b89d-f01f11175c38' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE TABLE [privy].[RunState]
(
[RunStateId] [int] NOT NULL,
[RunStateName] [varchar] (50) NOT NULL,
[IsEtlClosingState] [char] (1) NOT NULL CONSTRAINT [DF_RunState_IsEtlClosingState] DEFAULT (''N''),
[Narrative] [varchar] (500) NOT NULL,
[FlagBit] [int] NOT NULL CONSTRAINT [DF_RunState_FlagBit] DEFAULT ((0))
)
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('23e6c836-e097-43df-b89d-f01f11175c38' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating primary key [PK_RunState] on [privy].[RunState]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('23e6c836-e097-43df-b89d-f01f11175c38' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [privy].[RunState] ADD CONSTRAINT [PK_RunState] PRIMARY KEY CLUSTERED  ([RunStateId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('23e6c836-e097-43df-b89d-f01f11175c38' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding constraints to [privy].[RunState]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('23e6c836-e097-43df-b89d-f01f11175c38' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [privy].[RunState] ADD CONSTRAINT [AK_RunState_RunStateName] UNIQUE NONCLUSTERED  ([RunStateName])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('23e6c836-e097-43df-b89d-f01f11175c38' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding constraints to [privy].[RunStateFlag]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('23e6c836-e097-43df-b89d-f01f11175c38' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [privy].[RunStateFlag] ADD CONSTRAINT [CK_RunStateFlag_FlagRange] CHECK (([FlagBit]=(4096) OR [FlagBit]=(2048) OR [FlagBit]=(1024) OR [FlagBit]=(512) OR [FlagBit]=(256) OR [FlagBit]=(128) OR [FlagBit]=(64) OR [FlagBit]=(32) OR [FlagBit]=(16) OR [FlagBit]=(8) OR [FlagBit]=(4) OR [FlagBit]=(2) OR [FlagBit]=(1) OR [FlagBit]=(0)))
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('23e6c836-e097-43df-b89d-f01f11175c38' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding constraints to [privy].[RunState]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('23e6c836-e097-43df-b89d-f01f11175c38' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [privy].[RunState] ADD CONSTRAINT [CK_RunState_IsEtlClosingState] CHECK (([IsEtlClosingState]=''Y'' OR [IsEtlClosingState]=''N''))
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('23e6c836-e097-43df-b89d-f01f11175c38' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding foreign keys to [privy].[RunState]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('23e6c836-e097-43df-b89d-f01f11175c38' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [privy].[RunState] ADD CONSTRAINT [FK_RunState_RunStateFlag] FOREIGN KEY ([FlagBit]) REFERENCES [privy].[RunStateFlag] ([FlagBit])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('23e6c836-e097-43df-b89d-f01f11175c38' AS UNIQUEIDENTIFIER))
  PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\1.0.0\006_Add_RunState_tables.sql", ID: {23e6c836-e097-43df-b89d-f01f11175c38} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('23e6c836-e097-43df-b89d-f01f11175c38' AS UNIQUEIDENTIFIER))
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('23e6c836-e097-43df-b89d-f01f11175c38' AS UNIQUEIDENTIFIER), '8611806C204B27A556A3B9746ED107CB53F6371F373606D224D769318E98F65E', 'Migrations\1.0.0\006_Add_RunState_tables.sql', SYSDATETIME(), SYSTEM_USER, 1, '1.0.0', '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. Also ensure that your project scripts do not contain any "USE [OtherDbName]" statements. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('147a43b7-c2c2-472d-80a6-f296704eefdc' AS UNIQUEIDENTIFIER))
  PRINT '

***** EXECUTING MIGRATION "Migrations\1.0.0\007_Add_Batch_control_tables.sql", ID: {147a43b7-c2c2-472d-80a6-f296704eefdc} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('147a43b7-c2c2-472d-80a6-f296704eefdc' AS UNIQUEIDENTIFIER))
  EXECUTE ('
PRINT N''Creating schemas''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('147a43b7-c2c2-472d-80a6-f296704eefdc' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE SCHEMA [ics]
AUTHORIZATION [dbo]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('147a43b7-c2c2-472d-80a6-f296704eefdc' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating [privy].[Batch]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('147a43b7-c2c2-472d-80a6-f296704eefdc' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE TABLE [privy].[Batch]
(
[BatchId] [int] NOT NULL,
[BatchName] [varchar] (100) NOT NULL,
[IcrtProcessName] [varchar] (100) NOT NULL CONSTRAINT [DF_privy_Batch_IcrtProcessName] DEFAULT (''''),
[IsDisabled] [bit] NOT NULL CONSTRAINT [DF_privy_Batch_IsDisabled] DEFAULT ((0)),
[Narrative] [varchar] (500) NOT NULL CONSTRAINT [DF_privy_Batch_Narrative] DEFAULT (''''),
[StartCapturePointOverride] [datetime] NULL
)
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('147a43b7-c2c2-472d-80a6-f296704eefdc' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating primary key [PK_privy_Batch] on [privy].[Batch]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('147a43b7-c2c2-472d-80a6-f296704eefdc' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [privy].[Batch] ADD CONSTRAINT [PK_privy_Batch] PRIMARY KEY CLUSTERED  ([BatchId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('147a43b7-c2c2-472d-80a6-f296704eefdc' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding constraints to [privy].[Batch]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('147a43b7-c2c2-472d-80a6-f296704eefdc' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [privy].[Batch] ADD CONSTRAINT [AK_privy_Batch_BatchName] UNIQUE NONCLUSTERED  ([BatchId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('147a43b7-c2c2-472d-80a6-f296704eefdc' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating index [NDX_UNQ_privy_Batch_IcrtProcessName] on [privy].[Batch]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('147a43b7-c2c2-472d-80a6-f296704eefdc' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE UNIQUE NONCLUSTERED INDEX [NDX_UNQ_privy_Batch_IcrtProcessName] ON [privy].[Batch] ([IcrtProcessName]) WHERE ([IcrtProcessName]<>'''')
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('147a43b7-c2c2-472d-80a6-f296704eefdc' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating [ics].[MappingConfigTask]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('147a43b7-c2c2-472d-80a6-f296704eefdc' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE TABLE [ics].[MappingConfigTask]
(
[MappingConfigTaskId] [int] NOT NULL,
[MappingConfigTaskName] [varchar] (100) NOT NULL,
[MappingName] [varchar] (100) NOT NULL,
[Narrative] [varchar] (500) NOT NULL CONSTRAINT [DF_ics_MappingConfigTask_Narrative] DEFAULT ('''')
)
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('147a43b7-c2c2-472d-80a6-f296704eefdc' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating primary key [PK_ics_MappingConfigTask] on [ics].[MappingConfigTask]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('147a43b7-c2c2-472d-80a6-f296704eefdc' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [ics].[MappingConfigTask] ADD CONSTRAINT [PK_ics_MappingConfigTask] PRIMARY KEY CLUSTERED  ([MappingConfigTaskId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('147a43b7-c2c2-472d-80a6-f296704eefdc' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding constraints to [ics].[MappingConfigTask]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('147a43b7-c2c2-472d-80a6-f296704eefdc' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [ics].[MappingConfigTask] ADD CONSTRAINT [AK_ics_MappingConfigTask_Name] UNIQUE NONCLUSTERED  ([MappingConfigTaskName], [MappingName])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('147a43b7-c2c2-472d-80a6-f296704eefdc' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating [ics].[IcrtSubProcess]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('147a43b7-c2c2-472d-80a6-f296704eefdc' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE TABLE [ics].[IcrtSubProcess]
(
[IcrtSubProcessId] [int] NOT NULL,
[BatchId] [int] NOT NULL,
[IcrtSubProcessName] [varchar] (100) NOT NULL,
[Narrative] [varchar] (500) NOT NULL CONSTRAINT [DF_ics_IcrtSubProcess_Narrative] DEFAULT ('''')
)
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('147a43b7-c2c2-472d-80a6-f296704eefdc' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating primary key [PK_ics_IcrtSubProcess] on [ics].[IcrtSubProcess]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('147a43b7-c2c2-472d-80a6-f296704eefdc' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [ics].[IcrtSubProcess] ADD CONSTRAINT [PK_ics_IcrtSubProcess] PRIMARY KEY CLUSTERED  ([IcrtSubProcessId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('147a43b7-c2c2-472d-80a6-f296704eefdc' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding constraints to [ics].[IcrtSubProcess]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('147a43b7-c2c2-472d-80a6-f296704eefdc' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [ics].[IcrtSubProcess] ADD CONSTRAINT [AK_ics_IcrtSubProcess_Name] UNIQUE NONCLUSTERED  ([IcrtSubProcessName])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('147a43b7-c2c2-472d-80a6-f296704eefdc' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating [privy].[BatchStep]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('147a43b7-c2c2-472d-80a6-f296704eefdc' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE TABLE [privy].[BatchStep]
(
[BatchStepId] [int] NOT NULL,
[BatchStepName] [varchar] (100) NOT NULL,
[BatchId] [int] NOT NULL,
[Narrative] [varchar] (500) NOT NULL CONSTRAINT [DF_privy_BatchStep_Narrative] DEFAULT (''''),
[IsDisabled] [bit] NOT NULL CONSTRAINT [DF_privy_BatchStep_IsDisabled] DEFAULT ((0))
)
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('147a43b7-c2c2-472d-80a6-f296704eefdc' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating primary key [PK_privy_BatchStep] on [privy].[BatchStep]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('147a43b7-c2c2-472d-80a6-f296704eefdc' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [privy].[BatchStep] ADD CONSTRAINT [PK_privy_BatchStep] PRIMARY KEY CLUSTERED  ([BatchStepId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('147a43b7-c2c2-472d-80a6-f296704eefdc' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding constraints to [privy].[BatchStep]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('147a43b7-c2c2-472d-80a6-f296704eefdc' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [privy].[BatchStep] ADD CONSTRAINT [AK_privy_BatchStep_BatchId_BatchStepName] UNIQUE NONCLUSTERED  ([BatchId], [BatchStepName])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('147a43b7-c2c2-472d-80a6-f296704eefdc' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating [privy].[Thread]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('147a43b7-c2c2-472d-80a6-f296704eefdc' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE TABLE [privy].[Thread]
(
[ThreadId] [int] NOT NULL,
[ThreadName] [varchar] (100) NOT NULL,
[BatchStepId] [int] NOT NULL,
[Narrative] [varchar] (500) NOT NULL CONSTRAINT [DF_privy_Thread_Narrative] DEFAULT (''''),
[IsDisabled] [bit] NOT NULL CONSTRAINT [DF_privy_Thread_IsDisabled] DEFAULT ((0))
)
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('147a43b7-c2c2-472d-80a6-f296704eefdc' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating primary key [PK_privy_Thread] on [privy].[Thread]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('147a43b7-c2c2-472d-80a6-f296704eefdc' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [privy].[Thread] ADD CONSTRAINT [PK_privy_Thread] PRIMARY KEY CLUSTERED  ([ThreadId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('147a43b7-c2c2-472d-80a6-f296704eefdc' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding constraints to [privy].[Thread]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('147a43b7-c2c2-472d-80a6-f296704eefdc' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [privy].[Thread] ADD CONSTRAINT [AK_privy_Thread_BatchStepId_ThreadName] UNIQUE NONCLUSTERED  ([BatchStepId], [ThreadName])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('147a43b7-c2c2-472d-80a6-f296704eefdc' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding foreign keys to [ics].[IcrtSubProcess]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('147a43b7-c2c2-472d-80a6-f296704eefdc' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [ics].[IcrtSubProcess] ADD CONSTRAINT [FK_ics_IcrtSubProcess_privy_Batch] FOREIGN KEY ([BatchId]) REFERENCES [privy].[Batch] ([BatchId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('147a43b7-c2c2-472d-80a6-f296704eefdc' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding foreign keys to [privy].[Thread]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('147a43b7-c2c2-472d-80a6-f296704eefdc' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [privy].[Thread] ADD CONSTRAINT [FK_privy_Thread_BatchStep] FOREIGN KEY ([BatchStepId]) REFERENCES [privy].[BatchStep] ([BatchStepId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('147a43b7-c2c2-472d-80a6-f296704eefdc' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding foreign keys to [privy].[BatchStep]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('147a43b7-c2c2-472d-80a6-f296704eefdc' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [privy].[BatchStep] ADD CONSTRAINT [FK_privy_BatchStep_Batch] FOREIGN KEY ([BatchId]) REFERENCES [privy].[Batch] ([BatchId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('147a43b7-c2c2-472d-80a6-f296704eefdc' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Altering permissions on SCHEMA:: [ics]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('147a43b7-c2c2-472d-80a6-f296704eefdc' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT SELECT ON SCHEMA:: [ics] TO [BatchManagers]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('147a43b7-c2c2-472d-80a6-f296704eefdc' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT SELECT ON SCHEMA:: [ics] TO [EtlDevelopersDEV]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('147a43b7-c2c2-472d-80a6-f296704eefdc' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT SELECT ON SCHEMA:: [ics] TO [EtlDevelopersPROD]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('147a43b7-c2c2-472d-80a6-f296704eefdc' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Altering permissions on SCHEMA:: [privy]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('147a43b7-c2c2-472d-80a6-f296704eefdc' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT SELECT ON SCHEMA:: [privy] TO [BatchManagers]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('147a43b7-c2c2-472d-80a6-f296704eefdc' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT SELECT ON SCHEMA:: [privy] TO [BusinessAnalystsPROD]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('147a43b7-c2c2-472d-80a6-f296704eefdc' AS UNIQUEIDENTIFIER))
  EXECUTE ('GRANT SELECT ON SCHEMA:: [privy] TO [EtlDevelopersPROD]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('147a43b7-c2c2-472d-80a6-f296704eefdc' AS UNIQUEIDENTIFIER))
  PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\1.0.0\007_Add_Batch_control_tables.sql", ID: {147a43b7-c2c2-472d-80a6-f296704eefdc} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('147a43b7-c2c2-472d-80a6-f296704eefdc' AS UNIQUEIDENTIFIER))
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('147a43b7-c2c2-472d-80a6-f296704eefdc' AS UNIQUEIDENTIFIER), 'EF18D5F014DD2C4F6E05057B4BA9A591D5E1F81074EFBF46B4889BE19C0FAE9E', 'Migrations\1.0.0\007_Add_Batch_control_tables.sql', SYSDATETIME(), SYSTEM_USER, 1, '1.0.0', '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. Also ensure that your project scripts do not contain any "USE [OtherDbName]" statements. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ac88f9b8-2ba8-4fca-8e5c-566fa6f5e2ef' AS UNIQUEIDENTIFIER))
  PRINT '

***** EXECUTING MIGRATION "Migrations\1.0.0\008_Added_missing_extended_properties.sql", ID: {ac88f9b8-2ba8-4fca-8e5c-566fa6f5e2ef} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ac88f9b8-2ba8-4fca-8e5c-566fa6f5e2ef' AS UNIQUEIDENTIFIER))
  EXECUTE ('
PRINT N''Creating extended properties''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ac88f9b8-2ba8-4fca-8e5c-566fa6f5e2ef' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Represents a uniquely named ICRT sub-process'', ''SCHEMA'', N''ics'', ''TABLE'', N''IcrtSubProcess'', NULL, NULL
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ac88f9b8-2ba8-4fca-8e5c-566fa6f5e2ef' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Mandatory link to the database-specific unique identifier for the Batch of which this sub-process forms part'', ''SCHEMA'', N''ics'', ''TABLE'', N''IcrtSubProcess'', ''COLUMN'', N''BatchId''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ac88f9b8-2ba8-4fca-8e5c-566fa6f5e2ef' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Database-specific unique identifier for an ICRT sub-process'', ''SCHEMA'', N''ics'', ''TABLE'', N''IcrtSubProcess'', ''COLUMN'', N''IcrtSubProcessId''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ac88f9b8-2ba8-4fca-8e5c-566fa6f5e2ef' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''The unique physical name of the ICRT sub-process'', ''SCHEMA'', N''ics'', ''TABLE'', N''IcrtSubProcess'', ''COLUMN'', N''IcrtSubProcessName''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ac88f9b8-2ba8-4fca-8e5c-566fa6f5e2ef' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Represents a unique combination of a Mapping Configuration Task and a Mapping in ICS'', ''SCHEMA'', N''ics'', ''TABLE'', N''MappingConfigTask'', NULL, NULL
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ac88f9b8-2ba8-4fca-8e5c-566fa6f5e2ef' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Database-specific unique identifier for an ICS Mapping Config Task'', ''SCHEMA'', N''ics'', ''TABLE'', N''MappingConfigTask'', ''COLUMN'', N''MappingConfigTaskId''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ac88f9b8-2ba8-4fca-8e5c-566fa6f5e2ef' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''The unique physical name of the ICS Mapping Config Task'', ''SCHEMA'', N''ics'', ''TABLE'', N''MappingConfigTask'', ''COLUMN'', N''MappingConfigTaskName''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ac88f9b8-2ba8-4fca-8e5c-566fa6f5e2ef' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''The physical name of the ICS Mapping contained in the ICS MappingsConfig Task'', ''SCHEMA'', N''ics'', ''TABLE'', N''MappingConfigTask'', ''COLUMN'', N''MappingName''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ac88f9b8-2ba8-4fca-8e5c-566fa6f5e2ef' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Represents one of one or more batch steps (a.k.a. sub-process) within an ETL process e.g. land Customer data, Load Sales Data, Remove Duplicates.  A Batch Step consist of one or more threads which may run sequentially or in parallel.'', ''SCHEMA'', N''privy'', ''TABLE'', N''BatchStep'', NULL, NULL
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ac88f9b8-2ba8-4fca-8e5c-566fa6f5e2ef' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Mandatory link to the database-specific unique identifier for a Batch (and part of an alternate key with BatchStepName)'', ''SCHEMA'', N''privy'', ''TABLE'', N''BatchStep'', ''COLUMN'', N''BatchId''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ac88f9b8-2ba8-4fca-8e5c-566fa6f5e2ef' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Database specific unique identifier for a single Batch Step'', ''SCHEMA'', N''privy'', ''TABLE'', N''BatchStep'', ''COLUMN'', N''BatchStepId''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ac88f9b8-2ba8-4fca-8e5c-566fa6f5e2ef' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''User friendly name for a batch step, unique within a single batch (and part of an alternate key with BatchId)'', ''SCHEMA'', N''privy'', ''TABLE'', N''BatchStep'', ''COLUMN'', N''BatchStepName''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ac88f9b8-2ba8-4fca-8e5c-566fa6f5e2ef' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Indicates whether this batch step is disabled (where 1 = TRUE)'', ''SCHEMA'', N''privy'', ''TABLE'', N''BatchStep'', ''COLUMN'', N''IsDisabled''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ac88f9b8-2ba8-4fca-8e5c-566fa6f5e2ef' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Container for an end-to-end ETL Load Batch process e.g. "SAK UP", "SAP Germany", "Movex Denmark" or "M3 France" etc.  Effectively a container for a set of steps or instructions to load a particular set of data which may be PowerCenter, SSIS, ICS or something else.'', ''SCHEMA'', N''privy'', ''TABLE'', N''Batch'', NULL, NULL
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ac88f9b8-2ba8-4fca-8e5c-566fa6f5e2ef' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Database-specific unique identifier for an ETL Batch'', ''SCHEMA'', N''privy'', ''TABLE'', N''Batch'', ''COLUMN'', N''BatchId''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ac88f9b8-2ba8-4fca-8e5c-566fa6f5e2ef' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Database-specific, business-friendly unique identifier for an ETL Batch'', ''SCHEMA'', N''privy'', ''TABLE'', N''Batch'', ''COLUMN'', N''BatchName''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ac88f9b8-2ba8-4fca-8e5c-566fa6f5e2ef' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Unique identifier for the same batch within ICRT/ICS.  Must be unique when populated'', ''SCHEMA'', N''privy'', ''TABLE'', N''Batch'', ''COLUMN'', N''IcrtProcessName''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ac88f9b8-2ba8-4fca-8e5c-566fa6f5e2ef' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Indicates whether this job is disabled where 1 = TRUE and will not run (only when managed through the standard JLL SSIS runtime)'', ''SCHEMA'', N''privy'', ''TABLE'', N''Batch'', ''COLUMN'', N''IsDisabled''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ac88f9b8-2ba8-4fca-8e5c-566fa6f5e2ef' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''The date from which to fetch/process data for all steps in the job - used to force a full load over a delta'', ''SCHEMA'', N''privy'', ''TABLE'', N''Batch'', ''COLUMN'', N''StartCapturePointOverride''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ac88f9b8-2ba8-4fca-8e5c-566fa6f5e2ef' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Represents a single thread within a step of an ETL process, typically one thread is responsible for processing one table.'', ''SCHEMA'', N''privy'', ''TABLE'', N''Thread'', NULL, NULL
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ac88f9b8-2ba8-4fca-8e5c-566fa6f5e2ef' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Mandatory link to the database-specific unique identifier for a BatchStep (and part of an alternate key with ThreadName)'', ''SCHEMA'', N''privy'', ''TABLE'', N''Thread'', ''COLUMN'', N''BatchStepId''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ac88f9b8-2ba8-4fca-8e5c-566fa6f5e2ef' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Indicates whether this thread is disabled (where 1 = TRUE)'', ''SCHEMA'', N''privy'', ''TABLE'', N''Thread'', ''COLUMN'', N''IsDisabled''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ac88f9b8-2ba8-4fca-8e5c-566fa6f5e2ef' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Database specific unique identifier for a single Thread'', ''SCHEMA'', N''privy'', ''TABLE'', N''Thread'', ''COLUMN'', N''ThreadId''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ac88f9b8-2ba8-4fca-8e5c-566fa6f5e2ef' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''User friendly name for a thread, unique within a batch step (and part of an alternate key with BatchStepId)'', ''SCHEMA'', N''privy'', ''TABLE'', N''Thread'', ''COLUMN'', N''ThreadName''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ac88f9b8-2ba8-4fca-8e5c-566fa6f5e2ef' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Altering permissions on SCHEMA:: [ics]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ac88f9b8-2ba8-4fca-8e5c-566fa6f5e2ef' AS UNIQUEIDENTIFIER))
  EXECUTE ('REVOKE SELECT ON SCHEMA:: [ics] TO [BatchManagers]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ac88f9b8-2ba8-4fca-8e5c-566fa6f5e2ef' AS UNIQUEIDENTIFIER))
  EXECUTE ('REVOKE SELECT ON SCHEMA:: [ics] TO [EtlDevelopersDEV]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ac88f9b8-2ba8-4fca-8e5c-566fa6f5e2ef' AS UNIQUEIDENTIFIER))
  EXECUTE ('REVOKE SELECT ON SCHEMA:: [ics] TO [EtlDevelopersPROD]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ac88f9b8-2ba8-4fca-8e5c-566fa6f5e2ef' AS UNIQUEIDENTIFIER))
  PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\1.0.0\008_Added_missing_extended_properties.sql", ID: {ac88f9b8-2ba8-4fca-8e5c-566fa6f5e2ef} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ac88f9b8-2ba8-4fca-8e5c-566fa6f5e2ef' AS UNIQUEIDENTIFIER))
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('ac88f9b8-2ba8-4fca-8e5c-566fa6f5e2ef' AS UNIQUEIDENTIFIER), '26D3244FB35B8C2E9E52A53650780121BDC6A6BC05B9CAF1BC9C0A781F8369FB', 'Migrations\1.0.0\008_Added_missing_extended_properties.sql', SYSDATETIME(), SYSTEM_USER, 1, '1.0.0', '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. Also ensure that your project scripts do not contain any "USE [OtherDbName]" statements. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  PRINT '

***** EXECUTING MIGRATION "Migrations\1.0.0\009_Add_ICS_Links_to_Batch_tables.sql", ID: {58993c81-7c42-49c3-9dfd-db1c6a4d48c7} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('
print N''Dropping extended properties''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_dropextendedproperty N''MS_Description'', ''SCHEMA'', N''privy'', ''TABLE'', N''BatchStep'', null, null
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_dropextendedproperty N''MS_Description'', ''SCHEMA'', N''privy'', ''TABLE'', N''BatchStep'', ''COLUMN'', N''BatchId''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_dropextendedproperty N''MS_Description'', ''SCHEMA'', N''privy'', ''TABLE'', N''BatchStep'', ''COLUMN'', N''BatchStepId''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_dropextendedproperty N''MS_Description'', ''SCHEMA'', N''privy'', ''TABLE'', N''BatchStep'', ''COLUMN'', N''BatchStepName''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_dropextendedproperty N''MS_Description'', ''SCHEMA'', N''privy'', ''TABLE'', N''BatchStep'', ''COLUMN'', N''IsDisabled''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_dropextendedproperty N''MS_Description'', ''SCHEMA'', N''privy'', ''TABLE'', N''Thread'', null, null
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_dropextendedproperty N''MS_Description'', ''SCHEMA'', N''privy'', ''TABLE'', N''Thread'', ''COLUMN'', N''BatchStepId''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_dropextendedproperty N''MS_Description'', ''SCHEMA'', N''privy'', ''TABLE'', N''Thread'', ''COLUMN'', N''IsDisabled''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_dropextendedproperty N''MS_Description'', ''SCHEMA'', N''privy'', ''TABLE'', N''Thread'', ''COLUMN'', N''ThreadId''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_dropextendedproperty N''MS_Description'', ''SCHEMA'', N''privy'', ''TABLE'', N''Thread'', ''COLUMN'', N''ThreadName''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('print N''Dropping foreign keys from [privy].[BatchStep]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('alter table [privy].[BatchStep] drop constraint [FK_privy_BatchStep_Batch]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('print N''Dropping foreign keys from [privy].[Thread]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('alter table [privy].[Thread] drop constraint [FK_privy_Thread_BatchStep]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('print N''Dropping constraints from [privy].[BatchStep]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('alter table [privy].[BatchStep] drop constraint [PK_privy_BatchStep]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('print N''Dropping constraints from [privy].[BatchStep]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('alter table [privy].[BatchStep] drop constraint [AK_privy_BatchStep_BatchId_BatchStepName]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('print N''Dropping constraints from [privy].[BatchStep]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('alter table [privy].[BatchStep] drop constraint [DF_privy_BatchStep_Narrative]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('print N''Dropping constraints from [privy].[BatchStep]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('alter table [privy].[BatchStep] drop constraint [DF_privy_BatchStep_IsDisabled]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('print N''Dropping constraints from [privy].[Thread]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('alter table [privy].[Thread] drop constraint [PK_privy_Thread]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('print N''Dropping constraints from [privy].[Thread]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('alter table [privy].[Thread] drop constraint [AK_privy_Thread_BatchStepId_ThreadName]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('print N''Dropping constraints from [privy].[Thread]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('alter table [privy].[Thread] drop constraint [DF_privy_Thread_Narrative]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('print N''Dropping constraints from [privy].[Thread]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('alter table [privy].[Thread] drop constraint [DF_privy_Thread_IsDisabled]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('print N''Rebuilding [privy].[BatchStep]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('create table [privy].[RG_Recovery_1_BatchStep]
(
[BatchStepId] [int] not null,
[BatchStepName] [varchar] (100) not null,
[BatchId] [int] not null,
[IcrtSubProcessId] [int] null,
[Narrative] [varchar] (500) not null constraint [DF_privy_BatchStep_Narrative] default (''''),
[IsDisabled] [bit] not null constraint [DF_privy_BatchStep_IsDisabled] default ((0))
)
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('insert into [privy].[RG_Recovery_1_BatchStep]
(
	[BatchStepId]
  , [BatchStepName]
  , [BatchId]
  , [Narrative]
  , [IsDisabled]
)
select
	[BatchStepId]
  , [BatchStepName]
  , [BatchId]
  , [Narrative]
  , [IsDisabled]
from
	[privy].[BatchStep] ;
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('drop table [privy].[BatchStep]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_rename N''[privy].[RG_Recovery_1_BatchStep]'', N''BatchStep'', N''OBJECT''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('print N''Creating primary key [PK_privy_BatchStep] on [privy].[BatchStep]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('alter table [privy].[BatchStep] add constraint [PK_privy_BatchStep] primary key clustered  ([BatchStepId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('print N''Adding constraints to [privy].[BatchStep]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('alter table [privy].[BatchStep] add constraint [AK_privy_BatchStep_BatchId_BatchStepName] unique nonclustered  ([BatchId], [BatchStepName])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('print N''Rebuilding [privy].[Thread]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('create table [privy].[RG_Recovery_2_Thread]
(
[ThreadId] [int] not null,
[ThreadName] [varchar] (100) not null,
[BatchStepId] [int] not null,
[MappingConfigTaskId] [int] null,
[Narrative] [varchar] (500) not null constraint [DF_privy_Thread_Narrative] default (''''),
[IsDisabled] [bit] not null constraint [DF_privy_Thread_IsDisabled] default ((0))
)
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('insert into [privy].[RG_Recovery_2_Thread]
(
	[ThreadId]
  , [ThreadName]
  , [BatchStepId]
  , [Narrative]
  , [IsDisabled]
)
select
	[ThreadId]
  , [ThreadName]
  , [BatchStepId]
  , [Narrative]
  , [IsDisabled]
from
	[privy].[Thread] ;
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('drop table [privy].[Thread]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_rename N''[privy].[RG_Recovery_2_Thread]'', N''Thread'', N''OBJECT''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('print N''Creating primary key [PK_privy_Thread] on [privy].[Thread]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('alter table [privy].[Thread] add constraint [PK_privy_Thread] primary key clustered  ([ThreadId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('print N''Adding constraints to [privy].[Thread]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('alter table [privy].[Thread] add constraint [AK_privy_Thread_BatchStepId_ThreadName] unique nonclustered  ([BatchStepId], [ThreadName])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('print N''Adding foreign keys to [privy].[BatchStep]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('alter table [privy].[BatchStep] add constraint [FK_privy_BatchStep_ics_IcrtSubProcess] foreign key ([IcrtSubProcessId]) references [ics].[IcrtSubProcess] ([IcrtSubProcessId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('alter table [privy].[BatchStep] add constraint [FK_privy_BatchStep_privy_Batch] foreign key ([BatchId]) references [privy].[Batch] ([BatchId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('print N''Adding foreign keys to [privy].[Thread]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('alter table [privy].[Thread] add constraint [FK_privy_Thread_BatchStep] foreign key ([BatchStepId]) references [privy].[BatchStep] ([BatchStepId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('alter table [privy].[Thread] add constraint [FK_privy_BatchStep_ics_MappingConfigTask] foreign key ([MappingConfigTaskId]) references [ics].[MappingConfigTask] ([MappingConfigTaskId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('print N''Creating extended properties''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''Represents one of one or more batch steps (a.k.a. sub-process) within an ETL process e.g. land Customer data, Load Sales Data, Remove Duplicates.  A Batch Step consist of one or more threads which may run sequentially or in parallel.'', ''SCHEMA'', N''privy'', ''TABLE'', N''BatchStep'', null, null
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''Mandatory link to the database-specific unique identifier for a Batch (and part of an alternate key with BatchStepName)'', ''SCHEMA'', N''privy'', ''TABLE'', N''BatchStep'', ''COLUMN'', N''BatchId''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''Database specific unique identifier for a single Batch Step'', ''SCHEMA'', N''privy'', ''TABLE'', N''BatchStep'', ''COLUMN'', N''BatchStepId''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''User friendly name for a batch step, unique within a single batch (and part of an alternate key with BatchId)'', ''SCHEMA'', N''privy'', ''TABLE'', N''BatchStep'', ''COLUMN'', N''BatchStepName''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''Optional link to the database-specific unique identifier for the ICRT sub-process that is responsible for running this step within a wider ICRT Process/Batch'', ''SCHEMA'', N''privy'', ''TABLE'', N''BatchStep'', ''COLUMN'', N''IcrtSubProcessId''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''Indicates whether this batch step is disabled (where 1 = TRUE)'', ''SCHEMA'', N''privy'', ''TABLE'', N''BatchStep'', ''COLUMN'', N''IsDisabled''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''Represents a single thread within a step of an ETL process, typically one thread is responsible for processing one table.'', ''SCHEMA'', N''privy'', ''TABLE'', N''Thread'', null, null
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''Mandatory link to the database-specific unique identifier for a BatchStep (and part of an alternate key with ThreadName)'', ''SCHEMA'', N''privy'', ''TABLE'', N''Thread'', ''COLUMN'', N''BatchStepId''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''Indicates whether this thread is disabled (where 1 = TRUE)'', ''SCHEMA'', N''privy'', ''TABLE'', N''Thread'', ''COLUMN'', N''IsDisabled''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''Optional link to the database-specific unique identifier for the ICS Mapping Configuration Task/Mapping that is responsible for running this thread within a wider ICRT Sub-process/Step'', ''SCHEMA'', N''privy'', ''TABLE'', N''Thread'', ''COLUMN'', N''MappingConfigTaskId''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''Database specific unique identifier for a single Thread'', ''SCHEMA'', N''privy'', ''TABLE'', N''Thread'', ''COLUMN'', N''ThreadId''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''User friendly name for a thread, unique within a batch step (and part of an alternate key with BatchStepId)'', ''SCHEMA'', N''privy'', ''TABLE'', N''Thread'', ''COLUMN'', N''ThreadName''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\1.0.0\009_Add_ICS_Links_to_Batch_tables.sql", ID: {58993c81-7c42-49c3-9dfd-db1c6a4d48c7} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER))
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('58993c81-7c42-49c3-9dfd-db1c6a4d48c7' AS UNIQUEIDENTIFIER), '90A32F082AF7B8360BF76C508E5CFD4C30BB5D3353D223CF2E2F2AD20B648D50', 'Migrations\1.0.0\009_Add_ICS_Links_to_Batch_tables.sql', SYSDATETIME(), SYSTEM_USER, 1, '1.0.0', '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. Also ensure that your project scripts do not contain any "USE [OtherDbName]" statements. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('cc1fec6a-3e0e-42ec-ae69-8b8771fba0ac' AS UNIQUEIDENTIFIER))
  PRINT '

***** EXECUTING MIGRATION "Migrations\1.0.0\010_Create_IcsApp_schema.sql", ID: {cc1fec6a-3e0e-42ec-ae69-8b8771fba0ac} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('cc1fec6a-3e0e-42ec-ae69-8b8771fba0ac' AS UNIQUEIDENTIFIER))
  EXECUTE ('
PRINT N''Creating schemas''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('cc1fec6a-3e0e-42ec-ae69-8b8771fba0ac' AS UNIQUEIDENTIFIER))
  EXECUTE ('if schema_id(''IcsApp'') is null
	exec(N''create schema [IcsApp] authorization [dbo];'');
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('cc1fec6a-3e0e-42ec-ae69-8b8771fba0ac' AS UNIQUEIDENTIFIER))
  PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\1.0.0\010_Create_IcsApp_schema.sql", ID: {cc1fec6a-3e0e-42ec-ae69-8b8771fba0ac} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('cc1fec6a-3e0e-42ec-ae69-8b8771fba0ac' AS UNIQUEIDENTIFIER))
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('cc1fec6a-3e0e-42ec-ae69-8b8771fba0ac' AS UNIQUEIDENTIFIER), 'A8786CFC0ADE2B83FF8539AA65A6F39D2D39CA7A7C50A1FFAA15E053FC64F17C', 'Migrations\1.0.0\010_Create_IcsApp_schema.sql', SYSDATETIME(), SYSTEM_USER, 1, '1.0.0', '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. Also ensure that your project scripts do not contain any "USE [OtherDbName]" statements. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('dff86676-2a83-4ae9-86f7-caa88b2a9151' AS UNIQUEIDENTIFIER))
  PRINT '

***** EXECUTING MIGRATION "Migrations\1.0.0\011_Remove_dbo_RunStart_procedures.sql", ID: {dff86676-2a83-4ae9-86f7-caa88b2a9151} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('dff86676-2a83-4ae9-86f7-caa88b2a9151' AS UNIQUEIDENTIFIER))
  EXECUTE ('
PRINT N''Dropping [dbo].[ThreadRunStart]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('dff86676-2a83-4ae9-86f7-caa88b2a9151' AS UNIQUEIDENTIFIER))
  EXECUTE ('IF OBJECT_ID(N''[dbo].[ThreadRunStart]'', ''P'') IS NOT NULL
DROP PROCEDURE [dbo].[ThreadRunStart]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('dff86676-2a83-4ae9-86f7-caa88b2a9151' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Dropping [dbo].[SubProcessRunStart]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('dff86676-2a83-4ae9-86f7-caa88b2a9151' AS UNIQUEIDENTIFIER))
  EXECUTE ('IF OBJECT_ID(N''[dbo].[SubProcessRunStart]'', ''P'') IS NOT NULL
DROP PROCEDURE [dbo].[SubProcessRunStart]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('dff86676-2a83-4ae9-86f7-caa88b2a9151' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Dropping [dbo].[ProcessRunStart]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('dff86676-2a83-4ae9-86f7-caa88b2a9151' AS UNIQUEIDENTIFIER))
  EXECUTE ('IF OBJECT_ID(N''[dbo].[ProcessRunStart]'', ''P'') IS NOT NULL
DROP PROCEDURE [dbo].[ProcessRunStart]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('dff86676-2a83-4ae9-86f7-caa88b2a9151' AS UNIQUEIDENTIFIER))
  PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\1.0.0\011_Remove_dbo_RunStart_procedures.sql", ID: {dff86676-2a83-4ae9-86f7-caa88b2a9151} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('dff86676-2a83-4ae9-86f7-caa88b2a9151' AS UNIQUEIDENTIFIER))
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('dff86676-2a83-4ae9-86f7-caa88b2a9151' AS UNIQUEIDENTIFIER), 'EE00AD314C3F49DB1670F88CC6430FF7F927E9A265D1C93270BFD1C6E8B883ED', 'Migrations\1.0.0\011_Remove_dbo_RunStart_procedures.sql', SYSDATETIME(), SYSTEM_USER, 1, '1.0.0', '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. Also ensure that your project scripts do not contain any "USE [OtherDbName]" statements. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('b938168a-956f-4afa-8936-77527f6373f2' AS UNIQUEIDENTIFIER))
  PRINT '

***** EXECUTING MIGRATION "Migrations\1.0.0\012_Add_UniqueFilteredIndexToBatchStep.sql", ID: {b938168a-956f-4afa-8936-77527f6373f2} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('b938168a-956f-4afa-8936-77527f6373f2' AS UNIQUEIDENTIFIER))
  EXECUTE ('
PRINT N''Creating index [NDX_UNQ_privy_BatchStep_BatchId_IcrtSubProcessId] on [privy].[BatchStep]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('b938168a-956f-4afa-8936-77527f6373f2' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE UNIQUE NONCLUSTERED INDEX [NDX_UNQ_privy_BatchStep_BatchId_IcrtSubProcessId] ON [privy].[BatchStep] ([BatchId], [IcrtSubProcessId]) WHERE ([IcrtSubProcessId] IS NOT NULL)
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('b938168a-956f-4afa-8936-77527f6373f2' AS UNIQUEIDENTIFIER))
  PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\1.0.0\012_Add_UniqueFilteredIndexToBatchStep.sql", ID: {b938168a-956f-4afa-8936-77527f6373f2} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('b938168a-956f-4afa-8936-77527f6373f2' AS UNIQUEIDENTIFIER))
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('b938168a-956f-4afa-8936-77527f6373f2' AS UNIQUEIDENTIFIER), '9FFF4FB1FDF8E64685A87F6A31508248A557D588DE30CA1081FF207934D32FEF', 'Migrations\1.0.0\012_Add_UniqueFilteredIndexToBatchStep.sql', SYSDATETIME(), SYSTEM_USER, 1, '1.0.0', '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. Also ensure that your project scripts do not contain any "USE [OtherDbName]" statements. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e0abb69c-34a0-4de0-a4ab-d4bd4df65104' AS UNIQUEIDENTIFIER))
  PRINT '

***** EXECUTING MIGRATION "Migrations\1.0.0\013_Remove_dbo_RunEnd_procedures.sql", ID: {e0abb69c-34a0-4de0-a4ab-d4bd4df65104} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e0abb69c-34a0-4de0-a4ab-d4bd4df65104' AS UNIQUEIDENTIFIER))
  EXECUTE ('
PRINT N''Dropping [dbo].[ThreadRunEnd]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e0abb69c-34a0-4de0-a4ab-d4bd4df65104' AS UNIQUEIDENTIFIER))
  EXECUTE ('IF OBJECT_ID(N''[dbo].[ThreadRunEnd]'', ''P'') IS NOT NULL
DROP PROCEDURE [dbo].[ThreadRunEnd]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e0abb69c-34a0-4de0-a4ab-d4bd4df65104' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Dropping [dbo].[SubProcessRunEnd]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e0abb69c-34a0-4de0-a4ab-d4bd4df65104' AS UNIQUEIDENTIFIER))
  EXECUTE ('IF OBJECT_ID(N''[dbo].[SubProcessRunEnd]'', ''P'') IS NOT NULL
DROP PROCEDURE [dbo].[SubProcessRunEnd]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e0abb69c-34a0-4de0-a4ab-d4bd4df65104' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Dropping [dbo].[ProcessRunEnd]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e0abb69c-34a0-4de0-a4ab-d4bd4df65104' AS UNIQUEIDENTIFIER))
  EXECUTE ('IF OBJECT_ID(N''[dbo].[ProcessRunEnd]'', ''P'') IS NOT NULL
DROP PROCEDURE [dbo].[ProcessRunEnd]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e0abb69c-34a0-4de0-a4ab-d4bd4df65104' AS UNIQUEIDENTIFIER))
  PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\1.0.0\013_Remove_dbo_RunEnd_procedures.sql", ID: {e0abb69c-34a0-4de0-a4ab-d4bd4df65104} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e0abb69c-34a0-4de0-a4ab-d4bd4df65104' AS UNIQUEIDENTIFIER))
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('e0abb69c-34a0-4de0-a4ab-d4bd4df65104' AS UNIQUEIDENTIFIER), 'EE02FE558C15E99B7483D8EA59BFBDC3C170301759327DC78EBD50C4BA22294C', 'Migrations\1.0.0\013_Remove_dbo_RunEnd_procedures.sql', SYSDATETIME(), SYSTEM_USER, 1, '1.0.0', '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. Also ensure that your project scripts do not contain any "USE [OtherDbName]" statements. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('65918870-2fd8-4aa5-9a4d-79088123474b' AS UNIQUEIDENTIFIER))
  PRINT '

***** EXECUTING MIGRATION "Migrations\1.0.0\014_Drop_dbo_SubProcessCheckThreads.sql", ID: {65918870-2fd8-4aa5-9a4d-79088123474b} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('65918870-2fd8-4aa5-9a4d-79088123474b' AS UNIQUEIDENTIFIER))
  EXECUTE ('
PRINT N''Dropping [dbo].[SubProcessCheckThreads]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('65918870-2fd8-4aa5-9a4d-79088123474b' AS UNIQUEIDENTIFIER))
  EXECUTE ('IF OBJECT_ID(N''[dbo].[SubProcessCheckThreads]'', ''P'') IS NOT NULL
DROP PROCEDURE [dbo].[SubProcessCheckThreads]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('65918870-2fd8-4aa5-9a4d-79088123474b' AS UNIQUEIDENTIFIER))
  PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\1.0.0\014_Drop_dbo_SubProcessCheckThreads.sql", ID: {65918870-2fd8-4aa5-9a4d-79088123474b} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('65918870-2fd8-4aa5-9a4d-79088123474b' AS UNIQUEIDENTIFIER))
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('65918870-2fd8-4aa5-9a4d-79088123474b' AS UNIQUEIDENTIFIER), '6B6CDA342623F14C404C43F359AFEAB84F0423B2E4B68448E096FF2C90966EDF', 'Migrations\1.0.0\014_Drop_dbo_SubProcessCheckThreads.sql', SYSDATETIME(), SYSTEM_USER, 1, '1.0.0', '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. Also ensure that your project scripts do not contain any "USE [OtherDbName]" statements. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d271f747-6330-4c34-b84a-c2ebd86e2e56' AS UNIQUEIDENTIFIER))
  PRINT '

***** EXECUTING MIGRATION "Migrations\1.0.0\015_Move_Batch_tables_to_batch_schema.sql", ID: {d271f747-6330-4c34-b84a-c2ebd86e2e56} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d271f747-6330-4c34-b84a-c2ebd86e2e56' AS UNIQUEIDENTIFIER))
  EXECUTE ('
if objectpropertyex(object_id(N''[privy].[Thread]''), N''IsUserTable'') is not null
	drop table [privy].[Thread]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d271f747-6330-4c34-b84a-c2ebd86e2e56' AS UNIQUEIDENTIFIER))
  EXECUTE ('if objectpropertyex(object_id(N''[privy].[BatchStep]''), N''IsUserTable'') is not null
	drop table [privy].[BatchStep]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d271f747-6330-4c34-b84a-c2ebd86e2e56' AS UNIQUEIDENTIFIER))
  EXECUTE ('if objectpropertyex(object_id(N''[ics].[MappingConfigTask]''), N''IsUserTable'') is not null
	drop table [ics].[MappingConfigTask]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d271f747-6330-4c34-b84a-c2ebd86e2e56' AS UNIQUEIDENTIFIER))
  EXECUTE ('if objectpropertyex(object_id(N''[ics].[IcrtSubProcess]''), N''IsUserTable'') is not null
	drop table [ics].[IcrtSubProcess]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d271f747-6330-4c34-b84a-c2ebd86e2e56' AS UNIQUEIDENTIFIER))
  EXECUTE ('if objectpropertyex(object_id(N''[privy].[Batch]''), N''IsUserTable'') is not null
	drop table [privy].[Batch]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d271f747-6330-4c34-b84a-c2ebd86e2e56' AS UNIQUEIDENTIFIER))
  EXECUTE ('if schema_id(''batch'') is null
	exec(N''create schema [batch] authorization [dbo];'');
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d271f747-6330-4c34-b84a-c2ebd86e2e56' AS UNIQUEIDENTIFIER))
  EXECUTE ('
create table [batch].[Process]
(
  BatchProcessId int not null
, BatchProcessName varchar(100) not null
, IcrtProcessName varchar(100) not null constraint DF_batch_Process_IcrtProcessName default ('''')
, IsDisabled bit not null constraint DF_batch_Process_IsDisabled default (0)
, Narrative varchar(500) not null constraint DF_batch_Process_Narrative default ('''')
, StartCapturePointOverride datetime null
, constraint PK_batch_Process primary key clustered (BatchProcessId asc)
, constraint AK_batch_Process_BatchProcessName unique nonclustered (BatchProcessName asc)
) on [PRIMARY] ;
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d271f747-6330-4c34-b84a-c2ebd86e2e56' AS UNIQUEIDENTIFIER))
  EXECUTE ('create unique nonclustered index [NDX_UNQ_batch_Process_IcrtProcessName]
    on batch.Process(IcrtProcessName) where (IcrtProcessName <> '''');
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d271f747-6330-4c34-b84a-c2ebd86e2e56' AS UNIQUEIDENTIFIER))
  EXECUTE ('
exec sys.sp_addextendedproperty @name=N''MS_Description''
, @value=N''Container for an end-to-end ETL Batch Process e.g. "SAK UP", "SAP Germany", "Movex Denmark" or "M3 France" etc.  Effectively a container for a set of steps or instructions to load a particular set of data using one or more ETL tools which may be PowerCenter, SSIS, ICS or something else.''
, @level0type=N''SCHEMA'',@level0name=N''batch'', @level1type=N''TABLE'',@level1name=N''Process''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d271f747-6330-4c34-b84a-c2ebd86e2e56' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sys.sp_addextendedproperty @name=N''MS_Description''
, @value=N''Database-specific unique identifier for an ETL Batch Process''
, @level0type=N''SCHEMA'',@level0name=N''batch'', @level1type=N''TABLE'',@level1name=N''Process'', @level2type=N''COLUMN'',@level2name=N''BatchProcessId''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d271f747-6330-4c34-b84a-c2ebd86e2e56' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sys.sp_addextendedproperty @name=N''MS_Description''
, @value=N''Database-specific, business-friendly unique identifier for an ETL Batch Process''
, @level0type=N''SCHEMA'',@level0name=N''batch'', @level1type=N''TABLE'',@level1name=N''Process'', @level2type=N''COLUMN'',@level2name=N''BatchProcessName''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d271f747-6330-4c34-b84a-c2ebd86e2e56' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sys.sp_addextendedproperty @name=N''MS_Description''
, @value=N''Unique identifier for the equivalent batch process within ICRT/ICS.  Must be unique when populated''
, @level0type=N''SCHEMA'',@level0name=N''batch'', @level1type=N''TABLE'',@level1name=N''Process'', @level2type=N''COLUMN'',@level2name=N''IcrtProcessName''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d271f747-6330-4c34-b84a-c2ebd86e2e56' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sys.sp_addextendedproperty @name=N''MS_Description''
, @value=N''Indicates whether this job is disabled where 1 = TRUE and will not run (only when managed through the standard JLL SSIS runtime)''
, @level0type=N''SCHEMA'',@level0name=N''batch'', @level1type=N''TABLE'',@level1name=N''Process'', @level2type=N''COLUMN'',@level2name=N''IsDisabled''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d271f747-6330-4c34-b84a-c2ebd86e2e56' AS UNIQUEIDENTIFIER))
  EXECUTE ('exec sys.sp_addextendedproperty @name=N''MS_Description''
, @value=N''The date FROM which (i.e. ">") to fetch/process data for all steps in the job - used to force a full load over a delta''
, @level0type=N''SCHEMA'',@level0name=N''batch'', @level1type=N''TABLE'',@level1name=N''Process'', @level2type=N''COLUMN'',@level2name=N''StartCapturePointOverride''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d271f747-6330-4c34-b84a-c2ebd86e2e56' AS UNIQUEIDENTIFIER))
  EXECUTE ('
create table [ics].[IcrtSubProcess]
(
  IcrtSubProcessId int not null
, BatchProcessId int not null
, IcrtSubProcessName varchar(100) not null
, Narrative varchar(500) constraint DF_ics_IcrtSubProcess_Narrative default ('''') not null
, constraint PK_ics_IcrtSubProcess primary key clustered (IcrtSubProcessId)
, constraint AK_ics_IcrtSubProcess_Name unique nonclustered (IcrtSubProcessName)
, constraint FK_ics_IcrtSubProcess_batch_Process foreign key (BatchProcessId) references batch.Process (BatchProcessId) 
) ;
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d271f747-6330-4c34-b84a-c2ebd86e2e56' AS UNIQUEIDENTIFIER))
  EXECUTE ('
execute sp_addextendedproperty N''MS_Description''
, N''Represents a uniquely named ICRT sub-process''
, N''SCHEMA'', N''ics'', N''TABLE'', N''IcrtSubProcess'' ;
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d271f747-6330-4c34-b84a-c2ebd86e2e56' AS UNIQUEIDENTIFIER))
  EXECUTE ('execute sp_addextendedproperty N''MS_Description''
, N''Database-specific unique identifier for an ICRT sub-process''
, N''SCHEMA'', N''ics'', N''TABLE'', N''IcrtSubProcess'', N''COLUMN'', N''IcrtSubProcessId'' ;
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d271f747-6330-4c34-b84a-c2ebd86e2e56' AS UNIQUEIDENTIFIER))
  EXECUTE ('execute sp_addextendedproperty N''MS_Description''
, N''The unique physical name of the ICRT sub-process''
, N''SCHEMA'', N''ics'', N''TABLE'', N''IcrtSubProcess'', N''COLUMN'', N''IcrtSubProcessName'' ;
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d271f747-6330-4c34-b84a-c2ebd86e2e56' AS UNIQUEIDENTIFIER))
  EXECUTE ('execute sp_addextendedproperty N''MS_Description''
, N''Mandatory link to the database-specific unique identifier for the Batch Process of which this sub-process forms part''
, N''SCHEMA'', N''ics'', N''TABLE'', N''IcrtSubProcess'', N''COLUMN'', N''BatchProcessId'' ;
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d271f747-6330-4c34-b84a-c2ebd86e2e56' AS UNIQUEIDENTIFIER))
  EXECUTE ('
create table [ics].[MappingConfigTask]
(
	MappingConfigTaskId int not null
  , MappingConfigTaskName varchar(100) not null
  , MappingName varchar(100) not null
  , Narrative varchar(500) constraint DF_ics_MappingConfigTask_Narrative default ('''') not null
  , constraint PK_ics_MappingConfigTask primary key clustered (MappingConfigTaskId)
  , constraint AK_ics_MappingConfigTask_Name unique nonclustered (MappingConfigTaskName, MappingName)
) ;
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d271f747-6330-4c34-b84a-c2ebd86e2e56' AS UNIQUEIDENTIFIER))
  EXECUTE ('
execute sp_addextendedproperty N''MS_Description''
, N''Represents a unique combination of a Mapping Configuration Task and a Mapping in ICS''
, N''SCHEMA'', N''ics'', N''TABLE'', N''MappingConfigTask'' ;
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d271f747-6330-4c34-b84a-c2ebd86e2e56' AS UNIQUEIDENTIFIER))
  EXECUTE ('execute sp_addextendedproperty N''MS_Description''
, N''Database-specific unique identifier for an ICS Mapping Config Task''
, N''SCHEMA'', N''ics'', N''TABLE'', N''MappingConfigTask'', N''COLUMN'', N''MappingConfigTaskId'' ;
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d271f747-6330-4c34-b84a-c2ebd86e2e56' AS UNIQUEIDENTIFIER))
  EXECUTE ('execute sp_addextendedproperty N''MS_Description''
, N''The unique physical name of the ICS Mapping Config Task''
, N''SCHEMA'', N''ics'', N''TABLE'', N''MappingConfigTask'', N''COLUMN'', N''MappingConfigTaskName'' ;
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d271f747-6330-4c34-b84a-c2ebd86e2e56' AS UNIQUEIDENTIFIER))
  EXECUTE ('execute sp_addextendedproperty N''MS_Description''
, N''The physical name of the ICS Mapping contained in the ICS MappingsConfig Task''
, N''SCHEMA'', N''ics'', N''TABLE'', N''MappingConfigTask'', N''COLUMN'', N''MappingName'' ;
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d271f747-6330-4c34-b84a-c2ebd86e2e56' AS UNIQUEIDENTIFIER))
  EXECUTE ('

create table [batch].[Step]
(
  StepId int not null
, StepName varchar(100) not null
, BatchProcessId int not null
, IcrtSubProcessId int null
, Narrative varchar(500) constraint DF_privy_BatchStep_Narrative default ('''') not null
, IsDisabled bit constraint DF_privy_BatchStep_IsDisabled default ((0)) not null
, constraint PK_batch_Step primary key clustered (StepId asc)
, constraint AK_batch_Step_BatchProcessId_StepName unique nonclustered (BatchProcessId asc, StepName asc)
, constraint FK_batch_Step_batch_Process foreign key (BatchProcessId) references batch.Process (BatchProcessId)
, constraint FK_batch_Step_ics_IcrtSubProcess foreign key (IcrtSubProcessId) references ics.IcrtSubProcess (IcrtSubProcessId)
) ;
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d271f747-6330-4c34-b84a-c2ebd86e2e56' AS UNIQUEIDENTIFIER))
  EXECUTE ('create unique nonclustered index [NDX_UNQ_batch_Step_BatchProcessId_IcrtSubProcessId]
    on batch.Step(BatchProcessId, IcrtSubProcessId) where (IcrtSubProcessId is not null);
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d271f747-6330-4c34-b84a-c2ebd86e2e56' AS UNIQUEIDENTIFIER))
  EXECUTE ('execute sp_addextendedproperty N''MS_Description''
, N''Represents one of one or more steps (a.k.a. sub-process) within an ETL batch process e.g. land Customer data, Load Sales Data, Remove Duplicates.  A Step consist of one or more threads which may run sequentially or in parallel.''
, N''SCHEMA'', N''batch'', N''TABLE'', N''Step'' ;
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d271f747-6330-4c34-b84a-c2ebd86e2e56' AS UNIQUEIDENTIFIER))
  EXECUTE ('execute sp_addextendedproperty N''MS_Description''
, N''Database specific unique identifier for a single Batch Process Step''
, N''SCHEMA'', N''batch'', N''TABLE'', N''Step'', N''COLUMN'', N''StepId'' ;
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d271f747-6330-4c34-b84a-c2ebd86e2e56' AS UNIQUEIDENTIFIER))
  EXECUTE ('execute sp_addextendedproperty N''MS_Description''
, N''User friendly name for a step, unique within a single batch process (and part of an alternate key with BatchProcessId)''
, N''SCHEMA'', N''batch'', N''TABLE'', N''Step'', N''COLUMN'', N''StepName'' ;
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d271f747-6330-4c34-b84a-c2ebd86e2e56' AS UNIQUEIDENTIFIER))
  EXECUTE ('execute sp_addextendedproperty N''MS_Description''
, N''Mandatory link to the database-specific unique identifier for a Batch Process (and part of an alternate key with StepName)''
, N''SCHEMA'', N''batch'', N''TABLE'', N''Step'', N''COLUMN'', N''BatchProcessId'' ;
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d271f747-6330-4c34-b84a-c2ebd86e2e56' AS UNIQUEIDENTIFIER))
  EXECUTE ('execute sp_addextendedproperty N''MS_Description''
, N''Optional link to the database-specific unique identifier for the ICRT sub-process that is responsible for running this step within a wider ICRT Process/Batch''
, N''SCHEMA'', N''batch'', N''TABLE'', N''Step'', N''COLUMN'', N''IcrtSubProcessId'' ;
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d271f747-6330-4c34-b84a-c2ebd86e2e56' AS UNIQUEIDENTIFIER))
  EXECUTE ('execute sp_addextendedproperty N''MS_Description''
, N''Indicates whether this step is disabled (where 1 = TRUE)''
, N''SCHEMA'', N''batch'', N''TABLE'', N''Step'', N''COLUMN'', N''IsDisabled'' ;
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d271f747-6330-4c34-b84a-c2ebd86e2e56' AS UNIQUEIDENTIFIER))
  EXECUTE ('
create table [batch].[Thread]
(
  ThreadId int not null
, ThreadName varchar(100) not null
, StepId int not null
, MappingConfigTaskId int null
, Narrative varchar(500) constraint DF_privy_Thread_Narrative default ('''') not null
, IsDisabled bit constraint DF_privy_Thread_IsDisabled default ((0)) not null
, constraint PK_batch_Thread primary key clustered (ThreadId asc)
, constraint AK_batch_Thread_StepId_ThreadName unique nonclustered (StepId asc, ThreadName asc)
, constraint FK_batch_Thread_batch_Step foreign key (StepId) references batch.Step (StepId)
, constraint FK_batch_BatchStep_ics_MappingConfigTask foreign key (MappingConfigTaskId) references ics.MappingConfigTask (MappingConfigTaskId)
) ;
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d271f747-6330-4c34-b84a-c2ebd86e2e56' AS UNIQUEIDENTIFIER))
  EXECUTE ('execute sp_addextendedproperty N''MS_Description''
, N''Represents a single thread within a step of an ETL process, typically one thread is responsible for processing one table.''
, N''SCHEMA'', N''batch'', N''TABLE'', N''Thread'' ;
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d271f747-6330-4c34-b84a-c2ebd86e2e56' AS UNIQUEIDENTIFIER))
  EXECUTE ('execute sp_addextendedproperty N''MS_Description''
, N''Database specific unique identifier for a single Thread''
, N''SCHEMA'', N''batch'', N''TABLE'', N''Thread'', N''COLUMN'', N''ThreadId'' ;
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d271f747-6330-4c34-b84a-c2ebd86e2e56' AS UNIQUEIDENTIFIER))
  EXECUTE ('execute sp_addextendedproperty N''MS_Description''
, N''User friendly name for a thread, unique within a batch process step (and part of an alternate key with StepId)''
, N''SCHEMA'', N''batch'', N''TABLE'', N''Thread'', N''COLUMN'', N''ThreadName'' ;
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d271f747-6330-4c34-b84a-c2ebd86e2e56' AS UNIQUEIDENTIFIER))
  EXECUTE ('execute sp_addextendedproperty N''MS_Description''
, N''Mandatory link to the database-specific unique identifier for a batch process step (and part of an alternate key with ThreadName)''
, N''SCHEMA'', N''batch'', N''TABLE'', N''Thread'', N''COLUMN'', N''StepId'' ;
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d271f747-6330-4c34-b84a-c2ebd86e2e56' AS UNIQUEIDENTIFIER))
  EXECUTE ('execute sp_addextendedproperty N''MS_Description''
, N''Optional link to the database-specific unique identifier for the ICS Mapping Configuration Task/Mapping that is responsible for running this thread within a wider ICRT Sub-process/Step''
, N''SCHEMA'', N''batch'', N''TABLE'', N''Thread'', N''COLUMN'', N''MappingConfigTaskId'' ;
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d271f747-6330-4c34-b84a-c2ebd86e2e56' AS UNIQUEIDENTIFIER))
  EXECUTE ('execute sp_addextendedproperty N''MS_Description''
, N''Indicates whether this thread is disabled (where 1 = TRUE)''
, N''SCHEMA'', N''batch'', N''TABLE'', N''Thread'', N''COLUMN'', N''IsDisabled'' ;
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d271f747-6330-4c34-b84a-c2ebd86e2e56' AS UNIQUEIDENTIFIER))
  PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\1.0.0\015_Move_Batch_tables_to_batch_schema.sql", ID: {d271f747-6330-4c34-b84a-c2ebd86e2e56} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d271f747-6330-4c34-b84a-c2ebd86e2e56' AS UNIQUEIDENTIFIER))
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('d271f747-6330-4c34-b84a-c2ebd86e2e56' AS UNIQUEIDENTIFIER), 'E7AED4FD38BE14C360A3E854E0A90D80B07AE6120A4C71FBEBFDD1EFCC49F3CF', 'Migrations\1.0.0\015_Move_Batch_tables_to_batch_schema.sql', SYSDATETIME(), SYSTEM_USER, 1, '1.0.0', '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. Also ensure that your project scripts do not contain any "USE [OtherDbName]" statements. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('b30bd577-92f3-4dbb-bd48-985d496f2400' AS UNIQUEIDENTIFIER))
  PRINT '

***** EXECUTING MIGRATION "Migrations\1.0.0\016_drop_ics_BatchGetIdFromProcessName.sql", ID: {b30bd577-92f3-4dbb-bd48-985d496f2400} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('b30bd577-92f3-4dbb-bd48-985d496f2400' AS UNIQUEIDENTIFIER))
  EXECUTE ('
PRINT N''Dropping [ics].[BatchGetIdFromProcessName]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('b30bd577-92f3-4dbb-bd48-985d496f2400' AS UNIQUEIDENTIFIER))
  EXECUTE ('IF OBJECT_ID(N''[ics].[BatchGetIdFromProcessName]'', ''P'') IS NOT NULL
DROP PROCEDURE [ics].[BatchGetIdFromProcessName]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('b30bd577-92f3-4dbb-bd48-985d496f2400' AS UNIQUEIDENTIFIER))
  PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\1.0.0\016_drop_ics_BatchGetIdFromProcessName.sql", ID: {b30bd577-92f3-4dbb-bd48-985d496f2400} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('b30bd577-92f3-4dbb-bd48-985d496f2400' AS UNIQUEIDENTIFIER))
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('b30bd577-92f3-4dbb-bd48-985d496f2400' AS UNIQUEIDENTIFIER), '6AB2D11BE5D1E5989C81258EE939D31F4D8D8F9619046968C49991B70388F5CE', 'Migrations\1.0.0\016_drop_ics_BatchGetIdFromProcessName.sql', SYSDATETIME(), SYSTEM_USER, 1, '1.0.0', '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. Also ensure that your project scripts do not contain any "USE [OtherDbName]" statements. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('3719c8ec-e310-46f6-a7e6-e0da328b4d9a' AS UNIQUEIDENTIFIER))
  PRINT '

***** EXECUTING MIGRATION "Migrations\1.0.0\017_Move_RunState_tables_to_batch_schema.sql", ID: {3719c8ec-e310-46f6-a7e6-e0da328b4d9a} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('3719c8ec-e310-46f6-a7e6-e0da328b4d9a' AS UNIQUEIDENTIFIER))
  EXECUTE ('print N''Dropping foreign keys from [privy].[RunState]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('3719c8ec-e310-46f6-a7e6-e0da328b4d9a' AS UNIQUEIDENTIFIER))
  EXECUTE ('alter table [privy].[RunState] drop constraint [FK_RunState_RunStateFlag]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('3719c8ec-e310-46f6-a7e6-e0da328b4d9a' AS UNIQUEIDENTIFIER))
  EXECUTE ('alter schema [batch] transfer [privy].[RunState]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('3719c8ec-e310-46f6-a7e6-e0da328b4d9a' AS UNIQUEIDENTIFIER))
  EXECUTE ('print N''Adding foreign keys to [batch].[RunState]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('3719c8ec-e310-46f6-a7e6-e0da328b4d9a' AS UNIQUEIDENTIFIER))
  EXECUTE ('alter table [batch].[RunState] add constraint [FK_batch_RunState_batch_RunStateFlag] foreign key ([FlagBit]) references [privy].[RunStateFlag] ([FlagBit])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('3719c8ec-e310-46f6-a7e6-e0da328b4d9a' AS UNIQUEIDENTIFIER))
  EXECUTE ('print N''Dropping foreign keys from [batch].[RunState]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('3719c8ec-e310-46f6-a7e6-e0da328b4d9a' AS UNIQUEIDENTIFIER))
  EXECUTE ('alter table [batch].[RunState] drop constraint [FK_batch_RunState_batch_RunStateFlag]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('3719c8ec-e310-46f6-a7e6-e0da328b4d9a' AS UNIQUEIDENTIFIER))
  EXECUTE ('alter schema [batch] transfer [privy].[RunStateFlag]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('3719c8ec-e310-46f6-a7e6-e0da328b4d9a' AS UNIQUEIDENTIFIER))
  EXECUTE ('print N''Adding foreign keys to [batch].[RunState]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('3719c8ec-e310-46f6-a7e6-e0da328b4d9a' AS UNIQUEIDENTIFIER))
  EXECUTE ('alter table [batch].[RunState] add constraint [FK_batch_RunState_batch_RunStateFlag] foreign key ([FlagBit]) references [batch].[RunStateFlag] ([FlagBit])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('3719c8ec-e310-46f6-a7e6-e0da328b4d9a' AS UNIQUEIDENTIFIER))
  PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\1.0.0\017_Move_RunState_tables_to_batch_schema.sql", ID: {3719c8ec-e310-46f6-a7e6-e0da328b4d9a} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('3719c8ec-e310-46f6-a7e6-e0da328b4d9a' AS UNIQUEIDENTIFIER))
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('3719c8ec-e310-46f6-a7e6-e0da328b4d9a' AS UNIQUEIDENTIFIER), '2855417BB084035B99FF3B7700B954F1ED1C6E6D8EA209C678DAF4E1066660F3', 'Migrations\1.0.0\017_Move_RunState_tables_to_batch_schema.sql', SYSDATETIME(), SYSTEM_USER, 1, '1.0.0', '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. Also ensure that your project scripts do not contain any "USE [OtherDbName]" statements. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  PRINT '

***** EXECUTING MIGRATION "Migrations\1.0.0\018_Add_Batch_RunTime_tables.sql", ID: {e78a5ced-7268-43d8-bbf8-9cb4d2c986bd} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('
PRINT N''Altering [batch].[Thread]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [batch].[Thread] ADD
[StartCapturePointOverride] [datetime] NULL
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating [batch].[ProcessRun]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE TABLE [batch].[ProcessRun]
(
[ProcessRunId] [int] NOT NULL IDENTITY(1, 1),
[BatchProcessId] [int] NOT NULL,
[IcrtProcessId] [int] NULL,
[StartTime] [datetime] NOT NULL CONSTRAINT [DF_batch_ProcessRun_StartTime] DEFAULT (getdate()),
[EndTime] [datetime] NULL,
[RunStateId] [int] NOT NULL CONSTRAINT [DF_batch_ProcessRun_RunStateId] DEFAULT ((-1)),
[EndState] [varchar] (16) NULL,
[EndMessage] [varchar] (500) NULL,
[MinChangeDataCapturePoint] [datetime] NULL,
[MaxChangeDataCapturePoint] [datetime] NULL
)
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating primary key [PK_batch_ProcessRun] on [batch].[ProcessRun]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [batch].[ProcessRun] ADD CONSTRAINT [PK_batch_ProcessRun] PRIMARY KEY CLUSTERED  ([ProcessRunId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating [batch].[StepRun]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE TABLE [batch].[StepRun]
(
[StepRunId] [int] NOT NULL IDENTITY(1, 1),
[ProcessRunId] [int] NOT NULL,
[StepId] [int] NOT NULL,
[StartTime] [datetime] NOT NULL CONSTRAINT [DF_batch_StepRun_StartTime] DEFAULT (getdate()),
[EndTime] [datetime] NULL,
[RunStateId] [int] NOT NULL CONSTRAINT [DF_batch_StepRun_RunStateId] DEFAULT ((-1)),
[EndState] [varchar] (16) NULL,
[EndMessage] [varchar] (500) NULL
)
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating primary key [PK_batch_StepRun] on [batch].[StepRun]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [batch].[StepRun] ADD CONSTRAINT [PK_batch_StepRun] PRIMARY KEY CLUSTERED  ([StepRunId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding constraints to [batch].[StepRun]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [batch].[StepRun] ADD CONSTRAINT [AK_batch_StepRun_ProcessRunId_StepId] UNIQUE NONCLUSTERED  ([ProcessRunId], [StepId], [StartTime])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating [batch].[ThreadRun]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('CREATE TABLE [batch].[ThreadRun]
(
[ThreadRunId] [int] NOT NULL IDENTITY(1, 1),
[StepRunId] [int] NOT NULL,
[ThreadId] [int] NOT NULL,
[StartTime] [datetime] NOT NULL CONSTRAINT [DF_batch_ThreadRun_StartTime] DEFAULT (getdate()),
[EndTime] [datetime] NULL,
[RunStateId] [int] NOT NULL CONSTRAINT [DF_batch_ThreadRun_RunStateId] DEFAULT ((-1)),
[EndState] [varchar] (16) NULL,
[EndMessage] [varchar] (500) NULL,
[SuccessSourceRows] [int] NULL,
[FailedSourceRows] [int] NULL,
[SuccessTargetRows] [int] NULL,
[FailedTargetRows] [int] NULL,
[MinChangeDataCapturePoint] [datetime] NULL,
[MaxChangeDataCapturePoint] [datetime] NULL
)
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating primary key [PK_batch_ThreadRun] on [batch].[ThreadRun]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [batch].[ThreadRun] ADD CONSTRAINT [PK_batch_ThreadRun] PRIMARY KEY CLUSTERED  ([ThreadRunId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding constraints to [batch].[ThreadRun]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [batch].[ThreadRun] ADD CONSTRAINT [AK_batch_ThreadRun_StepRunId_ThreadId] UNIQUE NONCLUSTERED  ([StepRunId], [ThreadId], [StartTime])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding foreign keys to [batch].[StepRun]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [batch].[StepRun] ADD CONSTRAINT [FK_batch_StepRun_batch_ProcessRun] FOREIGN KEY ([ProcessRunId]) REFERENCES [batch].[ProcessRun] ([ProcessRunId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [batch].[StepRun] ADD CONSTRAINT [FK_batch_StepRun_batch_Step] FOREIGN KEY ([StepId]) REFERENCES [batch].[Step] ([StepId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [batch].[StepRun] ADD CONSTRAINT [FK_batch_StepRun_batch_RunState] FOREIGN KEY ([RunStateId]) REFERENCES [batch].[RunState] ([RunStateId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding foreign keys to [batch].[ProcessRun]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [batch].[ProcessRun] ADD CONSTRAINT [FK_batch_ProcessRun_batch_Process] FOREIGN KEY ([BatchProcessId]) REFERENCES [batch].[Process] ([BatchProcessId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [batch].[ProcessRun] ADD CONSTRAINT [FK_batch_ProcessRun_batch_RunState] FOREIGN KEY ([RunStateId]) REFERENCES [batch].[RunState] ([RunStateId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Adding foreign keys to [batch].[ThreadRun]''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [batch].[ThreadRun] ADD CONSTRAINT [FK_batch_ThreadRun_batch_StepRun] FOREIGN KEY ([StepRunId]) REFERENCES [batch].[StepRun] ([StepRunId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [batch].[ThreadRun] ADD CONSTRAINT [FK_batch_ThreadRun_batch_Thread] FOREIGN KEY ([ThreadId]) REFERENCES [batch].[Thread] ([ThreadId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('ALTER TABLE [batch].[ThreadRun] ADD CONSTRAINT [FK_batch_ThreadRun_batch_RunState] FOREIGN KEY ([RunStateId]) REFERENCES [batch].[RunState] ([RunStateId])
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Altering extended properties''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_updateextendedproperty N''MS_Description'', N''The date FROM which (i.e. ">") to fetch/process data for all steps in the batch process - used to force a full load over a delta'', ''SCHEMA'', N''batch'', ''TABLE'', N''Process'', ''COLUMN'', N''StartCapturePointOverride''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('PRINT N''Creating extended properties''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Records a single ETL attempt to run a Batch Process i.e. run time logging, not batch control metadata'', ''SCHEMA'', N''batch'', ''TABLE'', N''ProcessRun'', NULL, NULL
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Mandatory link to the database-specific unique identifier for a Batch Process'', ''SCHEMA'', N''batch'', ''TABLE'', N''ProcessRun'', ''COLUMN'', N''BatchProcessId''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''The Process Run End Message provided by the caller when ending this process; may also be the value passed back to the caller by ics.ProcessRunStart if the instruction is "STOP" or "SKIP"'', ''SCHEMA'', N''batch'', ''TABLE'', N''ProcessRun'', ''COLUMN'', N''EndMessage''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''The Process Run End State provided by the caller when ending this process; may also be the value passed back to the caller by ics.ProcessRunStart if the instruction is "STOP" or "SKIP"'', ''SCHEMA'', N''batch'', ''TABLE'', N''ProcessRun'', ''COLUMN'', N''EndState''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''The ETL system date and time that a process run attempt completed regardless of final end state'', ''SCHEMA'', N''batch'', ''TABLE'', N''ProcessRun'', ''COLUMN'', N''EndTime''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''ICRT-specific unique identifier for a process run attempt, i.e. the execution instance id'', ''SCHEMA'', N''batch'', ''TABLE'', N''ProcessRun'', ''COLUMN'', N''IcrtProcessId''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''If populated, the end date and time used for this batch process run-wide data capture'', ''SCHEMA'', N''batch'', ''TABLE'', N''ProcessRun'', ''COLUMN'', N''MaxChangeDataCapturePoint''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''If populated, the start date and time used for this batch process run-wide data capture'', ''SCHEMA'', N''batch'', ''TABLE'', N''ProcessRun'', ''COLUMN'', N''MinChangeDataCapturePoint''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''BAT_MAN Database-specific unique identifier for a Batch Run attempt (auto-increments)'', ''SCHEMA'', N''batch'', ''TABLE'', N''ProcessRun'', ''COLUMN'', N''ProcessRunId''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Optional link to the database-specific unique identifier to indicate the current Batch Process Run State'', ''SCHEMA'', N''batch'', ''TABLE'', N''ProcessRun'', ''COLUMN'', N''RunStateId''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Mandatory, the ETL system date and time that a process run attempt started, defaults to the database system date/time'', ''SCHEMA'', N''batch'', ''TABLE'', N''ProcessRun'', ''COLUMN'', N''StartTime''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Records a single ETL attempt to run a Step within a running Batch Process'', ''SCHEMA'', N''batch'', ''TABLE'', N''StepRun'', NULL, NULL
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''The Sub-process or Step Run End Message provided by the caller when ending this step; may also be the value passed back to the caller by ics.SubProcessRunStart if the instruction is "STOP" or "SKIP"'', ''SCHEMA'', N''batch'', ''TABLE'', N''StepRun'', ''COLUMN'', N''EndMessage''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''The Sub-process or Step Run End State provided by the caller when ending this step; may also be the value passed back to the caller by ics.SubProcessRunStart if the instruction is "STOP" or "SKIP"'', ''SCHEMA'', N''batch'', ''TABLE'', N''StepRun'', ''COLUMN'', N''EndState''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''the ETL system date and time that a step run attempt completed regardless of final end state'', ''SCHEMA'', N''batch'', ''TABLE'', N''StepRun'', ''COLUMN'', N''EndTime''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Mandatory reference to the database-specific unique identifier for the batch process run of which this step run forms part'', ''SCHEMA'', N''batch'', ''TABLE'', N''StepRun'', ''COLUMN'', N''ProcessRunId''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Optional link to the database-specific unique identifier to indicate the current Step Run State'', ''SCHEMA'', N''batch'', ''TABLE'', N''StepRun'', ''COLUMN'', N''RunStateId''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Mandatory, the ETL system date and time that a step run attempt started, defaults to the database system date/time'', ''SCHEMA'', N''batch'', ''TABLE'', N''StepRun'', ''COLUMN'', N''StartTime''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Mandatory link to the database-specific unique identifier for a Process Step, i.e. the control step that this runtime instance represents'', ''SCHEMA'', N''batch'', ''TABLE'', N''StepRun'', ''COLUMN'', N''StepId''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''BAT_MAN Database-specific unique identifier for a Step Run attempt within the context of a running batch process (auto-increments)'', ''SCHEMA'', N''batch'', ''TABLE'', N''StepRun'', ''COLUMN'', N''StepRunId''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Records a single ETL attempt to run a Thread within a running Batch Process Step'', ''SCHEMA'', N''batch'', ''TABLE'', N''ThreadRun'', NULL, NULL
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''The Run End Message provided by the caller when ending this thread; may also be the value passed back to the caller by ics.ThreadRunStart if the instruction is "STOP" or "SKIP"'', ''SCHEMA'', N''batch'', ''TABLE'', N''ThreadRun'', ''COLUMN'', N''EndMessage''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''The Thread Run End State provided by the caller when ending this thread; may also be the value passed back to the caller by ics.ThreadRunStart if the instruction is "STOP" or "SKIP"'', ''SCHEMA'', N''batch'', ''TABLE'', N''ThreadRun'', ''COLUMN'', N''EndState''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''the ETL system date and time that a thread run attempt completed regardless of final end state'', ''SCHEMA'', N''batch'', ''TABLE'', N''ThreadRun'', ''COLUMN'', N''EndTime''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''If populated, the maximum change date and time found in the table processed by this thread run'', ''SCHEMA'', N''batch'', ''TABLE'', N''ThreadRun'', ''COLUMN'', N''MaxChangeDataCapturePoint''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''If populated, the minimum change date and time found in the table processed by this thread run'', ''SCHEMA'', N''batch'', ''TABLE'', N''ThreadRun'', ''COLUMN'', N''MinChangeDataCapturePoint''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Optional link to the database-specific unique identifier to indicate the current Thread Run State'', ''SCHEMA'', N''batch'', ''TABLE'', N''ThreadRun'', ''COLUMN'', N''RunStateId''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Mandatory, the ETL system date and time that a thread run attempt started, defaults to the database system date/time'', ''SCHEMA'', N''batch'', ''TABLE'', N''ThreadRun'', ''COLUMN'', N''StartTime''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Mandatory reference to the database-specific unique identifier for the batch process step run of which this thread run forms part'', ''SCHEMA'', N''batch'', ''TABLE'', N''ThreadRun'', ''COLUMN'', N''StepRunId''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Mandatory link to the database-specific unique identifier for a Thread, i.e. the control thread that this runtime instance represents'', ''SCHEMA'', N''batch'', ''TABLE'', N''ThreadRun'', ''COLUMN'', N''ThreadId''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''BAT_MAN Database-specific unique identifier for a Thread Run attempt within the context of a running batch process step (auto-increments)'', ''SCHEMA'', N''batch'', ''TABLE'', N''ThreadRun'', ''COLUMN'', N''ThreadRunId''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''The date FROM which (i.e. ">") to fetch/process data for just the table processed by this thread - used to force a full load over a delta'', ''SCHEMA'', N''batch'', ''TABLE'', N''Thread'', ''COLUMN'', N''StartCapturePointOverride''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\1.0.0\018_Add_Batch_RunTime_tables.sql", ID: {e78a5ced-7268-43d8-bbf8-9cb4d2c986bd} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER))
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('e78a5ced-7268-43d8-bbf8-9cb4d2c986bd' AS UNIQUEIDENTIFIER), '894491CBD9FF4AF15718D27053434B0183CEAF8A10799B0068E9F9AD1127DD25', 'Migrations\1.0.0\018_Add_Batch_RunTime_tables.sql', SYSDATETIME(), SYSTEM_USER, 1, '1.0.0', '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. Also ensure that your project scripts do not contain any "USE [OtherDbName]" statements. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('029902c1-87d1-4aec-96f7-3eda561d2123' AS UNIQUEIDENTIFIER))
  PRINT '

***** EXECUTING MIGRATION "Migrations\1.0.0\019_Add_RunState_extended_properties.sql", ID: {029902c1-87d1-4aec-96f7-3eda561d2123} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('029902c1-87d1-4aec-96f7-3eda561d2123' AS UNIQUEIDENTIFIER))
  EXECUTE ('
PRINT N''Creating extended properties''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('029902c1-87d1-4aec-96f7-3eda561d2123' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Bit-wise run state indicator used when evaluating run time precendence for SSIS Steps/Packages e.g. 1 = Started; 2 = In Progress; 4 = Succeeded, etc.'', ''SCHEMA'', N''batch'', ''TABLE'', N''RunStateFlag'', NULL, NULL
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('029902c1-87d1-4aec-96f7-3eda561d2123' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Database-specific unique flag for a specific run state flag/bit'', ''SCHEMA'', N''batch'', ''TABLE'', N''RunStateFlag'', ''COLUMN'', N''FlagBit''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('029902c1-87d1-4aec-96f7-3eda561d2123' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Unique, user-freindly name for a specific run state flag/bit'', ''SCHEMA'', N''batch'', ''TABLE'', N''RunStateFlag'', ''COLUMN'', N''FlagName''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('029902c1-87d1-4aec-96f7-3eda561d2123' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''A generic run state for an ETL batch run e.g. Started, Landing, Cleansing, Loading, Complete etc.'', ''SCHEMA'', N''batch'', ''TABLE'', N''RunState'', NULL, NULL
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('029902c1-87d1-4aec-96f7-3eda561d2123' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Mandatory reference to the unique bit flag indicating end state e.g. "Started", "In-Progress", "Succeeded" or "Failed" etc.'', ''SCHEMA'', N''batch'', ''TABLE'', N''RunState'', ''COLUMN'', N''FlagBit''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('029902c1-87d1-4aec-96f7-3eda561d2123' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Indicates that this is a closing state for an ETL process which may (when implemented) trigger additional logic or notifications'', ''SCHEMA'', N''batch'', ''TABLE'', N''RunState'', ''COLUMN'', N''IsEtlClosingState''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('029902c1-87d1-4aec-96f7-3eda561d2123' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Database specific unique identifier for an ETL batch run state'', ''SCHEMA'', N''batch'', ''TABLE'', N''RunState'', ''COLUMN'', N''RunStateId''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('029902c1-87d1-4aec-96f7-3eda561d2123' AS UNIQUEIDENTIFIER))
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''ETL Control database-specific, business-friendly unique identifier for an ETL batch run state'', ''SCHEMA'', N''batch'', ''TABLE'', N''RunState'', ''COLUMN'', N''RunStateName''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('029902c1-87d1-4aec-96f7-3eda561d2123' AS UNIQUEIDENTIFIER))
  PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\1.0.0\019_Add_RunState_extended_properties.sql", ID: {029902c1-87d1-4aec-96f7-3eda561d2123} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('029902c1-87d1-4aec-96f7-3eda561d2123' AS UNIQUEIDENTIFIER))
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('029902c1-87d1-4aec-96f7-3eda561d2123' AS UNIQUEIDENTIFIER), '37428CE8754471BB3881F0E4B2DB4C297CABF08E0D19F1D636CC8B2E79770C3B', 'Migrations\1.0.0\019_Add_RunState_extended_properties.sql', SYSDATETIME(), SYSTEM_USER, 1, '1.0.0', '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. Also ensure that your project scripts do not contain any "USE [OtherDbName]" statements. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('15a0517b-b658-5cbc-bd7b-cbc0ce53aeb8' AS UNIQUEIDENTIFIER) AND [script_checksum] = '47DD45DE7C4C483FABBBCC3A0DDD7F2ACE856E9B2D51921D53EBBC39EAFBE96A')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\log4Private\Stored Procedures\SessionInfoOutput.sql", ID: {15a0517b-b658-5cbc-bd7b-cbc0ce53aeb8} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('15a0517b-b658-5cbc-bd7b-cbc0ce53aeb8' AS UNIQUEIDENTIFIER) AND [script_checksum] = '47DD45DE7C4C483FABBBCC3A0DDD7F2ACE856E9B2D51921D53EBBC39EAFBE96A')
  EXECUTE ('IF OBJECT_ID(''[log4Private].[SessionInfoOutput]'') IS NOT NULL
	DROP PROCEDURE [log4Private].[SessionInfoOutput];

');

GO
SET QUOTED_IDENTIFIER ON;

GO
SET ANSI_NULLS ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('15a0517b-b658-5cbc-bd7b-cbc0ce53aeb8' AS UNIQUEIDENTIFIER) AND [script_checksum] = '47DD45DE7C4C483FABBBCC3A0DDD7F2ACE856E9B2D51921D53EBBC39EAFBE96A')
  EXECUTE ('
/*************************************************************************************************/
--</MaintenanceHeader>

CREATE PROCEDURE [log4Private].[SessionInfoOutput]
(
  @SessionId          int
, @HostName           nvarchar( 128 ) = null  out
, @ProgramName        nvarchar( 128 ) = null  out
, @NTDomain           nvarchar( 128 ) = null  out
, @NTUsername         nvarchar( 128 ) = null  out
, @LoginName          nvarchar( 128 ) = null  out
, @OriginalLoginName  nvarchar( 128 ) = null  out
, @SessionLoginTime   datetime        = null  out
)

as

--<CommentHeader>
/**********************************************************************************************************************

Properties
=====================================================================================================================
PROCEDURE NAME:  SessionInfoOutput
DESCRIPTION:     Outputs session info from master.sys.dm_exec_sessions for the current @@SPID
DATE OF ORIGIN:  15-APR-2008
ORIGINAL AUTHOR: Greg M. Lucas (data-centric solutions ltd. http://www.data-centric.co.uk)
BUILD DATE:      13-MAR-2012
BUILD VERSION:   0.0.11
DEPENDANTS:      log4.ExceptionHandler
                 log4.JournalWriter
DEPENDENCIES:    Called functions

Returns
=====================================================================================================================
@@ERROR - always zero on success

Additional Notes
=====================================================================================================================


Revision history
=====================================================================================================================
ChangeDate		Author	Version		Narrative
============	======	=======		=================================================================================
15-APR-2008		GML		vX.Y.z		Created
------------	------	-------		---------------------------------------------------------------------------------
17-OCT-2015		GML		vX.Y.z		Now works on SQL Azure DB
------------	------	-------		---------------------------------------------------------------------------------

=====================================================================================================================
(C) Copyright 2006-14 data-centric solutions ltd. (http://log4tsql.sourceforge.net/)

This library is free software; you can redistribute it and/or modify it under the terms of the
GNU Lesser General Public License as published by the Free Software Foundation (www.fsf.org);
either version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along with this
library; if not, you can find it at http://www.opensource.org/licenses/lgpl-3.0.html
or http://www.gnu.org/licenses/lgpl.html

**********************************************************************************************************************/
--</CommentHeader>

begin
	SET NOCOUNT ON

	begin try
		--! These system attributes come from master.sys.dm_exec_sessions which isn''t available in Azure
		set @HostName			= ''N/S in Azure''
		set @ProgramName		= ''N/S in Azure''
		set @NTDomain			= ''N/S in Azure''
		set @NTUsername			= ''N/S in Azure''
		set @LoginName			= ''N/S in Azure''
		set @OriginalLoginName	= ''N/S in Azure''
		set @SessionLoginTime	= ''19000101 00:00:00''

	end try
	begin catch
		--! Make sure we return non-null values
		set @SessionId			= 0
		set @HostName			= ''''
		set @ProgramName		= ''log4.SessionInfoOutput Error!''
		set @NTDomain			= ''''
		set @NTUsername			= ''''
		set @LoginName			= ''log4.SessionInfoOutput Error!''
		set @OriginalLoginName	= ''''

		declare @context nvarchar(512); set @context = ''log4.SessionInfoOutput failed to retrieve session info'';

		--! Only rollback if we have an uncommitable transaction
		if (xact_state() = -1)
		or (@@trancount > 0 and xact_state() != 1)
			begin
				rollback tran;
				set @context = @context + '' (Forced rolled back of all changes due to uncommitable transaction)'';
			end

		--! Log this error directly
		--! Don''t call ExceptionHandler in case we get another
		--! SessionInfoOutput error and and up in a never-ending loop)
		insert log4Private.SqlException
		(
		  UtcDate
		, SystemDate
		, ErrorContext
		, ErrorNumber
		, ErrorSeverity
		, ErrorState
		, ErrorProcedure
		, ErrorLine
		, ErrorMessage
		, ErrorDatabase
		, SessionIdent
		, ServerName
		, HostName
		, ProgramName
		, NTDomain
		, NTUsername
		, LoginName
		, OriginalLoginName
		, SessionLoginTime
		)
		select
			  getutcdate()
			, getdate()
			, @context
			, error_number()
			, error_severity()
			, error_state()
			, error_procedure()
			, error_line()
			, error_message()
			, db_name()
			, @@spid
			, @@servername
			, '''' -- HostName
			, '''' -- ProgramName
			, '''' -- NTDomain
			, '''' -- NTUsername
			, '''' -- LoginName
			, '''' -- OriginalLoginName
			, null
	end catch

	set nocount off
end
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('15a0517b-b658-5cbc-bd7b-cbc0ce53aeb8' AS UNIQUEIDENTIFIER) AND [script_checksum] = '47DD45DE7C4C483FABBBCC3A0DDD7F2ACE856E9B2D51921D53EBBC39EAFBE96A')
  EXECUTE ('GRANT EXECUTE ON  [log4Private].[SessionInfoOutput] TO [public]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('15a0517b-b658-5cbc-bd7b-cbc0ce53aeb8' AS UNIQUEIDENTIFIER) AND [script_checksum] = '47DD45DE7C4C483FABBBCC3A0DDD7F2ACE856E9B2D51921D53EBBC39EAFBE96A')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\log4Private\Stored Procedures\SessionInfoOutput.sql", ID: {15a0517b-b658-5cbc-bd7b-cbc0ce53aeb8} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('15a0517b-b658-5cbc-bd7b-cbc0ce53aeb8' AS UNIQUEIDENTIFIER) AND [script_checksum] = '47DD45DE7C4C483FABBBCC3A0DDD7F2ACE856E9B2D51921D53EBBC39EAFBE96A')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('15a0517b-b658-5cbc-bd7b-cbc0ce53aeb8' AS UNIQUEIDENTIFIER), '47DD45DE7C4C483FABBBCC3A0DDD7F2ACE856E9B2D51921D53EBBC39EAFBE96A', 'Programmable Objects\log4Private\Stored Procedures\SessionInfoOutput.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. Also ensure that your project scripts do not contain any "USE [OtherDbName]" statements. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('28783bd6-0909-5fd2-bcad-81dede3f3869' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'CCD6607A33ADDEBA4BCBB714CA7D99B972D903792E8825D05209B952ECF5CA07')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\log4\Stored Procedures\ExceptionHandler.sql", ID: {28783bd6-0909-5fd2-bcad-81dede3f3869} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('28783bd6-0909-5fd2-bcad-81dede3f3869' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'CCD6607A33ADDEBA4BCBB714CA7D99B972D903792E8825D05209B952ECF5CA07')
  EXECUTE ('IF OBJECT_ID(''[log4].[ExceptionHandler]'') IS NOT NULL
	DROP PROCEDURE [log4].[ExceptionHandler];

');

GO
SET QUOTED_IDENTIFIER ON;

GO
SET ANSI_NULLS ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('28783bd6-0909-5fd2-bcad-81dede3f3869' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'CCD6607A33ADDEBA4BCBB714CA7D99B972D903792E8825D05209B952ECF5CA07')
  EXECUTE ('
/*************************************************************************************************/
--</MaintenanceHeader>

CREATE   PROCEDURE [log4].[ExceptionHandler]
(
  @ErrorContext		nvarchar(512)	= NULL
, @ErrorProcedure	nvarchar(128)	= NULL	OUT
, @ErrorNumber		int				= NULL	OUT
, @ErrorSeverity	int				= NULL	OUT
, @ErrorState		int				= NULL	OUT
, @ErrorLine		int				= NULL	OUT
, @ErrorMessage		nvarchar(4000)	= NULL	OUT
, @ReturnMessage	nvarchar(1000)	= NULL	OUT
, @ExceptionId		int				= NULL	OUT
)
AS

--<CommentHeader>
/**********************************************************************************************************************

Properties
=====================================================================================================================
PROCEDURE NAME:		log4.ExceptionHandler
DESCRIPTION:		Returns error info as output parameters and writes info to Exception table
DATE OF ORIGIN:		01-DEC-2006
ORIGINAL AUTHOR:	Greg M. Lucas (data-centric solutions ltd. http://www.data-centric.co.uk)
BUILD DATE:			01-MAR-2015
BUILD VERSION:		0.0.13
DEPENDANTS:			Various
DEPENDENCIES:		log4.SessionInfoOutput

Outputs
=====================================================================================================================
Outputs all values collected within the CATCH block plus a formatted error message built from context and error msg

Returns
=====================================================================================================================
- @@ERROR - always zero on success


Additional Notes
=====================================================================================================================
-

Revision history
=====================================================================================================================
ChangeDate		Author	Version		Narrative
============	======	=======		=================================================================================
01-DEC-2006		GML		v0.0.1		Created
------------	------	-------		---------------------------------------------------------------------------------
15-APR-2008		GML		v0.0.3		Now utilises SessionInfoOutput sproc for session values
------------	------	-------		---------------------------------------------------------------------------------

=====================================================================================================================
(C) Copyright 2006-14 data-centric solutions ltd. (http://log4tsql.sourceforge.net/)

This library is free software; you can redistribute it and/or modify it under the terms of the
GNU Lesser General Public License as published by the Free Software Foundation (www.fsf.org);
either version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along with this
library; if not, you can find it at http://www.opensource.org/licenses/lgpl-3.0.html
or http://www.gnu.org/licenses/lgpl.html

**********************************************************************************************************************/
--</CommentHeader>

BEGIN
	SET NOCOUNT ON;

	DECLARE @ErrorDatabase nvarchar(128) = DB_NAME();

	SET @ErrorContext	= COALESCE(@ErrorContext, '''');
	SET @ErrorProcedure	= COALESCE(NULLIF(@ErrorProcedure, ''''), ERROR_PROCEDURE(), '''');
	SET @ErrorNumber		= COALESCE(ERROR_NUMBER(), 0);
	SET @ErrorSeverity	= COALESCE(ERROR_SEVERITY(), 0);
	SET @ErrorState		= COALESCE(ERROR_STATE(), 0);
	SET @ErrorLine		= COALESCE(ERROR_LINE(), 0);
	SET @ErrorMessage	= COALESCE(ERROR_MESSAGE()
							, ''ERROR_MESSAGE() Not Found for @@ERROR: ''
								+ COALESCE(CAST(ERROR_NUMBER() AS varchar(16)), ''NULL''));

	--!
	--! Generate a detailed, nicely formatted error message to return to the caller
	--!
	DECLARE @context nvarchar(512); SET @context = COALESCE(NULLIF(@ErrorContext, '''') + '' due to '', ''ERROR! '');
	SET @ReturnMessage	= @context
						+ CASE
							WHEN LEN(ERROR_MESSAGE()) > (994 - LEN(@context))
								THEN ''"'' + SUBSTRING(@ErrorMessage, 1, (994 - LEN(@context))) + ''..."''
							ELSE
								''"'' + @ErrorMessage + ''"''
						  END;

	--!
	--! Session variables (keep it SQL2005 compatible)
	--!
	DECLARE @SessionId	int				; SET @SessionId	= @@SPID;
	DECLARE @ServerName	nvarchar(128)	; SET @ServerName	= @@SERVERNAME;

	--!
	--! log4.SessionInfoOutput variables
	--!
	DECLARE   @HostName				nvarchar(128)
			, @ProgramName			nvarchar(128)
			, @NTDomain				nvarchar(128)
			, @NTUsername			nvarchar(128)
			, @LoginName			nvarchar(128)
			, @OriginalLoginName	nvarchar(128)
			, @SessionLoginTime		datetime

	--! Working variables
	DECLARE @tblExceptionId         table	(ExceptionId int NOT NULL UNIQUE);

	--!
	--! Get the details for the current session
	--!
	EXEC log4Private.SessionInfoOutput
			  @SessionId			= @SessionId
			, @HostName				= @HostName				OUT
			, @ProgramName			= @ProgramName			OUT
			, @NTDomain				= @NTDomain				OUT
			, @NTUsername			= @NTUsername			OUT
			, @LoginName			= @LoginName			OUT
			, @OriginalLoginName	= @OriginalLoginName	OUT
			, @SessionLoginTime		= @SessionLoginTime		OUT

	--!
	--! Record what we have
	--!
	INSERT [log4Private].[SqlException]
	(
	  [ErrorContext]
	, [ErrorNumber]
	, [ErrorSeverity]
	, [ErrorState]
	, [ErrorProcedure]
	, [ErrorLine]
	, [ErrorMessage]
	, [ErrorDatabase]
	, [SessionIdent]
	, [ServerName]
	, [HostName]
	, [ProgramName]
	, [NTDomain]
	, [NTUsername]
	, [LoginName]
	, [OriginalLoginName]
	, [SessionLoginTime]
	)
	OUTPUT inserted.ExceptionId INTO @tblExceptionId
	VALUES
	(
	  @ErrorContext
	, @ErrorNumber
	, @ErrorSeverity
	, @ErrorState
	, @ErrorProcedure
	, @ErrorLine
	, @ErrorMessage
	, @ErrorDatabase
	, @SessionId
	, @ServerName
	, @HostName
	, @ProgramName
	, @NTDomain
	, @NTUsername
	, @LoginName
	, @OriginalLoginName
	, @SessionLoginTime
	);

	SELECT @ExceptionId = ExceptionId FROM @tblExceptionId;

--/////////////////////////////////////////////////////////////////////////////////////////////////
OnComplete:
--/////////////////////////////////////////////////////////////////////////////////////////////////

	SET NOCOUNT OFF;

	RETURN;
END

');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('28783bd6-0909-5fd2-bcad-81dede3f3869' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'CCD6607A33ADDEBA4BCBB714CA7D99B972D903792E8825D05209B952ECF5CA07')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\log4\Stored Procedures\ExceptionHandler.sql", ID: {28783bd6-0909-5fd2-bcad-81dede3f3869} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('28783bd6-0909-5fd2-bcad-81dede3f3869' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'CCD6607A33ADDEBA4BCBB714CA7D99B972D903792E8825D05209B952ECF5CA07')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('28783bd6-0909-5fd2-bcad-81dede3f3869' AS UNIQUEIDENTIFIER), 'CCD6607A33ADDEBA4BCBB714CA7D99B972D903792E8825D05209B952ECF5CA07', 'Programmable Objects\log4\Stored Procedures\ExceptionHandler.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. Also ensure that your project scripts do not contain any "USE [OtherDbName]" statements. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1985ff3a-104d-5014-8e85-c57cba5968f2' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'ABFD8C1A97DFC1EC4F7AF9BDA0209AF63C1C9C113DCF7DFC5B16D08C4FCFBBF0')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\log4\Stored Procedures\JournalWriter.sql", ID: {1985ff3a-104d-5014-8e85-c57cba5968f2} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1985ff3a-104d-5014-8e85-c57cba5968f2' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'ABFD8C1A97DFC1EC4F7AF9BDA0209AF63C1C9C113DCF7DFC5B16D08C4FCFBBF0')
  EXECUTE ('IF OBJECT_ID(''[log4].[JournalWriter]'') IS NOT NULL
	DROP PROCEDURE [log4].[JournalWriter];

');

GO
SET QUOTED_IDENTIFIER ON;

GO
SET ANSI_NULLS ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1985ff3a-104d-5014-8e85-c57cba5968f2' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'ABFD8C1A97DFC1EC4F7AF9BDA0209AF63C1C9C113DCF7DFC5B16D08C4FCFBBF0')
  EXECUTE ('
/*************************************************************************************************/
--</MaintenanceHeader>

CREATE PROCEDURE [log4].[JournalWriter]
(
  @FunctionName			varchar(256)
, @MessageText			varchar(512)
, @ExtraInfo			varchar(max)	= NULL
, @DatabaseName			nvarchar(128)	= NULL
, @Task					nvarchar(128)	= NULL
, @StepInFunction		varchar(128)	= NULL
, @Severity				smallint		= NULL
, @ExceptionId			int				= NULL
, @JournalId			int				= NULL OUT
)

AS

/**************************************************************************************************

Properties
==========
PROCEDURE NAME:		[log4].[JournalWriter]
DESCRIPTION:		Adds a journal entry summarising task progress, completion or failure msgs etc.
DATE OF ORIGIN:		01-DEC-2006
ORIGINAL AUTHOR:	Greg M. Lucas (data-centric solutions ltd. http://www.data-centric.co.uk)
BUILD DATE:			01-MAR-2015
BUILD VERSION:		0.0.13
DEPENDANTS:			Various
DEPENDENCIES:		[log4Private].[SessionInfoOutput]
					[log4].[ExceptionHandler]

Returns
=======
@@ERROR - always zero on success

Additional Notes
================
Possible options for @Severity

   1 -- Showstopper/Critical Failure
   2 -- Severe Failure
   4 -- Major Failure
   8 -- Moderate Failure
  16 -- Minor Failure
  32 -- Concurrency Violation
  64 -- Reserved for future Use
 128 -- Reserved for future Use
 256 -- Informational
 512 -- Success
1024 -- Debug
2048 -- Reserved for future Use
4096 -- Reserved for future Use



Revision history
==================================================================================================
ChangeDate		Author	Version		Narrative
============	======	=======		==============================================================
01-DEC-2006		GML		v0.0.1		Created
------------	------	-------		--------------------------------------------------------------
15-APR-2008		GML		v0.0.3		Now utilises [log4Private].[SessionInfoOutput] sproc for session values
------------	------	-------		--------------------------------------------------------------
03-MAY-2011		GML		v0.0.4		Added support for JournalDetail table
------------	------	-------		--------------------------------------------------------------
28-AUG-2011		GML		v0.0.6		Added support for ExceptionId and Task columns
------------	------	-------		--------------------------------------------------------------

=================================================================================================
(C) Copyright 2006-14 data-centric solutions ltd. (http://log4tsql.sourceforge.net/)

This library is free software; you can redistribute it and/or modify it under the terms of the
GNU Lesser General Public License as published by the Free Software Foundation (www.fsf.org);
either version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along with this
library; if not, you can find it at http://www.opensource.org/licenses/lgpl-3.0.html
or http://www.gnu.org/licenses/lgpl.html

**************************************************************************************************/

BEGIN
	SET NOCOUNT ON

	DECLARE @Error int; SET @Error = 0;

	--!
	--! Define input defaults
	--!
	SET @DatabaseName	= COALESCE(@DatabaseName, DB_NAME())
	SET @FunctionName	= COALESCE(@FunctionName, '''')
	SET @StepInFunction	= COALESCE(@StepInFunction, '''')
	SET @MessageText	= COALESCE(@MessageText, '''')
	SET @ExtraInfo		= COALESCE(@ExtraInfo, '''')
	SET @Task			= COALESCE(@Task, '''')

	--! Make sure the supplied severity fits our bitmask model
	IF ISNULL(@Severity, 0) NOT IN (1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096)
		BEGIN
			SET @ExtraInfo  = COALESCE(NULLIF(@ExtraInfo, '''') + CHAR(13), '''')
							+ ''(Severity value: '' + COALESCE(CAST(@Severity AS varchar(4)), ''NULL'') + '' is invalid so using 256)''
			SET @Severity   = 256 -- Informational
		END

	--!
	--! Session variables (keep it SQL2005 compatible)
	--!
	DECLARE @SessionId	int				; SET @SessionId	= @@SPID;
	DECLARE @ServerName	nvarchar(128)	; SET @ServerName	= @@SERVERNAME;

	--!
	--! log4.SessionInfoOutput variables
	--!
	DECLARE   @HostName				nvarchar(128)
			, @ProgramName			nvarchar(128)
			, @NTDomain				nvarchar(128)
			, @NTUsername			nvarchar(128)
			, @LoginName			nvarchar(128)
			, @OriginalLoginName	nvarchar(128)
			, @SessionLoginTime		datetime


	--!
	--! Get the details for the current session
	--!
	EXEC log4Private.SessionInfoOutput
			  @SessionId			= @SessionId
			, @HostName				= @HostName				OUT
			, @ProgramName			= @ProgramName			OUT
			, @NTDomain				= @NTDomain				OUT
			, @NTUsername			= @NTUsername			OUT
			, @LoginName			= @LoginName			OUT
			, @OriginalLoginName	= @OriginalLoginName	OUT
			, @SessionLoginTime		= @SessionLoginTime		OUT

	--! Working variables
	DECLARE @tblJournalId table	(JournalId int NOT NULL UNIQUE);

	BEGIN TRY
		INSERT [log4Private].[Journal]
		(
		  [Task]
		, [FunctionName]
		, [StepInFunction]
		, [MessageText]
		, [SeverityId]
		, [ExceptionId]
		------------------------
		, [SessionId]
		, [ServerName]
		, [DatabaseName]
		, [HostName]
		, [ProgramName]
		, [NTDomain]
		, [NTUsername]
		, [LoginName]
		, [OriginalLoginName]
		, [SessionLoginTime]
		)
	OUTPUT inserted.JournalId INTO @tblJournalId
	VALUES
		(
		  @Task
		, @FunctionName
		, @StepInFunction
		, @MessageText
		, @Severity
		, @ExceptionId
		------------------------
		, @SessionId
		, @ServerName
		, @DatabaseName
		, @HostName
		, @ProgramName
		, @NTDomain
		, @NTUsername
		, @LoginName
		, @OriginalLoginName
		, @SessionLoginTime
		)

		SELECT @JournalId = JournalId FROM @tblJournalId;

		INSERT [log4Private].[JournalDetail]
		(
		  JournalId
		, ExtraInfo
		)
		VALUES
		(
		  @JournalId
		, @ExtraInfo
		)

	END TRY
	BEGIN CATCH
		--!
		--! If we have an uncommitable transaction (XACT_STATE() = -1), if we hit a deadlock
		--! or if @@TRANCOUNT > 0 AND XACT_STATE() != 1, we HAVE to roll back.
		--! Otherwise, leaving it to the calling process
		--!
		IF (@@TRANCOUNT > 0 AND XACT_STATE() != 1) OR (XACT_STATE() = -1) OR (ERROR_NUMBER() = 1205)
			BEGIN
				ROLLBACK TRAN

				SET @MessageText    = ''Failed to write journal entry: ''
									+ CASE
										WHEN LEN(@MessageText) > 440
											THEN ''"'' + SUBSTRING(@MessageText, 1, 440) + ''..."''
										ELSE
											COALESCE(''"'' + @MessageText + ''"'', ''NULL'')
										END
									+ '' (Forced roll back of all changes)''
			END
		ELSE
			BEGIN
				SET @MessageText    = ''Failed to write journal entry: ''
									+ CASE
										WHEN LEN(@MessageText) > 475
											THEN ''"'' + SUBSTRING(@MessageText, 1, 475) + ''..."''
										ELSE
											COALESCE(''"'' + @MessageText + ''"'', ''NULL'')
										END
			END

		--! Record any failure info
		EXEC [log4].[ExceptionHandler]
				  @ErrorContext = @MessageText
				, @ErrorNumber  = @Error OUT
	END CATCH

--/////////////////////////////////////////////////////////////////////////////////////////////////
OnComplete:
--/////////////////////////////////////////////////////////////////////////////////////////////////

	SET NOCOUNT OFF

	RETURN(@Error)

END
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1985ff3a-104d-5014-8e85-c57cba5968f2' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'ABFD8C1A97DFC1EC4F7AF9BDA0209AF63C1C9C113DCF7DFC5B16D08C4FCFBBF0')
  EXECUTE ('GRANT EXECUTE ON  [log4].[JournalWriter] TO [public]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1985ff3a-104d-5014-8e85-c57cba5968f2' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'ABFD8C1A97DFC1EC4F7AF9BDA0209AF63C1C9C113DCF7DFC5B16D08C4FCFBBF0')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\log4\Stored Procedures\JournalWriter.sql", ID: {1985ff3a-104d-5014-8e85-c57cba5968f2} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1985ff3a-104d-5014-8e85-c57cba5968f2' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'ABFD8C1A97DFC1EC4F7AF9BDA0209AF63C1C9C113DCF7DFC5B16D08C4FCFBBF0')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('1985ff3a-104d-5014-8e85-c57cba5968f2' AS UNIQUEIDENTIFIER), 'ABFD8C1A97DFC1EC4F7AF9BDA0209AF63C1C9C113DCF7DFC5B16D08C4FCFBBF0', 'Programmable Objects\log4\Stored Procedures\JournalWriter.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. Also ensure that your project scripts do not contain any "USE [OtherDbName]" statements. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('6c9d6d3a-15cc-5cef-863c-542a924944c0' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'AB49B06AABFA8A8D702F802A308E1770A1786F1A52FAF5B74BAE04456E83E472')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\log4\Functions\FormatElapsedTime.sql", ID: {6c9d6d3a-15cc-5cef-863c-542a924944c0} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('6c9d6d3a-15cc-5cef-863c-542a924944c0' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'AB49B06AABFA8A8D702F802A308E1770A1786F1A52FAF5B74BAE04456E83E472')
  EXECUTE ('IF OBJECT_ID(''[log4].[FormatElapsedTime]'') IS NOT NULL
	DROP FUNCTION [log4].[FormatElapsedTime];

');

GO
SET QUOTED_IDENTIFIER ON;

GO
SET ANSI_NULLS ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('6c9d6d3a-15cc-5cef-863c-542a924944c0' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'AB49B06AABFA8A8D702F802A308E1770A1786F1A52FAF5B74BAE04456E83E472')
  EXECUTE ('
/*************************************************************************************************/
--</MaintenanceHeader>

CREATE FUNCTION [log4].[FormatElapsedTime]
(
  @StartTime                      datetime
, @EndTime                        datetime  = NULL
, @ShowMillisecsIfUnderNumSecs    tinyint   = NULL
)

RETURNS varchar(48)

AS

--<CommentHeader>
/**************************************************************************************************

Properties
==========
FUNCTION NAME:      [log4].[FormatElapsedTime]
DESCRIPTION:        Returns a string describing the time elapsed between start and end time
DATE OF ORIGIN:		16-FEB-2007
ORIGINAL AUTHOR:	Greg M. Lucas (data-centric solutions ltd. http://www.data-centric.co.uk)
BUILD DATE:			01-MAR-2015
BUILD VERSION:		0.0.13
DEPENDANTS:         Various
DEPENDENCIES:       None

Additional Notes
================
Builds a string that looks like this: "0 hr(s) 1 min(s) and 22 sec(s)" or "1345 milliseconds"

Revision history
==================================================================================================
ChangeDate		Author	Version		Narrative
============	======	=======		==============================================================
16-FEB-2007		GML		v0.0.2		Created
------------	------	-------		--------------------------------------------------------------
01-MAR-2015		GML		v0.0.13		Fixed bug when number of hours is greater than 99
------------	------	-------		--------------------------------------------------------------

=================================================================================================
(C) Copyright 2006-14 data-centric solutions ltd. (http://log4tsql.sourceforge.net/)

This library is free software; you can redistribute it and/or modify it under the terms of the
GNU Lesser General Public License as published by the Free Software Foundation (www.fsf.org);
either version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along with this
library; if not, you can find it at http://www.opensource.org/licenses/lgpl-3.0.html
or http://www.gnu.org/licenses/lgpl.html

**************************************************************************************************/
--</CommentHeader>

BEGIN
	DECLARE	  @time                     int
			, @hrs                      int
			, @mins                     int
			, @secs                     int
			, @msecs                    int
			, @Duration                 varchar(48)

	IF @StartTime IS NULL AND @EndTime IS NULL
		SET @Duration = ''Start and End Times are both NULL''
	ELSE IF @StartTime IS NULL
		SET @Duration = ''Start Time is NULL''
	ELSE
		BEGIN
			IF @EndTime IS NULL SET @EndTime = GETDATE()

			SET @time = DATEDIFF(ss, @StartTime, @EndTime)

			IF @time > ISNULL(@ShowMillisecsIfUnderNumSecs, 5)
				BEGIN
					SET @hrs        = @time / 3600
					SET @mins       = (@time % 3600) / 60
					SET @secs       = (@time % 3600) % 60
					SET @Duration   = CASE
										WHEN @hrs = 0 THEN ''''
										WHEN @hrs = 1 THEN CAST(@hrs AS varchar(4)) + '' hr, ''
										ELSE CAST(@hrs AS varchar(8)) + '' hrs, ''
									  END
									+ CASE
										WHEN @mins = 1 THEN CAST(@mins AS varchar(4)) + '' min''
										ELSE CAST(@mins AS varchar(2)) + '' mins''
									  END
									+ '' and ''
									+ CASE
										WHEN @secs = 1 THEN CAST(@secs AS varchar(2)) + '' sec''
										ELSE CAST(@secs AS varchar(2)) + '' secs''
									  END
				END
			ELSE
				BEGIN
					SET @msecs      = DATEDIFF(ms, @StartTime, @EndTime)
					SET @Duration   = CAST(@msecs AS varchar(6)) + '' milliseconds''
				END
		END

	RETURN @Duration
END
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('6c9d6d3a-15cc-5cef-863c-542a924944c0' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'AB49B06AABFA8A8D702F802A308E1770A1786F1A52FAF5B74BAE04456E83E472')
  EXECUTE ('GRANT EXECUTE ON  [log4].[FormatElapsedTime] TO [public]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('6c9d6d3a-15cc-5cef-863c-542a924944c0' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'AB49B06AABFA8A8D702F802A308E1770A1786F1A52FAF5B74BAE04456E83E472')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\log4\Functions\FormatElapsedTime.sql", ID: {6c9d6d3a-15cc-5cef-863c-542a924944c0} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('6c9d6d3a-15cc-5cef-863c-542a924944c0' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'AB49B06AABFA8A8D702F802A308E1770A1786F1A52FAF5B74BAE04456E83E472')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('6c9d6d3a-15cc-5cef-863c-542a924944c0' AS UNIQUEIDENTIFIER), 'AB49B06AABFA8A8D702F802A308E1770A1786F1A52FAF5B74BAE04456E83E472', 'Programmable Objects\log4\Functions\FormatElapsedTime.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. Also ensure that your project scripts do not contain any "USE [OtherDbName]" statements. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('2ea3489a-569e-5ce8-84e6-472f4aab2830' AS UNIQUEIDENTIFIER) AND [script_checksum] = '8E8AE6427D7C490B6B864DC68BD17CC797885D93ED81D525B38FB21F8357982B')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\log4Utils\Stored Procedures\JournalCleanup.sql", ID: {2ea3489a-569e-5ce8-84e6-472f4aab2830} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('2ea3489a-569e-5ce8-84e6-472f4aab2830' AS UNIQUEIDENTIFIER) AND [script_checksum] = '8E8AE6427D7C490B6B864DC68BD17CC797885D93ED81D525B38FB21F8357982B')
  EXECUTE ('IF OBJECT_ID(''[log4Utils].[JournalCleanup]'') IS NOT NULL
	DROP PROCEDURE [log4Utils].[JournalCleanup];

');

GO
SET QUOTED_IDENTIFIER ON;

GO
SET ANSI_NULLS ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('2ea3489a-569e-5ce8-84e6-472f4aab2830' AS UNIQUEIDENTIFIER) AND [script_checksum] = '8E8AE6427D7C490B6B864DC68BD17CC797885D93ED81D525B38FB21F8357982B')
  EXECUTE ('
/*************************************************************************************************/
--</MaintenanceHeader>

CREATE PROCEDURE [log4Utils].[JournalCleanup]
(
  @DaysToKeepJournal            int
, @DaysToKeepException			int
)

AS

/**************************************************************************************************

Properties
==========
PROCEDURE NAME:		[log4Utils].[JournalCleanup]
DESCRIPTION:		Deletes all Journal and Exception entries older than the specified days
DATE OF ORIGIN:		16-FEB-2007
ORIGINAL AUTHOR:	Greg M. Lucas (data-centric solutions ltd. http://www.data-centric.co.uk)
BUILD DATE:			01-MAR-2015
BUILD VERSION:		0.0.13
DEPENDANTS:			None
DEPENDENCIES:		None

Inputs
======
@DatabaseName
@FunctionName
@MessageText
@StepInFunction
@ExtraInfo
@Severity

Outputs
=======
None

Returns
=======
@@ERROR - always zero on success

Additional Notes
================

Revision history
==================================================================================================
ChangeDate		Author	Version		Narrative
============	======	=======		==============================================================
16-FEB-2007		GML		v0.0.2		Created
------------	------	-------		--------------------------------------------------------------
29-AUG-2011		GML		v0.0.7		Added support for ExceptionId (now ensures that Exception
									deleted date is greater than Journa delete date)
------------	------	-------		--------------------------------------------------------------



=================================================================================================
(C) Copyright 2006-14 data-centric solutions ltd. (http://log4tsql.sourceforge.net/)

This library is free software; you can redistribute it and/or modify it under the terms of the
GNU Lesser General Public License as published by the Free Software Foundation (www.fsf.org);
either version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along with this
library; if not, you can find it at http://www.opensource.org/licenses/lgpl-3.0.html
or http://www.gnu.org/licenses/lgpl.html

**************************************************************************************************/

BEGIN
	SET NOCOUNT ON

	--! Standard/common variables
	DECLARE	  @_Error					int
			, @_RowCount				int
			, @_DatabaseName			nvarchar(128)
			, @_DebugMessage			varchar(2000)
			, @_SprocStartTime			datetime
			, @_StepStartTime			datetime

	--! WriteJournal variables
	DECLARE   @_FunctionName			varchar(256)
			, @_Message					varchar(512)
			, @_ProgressText			nvarchar(max)
			, @_Step					varchar(128)
			, @_Severity				smallint

	--! ExceptionHandler variables
	DECLARE   @_CustomErrorText			varchar(512)
			, @_ErrorMessage			varchar(4000)
			, @_ExceptionId				int

	--! Common Debug variables
	DECLARE	  @_LoopStartTime			datetime
			, @_StepEndTime				datetime
			, @_CRLF					char(1)

	--! Populate the common variables
	SET @_SprocStartTime	= GETDATE()
	SET @_FunctionName		= OBJECT_NAME(@@PROCID)
	SET @_DatabaseName		= DB_NAME()
	SET @_Error				= 0
	SET @_Severity			= 256 -- Informational
	SET @_CRLF				= CHAR(10)
	SET @_DebugMessage		= @_FunctionName + '' starting at '' + CONVERT(char(23), @_SprocStartTime, 121) + '' with inputs: ''
							+ @_CRLF + ''    @DaysToKeepJournal     : '' + COALESCE(CAST(@DaysToKeepJournal AS varchar(8)), ''NULL'')
							+ @_CRLF + ''    @DaysToKeepException   : '' + COALESCE(CAST(@DaysToKeepException AS varchar(8)), ''NULL'')
	SET @_ProgressText		= @_DebugMessage

	--! Define our working values
	DECLARE @_DaysToKeepJournal		int;		SET @_DaysToKeepJournal = COALESCE(@DaysToKeepJournal, 30)
	DECLARE @_DaysToKeepException	int;		SET @_DaysToKeepException = COALESCE(@DaysToKeepException, @_DaysToKeepJournal + 1)
	DECLARE @_JournalArchiveDate	datetime;	SET @_JournalArchiveDate = CONVERT(char(11), DATEADD(day, - @_DaysToKeepJournal, GETDATE()), 113)
	DECLARE @_ExceptionArchiveDate	datetime;	SET @_ExceptionArchiveDate = CONVERT(char(11), DATEADD(day, - @_DaysToKeepException, GETDATE()), 113)

	SET @_ProgressText		= @_ProgressText
							+ @_CRLF + ''and working values...''
							+ @_CRLF + ''    @_DaysToKeepJournal     : '' + COALESCE(CAST(@_DaysToKeepJournal AS varchar(8)), ''NULL'')
							+ @_CRLF + ''    @_DaysToKeepException   : '' + COALESCE(CAST(@_DaysToKeepException AS varchar(8)), ''NULL'')
							+ @_CRLF + ''    @_JournalArchiveDate   : '' + COALESCE(CONVERT(char(19), @_JournalArchiveDate, 120), ''NULL'')
							+ @_CRLF + ''    @_ExceptionArchiveDate : '' + COALESCE(CONVERT(char(19), @_ExceptionArchiveDate, 120), ''NULL'')

	--!
	--!
	--!
	BEGIN TRY
		SET @_Step = ''Validate inputs'';

		--!
		--! There is an FK between Journal and Exception so we can''t delete more from Exception
		--! than we do from Journal
		--!
		IF @_JournalArchiveDate >= @_ExceptionArchiveDate
			BEGIN
				SET @_Message	= ''Failed to clean up Journal and Exception tables as Journal delete Date: ''
								+ COALESCE(CONVERT(char(19), @_JournalArchiveDate, 120), ''NULL'')
								+ '' must be less than Exception delete date: ''
								+ COALESCE(CONVERT(char(19), @_ExceptionArchiveDate, 120), ''NULL'')
				RAISERROR(@_Message, 16, 1);
			END

		SET @_Step = ''Delete old Journal entries'';
		SET @_StepStartTime = GETDATE();

		BEGIN TRAN

		--! Don''t need to DELETE JournalDetail as FK cascades
		DELETE
			[log4Private].[Journal]
		WHERE
			SystemDate < @_JournalArchiveDate

		SET @_RowCount		= @@ROWCOUNT;
		SET @_DebugMessage	= ''Completed step: "'' +  COALESCE(@_Step, ''NULL'') + ''"''
							+ '' in '' + [log4].[FormatElapsedTime](@_StepStartTime, NULL, 3)
							+ '' '' + COALESCE(CAST(@_RowCount AS varchar(8)), ''NULL'') + '' row(s) affected''
		SET @_ProgressText	= @_ProgressText + @_CRLF + @_DebugMessage

		IF  @@TRANCOUNT > 0 COMMIT TRAN
	END TRY
	BEGIN CATCH
		IF ABS(XACT_STATE()) = 1 OR @@TRANCOUNT > 0 ROLLBACK TRAN;

		SET @_CustomErrorText	= ''Failed to cleanup Journal and Exception at step: '' + COALESCE(@_Step, ''NULL'')

		EXEC [log4].[ExceptionHandler]
				  @ErrorContext    = @_CustomErrorText
				, @ErrorProcedure  = @_FunctionName
				, @ErrorNumber     = @_Error OUT
				, @ReturnMessage   = @_Message OUT
				, @ExceptionId     = @_ExceptionId OUT

		GOTO OnComplete;
	END CATCH

	--!
	--!
	--!
	BEGIN TRY
		SET @_Step = ''Delete old Exception entries'';
		SET @_StepStartTime = GETDATE();

		BEGIN TRAN

		DELETE
			[log4Private].[SqlException]
		WHERE
			SystemDate < @_ExceptionArchiveDate

		SET @_RowCount		= @@ROWCOUNT;
		SET @_DebugMessage	= ''Completed step: "'' +  COALESCE(@_Step, ''NULL'') + ''"''
							+ '' in '' + [log4].[FormatElapsedTime](@_StepStartTime, NULL, 3)
							+ '' '' + COALESCE(CAST(@_RowCount AS varchar(8)), ''NULL'') + '' row(s) affected''
		SET @_ProgressText	= @_ProgressText + @_CRLF + @_DebugMessage

		IF  @@TRANCOUNT > 0 COMMIT TRAN

		SET @_Message		= ''Completed all Journal and Exception cleanup activities;''
							+ '' retaining '' + COALESCE(CAST(@DaysToKeepJournal AS varchar(8)), ''NULL'') + '' days'''' Journal entries''
							+ '' and '' + COALESCE(CAST(@DaysToKeepException AS varchar(8)), ''NULL'') + '' days'''' Exception entries''
	END TRY
	BEGIN CATCH
		IF ABS(XACT_STATE()) = 1 OR @@TRANCOUNT > 0 ROLLBACK TRAN;

		SET @_CustomErrorText	= ''Failed to cleanup Journal and Exception at step: '' + COALESCE(@_Step, ''NULL'')

		EXEC [log4].[ExceptionHandler]
				  @ErrorContext    = @_CustomErrorText
				, @ErrorProcedure  = @_FunctionName
				, @ErrorNumber     = @_Error OUT
				, @ReturnMessage   = @_Message OUT
				, @ExceptionId     = @_ExceptionId OUT

		GOTO OnComplete;
	END CATCH


--/////////////////////////////////////////////////////////////////////////////////////////////////
OnComplete:
--/////////////////////////////////////////////////////////////////////////////////////////////////

	IF @_Error = 0
		BEGIN
			SET @_Step			= ''OnComplete''
			SET @_Severity		= 512 -- Success
			SET @_Message		= COALESCE(@_Message, @_Step) + '' in a total run time of '' + [log4].[FormatElapsedTime](@_SprocStartTime, NULL, 3)
		END
	ELSE
		BEGIN
			SET @_Step			= COALESCE(@_Step, ''OnError'')
			SET @_Severity		= 2 -- Severe Failure
			SET @_Message		= COALESCE(@_Message, @_Step) + '' after a total run time of '' + [log4].[FormatElapsedTime](@_SprocStartTime, NULL, 3)
		END

	--! Always log completion of this call
	EXEC [log4].[JournalWriter]
			  @FunctionName		= @_FunctionName
			, @StepInFunction	= @_Step
			, @MessageText		= @_Message
			, @ExtraInfo		= @_ProgressText
			, @DatabaseName		= @_DatabaseName
			, @Severity			= @_Severity
			, @ExceptionId		= @_ExceptionId

	--! Finaly, throw an exception that will be detected by SQL Agent
	IF @_Error > 0 RAISERROR(@_Message, 16, 1);

	SET NOCOUNT OFF;

	RETURN (@_Error);
END
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('2ea3489a-569e-5ce8-84e6-472f4aab2830' AS UNIQUEIDENTIFIER) AND [script_checksum] = '8E8AE6427D7C490B6B864DC68BD17CC797885D93ED81D525B38FB21F8357982B')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\log4Utils\Stored Procedures\JournalCleanup.sql", ID: {2ea3489a-569e-5ce8-84e6-472f4aab2830} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('2ea3489a-569e-5ce8-84e6-472f4aab2830' AS UNIQUEIDENTIFIER) AND [script_checksum] = '8E8AE6427D7C490B6B864DC68BD17CC797885D93ED81D525B38FB21F8357982B')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('2ea3489a-569e-5ce8-84e6-472f4aab2830' AS UNIQUEIDENTIFIER), '8E8AE6427D7C490B6B864DC68BD17CC797885D93ED81D525B38FB21F8357982B', 'Programmable Objects\log4Utils\Stored Procedures\JournalCleanup.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. Also ensure that your project scripts do not contain any "USE [OtherDbName]" statements. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('3225b809-e790-51bb-9b80-895f9adf2f08' AS UNIQUEIDENTIFIER) AND [script_checksum] = '8D5E9033F16635B803EA63FCB67DEB59EBF9E19318B185FCC0297F0ADF7C63C1')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\log4Utils\Stored Procedures\PrintString.sql", ID: {3225b809-e790-51bb-9b80-895f9adf2f08} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('3225b809-e790-51bb-9b80-895f9adf2f08' AS UNIQUEIDENTIFIER) AND [script_checksum] = '8D5E9033F16635B803EA63FCB67DEB59EBF9E19318B185FCC0297F0ADF7C63C1')
  EXECUTE ('IF OBJECT_ID(''[log4Utils].[PrintString]'') IS NOT NULL
	DROP PROCEDURE [log4Utils].[PrintString];

');

GO
SET QUOTED_IDENTIFIER ON;

GO
SET ANSI_NULLS ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('3225b809-e790-51bb-9b80-895f9adf2f08' AS UNIQUEIDENTIFIER) AND [script_checksum] = '8D5E9033F16635B803EA63FCB67DEB59EBF9E19318B185FCC0297F0ADF7C63C1')
  EXECUTE ('
/*************************************************************************************************/
--</MaintenanceHeader>

CREATE PROCEDURE [log4Utils].[PrintString]
(
  @InputString		nvarchar(max)	= NULL
, @MaxPrintLength	int				= 4000
)

AS

--<CommentHeader>
/**********************************************************************************************************************

Properties
=====================================================================================================================
PROCEDURE NAME:		[log4Utils].[PrintString]
DESCRIPTION:		Prints the supplied string respecting all line feeds and/or carriage returns except where no
					line feeds are found, in which case the output is printed in user-specified lengths
DATE OF ORIGIN:		05-NOV-2011
ORIGINAL AUTHOR:	Greg M. Lucas (data-centric solutions ltd. http://www.data-centric.co.uk)
BUILD DATE:			01-MAR-2015
BUILD VERSION:		0.0.13
DEPENDANTS:			None
DEPENDENCIES:		None

Inputs
======
@InputString - optional, the string to print
@MaxPrintLength - Max length of string to print before inserting an unnatural break

Outputs
=======
None

Returns
=======
NULL

Additional Notes
================

Revision history
=====================================================================================================================
ChangeDate    Author   Version  Narrative
============  =======  =======  =====================================================================================
05-NOV-2011   GML      v0.0.8   Created
------------  -------  -------  -------------------------------------------------------------------------------------
13-MAR-2012   GML      v0.0.10  Fixed backwards-compatability issue with @LineFeedPos
------------  -------  -------  -------------------------------------------------------------------------------------


=====================================================================================================================
(C) Copyright 2006-14 data-centric solutions ltd. (http://log4tsql.sourceforge.net/)

This library is free software; you can redistribute it and/or modify it under the terms of the
GNU Lesser General Public License as published by the Free Software Foundation (www.fsf.org);
either version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along with this
library; if not, you can find it at http://www.opensource.org/licenses/lgpl-3.0.html
or http://www.gnu.org/licenses/lgpl.html

**********************************************************************************************************************/
--</CommentHeader>

BEGIN
	SET NOCOUNT ON

	--! CONSTANTS (keep it SQL2005 compatible)
	DECLARE @LF					char(1); SET @LF			= CHAR(10);
	DECLARE @CR					char(1); SET @CR			= CHAR(13);
	DECLARE @CRLF				char(2); SET @CRLF		= CHAR(13) + CHAR(10);
	DECLARE @LINE_BREAK			char(3); SET @LINE_BREAK	= ''%'' + @LF + ''%'';

	--! Working Values
	DECLARE @WorkingLength		bigint
	DECLARE @WorkingString		nvarchar(max)
	DECLARE @SubString			nvarchar(max)
	DECLARE @SubStringLength	bigint

	--! Validate/correct inputs
	SET @MaxPrintLength = COALESCE(NULLIF(@MaxPrintLength, 0), 4000)

	IF @MaxPrintLength > 4000
		BEGIN
			RAISERROR(''The @MaxPrintLength value of %i is greater than the maximum length supported by PRINT for unicode strings (4000)'', 17, 1, @MaxPrintLength);
			RETURN(60000);
		END

	IF @MaxPrintLength < 1
		BEGIN
			RAISERROR(''The @MaxPrintLength must be greater than or equal to 1 but is %i'', 17, 2, @MaxPrintLength);
			RETURN(60000);
		END

	--! Working variables
	DECLARE @InputLength bigint; SET @InputLength = LEN(@InputString);

	IF @InputLength = 0
		GOTO OnComplete;

	--!
	--! Our input string may contain either carriage returns, line feeds or both
	--! to separate printing lines so we need to standardise on one of these (LF)
	--!
	SET @WorkingString = REPLACE(REPLACE(@InputString, @CRLF, @LF), @CR, @LF);

	--!
	--! If there are line feeds we use those to break down the text
	--! into individual printed lines, otherwise we print it in
	--! bite-size chunks suitable for consumption by PRINT
	--!
	IF PATINDEX(@LINE_BREAK, @InputString) > 0

		BEGIN --[BREAK_BY_LINE_FEED]

			--! Add a line feed on the end so the final iteration works as expected
			SET @WorkingString	= @WorkingString + @LF;
			SET @WorkingLength	= LEN(@WorkingString);

			DECLARE @LineFeedPos bigint; SET @LineFeedPos = 0;

			WHILE @WorkingLength > 0
				BEGIN
					--!
					--! Get the position of the next line feed
					--!
					SET @LineFeedPos = PATINDEX(@LINE_BREAK, @WorkingString);

					IF @LineFeedPos > 0
						BEGIN
							SET @SubString			= SUBSTRING(@WorkingString, 1, @LineFeedPos - 1);
							SET @SubStringLength	= LEN(@SubString);

							--!
							--! If this string is too long for a single PRINT, we pass it back
							--! to PrintString which will process the string in suitably sized chunks
							--!
							IF LEN(@SubString) > @MaxPrintLength
								EXEC [log4Utils].[PrintString] @InputString = @SubString
							ELSE
								PRINT @SubString;

							--! Remove the text we''ve just processed
							SET @WorkingLength	= @WorkingLength - @LineFeedPos;
							SET @WorkingString	= SUBSTRING(@WorkingString, @LineFeedPos + 1, @WorkingLength);
						END
				END

		END --[BREAK_BY_LINE_FEED]
	ELSE
		BEGIN --[BREAK_BY_LENGTH]
			--!
			--! If there are no line feeds we may have to break it down
			--! into smaller bit size chunks suitable for PRINT
			--!
			IF @InputLength > @MaxPrintLength
				BEGIN
					SET @WorkingString		= @InputString;
					SET @WorkingLength		= LEN(@WorkingString);
					SET @SubStringLength	= @MaxPrintLength;

					WHILE @WorkingLength > 0
						BEGIN
							SET @SubString			= SUBSTRING(@WorkingString, 1, @SubStringLength);
							SET @SubStringLength	= LEN(@SubString)

							--!
							--! If we still have text to process, set working values
							--!
							IF (@WorkingLength - @SubStringLength + 1) > 0
								BEGIN
									PRINT @SubString;
									--! Remove the text we''ve just processed
									SET @WorkingString	= SUBSTRING(@WorkingString, @SubStringLength + 1, @WorkingLength);
									SET @WorkingLength	= LEN(@WorkingString);
								END
						END
				END
			ELSE
				PRINT @InputString;

		END --[BREAK_BY_LENGTH]

--/////////////////////////////////////////////////////////////////////////////////////////////////
OnComplete:
--/////////////////////////////////////////////////////////////////////////////////////////////////

	SET NOCOUNT OFF

	RETURN

END
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('3225b809-e790-51bb-9b80-895f9adf2f08' AS UNIQUEIDENTIFIER) AND [script_checksum] = '8D5E9033F16635B803EA63FCB67DEB59EBF9E19318B185FCC0297F0ADF7C63C1')
  EXECUTE ('GRANT EXECUTE ON  [log4Utils].[PrintString] TO [public]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('3225b809-e790-51bb-9b80-895f9adf2f08' AS UNIQUEIDENTIFIER) AND [script_checksum] = '8D5E9033F16635B803EA63FCB67DEB59EBF9E19318B185FCC0297F0ADF7C63C1')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\log4Utils\Stored Procedures\PrintString.sql", ID: {3225b809-e790-51bb-9b80-895f9adf2f08} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('3225b809-e790-51bb-9b80-895f9adf2f08' AS UNIQUEIDENTIFIER) AND [script_checksum] = '8D5E9033F16635B803EA63FCB67DEB59EBF9E19318B185FCC0297F0ADF7C63C1')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('3225b809-e790-51bb-9b80-895f9adf2f08' AS UNIQUEIDENTIFIER), '8D5E9033F16635B803EA63FCB67DEB59EBF9E19318B185FCC0297F0ADF7C63C1', 'Programmable Objects\log4Utils\Stored Procedures\PrintString.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. Also ensure that your project scripts do not contain any "USE [OtherDbName]" statements. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('670576e6-3bc5-5ece-a037-8b11d9f6c0fc' AS UNIQUEIDENTIFIER) AND [script_checksum] = '04538354D240804F630C87E7E2278A2629044273E9718F2D5ED2B15AFFBF3B6E')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\log4Utils\Stored Procedures\JournalPrinter.sql", ID: {670576e6-3bc5-5ece-a037-8b11d9f6c0fc} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('670576e6-3bc5-5ece-a037-8b11d9f6c0fc' AS UNIQUEIDENTIFIER) AND [script_checksum] = '04538354D240804F630C87E7E2278A2629044273E9718F2D5ED2B15AFFBF3B6E')
  EXECUTE ('IF OBJECT_ID(''[log4Utils].[JournalPrinter]'') IS NOT NULL
	DROP PROCEDURE [log4Utils].[JournalPrinter];

');

GO
SET QUOTED_IDENTIFIER ON;

GO
SET ANSI_NULLS ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('670576e6-3bc5-5ece-a037-8b11d9f6c0fc' AS UNIQUEIDENTIFIER) AND [script_checksum] = '04538354D240804F630C87E7E2278A2629044273E9718F2D5ED2B15AFFBF3B6E')
  EXECUTE ('
/*************************************************************************************************/
--</MaintenanceHeader>

CREATE PROCEDURE [log4Utils].[JournalPrinter]
(
  @JournalId		int
)

AS

/**************************************************************************************************

Properties
==========
PROCEDURE NAME:		[log4Utils].[JournalPrinter]
DESCRIPTION:		Prints the contents of JournalDetail for the specified Journal ID respecting all
					line feeds and/or carriage returns
DATE OF ORIGIN:		03-MAY-2011
ORIGINAL AUTHOR:	Greg M. Lucas (data-centric solutions ltd. http://www.data-centric.co.uk)
BUILD DATE:			01-MAR-2015
BUILD VERSION:		0.0.13
DEPENDANTS:			None
DEPENDENCIES:		None

Inputs
======
@JournalId - if -1, just processes any provided input string
@InputString - optional, the string to print

Outputs
=======
None

Returns
=======
NULL

Additional Notes
================

Revision history
==================================================================================================
ChangeDate		Author	Version		Narrative
============	======	=======		==============================================================
03-MAY-2011		GML		v0.0.4		Created
------------	------	-------		--------------------------------------------------------------
05-NOV-2011		GML		v0.0.8		Now calls log4.PrintString (which is SQL2005 compatible)
------------	------	-------		--------------------------------------------------------------

=================================================================================================
(C) Copyright 2006-14 data-centric solutions ltd. (http://log4tsql.sourceforge.net/)

This library is free software; you can redistribute it and/or modify it under the terms of the
GNU Lesser General Public License as published by the Free Software Foundation (www.fsf.org);
either version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along with this
library; if not, you can find it at http://www.opensource.org/licenses/lgpl-3.0.html
or http://www.gnu.org/licenses/lgpl.html

**************************************************************************************************/

BEGIN
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
	SET NOCOUNT ON;

	--! Working Values
	DECLARE @WorkingString		varchar(max)

	SELECT @WorkingString = ExtraInfo FROM [log4Private].[JournalDetail] WHERE JournalId = @JournalId

	IF COALESCE(@WorkingString, '''') = ''''
		BEGIN
			RAISERROR(''No Extra Info for Journal ID: %d!'', 0, 1, @JournalId);
		END
	ELSE
		BEGIN
			PRINT '''';
			PRINT REPLICATE(''='', 120);

			EXEC [log4Utils].[PrintString] @WorkingString

			PRINT '''';
			PRINT REPLICATE(''='', 120);
			RAISERROR(''Completed processing journal detail for Journal ID: %d'', 0, 1, @JournalId) WITH NOWAIT;
		END

	SET NOCOUNT OFF;

	RETURN;
END
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('670576e6-3bc5-5ece-a037-8b11d9f6c0fc' AS UNIQUEIDENTIFIER) AND [script_checksum] = '04538354D240804F630C87E7E2278A2629044273E9718F2D5ED2B15AFFBF3B6E')
  EXECUTE ('GRANT EXECUTE ON  [log4Utils].[JournalPrinter] TO [public]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('670576e6-3bc5-5ece-a037-8b11d9f6c0fc' AS UNIQUEIDENTIFIER) AND [script_checksum] = '04538354D240804F630C87E7E2278A2629044273E9718F2D5ED2B15AFFBF3B6E')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\log4Utils\Stored Procedures\JournalPrinter.sql", ID: {670576e6-3bc5-5ece-a037-8b11d9f6c0fc} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('670576e6-3bc5-5ece-a037-8b11d9f6c0fc' AS UNIQUEIDENTIFIER) AND [script_checksum] = '04538354D240804F630C87E7E2278A2629044273E9718F2D5ED2B15AFFBF3B6E')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('670576e6-3bc5-5ece-a037-8b11d9f6c0fc' AS UNIQUEIDENTIFIER), '04538354D240804F630C87E7E2278A2629044273E9718F2D5ED2B15AFFBF3B6E', 'Programmable Objects\log4Utils\Stored Procedures\JournalPrinter.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. Also ensure that your project scripts do not contain any "USE [OtherDbName]" statements. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('6fa1ede2-33fa-52c4-9851-10d1307aeabc' AS UNIQUEIDENTIFIER) AND [script_checksum] = '30499310B14E42D216FA1F536A50F80C0116D996DE2F6AD11C34A05EA554E682')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\log4\Functions\GetJournalControl.sql", ID: {6fa1ede2-33fa-52c4-9851-10d1307aeabc} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('6fa1ede2-33fa-52c4-9851-10d1307aeabc' AS UNIQUEIDENTIFIER) AND [script_checksum] = '30499310B14E42D216FA1F536A50F80C0116D996DE2F6AD11C34A05EA554E682')
  EXECUTE ('IF OBJECT_ID(''[log4].[GetJournalControl]'') IS NOT NULL
	DROP FUNCTION [log4].[GetJournalControl];

');

GO
SET QUOTED_IDENTIFIER ON;

GO
SET ANSI_NULLS ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('6fa1ede2-33fa-52c4-9851-10d1307aeabc' AS UNIQUEIDENTIFIER) AND [script_checksum] = '30499310B14E42D216FA1F536A50F80C0116D996DE2F6AD11C34A05EA554E682')
  EXECUTE ('
/*************************************************************************************************/
--</MaintenanceHeader>

CREATE FUNCTION [log4].[GetJournalControl]
(
  @ModuleName		varchar(255)
, @GroupName		varchar(255)
)

RETURNS varchar(3)

AS

--<CommentHeader>
/**************************************************************************************************

Properties
==========
FUNCTION NAME:      [log4].[GetJournalControl]
DESCRIPTION:		Returns the ON/OFF value for the specified Journal Name, or Group Name if
					Module not found or the system default if neither is found
DATE OF ORIGIN:		15-APR-2008
ORIGINAL AUTHOR:	Greg M. Lucas (data-centric solutions ltd. http://www.data-centric.co.uk)
BUILD DATE:			01-MAR-2015
BUILD VERSION:		0.0.13
DEPENDANTS:         Various
DEPENDENCIES:       None

Additional Notes
================
Builds a string that looks like this: "0 hr(s) 1 min(s) and 22 sec(s)" or "1345 milliseconds"

Revision history
==================================================================================================
ChangeDate		Author	Version		Narrative
============	======	=======		==============================================================
15-APR-2008		GML		v0.0.3		Created
------------	------	-------		--------------------------------------------------------------

=================================================================================================
(C) Copyright 2006-14 data-centric solutions ltd. (http://log4tsql.sourceforge.net/)

This library is free software; you can redistribute it and/or modify it under the terms of the
GNU Lesser General Public License as published by the Free Software Foundation (www.fsf.org);
either version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along with this
library; if not, you can find it at http://www.opensource.org/licenses/lgpl-3.0.html
or http://www.gnu.org/licenses/lgpl.html

**************************************************************************************************/
--</CommentHeader>

BEGIN
	RETURN
		(
			SELECT
				TOP 1 OnOffSwitch
			FROM
				(
						SELECT
							  OnOffSwitch
							, 1 AS [Precedence]
						FROM
							[log4Private].[JournalControl]
						WHERE
							ModuleName = ''SYSTEM_OVERRIDE''
						AND
							OnOffSwitch = ''OFF'' -- only care about the override when it''s OFF
					UNION
						SELECT
							  OnOffSwitch
							, 10 AS [Precedence]
						FROM
							[log4Private].[JournalControl]
						WHERE
							ModuleName = @ModuleName
					UNION
						SELECT
							  OnOffSwitch
							, 100 AS [Precedence]
						FROM
							[log4Private].[JournalControl]
						WHERE
							ModuleName = @GroupName
					UNION
						SELECT
							  OnOffSwitch
							, 200 AS [Precedence]
						FROM
							[log4Private].[JournalControl]
						WHERE
							ModuleName = ''SYSTEM_DEFAULT''
					UNION
						SELECT
							  ''OFF''		AS [OnOffSwitch]
							, 300		AS [Precedence]
				) AS [x]
			ORDER BY
				[Precedence] ASC
		)
END
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('6fa1ede2-33fa-52c4-9851-10d1307aeabc' AS UNIQUEIDENTIFIER) AND [script_checksum] = '30499310B14E42D216FA1F536A50F80C0116D996DE2F6AD11C34A05EA554E682')
  EXECUTE ('GRANT EXECUTE ON  [log4].[GetJournalControl] TO [public]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('6fa1ede2-33fa-52c4-9851-10d1307aeabc' AS UNIQUEIDENTIFIER) AND [script_checksum] = '30499310B14E42D216FA1F536A50F80C0116D996DE2F6AD11C34A05EA554E682')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\log4\Functions\GetJournalControl.sql", ID: {6fa1ede2-33fa-52c4-9851-10d1307aeabc} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('6fa1ede2-33fa-52c4-9851-10d1307aeabc' AS UNIQUEIDENTIFIER) AND [script_checksum] = '30499310B14E42D216FA1F536A50F80C0116D996DE2F6AD11C34A05EA554E682')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('6fa1ede2-33fa-52c4-9851-10d1307aeabc' AS UNIQUEIDENTIFIER), '30499310B14E42D216FA1F536A50F80C0116D996DE2F6AD11C34A05EA554E682', 'Programmable Objects\log4\Functions\GetJournalControl.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. Also ensure that your project scripts do not contain any "USE [OtherDbName]" statements. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f1c132d0-a9be-559e-9b9f-df02fa90e78b' AS UNIQUEIDENTIFIER) AND [script_checksum] = '751727BB4C0C2E6A875EF3C3B5B7E3F50FB1FA68C924098ABBD2D6BBF9ABCA37')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\log4Utils\Stored Procedures\ExceptionReader.sql", ID: {f1c132d0-a9be-559e-9b9f-df02fa90e78b} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f1c132d0-a9be-559e-9b9f-df02fa90e78b' AS UNIQUEIDENTIFIER) AND [script_checksum] = '751727BB4C0C2E6A875EF3C3B5B7E3F50FB1FA68C924098ABBD2D6BBF9ABCA37')
  EXECUTE ('IF OBJECT_ID(''[log4Utils].[ExceptionReader]'') IS NOT NULL
	DROP PROCEDURE [log4Utils].[ExceptionReader];

');

GO
SET QUOTED_IDENTIFIER ON;

GO
SET ANSI_NULLS ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f1c132d0-a9be-559e-9b9f-df02fa90e78b' AS UNIQUEIDENTIFIER) AND [script_checksum] = '751727BB4C0C2E6A875EF3C3B5B7E3F50FB1FA68C924098ABBD2D6BBF9ABCA37')
  EXECUTE ('
/*************************************************************************************************/
--</MaintenanceHeader>

CREATE PROCEDURE [log4Utils].[ExceptionReader]
(
  @StartDate			datetime		= NULL
, @EndDate				datetime		= NULL
, @TimeZoneOffset		smallint		= NULL
, @ErrorProcedure		varchar(256)	= NULL
, @ProcedureSearchType	tinyint			= NULL
, @ErrorMessage			varchar(512)	= NULL
, @MessageSearchType	tinyint			= NULL
, @ResultSetSize		int				= NULL
)

AS

/**************************************************************************************************

Properties
==========
PROCEDURE NAME:		[log4Utils].[ExceptionReader]
DESCRIPTION:		Returns all Exceptions matching the specified search criteria
DATE OF ORIGIN:		01-DEC-2006
ORIGINAL AUTHOR:	Greg M. Lucas (data-centric solutions ltd. http://www.data-centric.co.uk)
BUILD DATE:			29-AUG-2011
BUILD VERSION:		0.0.6
DEPENDANTS:			None
DEPENDENCIES:		None

Returns
=======
@@ERROR - always zero on success

Additional Notes
================

Function and Message Search Types:

0 = Exclude from Search
1 = Begins With
2 = Ends With
3 = Contains
4 = Exact Match

Revision history
==================================================================================================
ChangeDate		Author	Version		Narrative
============	======	=======		==============================================================
01-DEC-2006		GML		v0.0.1		Created
------------	------	-------		--------------------------------------------------------------
03-MAY-2011		GML		v0.0.4		Added @TimeZoneOffset for ease of use in other timezones
------------	------	-------		--------------------------------------------------------------

=================================================================================================
(C) Copyright 2006-14 data-centric solutions ltd. (http://log4tsql.sourceforge.net/)

This library is free software; you can redistribute it and/or modify it under the terms of the
GNU Lesser General Public License as published by the Free Software Foundation (www.fsf.org);
either version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along with this
library; if not, you can find it at http://www.opensource.org/licenses/lgpl-3.0.html
or http://www.gnu.org/licenses/lgpl.html

**************************************************************************************************/

BEGIN
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
	SET NOCOUNT ON;

	--! Working variables
	DECLARE	  @Error            int
			, @RowCount         int

	SET @Error 			= 0
	SET @TimeZoneOffset	= COALESCE(@TimeZoneOffset, 0)

	--!
	--! Format the Function search string according to the required search criteria
	--!
	IF LEN(ISNULL(@ErrorProcedure, '''')) = 0 OR @ProcedureSearchType = 0
		SET @ErrorProcedure = ''%''
	ELSE IF LEN(@ErrorProcedure) < 256
		BEGIN
			IF @ProcedureSearchType & 1 = 1 AND SUBSTRING(REVERSE(@ErrorProcedure), 1, 1) != ''%''
				SET @ErrorProcedure = @ErrorProcedure + ''%''

			IF @ProcedureSearchType & 2 = 2 AND SUBSTRING(@ErrorProcedure, 1, 1) != ''%''
				SET @ErrorProcedure = ''%'' + @ErrorProcedure

			--! If @ProcedureSearchType = 4, do nothing as we want an exact match
		END

	--!
	--! Format the Message search string according to the required search criteria
	--!
	IF LEN(ISNULL(@ErrorMessage, '''')) = 0 OR @MessageSearchType = 0
		SET @ErrorMessage = ''%''
	ELSE IF LEN(@ErrorMessage) < 512
		BEGIN
			IF @MessageSearchType & 1 = 1 AND SUBSTRING(REVERSE(@ErrorMessage), 1, 1) != ''%''
				SET @ErrorMessage = @ErrorMessage + ''%''

			IF @MessageSearchType & 2 = 2 AND SUBSTRING(@ErrorMessage, 1, 1) != ''%''
				SET @ErrorMessage = ''%'' + @ErrorMessage

			--! If @MessageSearchType = 4, do nothing as we want an exact match
		END

	--!
	--! If @ResultSetSize is invalid, just return the last 100 rows
	--!
	IF ISNULL(@ResultSetSize, -1) < 1 SET @ResultSetSize = 100
	IF @StartDate IS NULL SET @StartDate = CONVERT(datetime, CONVERT(char(8), DATEADD(day, -10, GETDATE())) + '' 00:00:00'', 112)
	IF @EndDate IS NULL SET @EndDate = CONVERT(datetime, CONVERT(char(8), GETDATE(), 112) + '' 23:59:59'', 112)

	--! Reverse any time zone offset so we are searching on system time
	SET @StartDate	= DATEADD(hour, @TimeZoneOffset * -1, @StartDate)
	SET @EndDate	= DATEADD(hour, @TimeZoneOffset * -1, @EndDate)

	--!
	--! Return the required results
	--!
	SELECT TOP (@ResultSetSize)
		  ExceptionId
		, DATEADD(hour, @TimeZoneOffset, SystemDate)						AS [LocalTime]
		---------------------------------------------------------------------------------------------------
		, ErrorNumber
		, ErrorContext
		, REPLACE(REPLACE(ErrorMessage, CHAR(13), ''  ''), CHAR(10), ''  '')	AS [ErrorMessage]
		, ErrorSeverity
		, ErrorState
		, ErrorProcedure
		, ErrorLine
		, ErrorDatabase
		---------------------------------------------------------------------------------------------------
		, SystemDate
		, SessionIdent
		, [ProgramName]
		, [NTDomain]
		, [NTUsername]
		, [LoginName]
	FROM
		[log4Private].[SqlException]
	WHERE
		SystemDate BETWEEN @StartDate AND @EndDate
	AND
		ErrorProcedure LIKE @ErrorProcedure
	AND
		ErrorMessage LIKE @ErrorMessage
	ORDER BY
		ExceptionId DESC

	SELECT @Error = @@ERROR, @RowCount = @@ROWCOUNT

--/////////////////////////////////////////////////////////////////////////////////////////////////
OnComplete:
--/////////////////////////////////////////////////////////////////////////////////////////////////

	SET NOCOUNT OFF

	RETURN(@Error)

END
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f1c132d0-a9be-559e-9b9f-df02fa90e78b' AS UNIQUEIDENTIFIER) AND [script_checksum] = '751727BB4C0C2E6A875EF3C3B5B7E3F50FB1FA68C924098ABBD2D6BBF9ABCA37')
  EXECUTE ('GRANT EXECUTE ON  [log4Utils].[ExceptionReader] TO [public]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f1c132d0-a9be-559e-9b9f-df02fa90e78b' AS UNIQUEIDENTIFIER) AND [script_checksum] = '751727BB4C0C2E6A875EF3C3B5B7E3F50FB1FA68C924098ABBD2D6BBF9ABCA37')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\log4Utils\Stored Procedures\ExceptionReader.sql", ID: {f1c132d0-a9be-559e-9b9f-df02fa90e78b} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f1c132d0-a9be-559e-9b9f-df02fa90e78b' AS UNIQUEIDENTIFIER) AND [script_checksum] = '751727BB4C0C2E6A875EF3C3B5B7E3F50FB1FA68C924098ABBD2D6BBF9ABCA37')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('f1c132d0-a9be-559e-9b9f-df02fa90e78b' AS UNIQUEIDENTIFIER), '751727BB4C0C2E6A875EF3C3B5B7E3F50FB1FA68C924098ABBD2D6BBF9ABCA37', 'Programmable Objects\log4Utils\Stored Procedures\ExceptionReader.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. Also ensure that your project scripts do not contain any "USE [OtherDbName]" statements. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('a36600a2-33f7-5123-b295-e43d787c3464' AS UNIQUEIDENTIFIER) AND [script_checksum] = '95EE8740DD07209E7D8327B19F23AF0D1F7FD3F76AFF56C6C00928A5F5EC4445')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\log4Utils\Stored Procedures\JournalReader.sql", ID: {a36600a2-33f7-5123-b295-e43d787c3464} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('a36600a2-33f7-5123-b295-e43d787c3464' AS UNIQUEIDENTIFIER) AND [script_checksum] = '95EE8740DD07209E7D8327B19F23AF0D1F7FD3F76AFF56C6C00928A5F5EC4445')
  EXECUTE ('IF OBJECT_ID(''[log4Utils].[JournalReader]'') IS NOT NULL
	DROP PROCEDURE [log4Utils].[JournalReader];

');

GO
SET QUOTED_IDENTIFIER ON;

GO
SET ANSI_NULLS ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('a36600a2-33f7-5123-b295-e43d787c3464' AS UNIQUEIDENTIFIER) AND [script_checksum] = '95EE8740DD07209E7D8327B19F23AF0D1F7FD3F76AFF56C6C00928A5F5EC4445')
  EXECUTE ('
/*************************************************************************************************/
--</MaintenanceHeader>

CREATE PROCEDURE [log4Utils].[JournalReader]
(
  @StartDate			datetime		= NULL
, @EndDate				datetime		= NULL
, @TimeZoneOffset		smallint		= NULL
, @FunctionName			varchar(256)	= NULL
, @FunctionSearchType	tinyint			= NULL
, @MessageText			varchar(512)	= NULL
, @MessageSearchType	tinyint			= NULL
, @Task					varchar(128)	= NULL
, @SeverityBitMask		smallint		= 8191 -- 8191 All Severities or 7167 to exclude debug
, @ResultSetSize		int				= NULL
)

AS

/**************************************************************************************************

Properties
==========
PROCEDURE NAME:		[log4Utils].[JournalReader]
DESCRIPTION:		Returns all Journal entries matching the specified search criteria
DATE OF ORIGIN:		01-DEC-2006
ORIGINAL AUTHOR:	Greg M. Lucas (data-centric solutions ltd. http://www.data-centric.co.uk)
BUILD DATE:			01-MAR-2015
BUILD VERSION:		0.0.13
DEPENDANTS:			None
DEPENDENCIES:		None

Inputs
======
@DatabaseName
@FunctionName
@MessageText
@StepInFunction
@ExtraInfo
@Severity

Outputs
=======
None

Returns
=======
@@ERROR - always zero on success

Additional Notes
================
Severity Bits (for bitmask):

   1 -- Showstopper/Critical Failure
   2 -- Severe Failure
   4 -- Major Failure
   8 -- Moderate Failure
  16 -- Minor Failure
  32 -- Concurrency Violation
  64 -- Reserved for future Use
 128 -- Reserved for future Use
 256 -- Informational
 512 -- Success
1024 -- Debug
2048 -- Reserved for future Use
4096 -- Reserved for future Use

Function and Message Search Types:

0 = Exclude from Search
1 = Begins With
2 = Ends With
3 = Contains
4 = Exact Match

Revision history
==================================================================================================
ChangeDate		Author	Version		Narrative
============	======	=======		==============================================================
01-DEC-2006		GML		v0.0.1		Created
------------	------	-------		--------------------------------------------------------------
03-MAY-2011		GML		v0.0.4		Removed ExtraInfo from result set for performance
									Added @TimeZoneOffset for ease of use in other timezones
------------	------	-------		--------------------------------------------------------------
28-AUG-2011		GML		v0.0.6		Added support for ExceptionId and Task columns
------------	------	-------		--------------------------------------------------------------

=================================================================================================
(C) Copyright 2006-14 data-centric solutions ltd. (http://log4tsql.sourceforge.net/)

This library is free software; you can redistribute it and/or modify it under the terms of the
GNU Lesser General Public License as published by the Free Software Foundation (www.fsf.org);
either version 3.0 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along with this
library; if not, you can find it at http://www.opensource.org/licenses/lgpl-3.0.html
or http://www.gnu.org/licenses/lgpl.html

**************************************************************************************************/

BEGIN
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
	SET NOCOUNT ON

	--! Working variables
	DECLARE	  @Error            int
			, @RowCount         int

	SET @Error 			= 0
	SET @TimeZoneOffset	= COALESCE(@TimeZoneOffset, 0)
	SET @Task			= COALESCE(@Task, '''')

	--!
	--! Format the Function search string according to the required search criteria
	--!
	IF LEN(ISNULL(@FunctionName, '''')) = 0 OR @FunctionSearchType = 0
		SET @FunctionName = ''%''
	ELSE IF LEN(@FunctionName) < 256
		BEGIN
			IF @FunctionSearchType & 1 = 1 AND SUBSTRING(REVERSE(@FunctionName), 1, 1) != ''%''
				SET @FunctionName = @FunctionName + ''%''

			IF @FunctionSearchType & 2 = 2 AND SUBSTRING(@FunctionName, 1, 1) != ''%''
				SET @FunctionName = ''%'' + @FunctionName

			--! If @FunctionSearchType = 4, do nothing as we want an exact match
		END

	--!
	--! Format the Message search string according to the required search criteria
	--!
	IF LEN(ISNULL(@MessageText, '''')) = 0 OR @MessageSearchType = 0
		SET @MessageText = ''%''
	ELSE IF LEN(@MessageText) < 512
		BEGIN
			IF @MessageSearchType & 1 = 1 AND SUBSTRING(REVERSE(@MessageText), 1, 1) != ''%''
				SET @MessageText = @MessageText + ''%''

			IF @MessageSearchType & 2 = 2 AND SUBSTRING(@MessageText, 1, 1) != ''%''
				SET @MessageText = ''%'' + @MessageText

			--! If @MessageSearchType = 4, do nothing as we want an exact match
		END

	--!
	--! If @ResultSetSize is invalid, just return the last 100 rows
	--!
	IF ISNULL(@ResultSetSize, -1) < 1 SET @ResultSetSize = 100
	IF @StartDate IS NULL SET @StartDate = CONVERT(datetime, CONVERT(char(8), DATEADD(day, -7, GETDATE())) + '' 00:00:00'', 112)
	IF @EndDate IS NULL SET @EndDate = CONVERT(datetime, CONVERT(char(8), GETDATE(), 112) + '' 23:59:59'', 112)

	--! Reverse any time zone offset so we are searching on system time
	SET @StartDate	= DATEADD(hour, @TimeZoneOffset * -1, @StartDate)
	SET @EndDate	= DATEADD(hour, @TimeZoneOffset * -1, @EndDate)

	--!
	--! Return the required results
	--!
	SELECT TOP (@ResultSetSize)
		  j.JournalId
		, DATEADD(hour, @TimeZoneOffset, j.SystemDate)	AS [LocalTime]
		---------------------------------------------------------------------------------------------------
		, j.Task										AS [TaskOrJobName]
		, j.FunctionName								AS [FunctionName]
		, j.StepInFunction								AS [StepInFunction]
		, j.MessageText									AS [MessageText]
		, s.SeverityName								AS [Severity]
		, j.ExceptionId									AS [ExceptionId]
		---------------------------------------------------------------------------------------------------
		, j.SystemDate
	FROM
		[log4Private].[Journal] AS [j]
	INNER JOIN
		[log4Private].[Severity] AS [s]
	ON
		s.SeverityId = j.SeverityId
	WHERE
		j.SystemDate BETWEEN @StartDate AND @EndDate
	AND
		j.SeverityId & @SeverityBitMask = j.SeverityId
	AND
		j.Task = COALESCE(NULLIF(@Task, ''''), j.Task)
	AND
		j.FunctionName LIKE @FunctionName
	AND
		j.MessageText LIKE @MessageText
	ORDER BY
		j.JournalId DESC

	SELECT @Error = @@ERROR, @RowCount = @@ROWCOUNT

--/////////////////////////////////////////////////////////////////////////////////////////////////
OnComplete:
--/////////////////////////////////////////////////////////////////////////////////////////////////

	SET NOCOUNT OFF

	RETURN(@Error)

END
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('a36600a2-33f7-5123-b295-e43d787c3464' AS UNIQUEIDENTIFIER) AND [script_checksum] = '95EE8740DD07209E7D8327B19F23AF0D1F7FD3F76AFF56C6C00928A5F5EC4445')
  EXECUTE ('GRANT EXECUTE ON  [log4Utils].[JournalReader] TO [public]
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('a36600a2-33f7-5123-b295-e43d787c3464' AS UNIQUEIDENTIFIER) AND [script_checksum] = '95EE8740DD07209E7D8327B19F23AF0D1F7FD3F76AFF56C6C00928A5F5EC4445')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\log4Utils\Stored Procedures\JournalReader.sql", ID: {a36600a2-33f7-5123-b295-e43d787c3464} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('a36600a2-33f7-5123-b295-e43d787c3464' AS UNIQUEIDENTIFIER) AND [script_checksum] = '95EE8740DD07209E7D8327B19F23AF0D1F7FD3F76AFF56C6C00928A5F5EC4445')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('a36600a2-33f7-5123-b295-e43d787c3464' AS UNIQUEIDENTIFIER), '95EE8740DD07209E7D8327B19F23AF0D1F7FD3F76AFF56C6C00928A5F5EC4445', 'Programmable Objects\log4Utils\Stored Procedures\JournalReader.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. Also ensure that your project scripts do not contain any "USE [OtherDbName]" statements. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('014e73e0-8325-5f9e-98ed-0b2f097c563e' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'FBB79EA6A2795A9C79CFC103A21BF8A52AAA3C666EB6117045E57B2AC49989B2')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\dbo\Stored Procedures\ProcessRunEnd.sql", ID: {014e73e0-8325-5f9e-98ed-0b2f097c563e} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('014e73e0-8325-5f9e-98ed-0b2f097c563e' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'FBB79EA6A2795A9C79CFC103A21BF8A52AAA3C666EB6117045E57B2AC49989B2')
  EXECUTE ('if object_id(''[dbo].[ProcessRunEnd]'') is not null
	drop procedure [dbo].[ProcessRunEnd];

');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('014e73e0-8325-5f9e-98ed-0b2f097c563e' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'FBB79EA6A2795A9C79CFC103A21BF8A52AAA3C666EB6117045E57B2AC49989B2')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\dbo\Stored Procedures\ProcessRunEnd.sql", ID: {014e73e0-8325-5f9e-98ed-0b2f097c563e} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('014e73e0-8325-5f9e-98ed-0b2f097c563e' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'FBB79EA6A2795A9C79CFC103A21BF8A52AAA3C666EB6117045E57B2AC49989B2')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('014e73e0-8325-5f9e-98ed-0b2f097c563e' AS UNIQUEIDENTIFIER), 'FBB79EA6A2795A9C79CFC103A21BF8A52AAA3C666EB6117045E57B2AC49989B2', 'Programmable Objects\dbo\Stored Procedures\ProcessRunEnd.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. Also ensure that your project scripts do not contain any "USE [OtherDbName]" statements. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('8c70314e-a14a-58fe-b849-a5284adb4e21' AS UNIQUEIDENTIFIER) AND [script_checksum] = '47FEEF820002C4275FE1B57E67EC2ACAABC59FF2DC2BCF6F2CEEF59D4117091B')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\dbo\Stored Procedures\ProcessRunStart.sql", ID: {8c70314e-a14a-58fe-b849-a5284adb4e21} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('8c70314e-a14a-58fe-b849-a5284adb4e21' AS UNIQUEIDENTIFIER) AND [script_checksum] = '47FEEF820002C4275FE1B57E67EC2ACAABC59FF2DC2BCF6F2CEEF59D4117091B')
  EXECUTE ('IF OBJECT_ID(''[dbo].[ProcessRunStart]'') IS NOT NULL
	DROP PROCEDURE [dbo].[ProcessRunStart];

');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('8c70314e-a14a-58fe-b849-a5284adb4e21' AS UNIQUEIDENTIFIER) AND [script_checksum] = '47FEEF820002C4275FE1B57E67EC2ACAABC59FF2DC2BCF6F2CEEF59D4117091B')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\dbo\Stored Procedures\ProcessRunStart.sql", ID: {8c70314e-a14a-58fe-b849-a5284adb4e21} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('8c70314e-a14a-58fe-b849-a5284adb4e21' AS UNIQUEIDENTIFIER) AND [script_checksum] = '47FEEF820002C4275FE1B57E67EC2ACAABC59FF2DC2BCF6F2CEEF59D4117091B')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('8c70314e-a14a-58fe-b849-a5284adb4e21' AS UNIQUEIDENTIFIER), '47FEEF820002C4275FE1B57E67EC2ACAABC59FF2DC2BCF6F2CEEF59D4117091B', 'Programmable Objects\dbo\Stored Procedures\ProcessRunStart.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. Also ensure that your project scripts do not contain any "USE [OtherDbName]" statements. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f22b0e7e-f38c-5245-8fa6-7e0d0a829838' AS UNIQUEIDENTIFIER) AND [script_checksum] = '4C7EB11511F31EE26526604E5B45A5A257EC5912453CC34C235740391EC93FB3')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\dbo\Stored Procedures\SubProcessCheckThreads.sql", ID: {f22b0e7e-f38c-5245-8fa6-7e0d0a829838} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f22b0e7e-f38c-5245-8fa6-7e0d0a829838' AS UNIQUEIDENTIFIER) AND [script_checksum] = '4C7EB11511F31EE26526604E5B45A5A257EC5912453CC34C235740391EC93FB3')
  EXECUTE ('if object_id(''[dbo].[SubProcessCheckThreads]'') is not null
	drop procedure [dbo].[SubProcessCheckThreads];

');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f22b0e7e-f38c-5245-8fa6-7e0d0a829838' AS UNIQUEIDENTIFIER) AND [script_checksum] = '4C7EB11511F31EE26526604E5B45A5A257EC5912453CC34C235740391EC93FB3')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\dbo\Stored Procedures\SubProcessCheckThreads.sql", ID: {f22b0e7e-f38c-5245-8fa6-7e0d0a829838} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f22b0e7e-f38c-5245-8fa6-7e0d0a829838' AS UNIQUEIDENTIFIER) AND [script_checksum] = '4C7EB11511F31EE26526604E5B45A5A257EC5912453CC34C235740391EC93FB3')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('f22b0e7e-f38c-5245-8fa6-7e0d0a829838' AS UNIQUEIDENTIFIER), '4C7EB11511F31EE26526604E5B45A5A257EC5912453CC34C235740391EC93FB3', 'Programmable Objects\dbo\Stored Procedures\SubProcessCheckThreads.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. Also ensure that your project scripts do not contain any "USE [OtherDbName]" statements. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('4861b76c-67bf-59dc-a7a4-0620d149e7fe' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'F28EBE21F1ED02715F4B038544529B960DC909BA3E9485D9F64307B27919C63A')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\dbo\Stored Procedures\SubProcessRunEnd.sql", ID: {4861b76c-67bf-59dc-a7a4-0620d149e7fe} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('4861b76c-67bf-59dc-a7a4-0620d149e7fe' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'F28EBE21F1ED02715F4B038544529B960DC909BA3E9485D9F64307B27919C63A')
  EXECUTE ('if object_id(''[dbo].[SubProcessRunEnd]'') is not null
	drop procedure [dbo].[SubProcessRunEnd];

');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('4861b76c-67bf-59dc-a7a4-0620d149e7fe' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'F28EBE21F1ED02715F4B038544529B960DC909BA3E9485D9F64307B27919C63A')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\dbo\Stored Procedures\SubProcessRunEnd.sql", ID: {4861b76c-67bf-59dc-a7a4-0620d149e7fe} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('4861b76c-67bf-59dc-a7a4-0620d149e7fe' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'F28EBE21F1ED02715F4B038544529B960DC909BA3E9485D9F64307B27919C63A')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('4861b76c-67bf-59dc-a7a4-0620d149e7fe' AS UNIQUEIDENTIFIER), 'F28EBE21F1ED02715F4B038544529B960DC909BA3E9485D9F64307B27919C63A', 'Programmable Objects\dbo\Stored Procedures\SubProcessRunEnd.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. Also ensure that your project scripts do not contain any "USE [OtherDbName]" statements. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('c94a83fb-7764-53e8-98dc-de64fe5950be' AS UNIQUEIDENTIFIER) AND [script_checksum] = '0DB315B587C25AD77F46B900770082D5239B980A03F6623FF721ACB53DFE5D9D')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\dbo\Stored Procedures\SubProcessRunStart.sql", ID: {c94a83fb-7764-53e8-98dc-de64fe5950be} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('c94a83fb-7764-53e8-98dc-de64fe5950be' AS UNIQUEIDENTIFIER) AND [script_checksum] = '0DB315B587C25AD77F46B900770082D5239B980A03F6623FF721ACB53DFE5D9D')
  EXECUTE ('IF OBJECT_ID(''[dbo].[SubProcessRunStart]'') IS NOT NULL
	DROP PROCEDURE [dbo].[SubProcessRunStart];

');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('c94a83fb-7764-53e8-98dc-de64fe5950be' AS UNIQUEIDENTIFIER) AND [script_checksum] = '0DB315B587C25AD77F46B900770082D5239B980A03F6623FF721ACB53DFE5D9D')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\dbo\Stored Procedures\SubProcessRunStart.sql", ID: {c94a83fb-7764-53e8-98dc-de64fe5950be} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('c94a83fb-7764-53e8-98dc-de64fe5950be' AS UNIQUEIDENTIFIER) AND [script_checksum] = '0DB315B587C25AD77F46B900770082D5239B980A03F6623FF721ACB53DFE5D9D')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('c94a83fb-7764-53e8-98dc-de64fe5950be' AS UNIQUEIDENTIFIER), '0DB315B587C25AD77F46B900770082D5239B980A03F6623FF721ACB53DFE5D9D', 'Programmable Objects\dbo\Stored Procedures\SubProcessRunStart.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. Also ensure that your project scripts do not contain any "USE [OtherDbName]" statements. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('6f20a2b4-8415-5dea-be4c-9cbca551e48d' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'A45F82C7D40CB07AD99E4885D8A6B0C865192E99FE948DE2CE664B6BC4A3B59A')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\dbo\Stored Procedures\ThreadRunEnd.sql", ID: {6f20a2b4-8415-5dea-be4c-9cbca551e48d} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('6f20a2b4-8415-5dea-be4c-9cbca551e48d' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'A45F82C7D40CB07AD99E4885D8A6B0C865192E99FE948DE2CE664B6BC4A3B59A')
  EXECUTE ('if object_id(''[dbo].[ThreadRunEnd]'') is not null
	drop procedure [dbo].[ThreadRunEnd];

');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('6f20a2b4-8415-5dea-be4c-9cbca551e48d' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'A45F82C7D40CB07AD99E4885D8A6B0C865192E99FE948DE2CE664B6BC4A3B59A')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\dbo\Stored Procedures\ThreadRunEnd.sql", ID: {6f20a2b4-8415-5dea-be4c-9cbca551e48d} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('6f20a2b4-8415-5dea-be4c-9cbca551e48d' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'A45F82C7D40CB07AD99E4885D8A6B0C865192E99FE948DE2CE664B6BC4A3B59A')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('6f20a2b4-8415-5dea-be4c-9cbca551e48d' AS UNIQUEIDENTIFIER), 'A45F82C7D40CB07AD99E4885D8A6B0C865192E99FE948DE2CE664B6BC4A3B59A', 'Programmable Objects\dbo\Stored Procedures\ThreadRunEnd.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. Also ensure that your project scripts do not contain any "USE [OtherDbName]" statements. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('a266bba8-8c3d-522b-a597-4810e685652f' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'AECB219627F8B14D942824A6B9979FDCA0156C61C9AE7B7C430E7DBD259CFDDD')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\dbo\Stored Procedures\ThreadRunStart.sql", ID: {a266bba8-8c3d-522b-a597-4810e685652f} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('a266bba8-8c3d-522b-a597-4810e685652f' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'AECB219627F8B14D942824A6B9979FDCA0156C61C9AE7B7C430E7DBD259CFDDD')
  EXECUTE ('IF OBJECT_ID(''[dbo].[ThreadRunStart]'') IS NOT NULL
	DROP PROCEDURE [dbo].[ThreadRunStart];

');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('a266bba8-8c3d-522b-a597-4810e685652f' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'AECB219627F8B14D942824A6B9979FDCA0156C61C9AE7B7C430E7DBD259CFDDD')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\dbo\Stored Procedures\ThreadRunStart.sql", ID: {a266bba8-8c3d-522b-a597-4810e685652f} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('a266bba8-8c3d-522b-a597-4810e685652f' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'AECB219627F8B14D942824A6B9979FDCA0156C61C9AE7B7C430E7DBD259CFDDD')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('a266bba8-8c3d-522b-a597-4810e685652f' AS UNIQUEIDENTIFIER), 'AECB219627F8B14D942824A6B9979FDCA0156C61C9AE7B7C430E7DBD259CFDDD', 'Programmable Objects\dbo\Stored Procedures\ThreadRunStart.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. Also ensure that your project scripts do not contain any "USE [OtherDbName]" statements. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1fe6716e-0baa-5cac-ac88-90836481b5c8' AS UNIQUEIDENTIFIER) AND [script_checksum] = '23F30A36EAB9D6E7C4535CBD27BD5B9BAD25196DC7D87385B5B6161F6E3F2930')
  PRINT '

***** EXECUTING MIGRATION "Static Data\dbo.StubResultSet.Data.sql", ID: {1fe6716e-0baa-5cac-ac88-90836481b5c8} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1fe6716e-0baa-5cac-ac88-90836481b5c8' AS UNIQUEIDENTIFIER) AND [script_checksum] = '23F30A36EAB9D6E7C4535CBD27BD5B9BAD25196DC7D87385B5B6161F6E3F2930')
  EXECUTE ('--MERGE generated by ''sp_generate_merge'' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

set nocount on


merge into [dbo].[StubResultSet] as Target
using (values
  (''[ics].[ProcessRunStart]'',999,null,null,''RUN'',''FULL'',''Process Message'',null,null,null,null,null,null,null,null,null)
 ,(''[ics].[SubProcessRunStart]'',null,888,null,''RUN'',''FULL'',''Sub-Process Message'',null,null,null,null,null,null,null,null,null)
 ,(''[ics].[ThreadRunStart]'',null,null,777,''RUN'',''FULL'',''Thread Message'',''2017-07-25T00:00:00'',''2017-07-25T00:00:00'',null,null,null,null,null,null,null)
 ,(''[IcsApp].[MappingConfigTaskGetCurrentRunIds]'',999,888,777,null,null,null,null,null,null,null,null,null,null,null,null)
 ,(''[IcsApp].[SubProcessCheckThreads]'',null,888,null,null,null,null,null,null,''SUCCEEDED'',1,1,1,0,0,0)
) as Source ([FunctionName],[ProcessRunID],[SubProcessRunID],[ThreadRunID],[Instruction],[RunType],[Message],[StartCapturePoint],[EndCapturePoint],[Outcome],[ExpectedThreadCount],[ActualThreadCount],[ThreadsSucceeded],[ThreadsSkipped],[ThreadsStopped],[ThreadsFailed])
on (Target.[FunctionName] = Source.[FunctionName])
when matched and (
	nullif(Source.[ProcessRunID], Target.[ProcessRunID]) is not null or nullif(Target.[ProcessRunID], Source.[ProcessRunID]) is not null or 
	nullif(Source.[SubProcessRunID], Target.[SubProcessRunID]) is not null or nullif(Target.[SubProcessRunID], Source.[SubProcessRunID]) is not null or 
	nullif(Source.[ThreadRunID], Target.[ThreadRunID]) is not null or nullif(Target.[ThreadRunID], Source.[ThreadRunID]) is not null or 
	nullif(Source.[Instruction], Target.[Instruction]) is not null or nullif(Target.[Instruction], Source.[Instruction]) is not null or 
	nullif(Source.[RunType], Target.[RunType]) is not null or nullif(Target.[RunType], Source.[RunType]) is not null or 
	nullif(Source.[Message], Target.[Message]) is not null or nullif(Target.[Message], Source.[Message]) is not null or 
	nullif(Source.[StartCapturePoint], Target.[StartCapturePoint]) is not null or nullif(Target.[StartCapturePoint], Source.[StartCapturePoint]) is not null or 
	nullif(Source.[EndCapturePoint], Target.[EndCapturePoint]) is not null or nullif(Target.[EndCapturePoint], Source.[EndCapturePoint]) is not null or 
	nullif(Source.[Outcome], Target.[Outcome]) is not null or nullif(Target.[Outcome], Source.[Outcome]) is not null or 
	nullif(Source.[ExpectedThreadCount], Target.[ExpectedThreadCount]) is not null or nullif(Target.[ExpectedThreadCount], Source.[ExpectedThreadCount]) is not null or 
	nullif(Source.[ActualThreadCount], Target.[ActualThreadCount]) is not null or nullif(Target.[ActualThreadCount], Source.[ActualThreadCount]) is not null or 
	nullif(Source.[ThreadsSucceeded], Target.[ThreadsSucceeded]) is not null or nullif(Target.[ThreadsSucceeded], Source.[ThreadsSucceeded]) is not null or 
	nullif(Source.[ThreadsSkipped], Target.[ThreadsSkipped]) is not null or nullif(Target.[ThreadsSkipped], Source.[ThreadsSkipped]) is not null or 
	nullif(Source.[ThreadsStopped], Target.[ThreadsStopped]) is not null or nullif(Target.[ThreadsStopped], Source.[ThreadsStopped]) is not null or 
	nullif(Source.[ThreadsFailed], Target.[ThreadsFailed]) is not null or nullif(Target.[ThreadsFailed], Source.[ThreadsFailed]) is not null) then
 update set
  [ProcessRunID] = Source.[ProcessRunID], 
  [SubProcessRunID] = Source.[SubProcessRunID], 
  [ThreadRunID] = Source.[ThreadRunID], 
  [Instruction] = Source.[Instruction], 
  [RunType] = Source.[RunType], 
  [Message] = Source.[Message], 
  [StartCapturePoint] = Source.[StartCapturePoint], 
  [EndCapturePoint] = Source.[EndCapturePoint], 
  [Outcome] = Source.[Outcome], 
  [ExpectedThreadCount] = Source.[ExpectedThreadCount], 
  [ActualThreadCount] = Source.[ActualThreadCount], 
  [ThreadsSucceeded] = Source.[ThreadsSucceeded], 
  [ThreadsSkipped] = Source.[ThreadsSkipped], 
  [ThreadsStopped] = Source.[ThreadsStopped], 
  [ThreadsFailed] = Source.[ThreadsFailed]
when not matched by target then
 insert([FunctionName],[ProcessRunID],[SubProcessRunID],[ThreadRunID],[Instruction],[RunType],[Message],[StartCapturePoint],[EndCapturePoint],[Outcome],[ExpectedThreadCount],[ActualThreadCount],[ThreadsSucceeded],[ThreadsSkipped],[ThreadsStopped],[ThreadsFailed])
 values(Source.[FunctionName],Source.[ProcessRunID],Source.[SubProcessRunID],Source.[ThreadRunID],Source.[Instruction],Source.[RunType],Source.[Message],Source.[StartCapturePoint],Source.[EndCapturePoint],Source.[Outcome],Source.[ExpectedThreadCount],Source.[ActualThreadCount],Source.[ThreadsSucceeded],Source.[ThreadsSkipped],Source.[ThreadsStopped],Source.[ThreadsFailed])
when not matched by source then 
 delete
;
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1fe6716e-0baa-5cac-ac88-90836481b5c8' AS UNIQUEIDENTIFIER) AND [script_checksum] = '23F30A36EAB9D6E7C4535CBD27BD5B9BAD25196DC7D87385B5B6161F6E3F2930')
  EXECUTE ('declare @mergeError int
 , @mergeCount int
select @mergeError = @@error, @mergeCount = @@rowcount
if @mergeError != 0
 begin
 print ''ERROR OCCURRED IN MERGE FOR [dbo].[StubResultSet]. Rows affected: '' + cast(@mergeCount as varchar(100)); -- SQL should always return zero rows affected
 end
else
 begin
 print ''[dbo].[StubResultSet] rows affected by MERGE: '' + cast(@mergeCount as varchar(100));
 end
');

GO
SET NOCOUNT OFF;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1fe6716e-0baa-5cac-ac88-90836481b5c8' AS UNIQUEIDENTIFIER) AND [script_checksum] = '23F30A36EAB9D6E7C4535CBD27BD5B9BAD25196DC7D87385B5B6161F6E3F2930')
  PRINT '***** FINISHED EXECUTING MIGRATION "Static Data\dbo.StubResultSet.Data.sql", ID: {1fe6716e-0baa-5cac-ac88-90836481b5c8} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1fe6716e-0baa-5cac-ac88-90836481b5c8' AS UNIQUEIDENTIFIER) AND [script_checksum] = '23F30A36EAB9D6E7C4535CBD27BD5B9BAD25196DC7D87385B5B6161F6E3F2930')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('1fe6716e-0baa-5cac-ac88-90836481b5c8' AS UNIQUEIDENTIFIER), '23F30A36EAB9D6E7C4535CBD27BD5B9BAD25196DC7D87385B5B6161F6E3F2930', 'Static Data\dbo.StubResultSet.Data.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. Also ensure that your project scripts do not contain any "USE [OtherDbName]" statements. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ff6c22f0-34e6-51d1-9b8a-1e9e18d39e88' AS UNIQUEIDENTIFIER) AND [script_checksum] = '23C5BBB432C905255FAC41314717ABD387D25015848D67B33135DBA6731CBD42')
  PRINT '

***** EXECUTING MIGRATION "Static Data\log4Private.JournalControl.data.sql", ID: {ff6c22f0-34e6-51d1-9b8a-1e9e18d39e88} *****';

GO
SET NOCOUNT ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ff6c22f0-34e6-51d1-9b8a-1e9e18d39e88' AS UNIQUEIDENTIFIER) AND [script_checksum] = '23C5BBB432C905255FAC41314717ABD387D25015848D67B33135DBA6731CBD42')
  EXECUTE ('
merge into [log4Private].[JournalControl] as Target
using (values
  (''SYSTEM_DEFAULT'',''ON'')
 ,(''SYSTEM_OVERRIDE'',''ON'')
) as Source ([ModuleName],[OnOffSwitch])
on (Target.[ModuleName] = Source.[ModuleName])
when matched and (
	nullif(Source.[OnOffSwitch], Target.[OnOffSwitch]) is not null or nullif(Target.[OnOffSwitch], Source.[OnOffSwitch]) is not null) then
 update set
  [OnOffSwitch] = Source.[OnOffSwitch]
when not matched by target then
 insert([ModuleName],[OnOffSwitch])
 values(Source.[ModuleName],Source.[OnOffSwitch])
when not matched by source then 
 delete
;
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ff6c22f0-34e6-51d1-9b8a-1e9e18d39e88' AS UNIQUEIDENTIFIER) AND [script_checksum] = '23C5BBB432C905255FAC41314717ABD387D25015848D67B33135DBA6731CBD42')
  EXECUTE ('declare @mergeError int
 , @mergeCount int
select @mergeError = @@error, @mergeCount = @@rowcount
if @mergeError != 0
 begin
 print ''ERROR OCCURRED IN MERGE FOR [log4Private].[JournalControl]. Rows affected: '' + cast(@mergeCount as varchar(100)); -- SQL should always return zero rows affected
 end
else
 begin
 print ''[log4Private].[JournalControl] rows affected by MERGE: '' + cast(@mergeCount as varchar(100));
 end
');

GO
SET NOCOUNT OFF;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ff6c22f0-34e6-51d1-9b8a-1e9e18d39e88' AS UNIQUEIDENTIFIER) AND [script_checksum] = '23C5BBB432C905255FAC41314717ABD387D25015848D67B33135DBA6731CBD42')
  PRINT '***** FINISHED EXECUTING MIGRATION "Static Data\log4Private.JournalControl.data.sql", ID: {ff6c22f0-34e6-51d1-9b8a-1e9e18d39e88} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('ff6c22f0-34e6-51d1-9b8a-1e9e18d39e88' AS UNIQUEIDENTIFIER) AND [script_checksum] = '23C5BBB432C905255FAC41314717ABD387D25015848D67B33135DBA6731CBD42')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('ff6c22f0-34e6-51d1-9b8a-1e9e18d39e88' AS UNIQUEIDENTIFIER), '23C5BBB432C905255FAC41314717ABD387D25015848D67B33135DBA6731CBD42', 'Static Data\log4Private.JournalControl.data.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. Also ensure that your project scripts do not contain any "USE [OtherDbName]" statements. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('265aaab9-1a36-5f05-b9a1-e076442aa545' AS UNIQUEIDENTIFIER) AND [script_checksum] = '81D77E42F51728BD6F579AE9AA1492B34AA0EDA4D53837AF6AD4C54B6857663C')
  PRINT '

***** EXECUTING MIGRATION "Static Data\log4Private.Severity.data.sql", ID: {265aaab9-1a36-5f05-b9a1-e076442aa545} *****';

GO
SET NOCOUNT ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('265aaab9-1a36-5f05-b9a1-e076442aa545' AS UNIQUEIDENTIFIER) AND [script_checksum] = '81D77E42F51728BD6F579AE9AA1492B34AA0EDA4D53837AF6AD4C54B6857663C')
  EXECUTE ('
merge into [log4Private].[Severity] as Target
using (values
  (1,''Showstopper/Critical Failure'')
 ,(2,''Severe Failure'')
 ,(4,''Major Failure'')
 ,(8,''Moderate Failure'')
 ,(16,''Minor Failure'')
 ,(32,''Concurrency Violation'')
 ,(256,''Informational'')
 ,(512,''Success'')
 ,(1024,''Debug'')
) as Source ([SeverityId],[SeverityName])
on (Target.[SeverityId] = Source.[SeverityId])
when matched and (
	nullif(Source.[SeverityName], Target.[SeverityName]) is not null or nullif(Target.[SeverityName], Source.[SeverityName]) is not null) then
 update set
  [SeverityName] = Source.[SeverityName]
when not matched by target then
 insert([SeverityId],[SeverityName])
 values(Source.[SeverityId],Source.[SeverityName])
when not matched by source then 
 delete
;
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('265aaab9-1a36-5f05-b9a1-e076442aa545' AS UNIQUEIDENTIFIER) AND [script_checksum] = '81D77E42F51728BD6F579AE9AA1492B34AA0EDA4D53837AF6AD4C54B6857663C')
  EXECUTE ('declare @mergeError int
 , @mergeCount int
select @mergeError = @@error, @mergeCount = @@rowcount
if @mergeError != 0
 begin
 print ''ERROR OCCURRED IN MERGE FOR [log4Private].[Severity]. Rows affected: '' + cast(@mergeCount as varchar(100)); -- SQL should always return zero rows affected
 end
else
 begin
 print ''[log4Private].[Severity] rows affected by MERGE: '' + cast(@mergeCount as varchar(100));
 end
');

GO
SET NOCOUNT OFF;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('265aaab9-1a36-5f05-b9a1-e076442aa545' AS UNIQUEIDENTIFIER) AND [script_checksum] = '81D77E42F51728BD6F579AE9AA1492B34AA0EDA4D53837AF6AD4C54B6857663C')
  PRINT '***** FINISHED EXECUTING MIGRATION "Static Data\log4Private.Severity.data.sql", ID: {265aaab9-1a36-5f05-b9a1-e076442aa545} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('265aaab9-1a36-5f05-b9a1-e076442aa545' AS UNIQUEIDENTIFIER) AND [script_checksum] = '81D77E42F51728BD6F579AE9AA1492B34AA0EDA4D53837AF6AD4C54B6857663C')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('265aaab9-1a36-5f05-b9a1-e076442aa545' AS UNIQUEIDENTIFIER), '81D77E42F51728BD6F579AE9AA1492B34AA0EDA4D53837AF6AD4C54B6857663C', 'Static Data\log4Private.Severity.data.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. Also ensure that your project scripts do not contain any "USE [OtherDbName]" statements. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('5179b23f-b32a-57bf-b334-257a75c4c7f7' AS UNIQUEIDENTIFIER) AND [script_checksum] = '955217DFA8A19B3E2E0648460E9C364E847C7323066166B3115BFB1A4C48F139')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\batch\Stored Procedures\ProcessGetIdFromIcrtProcessName.sql", ID: {5179b23f-b32a-57bf-b334-257a75c4c7f7} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('5179b23f-b32a-57bf-b334-257a75c4c7f7' AS UNIQUEIDENTIFIER) AND [script_checksum] = '955217DFA8A19B3E2E0648460E9C364E847C7323066166B3115BFB1A4C48F139')
  EXECUTE ('IF OBJECT_ID(''[batch].[ProcessGetIdFromIcrtProcessName]'') IS NOT NULL
	DROP PROCEDURE [batch].[ProcessGetIdFromIcrtProcessName];

');

GO
SET QUOTED_IDENTIFIER ON;

GO
SET ANSI_NULLS ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('5179b23f-b32a-57bf-b334-257a75c4c7f7' AS UNIQUEIDENTIFIER) AND [script_checksum] = '955217DFA8A19B3E2E0648460E9C364E847C7323066166B3115BFB1A4C48F139')
  EXECUTE ('create procedure [batch].[ProcessGetIdFromIcrtProcessName]
(
  @IcrtProcessName varchar(100)
, @BatchProcessName varchar(100) = null
, @BatchProcessId int = null out
)
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
FUNCTION NAME:  batch.ProcessGetIdFromIcrtProcessName
DESCRIPTION:    Outputs the Id for the Batch Process indicated by the specified ICRT Process (creating a new entry
				if not found)
AUTHOR:         Greg M. Lucas
ORIGIN DATE:    03-AUG-2017

Additional Notes
================

REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		03-AUG-2017		GML		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------

**********************************************************************************************************************/
--</CommentHeader>

begin
	set nocount on;

	--! Standard/ExceptionHandler variables
	declare	@_FunctionName nvarchar(255) = quotename(object_schema_name(@@procid)) + ''.'' + quotename(object_name(@@procid));
	declare	@_Error int = 0;
	declare @_RowCount int = 0;
	declare	@_ErrorContext nvarchar(512);
	declare	@_Message nvarchar(512);
	declare	@_Step varchar(128);

	--! Find out if we are already in a transaction
	declare	@_TxnIsExternal bit = case when @@trancount > 0 then 1 else 0 end;

	begin try
		set @_Step = ''Validate Inputs'';
		if coalesce(@IcrtProcessName, '''') = '''' raiserror(''ICRT Process Name input must not be null or empty'', 16, 1);

		--! We need to allow a Batch Process name to be provided but if it isn''t, use the ICRT Process Name
		set @BatchProcessName = isnull(nullif(@BatchProcessName, ''''), @IcrtProcessName);

		--! As we have multiple steps, if there no outer transaction,
		--! use an explicit transaction from this point forward 
		if @_TxnIsExternal = 0 begin tran;

		set @_Step = ''Get Id'';
		select @BatchProcessId = BatchProcessId from batch.Process where IcrtProcessName = @IcrtProcessName ;

		if @BatchProcessId is null
			begin
				set @_Step = ''Add Missing'';

				set @BatchProcessId = coalesce((select max(BatchProcessId) from batch.Process) + 1, 1) ;
				
				insert batch.Process(BatchProcessId, BatchProcessName, IcrtProcessName) values (@BatchProcessId, @BatchProcessName, @IcrtProcessName);
			end

		--!
		--! Only commit transactions started within this procedure
		--!
		if @_TxnIsExternal = 0 and (xact_state() = 1 or @@trancount > 0) commit tran ;
	end try
	begin catch
		set @_ErrorContext = ''Failed to get Batch Process Id for ICRT process: '' + coalesce(''"'' + @IcrtProcessName + ''"'', ''NULL'')
				+ '' at step: ['' + coalesce(@_Step, ''NULL'') + '']''
				+ '' (Process Id: '' + coalesce(cast(@BatchProcessId as varchar(16)), ''NULL'') + '')'' ;

		--! If we have an uncommittable transaction (see BOL), or a deadlock we can''t
		--! do anything else until we roll that back. Alternatively, if we started
		--! the transaction we should roll it back otherwise or let the caller handle
		--! its own external txn 
		if (xact_state() = -1) or (xact_state() = 1 and error_number() = 1205) or (xact_state() = 1 and @_TxnIsExternal = 0)
			begin
				rollback tran;
				set @_ErrorContext = @_ErrorContext + '' (Forced roll back all changes)'';
			end

		exec log4.ExceptionHandler
				  @ErrorContext   = @_ErrorContext
				, @ErrorProcedure = @_FunctionName
				, @ErrorNumber    = @_Error out
				, @ReturnMessage  = @_Message out
		;
	end catch

--/////////////////////////////////////////////////////////////////////////////////////////////////
EndEx:
--/////////////////////////////////////////////////////////////////////////////////////////////////

	--! Finally, throw an exception that will be detected by the caller
	if @_Error > 0 raiserror(@_Message, 16, 99);

	set nocount off;

	--! Return the value of @@ERROR (which will be zero on success)
	return (@_Error);
end
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('5179b23f-b32a-57bf-b334-257a75c4c7f7' AS UNIQUEIDENTIFIER) AND [script_checksum] = '955217DFA8A19B3E2E0648460E9C364E847C7323066166B3115BFB1A4C48F139')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Outputs the Id for the Batch Process indicated by the specified ICRT Process (creating a new entry if not found)'', ''SCHEMA'', N''batch'', ''PROCEDURE'', N''ProcessGetIdFromIcrtProcessName'', NULL, NULL
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('5179b23f-b32a-57bf-b334-257a75c4c7f7' AS UNIQUEIDENTIFIER) AND [script_checksum] = '955217DFA8A19B3E2E0648460E9C364E847C7323066166B3115BFB1A4C48F139')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Optional output, the database-specific unique identifier for batch process that is managed/run by the specified ICRT process'', ''SCHEMA'', N''batch'', ''PROCEDURE'', N''ProcessGetIdFromIcrtProcessName'', ''PARAMETER'', N''@BatchProcessId''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('5179b23f-b32a-57bf-b334-257a75c4c7f7' AS UNIQUEIDENTIFIER) AND [script_checksum] = '955217DFA8A19B3E2E0648460E9C364E847C7323066166B3115BFB1A4C48F139')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Optional, the user-friendly name for a Batch Process'', ''SCHEMA'', N''batch'', ''PROCEDURE'', N''ProcessGetIdFromIcrtProcessName'', ''PARAMETER'', N''@BatchProcessName''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('5179b23f-b32a-57bf-b334-257a75c4c7f7' AS UNIQUEIDENTIFIER) AND [script_checksum] = '955217DFA8A19B3E2E0648460E9C364E847C7323066166B3115BFB1A4C48F139')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Mandatory, the unique physical name of the ICRT process that is responsible for running a batch'', ''SCHEMA'', N''batch'', ''PROCEDURE'', N''ProcessGetIdFromIcrtProcessName'', ''PARAMETER'', N''@IcrtProcessName''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('5179b23f-b32a-57bf-b334-257a75c4c7f7' AS UNIQUEIDENTIFIER) AND [script_checksum] = '955217DFA8A19B3E2E0648460E9C364E847C7323066166B3115BFB1A4C48F139')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\batch\Stored Procedures\ProcessGetIdFromIcrtProcessName.sql", ID: {5179b23f-b32a-57bf-b334-257a75c4c7f7} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('5179b23f-b32a-57bf-b334-257a75c4c7f7' AS UNIQUEIDENTIFIER) AND [script_checksum] = '955217DFA8A19B3E2E0648460E9C364E847C7323066166B3115BFB1A4C48F139')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('5179b23f-b32a-57bf-b334-257a75c4c7f7' AS UNIQUEIDENTIFIER), '955217DFA8A19B3E2E0648460E9C364E847C7323066166B3115BFB1A4C48F139', 'Programmable Objects\batch\Stored Procedures\ProcessGetIdFromIcrtProcessName.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. Also ensure that your project scripts do not contain any "USE [OtherDbName]" statements. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('aba781f3-f8e0-5a75-8e4a-51fee3df6714' AS UNIQUEIDENTIFIER) AND [script_checksum] = '4E7CA8F69025DEFFF10AA95BD74FDC406A6D6F57BA1F2731CED22D389D4DD84B')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\ics\Stored Procedures\BatchGetIdFromProcessName.sql", ID: {aba781f3-f8e0-5a75-8e4a-51fee3df6714} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('aba781f3-f8e0-5a75-8e4a-51fee3df6714' AS UNIQUEIDENTIFIER) AND [script_checksum] = '4E7CA8F69025DEFFF10AA95BD74FDC406A6D6F57BA1F2731CED22D389D4DD84B')
  EXECUTE ('IF OBJECT_ID(''[ics].[BatchGetIdFromProcessName]'') IS NOT NULL
	DROP PROCEDURE [ics].[BatchGetIdFromProcessName];

');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('aba781f3-f8e0-5a75-8e4a-51fee3df6714' AS UNIQUEIDENTIFIER) AND [script_checksum] = '4E7CA8F69025DEFFF10AA95BD74FDC406A6D6F57BA1F2731CED22D389D4DD84B')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\ics\Stored Procedures\BatchGetIdFromProcessName.sql", ID: {aba781f3-f8e0-5a75-8e4a-51fee3df6714} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('aba781f3-f8e0-5a75-8e4a-51fee3df6714' AS UNIQUEIDENTIFIER) AND [script_checksum] = '4E7CA8F69025DEFFF10AA95BD74FDC406A6D6F57BA1F2731CED22D389D4DD84B')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('aba781f3-f8e0-5a75-8e4a-51fee3df6714' AS UNIQUEIDENTIFIER), '4E7CA8F69025DEFFF10AA95BD74FDC406A6D6F57BA1F2731CED22D389D4DD84B', 'Programmable Objects\ics\Stored Procedures\BatchGetIdFromProcessName.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. Also ensure that your project scripts do not contain any "USE [OtherDbName]" statements. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d97c8bf2-6979-5773-9063-b5bc29f01103' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'BBEC20BB69F5547C4A0B5DC99CAF5714170B2740BB6307047AF91DA0086CE5B9')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\ics\Stored Procedures\IcrtSubProcessGetId.sql", ID: {d97c8bf2-6979-5773-9063-b5bc29f01103} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d97c8bf2-6979-5773-9063-b5bc29f01103' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'BBEC20BB69F5547C4A0B5DC99CAF5714170B2740BB6307047AF91DA0086CE5B9')
  EXECUTE ('IF OBJECT_ID(''[ics].[IcrtSubProcessGetId]'') IS NOT NULL
	DROP PROCEDURE [ics].[IcrtSubProcessGetId];

');

GO
SET QUOTED_IDENTIFIER ON;

GO
SET ANSI_NULLS ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d97c8bf2-6979-5773-9063-b5bc29f01103' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'BBEC20BB69F5547C4A0B5DC99CAF5714170B2740BB6307047AF91DA0086CE5B9')
  EXECUTE ('create procedure [ics].[IcrtSubProcessGetId]
(
  @IcrtSubProcessName varchar(100)
, @BatchProcessId int
, @IcrtSubProcessId int = null out
)
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
FUNCTION NAME:  ics.IcrtSubProcessGetId
DESCRIPTION:    Creates an entry for the specified ICRT sub-process if not already present then outputs the Id
AUTHOR:         Greg M. Lucas
ORIGIN DATE:    02-AUG-2017

Additional Notes
================

REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		02-AUG-2017		GML		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------

**********************************************************************************************************************/
--</CommentHeader>

begin
	set nocount on;

	--! Standard/ExceptionHandler variables
	declare	@_FunctionName nvarchar(255) = quotename(object_schema_name(@@procid)) + ''.'' + quotename(object_name(@@procid));
	declare	@_Error int = 0;
	declare @_RowCount int = 0;
	declare	@_ErrorContext nvarchar(512);
	declare	@_Message nvarchar(512);
	declare	@_Step varchar(128);

	--! Find out if we are already in a transaction
	declare	@_TxnIsExternal bit = case when @@trancount > 0 then 1 else 0 end;

	begin try
		set @_Step = ''Validate Inputs'';
		if coalesce(@IcrtSubProcessName, '''') = '''' raiserror(''ICRT Sub-process Name input must not be null or empty'', 16, 1);
		if coalesce(@BatchProcessId, 0) !> 0 raiserror(''Batch Process Id (derived from ICRT process name) must be greater than zero'', 16, 1);

		--! As we have multiple steps, if there no outer transaction,
		--! use an explicit transaction from this point forward 
		if @_TxnIsExternal = 0 begin tran;

		set @_Step = ''Get Id'';
		select @IcrtSubProcessId = IcrtSubProcessId from ics.IcrtSubProcess where IcrtSubProcessName = @IcrtSubProcessName ;

		if @IcrtSubProcessId is null
			begin
				set @_Step = ''Add Missing'';

				set @IcrtSubProcessId = coalesce((select max(IcrtSubProcessId) from ics.IcrtSubProcess) + 1, 1) ;
				
				insert ics.IcrtSubProcess(IcrtSubProcessId, IcrtSubProcessName, BatchProcessId) values (@IcrtSubProcessId, @IcrtSubProcessName, @BatchProcessId);
			end

		--!
		--! Only commit transactions started within this procedure
		--!
		if @_TxnIsExternal = 0 and (xact_state() = 1 or @@trancount > 0) commit tran ;
	end try
	begin catch
		set @_ErrorContext = ''Failed to get Id for IcrtSubProcess: '' + coalesce(''"'' + @IcrtSubProcessName + ''"'', ''NULL'')
				+ '' and Batch Process Id: '' + coalesce(cast(@BatchProcessId as varchar(16)), ''NULL'')
				+ '' at step: ['' + coalesce(@_Step, ''NULL'') + '']''
				+ '' (IcrtSubProcess Id: '' + coalesce(cast(@IcrtSubProcessId as varchar(16)), ''NULL'') + '')'' ;

		--! If we have an uncommittable transaction (see BOL), or a deadlock we can''t
		--! do anything else until we roll that back. Alternatively, if we started
		--! the transaction we should roll it back otherwise or let the caller handle
		--! its own external txn 
		if (xact_state() = -1) or (xact_state() = 1 and error_number() = 1205) or (xact_state() = 1 and @_TxnIsExternal = 0)
			begin
				rollback tran;
				set @_ErrorContext = @_ErrorContext + '' (Forced roll back all changes)'';
			end

		exec log4.ExceptionHandler
				  @ErrorContext   = @_ErrorContext
				, @ErrorProcedure = @_FunctionName
				, @ErrorNumber    = @_Error out
				, @ReturnMessage  = @_Message out
		;
	end catch

--/////////////////////////////////////////////////////////////////////////////////////////////////
EndEx:
--/////////////////////////////////////////////////////////////////////////////////////////////////

	--! Finally, throw an exception that will be detected by the caller
	if @_Error > 0 raiserror(@_Message, 16, 99);

	set nocount off;

	--! Return the value of @@ERROR (which will be zero on success)
	return (@_Error);
end
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d97c8bf2-6979-5773-9063-b5bc29f01103' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'BBEC20BB69F5547C4A0B5DC99CAF5714170B2740BB6307047AF91DA0086CE5B9')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Database-specific unique identifier for the batch process that is associated with the (master) process of this sub-process'', ''SCHEMA'', N''ics'', ''PROCEDURE'', N''IcrtSubProcessGetId'', ''PARAMETER'', N''@BatchProcessId''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d97c8bf2-6979-5773-9063-b5bc29f01103' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'BBEC20BB69F5547C4A0B5DC99CAF5714170B2740BB6307047AF91DA0086CE5B9')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Creates an entry for the specified ICRT sub-process if not already present then outputs the Id'', ''SCHEMA'', N''ics'', ''PROCEDURE'', N''IcrtSubProcessGetId'', NULL, NULL
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d97c8bf2-6979-5773-9063-b5bc29f01103' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'BBEC20BB69F5547C4A0B5DC99CAF5714170B2740BB6307047AF91DA0086CE5B9')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Database-specific unique identifier for an ICRT sub-process'', ''SCHEMA'', N''ics'', ''PROCEDURE'', N''IcrtSubProcessGetId'', ''PARAMETER'', N''@IcrtSubProcessId''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d97c8bf2-6979-5773-9063-b5bc29f01103' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'BBEC20BB69F5547C4A0B5DC99CAF5714170B2740BB6307047AF91DA0086CE5B9')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''The unique physical name of the ICRT sub-process'', ''SCHEMA'', N''ics'', ''PROCEDURE'', N''IcrtSubProcessGetId'', ''PARAMETER'', N''@IcrtSubProcessName''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d97c8bf2-6979-5773-9063-b5bc29f01103' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'BBEC20BB69F5547C4A0B5DC99CAF5714170B2740BB6307047AF91DA0086CE5B9')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\ics\Stored Procedures\IcrtSubProcessGetId.sql", ID: {d97c8bf2-6979-5773-9063-b5bc29f01103} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('d97c8bf2-6979-5773-9063-b5bc29f01103' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'BBEC20BB69F5547C4A0B5DC99CAF5714170B2740BB6307047AF91DA0086CE5B9')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('d97c8bf2-6979-5773-9063-b5bc29f01103' AS UNIQUEIDENTIFIER), 'BBEC20BB69F5547C4A0B5DC99CAF5714170B2740BB6307047AF91DA0086CE5B9', 'Programmable Objects\ics\Stored Procedures\IcrtSubProcessGetId.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. Also ensure that your project scripts do not contain any "USE [OtherDbName]" statements. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('3ded4893-b2d7-5038-af87-836bb05ff4d1' AS UNIQUEIDENTIFIER) AND [script_checksum] = '1C87855AB6C64E60216D74517EF68F0E490427DB350112A76ABB2940453125BC')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\ics\Stored Procedures\MappingConfigTaskGetId.sql", ID: {3ded4893-b2d7-5038-af87-836bb05ff4d1} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('3ded4893-b2d7-5038-af87-836bb05ff4d1' AS UNIQUEIDENTIFIER) AND [script_checksum] = '1C87855AB6C64E60216D74517EF68F0E490427DB350112A76ABB2940453125BC')
  EXECUTE ('IF OBJECT_ID(''[ics].[MappingConfigTaskGetId]'') IS NOT NULL
	DROP PROCEDURE [ics].[MappingConfigTaskGetId];

');

GO
SET QUOTED_IDENTIFIER ON;

GO
SET ANSI_NULLS ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('3ded4893-b2d7-5038-af87-836bb05ff4d1' AS UNIQUEIDENTIFIER) AND [script_checksum] = '1C87855AB6C64E60216D74517EF68F0E490427DB350112A76ABB2940453125BC')
  EXECUTE ('create procedure [ics].[MappingConfigTaskGetId]
(
  @MappingConfigTaskName varchar(100)
, @MappingName varchar(100)
, @MappingConfigTaskId int = null out
)
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
FUNCTION NAME:  ics.MappingConfigTaskGetId
DESCRIPTION:    Creates an entry for the specified ICS Mapping Config Task if not already present then outputs the Id
AUTHOR:         Greg M. Lucas
ORIGIN DATE:    02-AUG-2017

Additional Notes
================

REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		02-AUG-2017		GML		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------

**********************************************************************************************************************/
--</CommentHeader>

begin
	set nocount on;

	--! Standard/ExceptionHandler variables
	declare	@_FunctionName nvarchar(255) = quotename(object_schema_name(@@procid)) + ''.'' + quotename(object_name(@@procid));
	declare	@_Error int = 0;
	declare @_RowCount int = 0;
	declare	@_ErrorContext nvarchar(512);
	declare	@_Message nvarchar(512);
	declare	@_Step varchar(128);

	--! Find out if we are already in a transaction
	declare	@_TxnIsExternal bit = case when @@trancount > 0 then 1 else 0 end;

	begin try
		set @_Step = ''Validate Inputs'';
		if coalesce(@MappingConfigTaskName, '''') = '''' raiserror(''Mapping Config Task Name input must not be null or empty'', 16, 1);
		if coalesce(@MappingName, '''') = '''' raiserror(''Mapping Name input must not be null or empty'', 16, 1);

		--! As we have multiple steps, if there no outer transaction,
		--! use an explicit transaction from this point forward 
		if @_TxnIsExternal = 0 begin tran;

		set @_Step = ''Get Id'';
		select @MappingConfigTaskId = MappingConfigTaskId from ics.MappingConfigTask where MappingConfigTaskName = @MappingConfigTaskName and MappingName = @MappingName;

		if @MappingConfigTaskId is null
			begin
				set @_Step = ''Add Missing'';

				set @MappingConfigTaskId = coalesce((select max(MappingConfigTaskId) from ics.MappingConfigTask) + 1, 1) ;
				
				insert ics.MappingConfigTask(MappingConfigTaskId, MappingConfigTaskName, MappingName) values (@MappingConfigTaskId, @MappingConfigTaskName, @MappingName);
			end

		--!
		--! Only commit transactions started within this procedure
		--!
		if @_TxnIsExternal = 0 and (xact_state() = 1 or @@trancount > 0) commit tran ;
	end try
	begin catch
		set @_ErrorContext = ''Failed to get Id for MappingConfigTask: '' + coalesce(''"'' + @MappingConfigTaskName + ''"'', ''NULL'')
				+ '' and Mapping: '' + coalesce(''"'' + @MappingName + ''"'', ''NULL'')
				+ '' at step: ['' + coalesce(@_Step, ''NULL'') + '']''
				+ '' (MappingConfigTask Id: '' + coalesce(cast(@MappingConfigTaskId as varchar(16)), ''NULL'') + '')'' ;

		--! If we have an uncommittable transaction (see BOL), or a deadlock we can''t
		--! do anything else until we roll that back. Alternatively, if we started
		--! the transaction we should roll it back otherwise or let the caller handle
		--! its own external txn 
		if (xact_state() = -1) or (xact_state() = 1 and error_number() = 1205) or (xact_state() = 1 and @_TxnIsExternal = 0)
			begin
				rollback tran;
				set @_ErrorContext = @_ErrorContext + '' (Forced roll back all changes)'';
			end

		exec log4.ExceptionHandler
				  @ErrorContext   = @_ErrorContext
				, @ErrorProcedure = @_FunctionName
				, @ErrorNumber    = @_Error out
				, @ReturnMessage  = @_Message out
		;
	end catch

--/////////////////////////////////////////////////////////////////////////////////////////////////
EndEx:
--/////////////////////////////////////////////////////////////////////////////////////////////////

	--! Finally, throw an exception that will be detected by the caller
	if @_Error > 0 raiserror(@_Message, 16, 99);

	set nocount off;

	--! Return the value of @@ERROR (which will be zero on success)
	return (@_Error);
end

');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('3ded4893-b2d7-5038-af87-836bb05ff4d1' AS UNIQUEIDENTIFIER) AND [script_checksum] = '1C87855AB6C64E60216D74517EF68F0E490427DB350112A76ABB2940453125BC')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Creates an entry for the specified ICS Mapping Config Task if not already present then outputs the Id'', ''SCHEMA'', N''ics'', ''PROCEDURE'', N''MappingConfigTaskGetId'', NULL, NULL
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('3ded4893-b2d7-5038-af87-836bb05ff4d1' AS UNIQUEIDENTIFIER) AND [script_checksum] = '1C87855AB6C64E60216D74517EF68F0E490427DB350112A76ABB2940453125BC')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Database-specific unique identifier for an ICS Mapping Config Task'', ''SCHEMA'', N''ics'', ''PROCEDURE'', N''MappingConfigTaskGetId'', ''PARAMETER'', N''@MappingConfigTaskId''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('3ded4893-b2d7-5038-af87-836bb05ff4d1' AS UNIQUEIDENTIFIER) AND [script_checksum] = '1C87855AB6C64E60216D74517EF68F0E490427DB350112A76ABB2940453125BC')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''The unique physical name of the ICS Mapping Config Task'', ''SCHEMA'', N''ics'', ''PROCEDURE'', N''MappingConfigTaskGetId'', ''PARAMETER'', N''@MappingConfigTaskName''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('3ded4893-b2d7-5038-af87-836bb05ff4d1' AS UNIQUEIDENTIFIER) AND [script_checksum] = '1C87855AB6C64E60216D74517EF68F0E490427DB350112A76ABB2940453125BC')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''The physical name of the ICS Mapping contained in the ICS MappingsConfig Task'', ''SCHEMA'', N''ics'', ''PROCEDURE'', N''MappingConfigTaskGetId'', ''PARAMETER'', N''@MappingName''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('3ded4893-b2d7-5038-af87-836bb05ff4d1' AS UNIQUEIDENTIFIER) AND [script_checksum] = '1C87855AB6C64E60216D74517EF68F0E490427DB350112A76ABB2940453125BC')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\ics\Stored Procedures\MappingConfigTaskGetId.sql", ID: {3ded4893-b2d7-5038-af87-836bb05ff4d1} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('3ded4893-b2d7-5038-af87-836bb05ff4d1' AS UNIQUEIDENTIFIER) AND [script_checksum] = '1C87855AB6C64E60216D74517EF68F0E490427DB350112A76ABB2940453125BC')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('3ded4893-b2d7-5038-af87-836bb05ff4d1' AS UNIQUEIDENTIFIER), '1C87855AB6C64E60216D74517EF68F0E490427DB350112A76ABB2940453125BC', 'Programmable Objects\ics\Stored Procedures\MappingConfigTaskGetId.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. Also ensure that your project scripts do not contain any "USE [OtherDbName]" statements. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1b204990-a5e2-5e79-899d-be4a461f7d1c' AS UNIQUEIDENTIFIER) AND [script_checksum] = '89BE9ADA51DAD58007504B7DBCCCE54635323C15D63A426C1C11BD4CD06EB796')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\ics\Stored Procedures\ProcessRunEnd.sql", ID: {1b204990-a5e2-5e79-899d-be4a461f7d1c} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1b204990-a5e2-5e79-899d-be4a461f7d1c' AS UNIQUEIDENTIFIER) AND [script_checksum] = '89BE9ADA51DAD58007504B7DBCCCE54635323C15D63A426C1C11BD4CD06EB796')
  EXECUTE ('IF OBJECT_ID(''[ics].[ProcessRunEnd]'') IS NOT NULL
	DROP PROCEDURE [ics].[ProcessRunEnd];

');

GO
SET QUOTED_IDENTIFIER ON;

GO
SET ANSI_NULLS ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1b204990-a5e2-5e79-899d-be4a461f7d1c' AS UNIQUEIDENTIFIER) AND [script_checksum] = '89BE9ADA51DAD58007504B7DBCCCE54635323C15D63A426C1C11BD4CD06EB796')
  EXECUTE ('create   proc [ics].[ProcessRunEnd]
(
  @ProcessName varchar(100)
, @ProcessRunId int
, @EndState varchar(16)
, @EndMessage varchar(500) = null
)
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
PROCEDURE NAME:		ics.ProcessRunEnd
DESCRIPTION:		POC stub procedure
ORIGIN DATE:		25-JUL-2017
ORIGINAL AUTHOR:	Razia Nazir

Returns
=======
@@Error - always zero on success

Additional Notes
================
Stubs

REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		25-JUL-2017		RN		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------
**********************************************************************************************************************/
--</CommentHeader>

begin
	set nocount on ;

	--! Standard/ExceptionHandler variables
	declare	@_FunctionName nvarchar(255) = quotename(object_schema_name(@@procid)) + ''.'' + quotename(object_name(@@procid));
	declare	@_Error int = 0;
	declare @_RowCount int = 0;
	declare @_ReturnValue int = 0;
	declare	@_Message nvarchar(512);
	declare	@_ErrorContext nvarchar(512);
	declare	@_Step varchar(128);
	declare	@_ExceptionId int;

	begin try
		set @_Step = ''Record POC'' ;

		/*===============================================================================================*/
		/**/	set @_Message = ''Record end of Process run - Not Yet Implemented''
		/**/		+ '' for ICRT Process: '' + coalesce(''"'' + @ProcessName + ''"'', ''NULL'')
		/**/		+ '' and (BatMan) Process Run Id: '' + coalesce(cast(@ProcessRunId as varchar(32)), ''NULL'')
		/**/		+ '' with End State: '' + coalesce(''['' + @EndState + '']'', ''NULL'')
		/*===============================================================================================*/

	end try
	begin catch
		set @_ErrorContext = ''Failed to record end of process run''
			+ '' for ICRT Process: '' + coalesce(''"'' + @ProcessName + ''"'', ''NULL'')
			+ '' and (BatMan) Process Run Id: '' + coalesce(cast(@ProcessRunId as varchar(32)), ''NULL'')
			+ '' with End State: '' + coalesce(''['' + @EndState + '']'', ''NULL'')
			+ '' at step: '' + coalesce(''['' + @_Step + '']'', ''NULL'')

		exec log4.ExceptionHandler
			  @ErrorContext = @_ErrorContext
			, @ErrorProcedure = @_FunctionName
			, @ErrorNumber = @_Error out
			, @ReturnMessage = @_Message out
			, @ExceptionId = @_ExceptionId out ;
	end catch ;

--/////////////////////////////////////////////////////////////////////////////////////////////////
EndEx:
--/////////////////////////////////////////////////////////////////////////////////////////////////

	/*===========================================================================*/
	/**/	exec log4.JournalWriter
	/**/		  @Task = ''POC''
	/**/		, @FunctionName = @_FunctionName
	/**/		, @StepInFunction = @_Step
	/**/		, @MessageText = @_Message
	/**/		, @Severity = 1024 -- DEBUG
	/**/		, @ExceptionId = @_ExceptionId
	/*===========================================================================*/

	--! Finally, throw an exception that will be detected by the caller
	if @_Error > 0 raiserror(@_Message, 16, 99) ;

	set nocount off ;

	--! Return the value of @@ERROR (which will be zero on success)
	return (@_Error) ;
end ;

');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1b204990-a5e2-5e79-899d-be4a461f7d1c' AS UNIQUEIDENTIFIER) AND [script_checksum] = '89BE9ADA51DAD58007504B7DBCCCE54635323C15D63A426C1C11BD4CD06EB796')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Records the end state of the indicated process run.  ICS Note:  This call is not required if the output from the initiating call from this process to ProcessRunStart was “SKIP”, “STOP” or “ERROR”'', ''SCHEMA'', N''ics'', ''PROCEDURE'', N''ProcessRunEnd'', NULL, NULL
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1b204990-a5e2-5e79-899d-be4a461f7d1c' AS UNIQUEIDENTIFIER) AND [script_checksum] = '89BE9ADA51DAD58007504B7DBCCCE54635323C15D63A426C1C11BD4CD06EB796')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Optional, a message provided by the caller to provide any detail around the reason for success, failure or other stoppage'', ''SCHEMA'', N''ics'', ''PROCEDURE'', N''ProcessRunEnd'', ''PARAMETER'', N''@EndMessage''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1b204990-a5e2-5e79-899d-be4a461f7d1c' AS UNIQUEIDENTIFIER) AND [script_checksum] = '89BE9ADA51DAD58007504B7DBCCCE54635323C15D63A426C1C11BD4CD06EB796')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Mandatory, an indicator of the final run state for this process run, choose from “SUCCEEDED”, “STOPPED”, “SKIPPED” or “FAILED”'', ''SCHEMA'', N''ics'', ''PROCEDURE'', N''ProcessRunEnd'', ''PARAMETER'', N''@EndState''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1b204990-a5e2-5e79-899d-be4a461f7d1c' AS UNIQUEIDENTIFIER) AND [script_checksum] = '89BE9ADA51DAD58007504B7DBCCCE54635323C15D63A426C1C11BD4CD06EB796')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Mandatory, the name of the ICS process responsible for running the end-to-end data load for a source'', ''SCHEMA'', N''ics'', ''PROCEDURE'', N''ProcessRunEnd'', ''PARAMETER'', N''@ProcessName''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1b204990-a5e2-5e79-899d-be4a461f7d1c' AS UNIQUEIDENTIFIER) AND [script_checksum] = '89BE9ADA51DAD58007504B7DBCCCE54635323C15D63A426C1C11BD4CD06EB796')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Mandatory, the Id of the process run context that should be marked as succeeded, failed or otherwise stopped'', ''SCHEMA'', N''ics'', ''PROCEDURE'', N''ProcessRunEnd'', ''PARAMETER'', N''@ProcessRunId''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1b204990-a5e2-5e79-899d-be4a461f7d1c' AS UNIQUEIDENTIFIER) AND [script_checksum] = '89BE9ADA51DAD58007504B7DBCCCE54635323C15D63A426C1C11BD4CD06EB796')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\ics\Stored Procedures\ProcessRunEnd.sql", ID: {1b204990-a5e2-5e79-899d-be4a461f7d1c} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1b204990-a5e2-5e79-899d-be4a461f7d1c' AS UNIQUEIDENTIFIER) AND [script_checksum] = '89BE9ADA51DAD58007504B7DBCCCE54635323C15D63A426C1C11BD4CD06EB796')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('1b204990-a5e2-5e79-899d-be4a461f7d1c' AS UNIQUEIDENTIFIER), '89BE9ADA51DAD58007504B7DBCCCE54635323C15D63A426C1C11BD4CD06EB796', 'Programmable Objects\ics\Stored Procedures\ProcessRunEnd.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. Also ensure that your project scripts do not contain any "USE [OtherDbName]" statements. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('2fcbd326-7e16-58be-9244-a2bfd6eaabf2' AS UNIQUEIDENTIFIER) AND [script_checksum] = '503A606576DFF4BB7DCE1F47F1E7FD21C94B4031C5D4F8E21A1AAE85346BAD86')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\ics\Stored Procedures\ProcessRunStart.sql", ID: {2fcbd326-7e16-58be-9244-a2bfd6eaabf2} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('2fcbd326-7e16-58be-9244-a2bfd6eaabf2' AS UNIQUEIDENTIFIER) AND [script_checksum] = '503A606576DFF4BB7DCE1F47F1E7FD21C94B4031C5D4F8E21A1AAE85346BAD86')
  EXECUTE ('if object_id(''[ics].[ProcessRunStart]'') is not null
	drop procedure [ics].[ProcessRunStart];
');

GO
SET QUOTED_IDENTIFIER ON;

GO
SET ANSI_NULLS ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('2fcbd326-7e16-58be-9244-a2bfd6eaabf2' AS UNIQUEIDENTIFIER) AND [script_checksum] = '503A606576DFF4BB7DCE1F47F1E7FD21C94B4031C5D4F8E21A1AAE85346BAD86')
  EXECUTE ('create procedure [ics].[ProcessRunStart]
(
  @ProcessName varchar(200)
, @IcrtProcessId int
, @ProcessRunId int = null output
, @RunType varchar(8) = null output
, @Instruction varchar(16) = null output
, @Message varchar(500) = null output
)
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
PROCEDURE NAME:		ics.ProcessRunStart
DESCRIPTION:		Checks that the requested process is runnable and if so, initiates a new process run instance
					(adding a row to the table: batch.ProcessRun)
ORIGIN DATE:		24-JUL-2017
ORIGINAL AUTHOR:	Razia Nazir

Returns
=======
@@Error - always zero on success

Additional Notes
================
Stubs 

REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		24-JUL-2017		RN		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------

**********************************************************************************************************************/
--</CommentHeader>

begin
	set nocount on ;

	--! Standard/ExceptionHandler variables
	declare	@_FunctionName nvarchar(255) = quotename(object_schema_name(@@procid)) + ''.'' + quotename(object_name(@@procid));
	declare	@_Error int = 0;
	declare @_RowCount int = 0;
	declare @_ReturnValue int = 0;
	declare	@_Message nvarchar(512);
	declare	@_ErrorContext nvarchar(512);
	declare	@_Step varchar(128);
	declare	@_ExceptionId int;

	begin try
		set @_Step = ''Fetch dummy values for stub'' ;

		select
			  @ProcessRunId = ProcessRunID
			, @RunType = RunType
			, @Instruction = Instruction
			, @Message = [Message]
		from
			dbo.StubResultSet
		where
			FunctionName = @_FunctionName ;
	end try
	begin catch
		set @_ErrorContext = ''Failed to start new process run''
			+ '' for ICRT Process Name: '' + coalesce(''"'' + @ProcessName + ''"'', ''NULL'')
			+ '' and ICRT Process Id: '' + coalesce(cast(@IcrtProcessId as varchar(32)), ''NULL'')
			+ '' at step: '' + coalesce(''['' + @_Step + '']'', ''NULL'')
			+ '' (New Process Run Id: '' + coalesce(cast(@ProcessRunId as varchar(32)), ''NULL'') + '')''

		exec log4.ExceptionHandler
			  @ErrorContext = @_ErrorContext
			, @ErrorProcedure = @_FunctionName
			, @ErrorNumber = @_Error out
			, @ReturnMessage = @_Message out
			, @ExceptionId = @_ExceptionId out

	end catch

--/////////////////////////////////////////////////////////////////////////////////////////////////
EndEx:
--/////////////////////////////////////////////////////////////////////////////////////////////////

	--! Finally, throw an exception that will be detected by the caller
	if @_Error > 0 raiserror(@_Message, 16, 99) ;

	set nocount off ;

	--! Return the value of @@ERROR (which will be zero on success)
	return (@_Error) ;
end

');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('2fcbd326-7e16-58be-9244-a2bfd6eaabf2' AS UNIQUEIDENTIFIER) AND [script_checksum] = '503A606576DFF4BB7DCE1F47F1E7FD21C94B4031C5D4F8E21A1AAE85346BAD86')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Checks that the requested process is runnable and if so, initiates a new process run instance (adding a row to the table: batch.ProcessRun)'', ''SCHEMA'', N''ics'', ''PROCEDURE'', N''ProcessRunStart'', NULL, NULL
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('2fcbd326-7e16-58be-9244-a2bfd6eaabf2' AS UNIQUEIDENTIFIER) AND [script_checksum] = '503A606576DFF4BB7DCE1F47F1E7FD21C94B4031C5D4F8E21A1AAE85346BAD86')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Mandatory, the ID of the ICRT execution instance/process that initiated this batch run'', ''SCHEMA'', N''ics'', ''PROCEDURE'', N''ProcessRunStart'', ''PARAMETER'', N''@IcrtProcessId''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('2fcbd326-7e16-58be-9244-a2bfd6eaabf2' AS UNIQUEIDENTIFIER) AND [script_checksum] = '503A606576DFF4BB7DCE1F47F1E7FD21C94B4031C5D4F8E21A1AAE85346BAD86')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Output, indicates what action the caller should take in relation to this run attempt, always populated.  Will be one of the following four values: "RUN", "SKIP", "STOP" or "ERROR"'', ''SCHEMA'', N''ics'', ''PROCEDURE'', N''ProcessRunStart'', ''PARAMETER'', N''@Instruction''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('2fcbd326-7e16-58be-9244-a2bfd6eaabf2' AS UNIQUEIDENTIFIER) AND [script_checksum] = '503A606576DFF4BB7DCE1F47F1E7FD21C94B4031C5D4F8E21A1AAE85346BAD86')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''A user-friendly message relating to any reason behind the Instruction output – especially if the result is anything other than “RUN”'', ''SCHEMA'', N''ics'', ''PROCEDURE'', N''ProcessRunStart'', ''PARAMETER'', N''@Message''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('2fcbd326-7e16-58be-9244-a2bfd6eaabf2' AS UNIQUEIDENTIFIER) AND [script_checksum] = '503A606576DFF4BB7DCE1F47F1E7FD21C94B4031C5D4F8E21A1AAE85346BAD86')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Mandatory, the name of the ICRT/ICS process responsible for running the end-to-end data load for a source (from which the Batch Process Id can be derived)'', ''SCHEMA'', N''ics'', ''PROCEDURE'', N''ProcessRunStart'', ''PARAMETER'', N''@ProcessName''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('2fcbd326-7e16-58be-9244-a2bfd6eaabf2' AS UNIQUEIDENTIFIER) AND [script_checksum] = '503A606576DFF4BB7DCE1F47F1E7FD21C94B4031C5D4F8E21A1AAE85346BAD86')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''The unique Id for the new process run context initiated by this procedure.'', ''SCHEMA'', N''ics'', ''PROCEDURE'', N''ProcessRunStart'', ''PARAMETER'', N''@ProcessRunId''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('2fcbd326-7e16-58be-9244-a2bfd6eaabf2' AS UNIQUEIDENTIFIER) AND [script_checksum] = '503A606576DFF4BB7DCE1F47F1E7FD21C94B4031C5D4F8E21A1AAE85346BAD86')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Output, indicates whether this is a “FULL” or “DELTA” load (and allows the caller to choose the appropriate code path according to expected data quantities.  Always populated.'', ''SCHEMA'', N''ics'', ''PROCEDURE'', N''ProcessRunStart'', ''PARAMETER'', N''@RunType''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('2fcbd326-7e16-58be-9244-a2bfd6eaabf2' AS UNIQUEIDENTIFIER) AND [script_checksum] = '503A606576DFF4BB7DCE1F47F1E7FD21C94B4031C5D4F8E21A1AAE85346BAD86')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\ics\Stored Procedures\ProcessRunStart.sql", ID: {2fcbd326-7e16-58be-9244-a2bfd6eaabf2} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('2fcbd326-7e16-58be-9244-a2bfd6eaabf2' AS UNIQUEIDENTIFIER) AND [script_checksum] = '503A606576DFF4BB7DCE1F47F1E7FD21C94B4031C5D4F8E21A1AAE85346BAD86')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('2fcbd326-7e16-58be-9244-a2bfd6eaabf2' AS UNIQUEIDENTIFIER), '503A606576DFF4BB7DCE1F47F1E7FD21C94B4031C5D4F8E21A1AAE85346BAD86', 'Programmable Objects\ics\Stored Procedures\ProcessRunStart.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. Also ensure that your project scripts do not contain any "USE [OtherDbName]" statements. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('7fb322a2-499e-5202-ad73-1a9a39282bc4' AS UNIQUEIDENTIFIER) AND [script_checksum] = '4124F4650642412AA0EB73B9CDE9F8C18D6056087329DE8CB1DB8ACEA2139031')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\ics\Stored Procedures\SubProcessRunEnd.sql", ID: {7fb322a2-499e-5202-ad73-1a9a39282bc4} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('7fb322a2-499e-5202-ad73-1a9a39282bc4' AS UNIQUEIDENTIFIER) AND [script_checksum] = '4124F4650642412AA0EB73B9CDE9F8C18D6056087329DE8CB1DB8ACEA2139031')
  EXECUTE ('IF OBJECT_ID(''[ics].[SubProcessRunEnd]'') IS NOT NULL
	DROP PROCEDURE [ics].[SubProcessRunEnd];

');

GO
SET QUOTED_IDENTIFIER ON;

GO
SET ANSI_NULLS ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('7fb322a2-499e-5202-ad73-1a9a39282bc4' AS UNIQUEIDENTIFIER) AND [script_checksum] = '4124F4650642412AA0EB73B9CDE9F8C18D6056087329DE8CB1DB8ACEA2139031')
  EXECUTE ('create proc [ics].[SubProcessRunEnd]
(
  @ProcessName varchar(100)
, @SubProcessName varchar(100)
, @SubProcessRunId int
, @EndState varchar(16)
, @EndMessage varchar(500) = null
)
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
PROCEDURE NAME:		ics.ProcessRunEnd
DESCRIPTION:		POC stub procedure
ORIGIN DATE:		26-JUL-2017
ORIGINAL AUTHOR:	Razia Nazir

Returns
=======
@@Error - always zero on success

Additional Notes
================
Stubs

REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		25-JUL-2017		RN		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------
**********************************************************************************************************************/
--</CommentHeader>

begin
	set nocount on ;

	--! Standard/ExceptionHandler variables
	declare	@_FunctionName nvarchar(255) = quotename(object_schema_name(@@procid)) + ''.'' + quotename(object_name(@@procid));
	declare	@_Error int = 0;
	declare @_RowCount int = 0;
	declare @_ReturnValue int = 0;
	declare	@_Message nvarchar(512);
	declare	@_ErrorContext nvarchar(512);
	declare	@_Step varchar(128);
	declare	@_ExceptionId int;

	begin try
		set @_Step = ''Record POC'' ;

		/*===============================================================================================*/
		/**/	set @_Message = ''Record end of Sub-process run - Not Yet Implemented''
		/**/		+ '' for ICRT Process: '' + coalesce(''"'' + @ProcessName + ''"'', ''NULL'')
		/**/		+ '' , ICRT Sub-Process: '' + coalesce(''"'' + @SubProcessName + ''"'', ''NULL'')
		/**/		+ '' and (BatMan) Sub-process Run Id: '' + coalesce(cast(@SubProcessRunId as varchar(32)), ''NULL'')
		/**/		+ '' with End State: '' + coalesce(''['' + @EndState + '']'', ''NULL'')
		/*===============================================================================================*/

	end try
	begin catch
		set @_ErrorContext = ''Failed to record end of sub-process run''
			+ '' for ICRT Process: '' + coalesce(''"'' + @ProcessName + ''"'', ''NULL'')
			+ '' , ICRT Sub-Process: '' + coalesce(''"'' + @SubProcessName + ''"'', ''NULL'')
			+ '' and (BatMan) Sub-process Run Id: '' + coalesce(cast(@SubProcessRunId as varchar(32)), ''NULL'')
			+ '' with End State: '' + coalesce(''['' + @EndState + '']'', ''NULL'')
			+ '' at step: '' + coalesce(''['' + @_Step + '']'', ''NULL'')

		exec log4.ExceptionHandler
			  @ErrorContext = @_ErrorContext
			, @ErrorProcedure = @_FunctionName
			, @ErrorNumber = @_Error out
			, @ReturnMessage = @_Message out
			, @ExceptionId = @_ExceptionId out ;
	end catch ;

--/////////////////////////////////////////////////////////////////////////////////////////////////
EndEx:
--/////////////////////////////////////////////////////////////////////////////////////////////////

	/*===========================================================================*/
	/**/	exec log4.JournalWriter
	/**/		  @Task = ''POC''
	/**/		, @FunctionName = @_FunctionName
	/**/		, @StepInFunction = @_Step
	/**/		, @MessageText = @_Message
	/**/		, @Severity = 1024 -- DEBUG
	/**/		, @ExceptionId = @_ExceptionId
	/*===========================================================================*/

	--! Finally, throw an exception that will be detected by the caller
	if @_Error > 0 raiserror(@_Message, 16, 99) ;

	set nocount off ;

	--! Return the value of @@ERROR (which will be zero on success)
	return (@_Error) ;
end ;

');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('7fb322a2-499e-5202-ad73-1a9a39282bc4' AS UNIQUEIDENTIFIER) AND [script_checksum] = '4124F4650642412AA0EB73B9CDE9F8C18D6056087329DE8CB1DB8ACEA2139031')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Records the end state of the indicated sub-process run.  ICS Note:  This call is not required if the output from the initiating call from this sub-process to SubProcessRunStart was “SKIP”, “STOP” or “ERROR”'', ''SCHEMA'', N''ics'', ''PROCEDURE'', N''SubProcessRunEnd'', NULL, NULL
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('7fb322a2-499e-5202-ad73-1a9a39282bc4' AS UNIQUEIDENTIFIER) AND [script_checksum] = '4124F4650642412AA0EB73B9CDE9F8C18D6056087329DE8CB1DB8ACEA2139031')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Optional, a message provided by the caller to provide any detail around the reason for success, failure or other stoppage'', ''SCHEMA'', N''ics'', ''PROCEDURE'', N''SubProcessRunEnd'', ''PARAMETER'', N''@EndMessage''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('7fb322a2-499e-5202-ad73-1a9a39282bc4' AS UNIQUEIDENTIFIER) AND [script_checksum] = '4124F4650642412AA0EB73B9CDE9F8C18D6056087329DE8CB1DB8ACEA2139031')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Mandatory, an indicator of the final run state for this sub-process run, choose from “SUCCEEDED”, “STOPPED”, “SKIPPED” or “FAILED”'', ''SCHEMA'', N''ics'', ''PROCEDURE'', N''SubProcessRunEnd'', ''PARAMETER'', N''@EndState''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('7fb322a2-499e-5202-ad73-1a9a39282bc4' AS UNIQUEIDENTIFIER) AND [script_checksum] = '4124F4650642412AA0EB73B9CDE9F8C18D6056087329DE8CB1DB8ACEA2139031')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Mandatory, the name of the ICS process responsible for running the end-to-end data load for a source'', ''SCHEMA'', N''ics'', ''PROCEDURE'', N''SubProcessRunEnd'', ''PARAMETER'', N''@ProcessName''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('7fb322a2-499e-5202-ad73-1a9a39282bc4' AS UNIQUEIDENTIFIER) AND [script_checksum] = '4124F4650642412AA0EB73B9CDE9F8C18D6056087329DE8CB1DB8ACEA2139031')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Mandatory, the name of the ICRT sub-process responsible for running this subject area step'', ''SCHEMA'', N''ics'', ''PROCEDURE'', N''SubProcessRunEnd'', ''PARAMETER'', N''@SubProcessName''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('7fb322a2-499e-5202-ad73-1a9a39282bc4' AS UNIQUEIDENTIFIER) AND [script_checksum] = '4124F4650642412AA0EB73B9CDE9F8C18D6056087329DE8CB1DB8ACEA2139031')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Mandatory, the Id of the sub-process run context that should be marked as succeeded, failed or otherwise stopped'', ''SCHEMA'', N''ics'', ''PROCEDURE'', N''SubProcessRunEnd'', ''PARAMETER'', N''@SubProcessRunId''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('7fb322a2-499e-5202-ad73-1a9a39282bc4' AS UNIQUEIDENTIFIER) AND [script_checksum] = '4124F4650642412AA0EB73B9CDE9F8C18D6056087329DE8CB1DB8ACEA2139031')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\ics\Stored Procedures\SubProcessRunEnd.sql", ID: {7fb322a2-499e-5202-ad73-1a9a39282bc4} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('7fb322a2-499e-5202-ad73-1a9a39282bc4' AS UNIQUEIDENTIFIER) AND [script_checksum] = '4124F4650642412AA0EB73B9CDE9F8C18D6056087329DE8CB1DB8ACEA2139031')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('7fb322a2-499e-5202-ad73-1a9a39282bc4' AS UNIQUEIDENTIFIER), '4124F4650642412AA0EB73B9CDE9F8C18D6056087329DE8CB1DB8ACEA2139031', 'Programmable Objects\ics\Stored Procedures\SubProcessRunEnd.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. Also ensure that your project scripts do not contain any "USE [OtherDbName]" statements. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('03e4360a-4242-5b42-912f-819900a36e5e' AS UNIQUEIDENTIFIER) AND [script_checksum] = '0A0E920C94D50F9A061FD52FFEB69E696CC38B77437B968D6D3A9E59CDFCBAA5')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\ics\Stored Procedures\SubProcessRunStart.sql", ID: {03e4360a-4242-5b42-912f-819900a36e5e} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('03e4360a-4242-5b42-912f-819900a36e5e' AS UNIQUEIDENTIFIER) AND [script_checksum] = '0A0E920C94D50F9A061FD52FFEB69E696CC38B77437B968D6D3A9E59CDFCBAA5')
  EXECUTE ('IF OBJECT_ID(''[ics].[SubProcessRunStart]'') IS NOT NULL
	DROP PROCEDURE [ics].[SubProcessRunStart];

');

GO
SET QUOTED_IDENTIFIER ON;

GO
SET ANSI_NULLS ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('03e4360a-4242-5b42-912f-819900a36e5e' AS UNIQUEIDENTIFIER) AND [script_checksum] = '0A0E920C94D50F9A061FD52FFEB69E696CC38B77437B968D6D3A9E59CDFCBAA5')
  EXECUTE ('create   procedure [ics].[SubProcessRunStart]
(
  @ProcessName varchar(200)
, @SubProcessName varchar(200)
, @ProcessRunId int
, @SubProcessRunId int = null output
, @RunType varchar(8) = null output
, @Instruction varchar(16) = null output
, @Message varchar(500) = null output
)
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
PROCEDURE NAME:		ics.SubProcessRunStart
DESCRIPTION:		Checks that the requested sub-process is runnable at this time and if so, initiates a new
					sub-process run instance within the context of the current process run (adding a row to the
					table: batch.StepRun)
ORIGIN DATE:		24-JUL-2017
ORIGINAL AUTHOR:	Razia Nazir

Returns
=======
@@Error - always zero on success

Additional Notes
================
Stubs 

REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		24-JUL-2017		RN		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------


**********************************************************************************************************************/
--</CommentHeader>

begin
	set nocount on ;

	--! Standard/ExceptionHandler variables
	declare	@_FunctionName nvarchar(255) = quotename(object_schema_name(@@procid)) + ''.'' + quotename(object_name(@@procid));
	declare	@_Error int = 0;
	declare @_RowCount int = 0;
	declare @_ReturnValue int = 0;
	declare	@_Message nvarchar(512);
	declare	@_ErrorContext nvarchar(512);
	declare	@_Step varchar(128);
	declare	@_ExceptionId int;

	begin try
		set @_Step = ''Fetch dummy values for stub'' ;

		select
			  @SubProcessRunId = SubProcessRunID
			, @RunType = RunType
			, @Instruction = Instruction
			, @Message = [Message]
		from
			dbo.StubResultSet
		where
			FunctionName = @_FunctionName ;
	end try
	begin catch
		set @_ErrorContext = ''Failed to start new sub-process run''
			+ '' for ICRT Process: '' + coalesce(''"'' + @ProcessName + ''"'', ''NULL'')
			+ '' , ICRT Sub-Process: '' + coalesce(''"'' + @SubProcessName + ''"'', ''NULL'')
			+ '' and (BatMan) Process Run Id: '' + coalesce(cast(@ProcessRunId as varchar(32)), ''NULL'')
			+ '' at step: '' + coalesce(''['' + @_Step + '']'', ''NULL'')
			+ '' (New Sub-process Run Id: '' + coalesce(cast(@SubProcessRunId as varchar(32)), ''NULL'') + '')''

		exec log4.ExceptionHandler
			  @ErrorContext = @_ErrorContext
			, @ErrorProcedure = @_FunctionName
			, @ErrorNumber = @_Error out
			, @ReturnMessage = @_Message out
			, @ExceptionId = @_ExceptionId out

	end catch

--/////////////////////////////////////////////////////////////////////////////////////////////////
EndEx:
--/////////////////////////////////////////////////////////////////////////////////////////////////

	--! Finally, throw an exception that will be detected by the caller
	if @_Error > 0 raiserror(@_Message, 16, 99) ;

	set nocount off ;

	--! Return the value of @@ERROR (which will be zero on success)
	return (@_Error) ;
end


');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('03e4360a-4242-5b42-912f-819900a36e5e' AS UNIQUEIDENTIFIER) AND [script_checksum] = '0A0E920C94D50F9A061FD52FFEB69E696CC38B77437B968D6D3A9E59CDFCBAA5')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Mandatory, the unique Id for the new sub-process run context initiated by this procedure, always populated'', ''SCHEMA'', N''ics'', ''PROCEDURE'', N''SubProcessRunStart'', ''PARAMETER'', N''@SubProcessRunId''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('03e4360a-4242-5b42-912f-819900a36e5e' AS UNIQUEIDENTIFIER) AND [script_checksum] = '0A0E920C94D50F9A061FD52FFEB69E696CC38B77437B968D6D3A9E59CDFCBAA5')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Checks that the requested sub-process is runnable at this time and if so, initiates a new sub-process run instance within the context of the current process run (adding a row to the table: batch.StepRun)'', ''SCHEMA'', N''ics'', ''PROCEDURE'', N''SubProcessRunStart'', NULL, NULL
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('03e4360a-4242-5b42-912f-819900a36e5e' AS UNIQUEIDENTIFIER) AND [script_checksum] = '0A0E920C94D50F9A061FD52FFEB69E696CC38B77437B968D6D3A9E59CDFCBAA5')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Output, indicates what action the caller should take in relation to this run attempt, always populated.  Will be one of the following four values: "RUN", "SKIP", "STOP" or "ERROR"'', ''SCHEMA'', N''ics'', ''PROCEDURE'', N''SubProcessRunStart'', ''PARAMETER'', N''@Instruction''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('03e4360a-4242-5b42-912f-819900a36e5e' AS UNIQUEIDENTIFIER) AND [script_checksum] = '0A0E920C94D50F9A061FD52FFEB69E696CC38B77437B968D6D3A9E59CDFCBAA5')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''A user-friendly message relating to any reason behind the Instruction output – especially if the result is anything other than “RUN”'', ''SCHEMA'', N''ics'', ''PROCEDURE'', N''SubProcessRunStart'', ''PARAMETER'', N''@Message''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('03e4360a-4242-5b42-912f-819900a36e5e' AS UNIQUEIDENTIFIER) AND [script_checksum] = '0A0E920C94D50F9A061FD52FFEB69E696CC38B77437B968D6D3A9E59CDFCBAA5')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Mandatory, the name of the ICRT/ICS process responsible for running the end-to-end data load for a source (from which the Batch Process Id can be derived)'', ''SCHEMA'', N''ics'', ''PROCEDURE'', N''SubProcessRunStart'', ''PARAMETER'', N''@ProcessName''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('03e4360a-4242-5b42-912f-819900a36e5e' AS UNIQUEIDENTIFIER) AND [script_checksum] = '0A0E920C94D50F9A061FD52FFEB69E696CC38B77437B968D6D3A9E59CDFCBAA5')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''The unique Id for the new process run context initiated by this procedure.'', ''SCHEMA'', N''ics'', ''PROCEDURE'', N''SubProcessRunStart'', ''PARAMETER'', N''@ProcessRunId''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('03e4360a-4242-5b42-912f-819900a36e5e' AS UNIQUEIDENTIFIER) AND [script_checksum] = '0A0E920C94D50F9A061FD52FFEB69E696CC38B77437B968D6D3A9E59CDFCBAA5')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Output, indicates whether this is a “FULL” or “DELTA” load (and allows the caller to choose the appropriate code path according to expected data quantities.  Always populated.'', ''SCHEMA'', N''ics'', ''PROCEDURE'', N''SubProcessRunStart'', ''PARAMETER'', N''@RunType''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('03e4360a-4242-5b42-912f-819900a36e5e' AS UNIQUEIDENTIFIER) AND [script_checksum] = '0A0E920C94D50F9A061FD52FFEB69E696CC38B77437B968D6D3A9E59CDFCBAA5')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N'''', ''SCHEMA'', N''ics'', ''PROCEDURE'', N''SubProcessRunStart'', ''PARAMETER'', N''@SubProcessName''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('03e4360a-4242-5b42-912f-819900a36e5e' AS UNIQUEIDENTIFIER) AND [script_checksum] = '0A0E920C94D50F9A061FD52FFEB69E696CC38B77437B968D6D3A9E59CDFCBAA5')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\ics\Stored Procedures\SubProcessRunStart.sql", ID: {03e4360a-4242-5b42-912f-819900a36e5e} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('03e4360a-4242-5b42-912f-819900a36e5e' AS UNIQUEIDENTIFIER) AND [script_checksum] = '0A0E920C94D50F9A061FD52FFEB69E696CC38B77437B968D6D3A9E59CDFCBAA5')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('03e4360a-4242-5b42-912f-819900a36e5e' AS UNIQUEIDENTIFIER), '0A0E920C94D50F9A061FD52FFEB69E696CC38B77437B968D6D3A9E59CDFCBAA5', 'Programmable Objects\ics\Stored Procedures\SubProcessRunStart.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. Also ensure that your project scripts do not contain any "USE [OtherDbName]" statements. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('4352fe7e-65a0-55a0-80f7-4b9c188c215e' AS UNIQUEIDENTIFIER) AND [script_checksum] = '82981761B58DDA9593E95D1A12EE3A3B65E090E423A9DC25D0BFEF961407C69B')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\ics\Stored Procedures\ThreadRunEnd.sql", ID: {4352fe7e-65a0-55a0-80f7-4b9c188c215e} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('4352fe7e-65a0-55a0-80f7-4b9c188c215e' AS UNIQUEIDENTIFIER) AND [script_checksum] = '82981761B58DDA9593E95D1A12EE3A3B65E090E423A9DC25D0BFEF961407C69B')
  EXECUTE ('if object_id(''[ics].[ThreadRunEnd]'') is not null
	drop procedure [ics].[ThreadRunEnd];
');

GO
SET QUOTED_IDENTIFIER ON;

GO
SET ANSI_NULLS ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('4352fe7e-65a0-55a0-80f7-4b9c188c215e' AS UNIQUEIDENTIFIER) AND [script_checksum] = '82981761B58DDA9593E95D1A12EE3A3B65E090E423A9DC25D0BFEF961407C69B')
  EXECUTE ('create proc [ics].[ThreadRunEnd]
(
  @MappingConfigTaskName varchar(100)
, @MappingName varchar(100)
, @ThreadRunId int
, @EndState varchar(16)
, @EndMessage varchar(500) = null
, @SuccessSourceRows int
, @FailedSourceRows int
, @SuccessTargetRows int
, @FailedTargetRows int
)
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
PROCEDURE NAME:		ics.ThreadRunEnd
DESCRIPTION:		POC stub procedure
ORIGIN DATE:		25-JUL-2017
ORIGINAL AUTHOR:	Razia Nazir

Returns
=======
@@Error - always zero on success

Additional Notes
================
Stubs

REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		24-JUL-2017		RN		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------

**********************************************************************************************************************/
--</CommentHeader>

begin
	set nocount on ;

	--! Standard/ExceptionHandler variables
	declare	@_FunctionName nvarchar(255) = quotename(object_schema_name(@@procid)) + ''.'' + quotename(object_name(@@procid));
	declare	@_Error int = 0;
	declare @_RowCount int = 0;
	declare @_ReturnValue int = 0;
	declare	@_Message nvarchar(512);
	declare	@_ErrorContext nvarchar(512);
	declare	@_Step varchar(128);
	declare	@_ExceptionId int;

	begin try
		set @_Step = ''Record POC'' ;

		/*===============================================================================================*/
		/**/	set @_Message = ''Record end of Thread run - Not Yet Implemented''
		/**/		+ '' for MCT Name: '' + coalesce(''"'' + @MappingConfigTaskName + ''"'', ''NULL'')
		/**/		+ '' , Mapping: '' + coalesce(''"'' + @MappingName + ''"'', ''NULL'')
		/**/		+ '' and (BatMan) Thread Run Id: '' + coalesce(cast(@ThreadRunId as varchar(32)), ''NULL'')
		/**/		+ '' with End State: '' + coalesce(''['' + @EndState + '']'', ''NULL'')
		/*===============================================================================================*/

	end try
	begin catch
		set @_ErrorContext = ''Failed to record end of thread run''
			+ '' for MCT Name: '' + coalesce(''"'' + @MappingConfigTaskName + ''"'', ''NULL'')
			+ '' , Mapping: '' + coalesce(''"'' + @MappingName + ''"'', ''NULL'')
			+ '' and (BatMan) Thread Run Id: '' + coalesce(cast(@ThreadRunId as varchar(32)), ''NULL'')
			+ '' with End State: '' + coalesce(''['' + @EndState + '']'', ''NULL'')
			+ '' at step: '' + coalesce(''['' + @_Step + '']'', ''NULL'')

		exec log4.ExceptionHandler
			  @ErrorContext = @_ErrorContext
			, @ErrorProcedure = @_FunctionName
			, @ErrorNumber = @_Error out
			, @ReturnMessage = @_Message out
			, @ExceptionId = @_ExceptionId out ;
	end catch ;

--/////////////////////////////////////////////////////////////////////////////////////////////////
EndEx:
--/////////////////////////////////////////////////////////////////////////////////////////////////

	/*===========================================================================*/
	/**/	exec log4.JournalWriter
	/**/		  @Task = ''POC''
	/**/		, @FunctionName = @_FunctionName
	/**/		, @StepInFunction = @_Step
	/**/		, @MessageText = @_Message
	/**/		, @Severity = 1024 -- DEBUG
	/**/		, @ExceptionId = @_ExceptionId
	/*===========================================================================*/

	--! Finally, throw an exception that will be detected by the caller
	if @_Error > 0 raiserror(@_Message, 16, 99) ;
	
	set nocount off ;

	--! Return the value of @@ERROR (which will be zero on success)
	return (@_Error) ;
end ;

');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('4352fe7e-65a0-55a0-80f7-4b9c188c215e' AS UNIQUEIDENTIFIER) AND [script_checksum] = '82981761B58DDA9593E95D1A12EE3A3B65E090E423A9DC25D0BFEF961407C69B')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Records the end state of the indicated thread run.  ICS Note:  This call is not required if the output from the initiating call from this MCT to ThreadRunStart was “SKIP”, “STOP” or “ERROR”'', ''SCHEMA'', N''ics'', ''PROCEDURE'', N''ThreadRunEnd'', NULL, NULL
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('4352fe7e-65a0-55a0-80f7-4b9c188c215e' AS UNIQUEIDENTIFIER) AND [script_checksum] = '82981761B58DDA9593E95D1A12EE3A3B65E090E423A9DC25D0BFEF961407C69B')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Optional, a message provided by the caller to provide any detail around the reason for success, failure or other stoppage'', ''SCHEMA'', N''ics'', ''PROCEDURE'', N''ThreadRunEnd'', ''PARAMETER'', N''@EndMessage''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('4352fe7e-65a0-55a0-80f7-4b9c188c215e' AS UNIQUEIDENTIFIER) AND [script_checksum] = '82981761B58DDA9593E95D1A12EE3A3B65E090E423A9DC25D0BFEF961407C69B')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Mandatory, an indicator of the final run state for this thread run, choose from “SUCCEEDED” or “FAILED”'', ''SCHEMA'', N''ics'', ''PROCEDURE'', N''ThreadRunEnd'', ''PARAMETER'', N''@EndState''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('4352fe7e-65a0-55a0-80f7-4b9c188c215e' AS UNIQUEIDENTIFIER) AND [script_checksum] = '82981761B58DDA9593E95D1A12EE3A3B65E090E423A9DC25D0BFEF961407C69B')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''The number of source rows rejected or failed by this thread'', ''SCHEMA'', N''ics'', ''PROCEDURE'', N''ThreadRunEnd'', ''PARAMETER'', N''@FailedSourceRows''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('4352fe7e-65a0-55a0-80f7-4b9c188c215e' AS UNIQUEIDENTIFIER) AND [script_checksum] = '82981761B58DDA9593E95D1A12EE3A3B65E090E423A9DC25D0BFEF961407C69B')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Mandatory, the number of records failed by this thread during “write to target”, represents the total number of source rows that were not processed into the target table at all.'', ''SCHEMA'', N''ics'', ''PROCEDURE'', N''ThreadRunEnd'', ''PARAMETER'', N''@FailedTargetRows''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('4352fe7e-65a0-55a0-80f7-4b9c188c215e' AS UNIQUEIDENTIFIER) AND [script_checksum] = '82981761B58DDA9593E95D1A12EE3A3B65E090E423A9DC25D0BFEF961407C69B')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Mandatory, the name of the ICS mapping configuration task from which this call originates'', ''SCHEMA'', N''ics'', ''PROCEDURE'', N''ThreadRunEnd'', ''PARAMETER'', N''@MappingConfigTaskName''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('4352fe7e-65a0-55a0-80f7-4b9c188c215e' AS UNIQUEIDENTIFIER) AND [script_checksum] = '82981761B58DDA9593E95D1A12EE3A3B65E090E423A9DC25D0BFEF961407C69B')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Mandatory, the name of the ICS mapping from which this call originates'', ''SCHEMA'', N''ics'', ''PROCEDURE'', N''ThreadRunEnd'', ''PARAMETER'', N''@MappingName''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('4352fe7e-65a0-55a0-80f7-4b9c188c215e' AS UNIQUEIDENTIFIER) AND [script_checksum] = '82981761B58DDA9593E95D1A12EE3A3B65E090E423A9DC25D0BFEF961407C69B')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''The number of source rows successfully read by this thread'', ''SCHEMA'', N''ics'', ''PROCEDURE'', N''ThreadRunEnd'', ''PARAMETER'', N''@SuccessSourceRows''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('4352fe7e-65a0-55a0-80f7-4b9c188c215e' AS UNIQUEIDENTIFIER) AND [script_checksum] = '82981761B58DDA9593E95D1A12EE3A3B65E090E423A9DC25D0BFEF961407C69B')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Mandatory, the total number of records written to the target table by this thread, typically the total number of inserts, updates and soft-deletes on a single target table.  This is required so that table level quality gates and execution dependencies can be implemented as needed.'', ''SCHEMA'', N''ics'', ''PROCEDURE'', N''ThreadRunEnd'', ''PARAMETER'', N''@SuccessTargetRows''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('4352fe7e-65a0-55a0-80f7-4b9c188c215e' AS UNIQUEIDENTIFIER) AND [script_checksum] = '82981761B58DDA9593E95D1A12EE3A3B65E090E423A9DC25D0BFEF961407C69B')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Mandatory, the Id of the Thread run context that should be marked as succeeded, failed or otherwise stopped'', ''SCHEMA'', N''ics'', ''PROCEDURE'', N''ThreadRunEnd'', ''PARAMETER'', N''@ThreadRunId''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('4352fe7e-65a0-55a0-80f7-4b9c188c215e' AS UNIQUEIDENTIFIER) AND [script_checksum] = '82981761B58DDA9593E95D1A12EE3A3B65E090E423A9DC25D0BFEF961407C69B')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\ics\Stored Procedures\ThreadRunEnd.sql", ID: {4352fe7e-65a0-55a0-80f7-4b9c188c215e} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('4352fe7e-65a0-55a0-80f7-4b9c188c215e' AS UNIQUEIDENTIFIER) AND [script_checksum] = '82981761B58DDA9593E95D1A12EE3A3B65E090E423A9DC25D0BFEF961407C69B')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('4352fe7e-65a0-55a0-80f7-4b9c188c215e' AS UNIQUEIDENTIFIER), '82981761B58DDA9593E95D1A12EE3A3B65E090E423A9DC25D0BFEF961407C69B', 'Programmable Objects\ics\Stored Procedures\ThreadRunEnd.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. Also ensure that your project scripts do not contain any "USE [OtherDbName]" statements. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1d7b3929-02d6-59e4-ae5a-7330b517ab40' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'CFF1AF0F2C7386BA85B94D715F834BBE4C4A5EAFA62E7979A1CF06B027A28101')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\ics\Stored Procedures\ThreadRunStart.sql", ID: {1d7b3929-02d6-59e4-ae5a-7330b517ab40} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1d7b3929-02d6-59e4-ae5a-7330b517ab40' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'CFF1AF0F2C7386BA85B94D715F834BBE4C4A5EAFA62E7979A1CF06B027A28101')
  EXECUTE ('if object_id(''[ics].[ThreadRunStart]'') is not null
	drop procedure [ics].[ThreadRunStart];
');

GO
SET QUOTED_IDENTIFIER ON;

GO
SET ANSI_NULLS ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1d7b3929-02d6-59e4-ae5a-7330b517ab40' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'CFF1AF0F2C7386BA85B94D715F834BBE4C4A5EAFA62E7979A1CF06B027A28101')
  EXECUTE ('create procedure [ics].[ThreadRunStart]
(
  @MappingConfigTaskName varchar(200)
, @MappingName varchar(200)
, @SubProcessRunId int
, @ThreadRunId int = null output
, @RunType varchar(8) = null output
, @Instruction varchar(16) = null output
, @Message varchar(500) = null output
, @StartCapturePoint datetime = null output
, @EndCapturePoint datetime = null output
)
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
PROCEDURE NAME:		ics.ThreadRunStart
DESCRIPTION:		POC stub procedure
ORIGIN DATE:		24-JUL-2017
ORIGINAL AUTHOR:	Razia Nazir

Returns
=======
@@Error - always zero on success

Additional Notes
================
Stubs

REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		24-JUL-2017		RN		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------

**********************************************************************************************************************/
--</CommentHeader>

begin
	set nocount on ;

	--! Standard/ExceptionHandler variables
	declare	@_FunctionName nvarchar(255) = quotename(object_schema_name(@@procid)) + ''.'' + quotename(object_name(@@procid));
	declare	@_Error int = 0;
	declare @_RowCount int = 0;
	declare @_ReturnValue int = 0;
	declare	@_Message nvarchar(512);
	declare	@_ErrorContext nvarchar(512);
	declare	@_Step varchar(128);
	declare	@_ExceptionId int;

	begin try
		set @_Step = ''Fetch dummy values for stub'' ;

		select
			  @ThreadRunId = ThreadRunID
			, @RunType = RunType
			, @Instruction = Instruction
			, @Message = [Message]
			, @StartCapturePoint = StartCapturePoint
			, @EndCapturePoint = EndCapturePoint
		from
			dbo.StubResultSet
		where
			FunctionName = @_FunctionName ;
	end try
	begin catch
		set @_ErrorContext = ''Failed to start new thread run''
			+ '' for MCT Name: '' + coalesce(''"'' + @MappingConfigTaskName + ''"'', ''NULL'')
			+ '' , Mapping: '' + coalesce(''"'' + @MappingName + ''"'', ''NULL'')
			+ '' and (BatMan) Sub-process Run Id: '' + coalesce(cast(@SubProcessRunId as varchar(32)), ''NULL'')
			+ '' at step: '' + coalesce(''['' + @_Step + '']'', ''NULL'')
			+ '' (New Thread Run Id: '' + coalesce(cast(@ThreadRunId as varchar(32)), ''NULL'') + '')''

		exec log4.ExceptionHandler
			  @ErrorContext = @_ErrorContext
			, @ErrorProcedure = @_FunctionName
			, @ErrorNumber = @_Error out
			, @ReturnMessage = @_Message out
			, @ExceptionId = @_ExceptionId out ;
	end catch

--/////////////////////////////////////////////////////////////////////////////////////////////////
EndEx:
--/////////////////////////////////////////////////////////////////////////////////////////////////

	--! Finally, throw an exception that will be detected by the caller
	if @_Error > 0 raiserror(@_Message, 16, 99) ;

	set nocount off ;

	--! Return the value of @@ERROR (which will be zero on success)
	return (@_Error) ;
end

');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1d7b3929-02d6-59e4-ae5a-7330b517ab40' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'CFF1AF0F2C7386BA85B94D715F834BBE4C4A5EAFA62E7979A1CF06B027A28101')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Checks that the requested thread is runnable at this time and if so, initiates a new thread run instance within the context of the current sub-process run (adding a row to the table: batch.ThreadRun)'', ''SCHEMA'', N''ics'', ''PROCEDURE'', N''ThreadRunStart'', NULL, NULL
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1d7b3929-02d6-59e4-ae5a-7330b517ab40' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'CFF1AF0F2C7386BA85B94D715F834BBE4C4A5EAFA62E7979A1CF06B027A28101')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Output, indicates what action the caller should take in relation to this run attempt, always populated.  Will be one of the following four values: "RUN", "SKIP", "STOP" or "ERROR"'', ''SCHEMA'', N''ics'', ''PROCEDURE'', N''ThreadRunStart'', ''PARAMETER'', N''@Instruction''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1d7b3929-02d6-59e4-ae5a-7330b517ab40' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'CFF1AF0F2C7386BA85B94D715F834BBE4C4A5EAFA62E7979A1CF06B027A28101')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Mandatory, the name of the ICS mapping configuration task from which this call originates'', ''SCHEMA'', N''ics'', ''PROCEDURE'', N''ThreadRunStart'', ''PARAMETER'', N''@MappingConfigTaskName''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1d7b3929-02d6-59e4-ae5a-7330b517ab40' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'CFF1AF0F2C7386BA85B94D715F834BBE4C4A5EAFA62E7979A1CF06B027A28101')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Mandatory, the name of the ICS mapping from which this call originates'', ''SCHEMA'', N''ics'', ''PROCEDURE'', N''ThreadRunStart'', ''PARAMETER'', N''@MappingName''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1d7b3929-02d6-59e4-ae5a-7330b517ab40' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'CFF1AF0F2C7386BA85B94D715F834BBE4C4A5EAFA62E7979A1CF06B027A28101')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''A user-friendly message relating to any reason behind the Instruction output – especially if the result is anything other than “RUN”'', ''SCHEMA'', N''ics'', ''PROCEDURE'', N''ThreadRunStart'', ''PARAMETER'', N''@Message''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1d7b3929-02d6-59e4-ae5a-7330b517ab40' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'CFF1AF0F2C7386BA85B94D715F834BBE4C4A5EAFA62E7979A1CF06B027A28101')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Output, indicates whether this is a “FULL” or “DELTA” load (and allows the caller to choose the appropriate code path according to expected data quantities.  Always populated.'', ''SCHEMA'', N''ics'', ''PROCEDURE'', N''ThreadRunStart'', ''PARAMETER'', N''@RunType''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1d7b3929-02d6-59e4-ae5a-7330b517ab40' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'CFF1AF0F2C7386BA85B94D715F834BBE4C4A5EAFA62E7979A1CF06B027A28101')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Mandatory, the sub-process run context in which this thread is to be executed'', ''SCHEMA'', N''ics'', ''PROCEDURE'', N''ThreadRunStart'', ''PARAMETER'', N''@SubProcessRunId''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1d7b3929-02d6-59e4-ae5a-7330b517ab40' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'CFF1AF0F2C7386BA85B94D715F834BBE4C4A5EAFA62E7979A1CF06B027A28101')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''The unique Id for the new thread run context initiated by this procedure, always populated'', ''SCHEMA'', N''ics'', ''PROCEDURE'', N''ThreadRunStart'', ''PARAMETER'', N''@ThreadRunId''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1d7b3929-02d6-59e4-ae5a-7330b517ab40' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'CFF1AF0F2C7386BA85B94D715F834BBE4C4A5EAFA62E7979A1CF06B027A28101')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\ics\Stored Procedures\ThreadRunStart.sql", ID: {1d7b3929-02d6-59e4-ae5a-7330b517ab40} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1d7b3929-02d6-59e4-ae5a-7330b517ab40' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'CFF1AF0F2C7386BA85B94D715F834BBE4C4A5EAFA62E7979A1CF06B027A28101')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('1d7b3929-02d6-59e4-ae5a-7330b517ab40' AS UNIQUEIDENTIFIER), 'CFF1AF0F2C7386BA85B94D715F834BBE4C4A5EAFA62E7979A1CF06B027A28101', 'Programmable Objects\ics\Stored Procedures\ThreadRunStart.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. Also ensure that your project scripts do not contain any "USE [OtherDbName]" statements. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('0242496c-dc89-5ebe-8d5f-d68bf2a4ce06' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'BAE86A04A4EE2ED15AAF770037B067754F5C336D7333CDEAB8F0A549AE7974F9')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\IcsApp\Stored Procedures\StartRun.sql", ID: {0242496c-dc89-5ebe-8d5f-d68bf2a4ce06} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('0242496c-dc89-5ebe-8d5f-d68bf2a4ce06' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'BAE86A04A4EE2ED15AAF770037B067754F5C336D7333CDEAB8F0A549AE7974F9')
  EXECUTE ('if object_id(''[IcsApp].[StartRun]'') is not null
	drop procedure [IcsApp].[StartRun];
');

GO
SET QUOTED_IDENTIFIER ON;

GO
SET ANSI_NULLS ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('0242496c-dc89-5ebe-8d5f-d68bf2a4ce06' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'BAE86A04A4EE2ED15AAF770037B067754F5C336D7333CDEAB8F0A549AE7974F9')
  EXECUTE ('create procedure [IcsApp].[StartRun]
(
--! ICRT master Process level inputs
  @ProcessName varchar(100) 
, @IcrtProcessId int 
--! ICRT Sub-process level inputs
, @SubProcessName  varchar(100) = null
--! ICRT/ICS Thread level inputs
, @MappingConfigTaskName varchar(100) = null
, @MappingName varchar(100) = null
--! ICRT master Process-specific outputs
, @ProcessRunId int = null out
--! ICRT Sub-process-specific outputs
, @SubProcessRunId int = null out
--! ICRT/ICS Thread-specific outputs
, @ThreadRunId  int = null out
, @StartCapturePoint  datetime = null out
, @EndCapturePoint  datetime = null out
--! ICRT/ICS common outputs
, @RunType varchar(8) = null out
, @Instruction varchar(16) = null out
, @Message varchar(500) = null out
)
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
PROCEDURE NAME:		IcsApp.StartRun
DESCRIPTION:		ICRT interface/wrapper for ics.ProcessRunStart/SubProcessRunStart/ThreadRunStart procedures
ORIGIN DATE:		04-AUG-2017
ORIGINAL AUTHOR:	Greg M. Lucas

Returns
=======
@@Error - always zero on success

Additional Notes
================
Stubs 

REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		04-AUG-2017		GML		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------

**********************************************************************************************************************/
--</CommentHeader>

begin
	set nocount on;

	--! Standard/ExceptionHandler variables
	declare	@_FunctionName nvarchar(255) = quotename(object_schema_name(@@procid)) + ''.'' + quotename(object_name(@@procid));
	declare	@_Error int = 0;
	declare @_RowCount int = 0;
	declare @_ReturnValue int = 0;
	declare	@_Message nvarchar(512);
	declare	@_ErrorContext nvarchar(512);
	declare	@_Step varchar(128);
	declare	@_ExceptionId int;

	/*===================================================================================================================*/
	/**/	--! JournalWriter variables
	/**/	declare	@_SprocStartTime datetime = getdate()
	/**/	declare	@_StepStartTime datetime
	/**/	declare	@_StepEndTime datetime
	/**/	declare	@_ProgressMessage varchar(2000)
	/**/	declare @_ProgressLog varchar(max);
	/**/	
	/**/	set @_ProgressMessage = @_FunctionName
	/**/		+ '' starting at '' + coalesce(convert(varchar(24), @_SprocStartTime, 120), '''') + '' with inputs: ''
	/**/		--! ICRT master Process level inputs
	/**/		+ char(10) + ''    ICRT Process Name            : '' + coalesce(@ProcessName, ''NULL'')
	/**/		+ char(10) + ''    ICRT Process ID	           : '' + coalesce(cast(@IcrtProcessId as varchar(32)), ''NULL'') 
	/**/		--! ICRT Sub-process level inputs
	/**/		+ char(10) + ''    ICRT Sub-process Name        : '' + coalesce(@SubProcessName, ''NULL'')
	/**/		--! ICRT/ICS Thread level inputs
	/**/		+ char(10) + ''    ICS Mapping Config Task Name : '' + coalesce(@MappingConfigTaskName, ''NULL'')
	/**/		+ char(10) + ''    ICS Mapping Name             : '' + coalesce(@MappingName, ''NULL'')
	/**/		--! ICRT master Process-specific outputs
	/**/		+ char(10) + ''    Process Run ID (in)	       : '' + coalesce(cast(@ProcessRunId as varchar(32)), ''NULL'')
	/**/		--! ICRT Sub-process-specific outputs
	/**/		+ char(10) + ''    Sub-process ID (in)	       : '' + coalesce(cast(@SubProcessRunId as varchar(32)), ''NULL'')
	/**/		--! ICRT/ICS Thread-specific outputs
	/**/		+ char(10) + ''    Thread Run ID (in)	       : '' + coalesce(cast(@ThreadRunId as varchar(32)), ''NULL'')
	/**/		+ char(10) + ''    Start Capture Point (in)	   : '' + coalesce(format(@StartCapturePoint, ''yyyy-MM-dd HH:mm:ss.mmmm''), ''NULL'')
	/**/		+ char(10) + ''    End Capture Point (in)	   : '' + coalesce(format(@EndCapturePoint, ''yyyy-MM-dd HH:mm:ss.mmmm''), ''NULL'')
	/**/		--! ICRT/ICS common outputs
	/**/		+ char(10) + ''    Run Type (in)                : '' + coalesce(@RunType, ''NULL'')
	/**/		+ char(10) + ''    Instruction (in)             : '' + coalesce(@Instruction, ''NULL'')
	/**/
	/**/	set @_ProgressLog = @_ProgressMessage;
	/*===================================================================================================================*/

	begin try
		set @_Step = ''Validate Inputs'';

		--! ICRT Process name and ICRT Process Id are required on all calls
		if isnull(@ProcessName, '''') = '''' raiserror (''ICRT Process Name input must not be null or empty'',16,1)
		if isnull(@IcrtProcessId, 0) !> 0 raiserror (''ICRT Process Id must not be null, negative or zero'',16,1)

		--! (NB: We test thread inputs before sub-process to ensure the correct error is thrown regardless of which sub-process values are provided)
		if len(@MappingConfigTaskName) > 0
			begin
				--! If the ICS Mapping Config Task name is populated then we are starting a new thread run
				--! and the (BAT_MAN) Sub-Process Run Id becomes mandatory
				if coalesce(@SubProcessRunId, 0) !> 0
					raiserror(''(BatMan) Sub-process Run Id can not be null, negative or zero when starting a new thread: "%s"'', 16, 1, @MappingConfigTaskName);

				if isnull(@MappingName, '''') = '''' raiserror (''Mapping Name input can not be null or empty when starting a new thread: "%s"'', 16, 1, @MappingConfigTaskName);

				/*===================================================================================================================*/
				/**/	set @_ProgressLog = coalesce(@_ProgressLog, '''') + ''initiating call to ics.ThreadRunStart...'' ;
				/*===================================================================================================================*/
				
				set @_Step = ''Start Thread'';

				exec ics.ThreadRunStart
					  @MappingConfigTaskName = @MappingConfigTaskName
					, @MappingName = @MappingName
					, @SubProcessRunId = @SubProcessRunId
					, @ThreadRunId = @ThreadRunId out
					, @RunType = @RunType out
					, @Instruction = @Instruction out
					, @Message = @Message out
					, @StartCapturePoint = @StartCapturePoint out
					, @EndCapturePoint = @EndCapturePoint out
			end
		else if len(@SubProcessName) > 0
			begin
				--! If the ICRT Sub-process Name is populated, then we are starting a new sub-process run
				--! and the (BAT_MAN) Process Run Id becomes mandatory
				if coalesce(@ProcessRunId, 0) !> 0
					raiserror(''(BatMan) Process Run Id can not be null, negative or zero when starting a new sub process: "%s"'', 16, 1, @SubProcessName);

				/*===================================================================================================================*/
				/**/	set @_ProgressLog = coalesce(@_ProgressLog, '''') + ''initiating call to ics.SubProcessRunStart...'' ;
				/*===================================================================================================================*/
				
				set @_Step = ''Start Sub-process'';

				exec ics.SubProcessRunStart
					@ProcessName = @ProcessName
				  , @SubProcessName = @SubProcessName
				  , @ProcessRunId = @ProcessRunId
				  , @SubProcessRunId = @SubProcessRunId out
				  , @RunType = @RunType out
				  , @Instruction = @Instruction out
				  , @Message = @Message out
			end
		else
			begin
				--! If the ICRT Sub-process Name and MCT name are both null/empty, then we must be starting
				--! a new (master) process run and the (BAT_MAN) Process Run Id becomes mandatory

				/*===================================================================================================================*/
				/**/	set @_ProgressLog = coalesce(@_ProgressLog, '''') + ''initiating call to ics.ProcessRunStart...'' ;
				/*===================================================================================================================*/
				
				set @_Step = ''Start Process'';

				exec ics.ProcessRunStart
					@ProcessName = @ProcessName
				  , @IcrtProcessId = @IcrtProcessId
				  , @ProcessRunId = @ProcessRunId out
				  , @RunType = @RunType out
				  , @Instruction = @Instruction out
				  , @Message = @Message out
			end

		/*===================================================================================================================*/
		/**/	set @_ProgressMessage = char(10) + char(10)  + ''Outputs: ''
		/**/		--! ICRT master Process-specific outputs
		/**/		+ char(10) + ''    Process Run ID (out)	       : '' + coalesce(cast(@ProcessRunId as varchar(32)), ''NULL'')
		/**/		--! ICRT Sub-process-specific outputs
		/**/		+ char(10) + ''    Sub-process ID (out)	       : '' + coalesce(cast(@SubProcessRunId as varchar(32)), ''NULL'')
		/**/		--! ICRT/ICS Thread-specific outputs
		/**/		+ char(10) + ''    Thread Run ID (out)	       : '' + coalesce(cast(@ThreadRunId as varchar(32)), ''NULL'')
		/**/		+ char(10) + ''    Start Capture Point (out)	   : '' + coalesce(format(@StartCapturePoint, ''yyyy-MM-dd HH:mm:ss.mmmm''), ''NULL'')
		/**/		+ char(10) + ''    End Capture Point (out)	   : '' + coalesce(format(@EndCapturePoint, ''yyyy-MM-dd HH:mm:ss.mmmm''), ''NULL'')
		/**/		--! ICRT/ICS common outputs
		/**/		+ char(10) + ''    Run Type (out)                : '' + coalesce(@RunType, ''NULL'')
		/**/		+ char(10) + ''    Instruction (out)             : '' + coalesce(@Instruction, ''NULL'')
		/**/
		/**/	set @_ProgressLog = coalesce(@_ProgressLog, '''') + @_ProgressMessage ;
		/*===================================================================================================================*/

	end try
	
	begin catch
		set @_ErrorContext = ''Failed to record start of run for ICRT Process: '' + coalesce(''"'' + @ProcessName + ''"'', ''NULL'')
			+ '', ICRT Sub-Process: '' + coalesce(''"'' + @SubProcessName + ''"'', ''NULL'')
			+ '' and MCT Name: '' + coalesce(''"'' + @MappingConfigTaskName + ''"'', ''NULL'')
			+ '' at step: '' + coalesce(''['' + @_Step + '']'', ''NULL'')

		exec log4.ExceptionHandler
				  @ErrorContext   = @_ErrorContext
				, @ErrorProcedure = @_FunctionName
				, @ErrorNumber    = @_Error out
				, @ReturnMessage  = @_Message out
				, @ExceptionId    = @_ExceptionId out

	end catch
	
--/////////////////////////////////////////////////////////////////////////////////////////////////
EndEx:
--/////////////////////////////////////////////////////////////////////////////////////////////////

	/*===================================================================================================================*/
	/**/	exec log4.JournalWriter
	/**/		  @Task = ''POC''
	/**/		, @FunctionName = @_FunctionName
	/**/		, @StepInFunction = @_Step
	/**/		, @MessageText = @Message
	/**/		, @ExtraInfo = @_ProgressLog
	/**/		, @Severity = 1024 -- DEBUG
	/*===================================================================================================================*/

	--! Finally, throw an exception that will be detected by the caller
	if @_Error > 0 raiserror(@_Message, 16, 99);

	set nocount off;

	--! Return the value of @@ERROR (which will be zero on success)
	return (@_Error);
end

');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('0242496c-dc89-5ebe-8d5f-d68bf2a4ce06' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'BAE86A04A4EE2ED15AAF770037B067754F5C336D7333CDEAB8F0A549AE7974F9')
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''ICRT interface/wrapper for the ics.ProcessRunStart, SubProcessRunStart or ThreadRunStart procedures.  Validates inputs and then, depending on the supplied values calls one and only one of the above procedures.
1) If @MappingConfigTaskName is populated, and if @SubProcessRunId & @MappingName are valid,  then ics.ThreadRunStart will be called to record the start of a new thread run instance (which equates to the execution of a Mapping Config Task in ICS)
2) If @MappingConfigTaskName is null or empty, and if @SubProcessName is populated, and if @ProcessRunId is valid, then ics.SubProcessRunStart will be called to record the start of a new sub-process/step run (which equates to the execution of a subject area-specific ICRT sub-process)
3) If @MappingConfigTaskName and @SubProcessName are both null or empty, and if @ProcessName is populated and @IcrtProcessId is valid, then ics.ProcessRunStart will be called to record the start of a new (master) data load process run (which equates to an execution instance of an overall ICRT process).  NB: In the MVP version of BAT_MAN this step will also include a check to ensure that there is not already a running instance of the specified process - which would result in an @Instruction of “STOP” being output)'', ''SCHEMA'', N''IcsApp'', ''PROCEDURE'', N''StartRun'', null, null
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('0242496c-dc89-5ebe-8d5f-d68bf2a4ce06' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'BAE86A04A4EE2ED15AAF770037B067754F5C336D7333CDEAB8F0A549AE7974F9')
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''Optional, output only for MCT/Thread runs. The point in time at source up to and including which to capture any changes, may be NULL if delta/CDC loads are not implemented for this table.  ICS Note: Source Query Predicate will be: “<= EndCapturePoint”'', ''SCHEMA'', N''IcsApp'', ''PROCEDURE'', N''StartRun'', ''PARAMETER'', N''@EndCapturePoint''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('0242496c-dc89-5ebe-8d5f-d68bf2a4ce06' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'BAE86A04A4EE2ED15AAF770037B067754F5C336D7333CDEAB8F0A549AE7974F9')
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''Mandatory at all times.  The Execution Instance ID of the ICRT process that initiated this batch process run'', ''SCHEMA'', N''IcsApp'', ''PROCEDURE'', N''StartRun'', ''PARAMETER'', N''@IcrtProcessId''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('0242496c-dc89-5ebe-8d5f-d68bf2a4ce06' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'BAE86A04A4EE2ED15AAF770037B067754F5C336D7333CDEAB8F0A549AE7974F9')
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''Output, indicates what action the caller should take in relation to this run attempt, always populated.  Will be one of the following four values: "RUN", "SKIP", "STOP" or "ERROR"'', ''SCHEMA'', N''IcsApp'', ''PROCEDURE'', N''StartRun'', ''PARAMETER'', N''@Instruction''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('0242496c-dc89-5ebe-8d5f-d68bf2a4ce06' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'BAE86A04A4EE2ED15AAF770037B067754F5C336D7333CDEAB8F0A549AE7974F9')
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''Mandatory if the intention is to record the start of a table-specific data movement task in ICS, otherwise optional/ignore.  The name of the mapping configuration task within ICS responsible for loading or transforming the data for one table (from which the Thread Id may be derived)'', ''SCHEMA'', N''IcsApp'', ''PROCEDURE'', N''StartRun'', ''PARAMETER'', N''@MappingConfigTaskName''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('0242496c-dc89-5ebe-8d5f-d68bf2a4ce06' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'BAE86A04A4EE2ED15AAF770037B067754F5C336D7333CDEAB8F0A549AE7974F9')
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''Mandatory only if recording the start of a table-specific data movement task i.e. when @MappingConfigTaskName is also populated, otherwise optional/ignore'', ''SCHEMA'', N''IcsApp'', ''PROCEDURE'', N''StartRun'', ''PARAMETER'', N''@MappingName''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('0242496c-dc89-5ebe-8d5f-d68bf2a4ce06' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'BAE86A04A4EE2ED15AAF770037B067754F5C336D7333CDEAB8F0A549AE7974F9')
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''A user-friendly message relating to any reason behind the Instruction output – especially if the result is anything other than “RUN”'', ''SCHEMA'', N''IcsApp'', ''PROCEDURE'', N''StartRun'', ''PARAMETER'', N''@Message''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('0242496c-dc89-5ebe-8d5f-d68bf2a4ce06' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'BAE86A04A4EE2ED15AAF770037B067754F5C336D7333CDEAB8F0A549AE7974F9')
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''Mandatory at all times.  The name of the ICRT/ICS process responsible for running the end-to-end data load for a source (and from which the Batch Process Id can be derived)'', ''SCHEMA'', N''IcsApp'', ''PROCEDURE'', N''StartRun'', ''PARAMETER'', N''@ProcessName''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('0242496c-dc89-5ebe-8d5f-d68bf2a4ce06' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'BAE86A04A4EE2ED15AAF770037B067754F5C336D7333CDEAB8F0A549AE7974F9')
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''Mandatory input if recording the start of a sub-process run i.e. when @SubProcessName is populated; the (BAT_MAN) Process Run context within which a new sub-process is to be executed.  Otherwise optional/output if recording the start of an ICRT (master) process i.e. when @SubProcessName and @MappingConfigTaskName are both null or empty.  The unique Id for the new process run context initiated by this ics.ProcessRunStart, always populated on success.'', ''SCHEMA'', N''IcsApp'', ''PROCEDURE'', N''StartRun'', ''PARAMETER'', N''@ProcessRunId''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('0242496c-dc89-5ebe-8d5f-d68bf2a4ce06' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'BAE86A04A4EE2ED15AAF770037B067754F5C336D7333CDEAB8F0A549AE7974F9')
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''Output, indicates whether this is a “FULL” or “DELTA” load (and allows the caller to choose the appropriate code path according to expected data quantities.  Always populated.'', ''SCHEMA'', N''IcsApp'', ''PROCEDURE'', N''StartRun'', ''PARAMETER'', N''@RunType''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('0242496c-dc89-5ebe-8d5f-d68bf2a4ce06' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'BAE86A04A4EE2ED15AAF770037B067754F5C336D7333CDEAB8F0A549AE7974F9')
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''Optional, output only for MCT/Thread runs. The point in time at source from which to capture any changes, may be NULL if delta/CDC loads are not implemented for this table.  ICS Note: Source Query Predicate will be: “ > StartCapturePoint”'', ''SCHEMA'', N''IcsApp'', ''PROCEDURE'', N''StartRun'', ''PARAMETER'', N''@StartCapturePoint''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('0242496c-dc89-5ebe-8d5f-d68bf2a4ce06' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'BAE86A04A4EE2ED15AAF770037B067754F5C336D7333CDEAB8F0A549AE7974F9')
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''Mandatory if the intention is to record the start of a subject area-specific sub-process/step run, otherwise optional/ignore.  The name of the ICRT sub-process responsible for running this step within the overall end-to-end data load for a source (from which the Step Id may be derived)'', ''SCHEMA'', N''IcsApp'', ''PROCEDURE'', N''StartRun'', ''PARAMETER'', N''@SubProcessName''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('0242496c-dc89-5ebe-8d5f-d68bf2a4ce06' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'BAE86A04A4EE2ED15AAF770037B067754F5C336D7333CDEAB8F0A549AE7974F9')
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''Mandatory only if recording the start of a table-specific data movement task i.e when @MappingConfigTaskName is populated; the (BAT_MAN) Sub-process/step run context within which a new MCT Thread is to be executed.  Otherwise optional/output if recording the start of an ICRT sub-process i.e. when @SubProcessName is populated and @MappingConfigTaskName is null or empty.  The unique Id for the new sub-process run context initiated by this procedure, always populated on success for new sub-process and thread runs.'', ''SCHEMA'', N''IcsApp'', ''PROCEDURE'', N''StartRun'', ''PARAMETER'', N''@SubProcessRunId''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('0242496c-dc89-5ebe-8d5f-d68bf2a4ce06' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'BAE86A04A4EE2ED15AAF770037B067754F5C336D7333CDEAB8F0A549AE7974F9')
  EXECUTE ('exec sp_addextendedproperty N''MS_Description'', N''Optional, output only if recording the start of an ICS MCT run i.e. when @MappingConfigTaskName is populated on success.  The unique Id for the new thread run context initiated for this MCT execution context.'', ''SCHEMA'', N''IcsApp'', ''PROCEDURE'', N''StartRun'', ''PARAMETER'', N''@ThreadRunId''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('0242496c-dc89-5ebe-8d5f-d68bf2a4ce06' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'BAE86A04A4EE2ED15AAF770037B067754F5C336D7333CDEAB8F0A549AE7974F9')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\IcsApp\Stored Procedures\StartRun.sql", ID: {0242496c-dc89-5ebe-8d5f-d68bf2a4ce06} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('0242496c-dc89-5ebe-8d5f-d68bf2a4ce06' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'BAE86A04A4EE2ED15AAF770037B067754F5C336D7333CDEAB8F0A549AE7974F9')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('0242496c-dc89-5ebe-8d5f-d68bf2a4ce06' AS UNIQUEIDENTIFIER), 'BAE86A04A4EE2ED15AAF770037B067754F5C336D7333CDEAB8F0A549AE7974F9', 'Programmable Objects\IcsApp\Stored Procedures\StartRun.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. Also ensure that your project scripts do not contain any "USE [OtherDbName]" statements. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1f7af49f-b592-591a-b3db-2d4eedd4a91c' AS UNIQUEIDENTIFIER) AND [script_checksum] = '86AE8C50DEE7CBCEAF35FDC9148992ABE66FCD7E2C13E1640CA2F2DD064D0A35')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\IcsApp\Stored Procedures\StopRun.sql", ID: {1f7af49f-b592-591a-b3db-2d4eedd4a91c} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1f7af49f-b592-591a-b3db-2d4eedd4a91c' AS UNIQUEIDENTIFIER) AND [script_checksum] = '86AE8C50DEE7CBCEAF35FDC9148992ABE66FCD7E2C13E1640CA2F2DD064D0A35')
  EXECUTE ('IF OBJECT_ID(''[IcsApp].[StopRun]'') IS NOT NULL
	DROP PROCEDURE [IcsApp].[StopRun];

');

GO
SET QUOTED_IDENTIFIER ON;

GO
SET ANSI_NULLS ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1f7af49f-b592-591a-b3db-2d4eedd4a91c' AS UNIQUEIDENTIFIER) AND [script_checksum] = '86AE8C50DEE7CBCEAF35FDC9148992ABE66FCD7E2C13E1640CA2F2DD064D0A35')
  EXECUTE ('create procedure [IcsApp].[StopRun]
(
--! ICRT/ICS common/mandatory inputs
  @ProcessName varchar(100)
, @IcrtProcessId int 
, @EndState varchar(16)
, @EndMessage varchar(500) = null
--! ICRT master Process level inputs
, @ProcessRunId int = null
--! ICRT Sub-process level inputs
, @SubProcessName varchar(100) = null
, @SubProcessRunId int = null
--! ICRT/ICS Thread level inputs
, @MappingConfigTaskName varchar(100) = null
, @MappingName varchar(100) = null
, @ThreadRunId int = null
, @SuccessSourceRows int = null
, @FailedSourceRows int = null
, @SuccessTargetRows int = null
, @FailedTargetRows int = null
)
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
PROCEDURE NAME:		IcsApp.StopRun
DESCRIPTION:		ICRT interface/wrapper for ics.ProcessRunStart/SubProcessRunStart/ThreadRunStart
ORIGIN DATE:		04-AUG-2017
ORIGINAL AUTHOR:	Greg M. Lucas

Returns
=======
@@Error - always zero on success

Additional Notes
================
Stubs 

REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		04-AUG-2017		GML		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------

**********************************************************************************************************************/
--</CommentHeader>

begin
	set nocount on;

	--! Standard/ExceptionHandler variables
	declare	@_FunctionName nvarchar(255) = quotename(object_schema_name(@@procid)) + ''.'' + quotename(object_name(@@procid));
	declare	@_Error int = 0;
	declare @_RowCount int = 0;
	declare @_ReturnValue int = 0;
	declare	@_Message nvarchar(512);
	declare	@_ErrorContext nvarchar(512);
	declare	@_Step varchar(128);
	declare	@_ExceptionId int;

	/*===================================================================================================================*/
	/**/	--! JournalWriter variables
	/**/	declare	@_SprocStartTime datetime = getdate()
	/**/	declare	@_StepStartTime datetime
	/**/	declare	@_StepEndTime datetime
	/**/	declare	@_ProgressMessage varchar(2000)
	/**/	declare @_ProgressLog varchar(max);
	/**/	
	/**/	set @_ProgressMessage = @_FunctionName
	/**/		+ '' starting at '' + coalesce(convert(varchar(24), @_SprocStartTime, 120), '''') + '' with inputs: ''
	/**/		--! ICRT/ICS common/mandatory inputs
	/**/		+ char(10) + ''    ICRT Process Name            : '' + coalesce(@ProcessName, ''NULL'')
	/**/		+ char(10) + ''    ICRT Process Id	           : '' + coalesce(cast(@IcrtProcessId as varchar(32)), ''NULL'') 
	/**/		+ char(10) + ''    End State                    : '' + coalesce(@EndState, ''NULL'')
	/**/		+ char(10) + ''    End Message                  : '' + coalesce(@EndMessage, ''NULL'')
	/**/		--! ICRT master Process level inputs
	/**/		+ char(10) + ''    Process Run Id	           : '' + coalesce(cast(@ProcessRunId as varchar(32)), ''NULL'')
	/**/		--! ICRT Sub-process level inputs
	/**/		+ char(10) + ''    ICRT Sub-process Name        : '' + coalesce(@SubProcessName, ''NULL'')
	/**/		+ char(10) + ''    Sub-process Id	           : '' + coalesce(cast(@SubProcessRunId as varchar(32)), ''NULL'')
	/**/		--! ICRT/ICS Thread level inputs
	/**/		+ char(10) + ''    ICS Mapping Config Task Name : '' + coalesce(@MappingConfigTaskName, ''NULL'')
	/**/		+ char(10) + ''    ICS Mapping Name             : '' + coalesce(@MappingName, ''NULL'')
	/**/		+ char(10) + ''    Thread Run Id                : '' + coalesce(cast(@ThreadRunId as varchar(32)), ''NULL'')
	/**/		+ char(10) + ''    Success Source Rows          : '' + coalesce(cast(@SuccessSourceRows as varchar(32)), ''NULL'')
	/**/		+ char(10) + ''    Failed Source Rows           : '' + coalesce(cast(@FailedSourceRows as varchar(32)), ''NULL'')
	/**/		+ char(10) + ''    Success Target Rows          : '' + coalesce(cast(@SuccessTargetRows as varchar(32)), ''NULL'')
	/**/		+ char(10) + ''    Failed Target Rows           : '' + coalesce(cast(@FailedTargetRows as varchar(32)), ''NULL'')
	/**/
	/**/	set @_ProgressLog = @_ProgressMessage;
	/*===================================================================================================================*/


	begin try
		set @_Step = ''Validate Inputs'';

		--! ICRT Process name, ICRT Process Id and End State are required on all calls
		if isnull(@ProcessName, '''') = '''' raiserror (''ICRT Process Name input must not be null or empty'',16,1)
		if isnull(@IcrtProcessId, 0) !> 0 raiserror (''ICRT Process Id must not be null, negative or zero'',16,1)
		if isnull(@EndState, '''') not in (''SUCCEEDED'', ''FAILED'', ''SKIPPED'', ''STOPPED'')
			raiserror(''End State value can only be "SUCCEEDED", "FAILED", "SKIPPED", "STOPPED"'', 16, 1) ;

		--! Define default values for any remaining inputs
		set @EndMessage = coalesce(@EndMessage, '''')

		--! (NB: We test thread inputs before sub-process to ensure the correct error is thrown regardless of which sub-process values are provided)
		if len(@MappingConfigTaskName) > 0
			begin
				--! If the ICS Mapping Config Task name is populated then we are ending an open thread run (BAT_MAN) Thread Run Id becomes mandatory
				if isnull(@ThreadRunId, 0) !> 0
					raiserror(''(BatMan) Thread Run Id can not be null, negative or zero when ending an open thread for MCT: "%s"'', 16, 1, @MappingConfigTaskName);

				--! Similarly, if we are closing a thread, the source and target row counts are also mandatory (although can be zero)
				if not (isnull(@SuccessSourceRows, -1) >= 0)
					raiserror(''Source Success row count can not be null or negative when closing an open thread for MCT: "%s" <<%i>>'', 16, 1, @MappingConfigTaskName, @SuccessSourceRows);

				if not (isnull(@FailedSourceRows, -1) >= 0)
					raiserror(''Failed Source row count can not be null or negative when closing an open thread for MCT: "%s" <<%i>>'', 16, 1, @MappingConfigTaskName, @FailedSourceRows);

				if not (isnull(@SuccessTargetRows, -1) >= 0)
					raiserror(''Target Success row count can not be null or negative when closing an open thread for MCT: "%s" <<%i>>'', 16, 1, @MappingConfigTaskName, @SuccessTargetRows);

				if not (isnull(@FailedTargetRows, -1) >= 0)
					raiserror(''Failed Target row count can not be null or negative when closing an open thread for MCT: "%s" <<%i>>'', 16, 1, @MappingConfigTaskName, @FailedTargetRows);

				/*===================================================================================================================*/
				/**/	set @_ProgressLog = coalesce(@_ProgressLog, '''') + ''initiating call to ics.SubProcessRunEnd...'' ;
				/*===================================================================================================================*/
				
				set @_Step = ''End Thread'';

				exec ics.ThreadRunEnd
					  @MappingConfigTaskName = @MappingConfigTaskName
					, @MappingName = @MappingName
					, @ThreadRunId = @ThreadRunId
					, @EndState = @EndState
					, @EndMessage = @EndMessage
					, @SuccessSourceRows = @SuccessSourceRows
					, @FailedSourceRows = @FailedSourceRows
					, @SuccessTargetRows = @SuccessTargetRows
					, @FailedTargetRows = @FailedTargetRows
			end
		else if len(@SubProcessName) > 0
			begin
				--! If the ICRT Sub-process Name is populated and the MCT name is null/empty, then we must be
				--! closing an open sub-process run and the (BAT_MAN) Sub-rocess Run Id becomes mandatory

				if isnull(@SubProcessRunId, 0) !> 0
					raiserror(''(BatMan) Sub-process Run Id can not be null, negative or zero when ending an open sub-process: "%s"'', 16, 1, @SubProcessName);

				/*===================================================================================================================*/
				/**/	set @_ProgressLog = coalesce(@_ProgressLog, '''') + ''initiating call to ics.SubProcessRunEnd...'' ;
				/*===================================================================================================================*/
				
				set @_Step = ''End Sub-process'';

				exec ics.SubProcessRunEnd
					  @ProcessName = @ProcessName
					, @SubProcessName = @SubProcessName
					, @SubProcessRunId = @SubProcessRunId
					, @EndState = @EndState
					, @EndMessage = @EndMessage
			end
		else
			begin
				--! If the ICRT Sub-process Name and MCT name are both null/empty, then we must be closing
				--! an open (master) process run and the (BAT_MAN) Process Run Id becomes mandatory
				if isnull(@ProcessRunId, 0) !> 0
					raiserror(''(BatMan) Process Run Id can not be null, negative or zero when ending an open process: "%s"'', 16, 1, @ProcessName);

				/*===================================================================================================================*/
				/**/	set @_ProgressLog = coalesce(@_ProgressLog, '''') + ''initiating call to ics.ProcessRunEnd...'' ;
				/*===================================================================================================================*/
				
				set @_Step = ''End Process'';

				exec ics.ProcessRunEnd
					  @ProcessName = @ProcessName
					, @ProcessRunId = @ProcessRunId
					, @EndState = @EndState
					, @EndMessage = @EndMessage
			end

		/*===================================================================================================================*/
		/**/	set @_Message = ''Successfully recorded end of run for ICRT Process: '' + coalesce(''"'' + @ProcessName + ''"'', ''NULL'')
		/**/		+ '', ICRT Sub-Process: '' + coalesce(''"'' + @SubProcessName + ''"'', ''NULL'')
		/**/		+ '' and MCT Name: '' + coalesce(''"'' + @MappingConfigTaskName + ''"'', ''NULL'')
		/**/		+ '' with End State: '' + coalesce(''['' + @EndState + '']'', ''NULL'')
		/*===================================================================================================================*/
	end try
	
	begin catch
		set @_ErrorContext = ''Failed to record end of run for ICRT Process: '' + coalesce(''"'' + @ProcessName + ''"'', ''NULL'')
			+ '', ICRT Sub-Process: '' + coalesce(''"'' + @SubProcessName + ''"'', ''NULL'')
			+ '' and MCT Name: '' + coalesce(''"'' + @MappingConfigTaskName + ''"'', ''NULL'')
			+ '' at step: '' + coalesce(''['' + @_Step + '']'', ''NULL'')
			+ '' with End State: '' + coalesce(''['' + @EndState + '']'', ''NULL'')

		exec log4.ExceptionHandler
				  @ErrorContext   = @_ErrorContext
				, @ErrorProcedure = @_FunctionName
				, @ErrorNumber    = @_Error out
				, @ReturnMessage  = @_Message out
				, @ExceptionId    = @_ExceptionId out

	end catch
	
--/////////////////////////////////////////////////////////////////////////////////////////////////
EndEx:
--/////////////////////////////////////////////////////////////////////////////////////////////////

	/*===================================================================================================================*/
	/**/	exec log4.JournalWriter
	/**/		  @Task = ''POC''
	/**/		, @FunctionName = @_FunctionName
	/**/		, @StepInFunction = @_Step
	/**/		, @MessageText = @_Message
	/**/		, @ExtraInfo = @_ProgressLog
	/**/		, @Severity = 1024 -- DEBUG
	/*===================================================================================================================*/

	--! Finally, throw an exception that will be detected by the caller
	if @_Error > 0 raiserror(@_Message, 16, 99);

	set nocount off;

	--! Return the value of @@ERROR (which will be zero on success)
	return (@_Error);
end

');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1f7af49f-b592-591a-b3db-2d4eedd4a91c' AS UNIQUEIDENTIFIER) AND [script_checksum] = '86AE8C50DEE7CBCEAF35FDC9148992ABE66FCD7E2C13E1640CA2F2DD064D0A35')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''ICRT interface/wrapper for the ics ProcessRunEnd, SubProcessRunEnd or ThreadRunEnd procedures.  Validates inputs and then, depending on the supplied values calls one and only one of the above procedures based on the following rules:
1) If @MappingConfigTaskName is populated, and if @ThreadRunId & the souirce/target row count inputs are all valid,  then ics.ThreadRunEnd will be called to record the end state of the specified thread run instance (which equates to the execution of a Mapping Config Task in ICS)
2) If @MappingConfigTaskName is null or empty, and if @SubProcessName is populated and @SubProcessRunId is valid, then ics.SubProcessRunEnd will be called to record the end state of the indicated sub-process/step run (which equates to the execution of a subject area-specific ICRT sub-process)
3) If @MappingConfigTaskName and @SubProcessName are both null or empty, and if @ProcessName is populated and @ProcessRunId is valid, then ics.ProcessRunEnd will be called to record the end state of the indicated (master) data load process run (which equates to an execution instance of an overall ICRT process).'', ''SCHEMA'', N''IcsApp'', ''PROCEDURE'', N''StopRun'', NULL, NULL
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1f7af49f-b592-591a-b3db-2d4eedd4a91c' AS UNIQUEIDENTIFIER) AND [script_checksum] = '86AE8C50DEE7CBCEAF35FDC9148992ABE66FCD7E2C13E1640CA2F2DD064D0A35')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Optional, a message provided by the caller to provide any detail around the reason for success, failure or other stoppage'', ''SCHEMA'', N''IcsApp'', ''PROCEDURE'', N''StopRun'', ''PARAMETER'', N''@EndMessage''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1f7af49f-b592-591a-b3db-2d4eedd4a91c' AS UNIQUEIDENTIFIER) AND [script_checksum] = '86AE8C50DEE7CBCEAF35FDC9148992ABE66FCD7E2C13E1640CA2F2DD064D0A35')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Mandatory, an indicator of the final run state for this run, choose from “SUCCEEDED”, “STOPPED”, “SKIPPED” or “FAILED”'', ''SCHEMA'', N''IcsApp'', ''PROCEDURE'', N''StopRun'', ''PARAMETER'', N''@EndState''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1f7af49f-b592-591a-b3db-2d4eedd4a91c' AS UNIQUEIDENTIFIER) AND [script_checksum] = '86AE8C50DEE7CBCEAF35FDC9148992ABE66FCD7E2C13E1640CA2F2DD064D0A35')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''The number of source rows rejected or failed by this thread'', ''SCHEMA'', N''IcsApp'', ''PROCEDURE'', N''StopRun'', ''PARAMETER'', N''@FailedSourceRows''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1f7af49f-b592-591a-b3db-2d4eedd4a91c' AS UNIQUEIDENTIFIER) AND [script_checksum] = '86AE8C50DEE7CBCEAF35FDC9148992ABE66FCD7E2C13E1640CA2F2DD064D0A35')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Mandatory, the number of records failed by this thread during “write to target”, represents the total number of source rows that were not processed into the target table at all.'', ''SCHEMA'', N''IcsApp'', ''PROCEDURE'', N''StopRun'', ''PARAMETER'', N''@FailedTargetRows''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1f7af49f-b592-591a-b3db-2d4eedd4a91c' AS UNIQUEIDENTIFIER) AND [script_checksum] = '86AE8C50DEE7CBCEAF35FDC9148992ABE66FCD7E2C13E1640CA2F2DD064D0A35')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Mandatory at all times.  The Execution Instance ID of the ICRT process that initiated this batch process run'', ''SCHEMA'', N''IcsApp'', ''PROCEDURE'', N''StopRun'', ''PARAMETER'', N''@IcrtProcessId''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1f7af49f-b592-591a-b3db-2d4eedd4a91c' AS UNIQUEIDENTIFIER) AND [script_checksum] = '86AE8C50DEE7CBCEAF35FDC9148992ABE66FCD7E2C13E1640CA2F2DD064D0A35')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Mandatory only if recording the end state of an table-specific data movement task in ICS, otherwise optional/ignore.'', ''SCHEMA'', N''IcsApp'', ''PROCEDURE'', N''StopRun'', ''PARAMETER'', N''@MappingConfigTaskName''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1f7af49f-b592-591a-b3db-2d4eedd4a91c' AS UNIQUEIDENTIFIER) AND [script_checksum] = '86AE8C50DEE7CBCEAF35FDC9148992ABE66FCD7E2C13E1640CA2F2DD064D0A35')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Mandatory only if recording the end state of a table-specific data movement task in ICS i.e. when @MappingConfigTaskName is populated, otherwise optional/ignore.'', ''SCHEMA'', N''IcsApp'', ''PROCEDURE'', N''StopRun'', ''PARAMETER'', N''@MappingName''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1f7af49f-b592-591a-b3db-2d4eedd4a91c' AS UNIQUEIDENTIFIER) AND [script_checksum] = '86AE8C50DEE7CBCEAF35FDC9148992ABE66FCD7E2C13E1640CA2F2DD064D0A35')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Mandatory at all times.  The name of the ICRT/ICS process responsible for running the end-to-end data load for a source (and from which the Batch Process Id can be derived)'', ''SCHEMA'', N''IcsApp'', ''PROCEDURE'', N''StopRun'', ''PARAMETER'', N''@ProcessName''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1f7af49f-b592-591a-b3db-2d4eedd4a91c' AS UNIQUEIDENTIFIER) AND [script_checksum] = '86AE8C50DEE7CBCEAF35FDC9148992ABE66FCD7E2C13E1640CA2F2DD064D0A35')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Mandatory if recording the end state of an ICRT (master) process run i.e. when @MappingConfigTaskName and @SubProcessName are both null or empty.  The Id of the process run context that should be marked as succeeded, failed or otherwise stopped.'', ''SCHEMA'', N''IcsApp'', ''PROCEDURE'', N''StopRun'', ''PARAMETER'', N''@ProcessRunId''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1f7af49f-b592-591a-b3db-2d4eedd4a91c' AS UNIQUEIDENTIFIER) AND [script_checksum] = '86AE8C50DEE7CBCEAF35FDC9148992ABE66FCD7E2C13E1640CA2F2DD064D0A35')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Mandatory if recording the end state of an ICRT sub-process run i.e. when @MappingConfigTaskName is null or empty, otherwise optional/ignore'', ''SCHEMA'', N''IcsApp'', ''PROCEDURE'', N''StopRun'', ''PARAMETER'', N''@SubProcessName''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1f7af49f-b592-591a-b3db-2d4eedd4a91c' AS UNIQUEIDENTIFIER) AND [script_checksum] = '86AE8C50DEE7CBCEAF35FDC9148992ABE66FCD7E2C13E1640CA2F2DD064D0A35')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Mandatory only if recording the end state of an ICRT sub-process run i.e. when @SubProcessName is populated and @MappingConfigTaskName is null or empty, otherwise optional/ignore.   The Id of the sub-process run context that should be marked as succeeded, failed or otherwise stopped.'', ''SCHEMA'', N''IcsApp'', ''PROCEDURE'', N''StopRun'', ''PARAMETER'', N''@SubProcessRunId''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1f7af49f-b592-591a-b3db-2d4eedd4a91c' AS UNIQUEIDENTIFIER) AND [script_checksum] = '86AE8C50DEE7CBCEAF35FDC9148992ABE66FCD7E2C13E1640CA2F2DD064D0A35')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''The number of source rows successfully read by this thread'', ''SCHEMA'', N''IcsApp'', ''PROCEDURE'', N''StopRun'', ''PARAMETER'', N''@SuccessSourceRows''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1f7af49f-b592-591a-b3db-2d4eedd4a91c' AS UNIQUEIDENTIFIER) AND [script_checksum] = '86AE8C50DEE7CBCEAF35FDC9148992ABE66FCD7E2C13E1640CA2F2DD064D0A35')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Mandatory, the total number of records written to the target table by this thread, typically the total number of inserts, updates and soft-deletes on a single target table.  This is required so that table level quality gates and execution dependencies can be implemented as needed.'', ''SCHEMA'', N''IcsApp'', ''PROCEDURE'', N''StopRun'', ''PARAMETER'', N''@SuccessTargetRows''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1f7af49f-b592-591a-b3db-2d4eedd4a91c' AS UNIQUEIDENTIFIER) AND [script_checksum] = '86AE8C50DEE7CBCEAF35FDC9148992ABE66FCD7E2C13E1640CA2F2DD064D0A35')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Mandatory only if recording the end state of a table-specific data movement task in ICS i.e. when @MappingConfigTaskName is populated, otherwise optional/ignore.  The Id of the Thread run context that should be marked as succeeded, failed or otherwise stopped'', ''SCHEMA'', N''IcsApp'', ''PROCEDURE'', N''StopRun'', ''PARAMETER'', N''@ThreadRunId''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1f7af49f-b592-591a-b3db-2d4eedd4a91c' AS UNIQUEIDENTIFIER) AND [script_checksum] = '86AE8C50DEE7CBCEAF35FDC9148992ABE66FCD7E2C13E1640CA2F2DD064D0A35')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\IcsApp\Stored Procedures\StopRun.sql", ID: {1f7af49f-b592-591a-b3db-2d4eedd4a91c} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('1f7af49f-b592-591a-b3db-2d4eedd4a91c' AS UNIQUEIDENTIFIER) AND [script_checksum] = '86AE8C50DEE7CBCEAF35FDC9148992ABE66FCD7E2C13E1640CA2F2DD064D0A35')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('1f7af49f-b592-591a-b3db-2d4eedd4a91c' AS UNIQUEIDENTIFIER), '86AE8C50DEE7CBCEAF35FDC9148992ABE66FCD7E2C13E1640CA2F2DD064D0A35', 'Programmable Objects\IcsApp\Stored Procedures\StopRun.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. Also ensure that your project scripts do not contain any "USE [OtherDbName]" statements. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('5c5decea-a2b8-5de4-b033-8b98cb24ff39' AS UNIQUEIDENTIFIER) AND [script_checksum] = '4E776C790135D10E47AD86AFC89664CD66CB9F8F9B4F95B61CCB0050A69B5752')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\IcsApp\Stored Procedures\SubProcessCheckThreads.sql", ID: {5c5decea-a2b8-5de4-b033-8b98cb24ff39} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('5c5decea-a2b8-5de4-b033-8b98cb24ff39' AS UNIQUEIDENTIFIER) AND [script_checksum] = '4E776C790135D10E47AD86AFC89664CD66CB9F8F9B4F95B61CCB0050A69B5752')
  EXECUTE ('if object_id(''[IcsApp].[SubProcessCheckThreads]'') is not null
	drop procedure [IcsApp].[SubProcessCheckThreads];
');

GO
SET QUOTED_IDENTIFIER ON;

GO
SET ANSI_NULLS ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('5c5decea-a2b8-5de4-b033-8b98cb24ff39' AS UNIQUEIDENTIFIER) AND [script_checksum] = '4E776C790135D10E47AD86AFC89664CD66CB9F8F9B4F95B61CCB0050A69B5752')
  EXECUTE ('create procedure [IcsApp].[SubProcessCheckThreads]
(	
  @SubProcessName	   varchar(100) 
, @SubProcessRunId	   int
, @Outcome			   varchar(16) = null output
, @Message			   varchar(500) = null output 
, @ExpectedThreadCount int =null output 
, @ActualThreadCount   int =null output 
, @ThreadsSucceeded	   int =null output 
, @ThreadsSkipped	   int =null output 
, @ThreadsStopped	   int =null output 
, @ThreadsFailed	   int =null output    
)

as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
PROCEDURE NAME:		IcsApp.SubProcessCheckThreads
DESCRIPTION:		POC stub procedure
ORIGIN DATE:		26-JUL-2017
ORIGINAL AUTHOR:	Razia Nazir

Returns
=======
@@Error - always zero on success

Additional Notes
================
Stubs 

REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		26-JUL-2017		RN		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------
002		31-JUL-2017		RN		N/A		Modified OIutput parameters added.

**********************************************************************************************************************/
--</CommentHeader>

begin
	set nocount on;
	
	--! Standard/ExceptionHandler variables
	declare	@_FunctionName nvarchar(255) = quotename(object_schema_name(@@procid)) + ''.'' + quotename(object_name(@@procid));
	declare	@_Error int = 0;
	declare @_RowCount int = 0;
	declare @_ReturnValue int = 0;
	declare	@_Message nvarchar(512);
	declare	@_ErrorContext nvarchar(512);
	declare	@_Step varchar(128);
	declare	@_ExceptionId int;

	/*===================================================================================================================*/
	/**/	--! JournalWriter variables
	/**/	declare	@_SprocStartTime datetime = getdate()
	/**/	declare	@_StepStartTime datetime
	/**/	declare	@_StepEndTime datetime
	/**/	declare	@_ProgressMessage varchar(2000)
	/**/	declare @_ProgressLog varchar(max);
	/**/	
	/**/	set @_ProgressMessage = @_FunctionName
	/**/		+ '' starting at '' + coalesce(convert(varchar(24), @_SprocStartTime, 120), '''') + '' with inputs: ''
	/**/		+ char(10) + ''    ICRT SubProcess Name         : '' + coalesce(@SubProcessName, ''NULL'')
	/**/		+ char(10) + ''    (BAT_MAN) Process Run I	   : '' + coalesce(cast(@SubProcessRunId as varchar(32)), ''NULL'') 
	/**/
	/**/	set @_ProgressLog = @_ProgressMessage;
	/*===================================================================================================================*/

	begin try
		set @_Step = ''Validate Inputs'';
		set @_StepStartTime = getdate();

		if coalesce(@SubProcessRunId, 0) = 0	raiserror (''@SubProcessRunId can not be null or zero'',16,1)
		if coalesce(@SubProcessName, '''') = ''''	raiserror (''@SubProcessName can not be null or empty'',16,1)
		
		set @_Step = ''Build output values'';
		set @_StepStartTime = getdate();
	
		select
			@SubProcessRunId	  = [SubProcessRunID]
		  , @Outcome			  = [Outcome]
		  , @Message			  = [Message]
		  , @ExpectedThreadCount  = [ExpectedThreadCount]
		  , @ActualThreadCount	  = [ActualThreadCount]
		  , @ThreadsSucceeded	  = [ThreadsSucceeded]
		  , @ThreadsSkipped		  = [ThreadsSkipped]
		  , @ThreadsStopped		  = [ThreadsStopped]
		  , @ThreadsFailed		  = [ThreadsFailed]
		from
			dbo.StubResultSet
		where
			FunctionName = @_FunctionName ;
	
		/*===================================================================================================================*/
		/**/	set @_ProgressMessage = char(10) + char(10)  + ''Outputs: ''
		/**/		+ char(10) + ''    Expected Thread Count    : '' + coalesce(cast(@ExpectedThreadCount as varchar(32)), ''NULL'')
		/**/		+ char(10) + ''    Actual Thread Count      : '' + coalesce(cast(@ActualThreadCount as varchar(32)), ''NULL'')
		/**/		+ char(10) + ''    Threads Succeeded        : '' + coalesce(cast(@ThreadsSucceeded as varchar(32)), ''NULL'')
		/**/		+ char(10) + ''    Threads Skipped          : '' + coalesce(cast(@ThreadsSkipped as varchar(32)), ''NULL'')
		/**/		+ char(10) + ''    Threads Stopped          : '' + coalesce(cast(@ThreadsStopped as varchar(32)), ''NULL'')
		/**/		+ char(10) + ''    Threads Failed           : '' + coalesce(cast(@ThreadsFailed as varchar(32)), ''NULL'')
		/**/
		/**/	set @_ProgressLog = coalesce(@_ProgressLog, '''') + @_ProgressMessage ;
		/*===================================================================================================================*/

		--! Return the results as a result set
		select
			@SubProcessRunId	  as [SubProcessRunId]
		  , @Outcome			  as [Outcome]
		  , @Message			  as [Message]
		  , @ExpectedThreadCount  as [ExpectedThreadCount]
		  , @ActualThreadCount	  as [ActualThreadCount]
		  , @ThreadsSucceeded	  as [ThreadsSucceeded]
		  , @ThreadsSkipped	      as [ThreadsSkipped]
		  , @ThreadsStopped	      as [ThreadsStopped]
		  , @ThreadsFailed		  as [ThreadsFailed] ;

		/*===================================================================================================================*/
		/**/	set @_Message = ''Successfully retrurned thread counts for Sub-Process Name: '' + coalesce(''"'' + @SubProcessName + ''"'', ''NULL'')
		/**/		+ '' and Sub-process Run Id: '' + coalesce(cast(@SubProcessRunId as varchar(32)), ''NULL'') 
		/*===================================================================================================================*/
		
	end try
	
	begin catch
		set @_ErrorContext = ''Failed to start new batch run at step: '' + coalesce(''['' + @_Step + '']'', ''NULL'')

		exec log4.ExceptionHandler
				  @ErrorContext   = @_ErrorContext
				, @ErrorProcedure = @_FunctionName
				, @ErrorNumber    = @_Error out
				, @ReturnMessage  = @_Message out
				, @ExceptionId    = @_ExceptionId out

	end catch
	
--/////////////////////////////////////////////////////////////////////////////////////////////////
EndEx:
--/////////////////////////////////////////////////////////////////////////////////////////////////

	/*===================================================================================================================*/
	/**/	exec log4.JournalWriter
	/**/		  @Task = ''POC''
	/**/		, @FunctionName = @_FunctionName
	/**/		, @StepInFunction = @_Step
	/**/		, @MessageText = @_Message
	/**/		, @ExtraInfo = @_ProgressLog
	/**/		, @Severity = 1024 -- DEBUG
	/*===================================================================================================================*/

	--! Finally, throw an exception that will be detected by the caller
	if @_Error > 0 raiserror(@_Message, 16, 99);
	set nocount off;

	--! Return the value of @@ERROR (which will be zero on success)
	return (@_Error);
end
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('5c5decea-a2b8-5de4-b033-8b98cb24ff39' AS UNIQUEIDENTIFIER) AND [script_checksum] = '4E776C790135D10E47AD86AFC89664CD66CB9F8F9B4F95B61CCB0050A69B5752')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\IcsApp\Stored Procedures\SubProcessCheckThreads.sql", ID: {5c5decea-a2b8-5de4-b033-8b98cb24ff39} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('5c5decea-a2b8-5de4-b033-8b98cb24ff39' AS UNIQUEIDENTIFIER) AND [script_checksum] = '4E776C790135D10E47AD86AFC89664CD66CB9F8F9B4F95B61CCB0050A69B5752')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('5c5decea-a2b8-5de4-b033-8b98cb24ff39' AS UNIQUEIDENTIFIER), '4E776C790135D10E47AD86AFC89664CD66CB9F8F9B4F95B61CCB0050A69B5752', 'Programmable Objects\IcsApp\Stored Procedures\SubProcessCheckThreads.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. Also ensure that your project scripts do not contain any "USE [OtherDbName]" statements. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('2ffbad93-7d72-5bdd-88bb-0549ef088425' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'ED27C5462078637B473312ACCCF0FA3C7E3E282537D9602A5F8EB3BAA086C35D')
  PRINT '

***** EXECUTING MIGRATION "Static Data\batch.RunStateFlag.data.sql", ID: {2ffbad93-7d72-5bdd-88bb-0549ef088425} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('2ffbad93-7d72-5bdd-88bb-0549ef088425' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'ED27C5462078637B473312ACCCF0FA3C7E3E282537D9602A5F8EB3BAA086C35D')
  EXECUTE ('--MERGE generated by ''sp_generate_merge'' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

set nocount on


merge into [batch].[RunStateFlag] as Target
using (values
  (0,''Not Applicable'')
 ,(1,''Started'')
 ,(2,''In-Progress'')
 ,(4,''Succeeded'')
 ,(8,''Stopped'')
 ,(16,''Failed'')
 ,(32,''Skipped'')
) as Source ([FlagBit],[FlagName])
on (Target.[FlagBit] = Source.[FlagBit])
when matched and (
	nullif(Source.[FlagName], Target.[FlagName]) is not null or nullif(Target.[FlagName], Source.[FlagName]) is not null) then
 update set
  [FlagName] = Source.[FlagName]
when not matched by target then
 insert([FlagBit],[FlagName])
 values(Source.[FlagBit],Source.[FlagName])
when not matched by source then 
 delete
;
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('2ffbad93-7d72-5bdd-88bb-0549ef088425' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'ED27C5462078637B473312ACCCF0FA3C7E3E282537D9602A5F8EB3BAA086C35D')
  EXECUTE ('declare @mergeError int
 , @mergeCount int
select @mergeError = @@error, @mergeCount = @@rowcount
if @mergeError != 0
 begin
 print ''ERROR OCCURRED IN MERGE FOR [batch].[RunStateFlag]. Rows affected: '' + cast(@mergeCount as varchar(100)); -- SQL should always return zero rows affected
 end
else
 begin
 print ''[batch].[RunStateFlag] rows affected by MERGE: '' + cast(@mergeCount as varchar(100));
 end
');

GO
SET NOCOUNT OFF;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('2ffbad93-7d72-5bdd-88bb-0549ef088425' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'ED27C5462078637B473312ACCCF0FA3C7E3E282537D9602A5F8EB3BAA086C35D')
  PRINT '***** FINISHED EXECUTING MIGRATION "Static Data\batch.RunStateFlag.data.sql", ID: {2ffbad93-7d72-5bdd-88bb-0549ef088425} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('2ffbad93-7d72-5bdd-88bb-0549ef088425' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'ED27C5462078637B473312ACCCF0FA3C7E3E282537D9602A5F8EB3BAA086C35D')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('2ffbad93-7d72-5bdd-88bb-0549ef088425' AS UNIQUEIDENTIFIER), 'ED27C5462078637B473312ACCCF0FA3C7E3E282537D9602A5F8EB3BAA086C35D', 'Static Data\batch.RunStateFlag.data.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. Also ensure that your project scripts do not contain any "USE [OtherDbName]" statements. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('fefeebd1-8d51-528c-8869-49475887df83' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'AEC77AF0F346D923A362965ED0E9BF5E316E2350F703BBECC37BB6635FDF12F5')
  PRINT '

***** EXECUTING MIGRATION "Static Data\batch.RunState.data.sql", ID: {fefeebd1-8d51-528c-8869-49475887df83} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('fefeebd1-8d51-528c-8869-49475887df83' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'AEC77AF0F346D923A362965ED0E9BF5E316E2350F703BBECC37BB6635FDF12F5')
  EXECUTE ('--MERGE generated by ''sp_generate_merge'' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

set nocount on


merge into [batch].[RunState] as Target
using (values
  (-1,''Not Started'',''N'',''Used as run state placeholder when no BatchRunLog entries exist for a particular run'',0)
 ,(1,''Process Started'',''N'','''',1)
 ,(2,''Process In-progress'',''N'','''',2)
 ,(3,''Process Succeeded'',''Y'',''Indicates that a complete end-to-end import process has completed successfully.'',4)
 ,(4,''Process Stopped'',''Y'',''Indicates that an end-to-end import process has been stopped programmatically for some logical reason not considered to be an error condition e.g. there is no data to process.'',8)
 ,(5,''Process Skipped'',''Y'',''Indicates that an end-to-end import process has been instructed to skip for some logical reason not considered to be an error condition e.g. loads should not run during a predefined maintenance window.'',32)
 ,(6,''Process Failed'',''Y'',''Indicates that an end-to-end import process has been stopped or failed due to an unexpected error condition or other exception.'',16)
 ,(7,''Sub-Process/Step Started'',''N'','''',1)
 ,(8,''Sub-Process/Step In-progress'',''N'','''',2)
 ,(9,''Sub-Process/Step Succeeded'',''N'',''Indicates that a Sub-Process/Step has completed successfully.'',4)
 ,(10,''Sub-Process/Step Stopped'',''N'',''Indicates that a Sub-Process/Step has been stopped programmatically for some logical reason not considered to be an error condition e.g. there is no data to process.'',8)
 ,(11,''Sub-Process/Step Skipped'',''N'',''Indicates that a Sub-Process/Step has been instructed to skip for some logical reason not considered to be an error condition e.g. subject area was loaded two hours ago but only needs to be loaded every 24 hours.'',32)
 ,(12,''Sub-Process/Step Failed'',''N'',''Indicates that a Sub-Process/Step has been stopped or failed due to an unexpected error condition or other exception.'',16)
 ,(13,''Thread Started'',''N'','''',1)
 ,(14,''Thread In-progress'',''N'','''',2)
 ,(15,''Thread Succeeded'',''N'',''Indicates that a Thread has completed successfully.'',4)
 ,(16,''Thread Stopped'',''N'',''Indicates that a Thread has been stopped programmatically for some logical reason not considered to be an error condition.'',8)
 ,(17,''Thread Skipped'',''N'',''Indicates that a Thread has been instructed to skip for some logical reason not considered to be an error condition e.g. a preceding step processed zero rows so there is nothing to do on this thread.'',32)
 ,(18,''Thread Failed'',''N'',''Indicates that a Thread has been stopped or failed due to an unexpected error condition or other exception.'',16)
 ,(19,''Landing Started'',''N'','''',1)
 ,(20,''Landing Completed'',''N'','''',4)
 ,(21,''Landing Failed'',''N'','''',16)
 ,(22,''Load Started'',''N'','''',1)
 ,(23,''Load Completed'',''N'','''',4)
 ,(24,''Load Failed'',''N'','''',16)
 ,(25,''Cleanse Started'',''N'','''',1)
 ,(26,''Cleanse Complete'',''N'','''',4)
 ,(27,''Cleanse Failed'',''N'','''',16)
) as Source ([RunStateId],[RunStateName],[IsEtlClosingState],[Narrative],[FlagBit])
on (Target.[RunStateId] = Source.[RunStateId])
when matched and (
	nullif(Source.[RunStateName], Target.[RunStateName]) is not null or nullif(Target.[RunStateName], Source.[RunStateName]) is not null or 
	nullif(Source.[IsEtlClosingState], Target.[IsEtlClosingState]) is not null or nullif(Target.[IsEtlClosingState], Source.[IsEtlClosingState]) is not null or 
	nullif(Source.[Narrative], Target.[Narrative]) is not null or nullif(Target.[Narrative], Source.[Narrative]) is not null or 
	nullif(Source.[FlagBit], Target.[FlagBit]) is not null or nullif(Target.[FlagBit], Source.[FlagBit]) is not null) then
 update set
  [RunStateName] = Source.[RunStateName], 
  [IsEtlClosingState] = Source.[IsEtlClosingState], 
  [Narrative] = Source.[Narrative], 
  [FlagBit] = Source.[FlagBit]
when not matched by target then
 insert([RunStateId],[RunStateName],[IsEtlClosingState],[Narrative],[FlagBit])
 values(Source.[RunStateId],Source.[RunStateName],Source.[IsEtlClosingState],Source.[Narrative],Source.[FlagBit])
when not matched by source then 
 delete
;
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('fefeebd1-8d51-528c-8869-49475887df83' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'AEC77AF0F346D923A362965ED0E9BF5E316E2350F703BBECC37BB6635FDF12F5')
  EXECUTE ('declare @mergeError int
 , @mergeCount int
select @mergeError = @@error, @mergeCount = @@rowcount
if @mergeError != 0
 begin
 print ''ERROR OCCURRED IN MERGE FOR [batch].[RunState]. Rows affected: '' + cast(@mergeCount as varchar(100)); -- SQL should always return zero rows affected
 end
else
 begin
 print ''[batch].[RunState] rows affected by MERGE: '' + cast(@mergeCount as varchar(100));
 end
');

GO
SET NOCOUNT OFF;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('fefeebd1-8d51-528c-8869-49475887df83' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'AEC77AF0F346D923A362965ED0E9BF5E316E2350F703BBECC37BB6635FDF12F5')
  PRINT '***** FINISHED EXECUTING MIGRATION "Static Data\batch.RunState.data.sql", ID: {fefeebd1-8d51-528c-8869-49475887df83} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('fefeebd1-8d51-528c-8869-49475887df83' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'AEC77AF0F346D923A362965ED0E9BF5E316E2350F703BBECC37BB6635FDF12F5')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('fefeebd1-8d51-528c-8869-49475887df83' AS UNIQUEIDENTIFIER), 'AEC77AF0F346D923A362965ED0E9BF5E316E2350F703BBECC37BB6635FDF12F5', 'Static Data\batch.RunState.data.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that this deployment package matches the target database. Also ensure that your project scripts do not contain any "USE [OtherDbName]" statements. To force deployment, override the DatabaseName variable.', 16, 127);

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('c8111ed4-f3a3-5439-83e4-179bf5ee16fe' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'A5CA0806D626B8D38C61EA715407F6AA7449590AF71ABC540DE252F4DD568ACC')
  PRINT '

***** EXECUTING MIGRATION "Programmable Objects\IcsApp\Stored Procedures\MappingConfigTaskGetCurrentRunIds.sql", ID: {c8111ed4-f3a3-5439-83e4-179bf5ee16fe} *****';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('c8111ed4-f3a3-5439-83e4-179bf5ee16fe' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'A5CA0806D626B8D38C61EA715407F6AA7449590AF71ABC540DE252F4DD568ACC')
  EXECUTE ('IF OBJECT_ID(''[IcsApp].[MappingConfigTaskGetCurrentRunIds]'') IS NOT NULL
	DROP PROCEDURE [IcsApp].[MappingConfigTaskGetCurrentRunIds];

');

GO
SET QUOTED_IDENTIFIER ON;

GO
SET ANSI_NULLS ON;

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('c8111ed4-f3a3-5439-83e4-179bf5ee16fe' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'A5CA0806D626B8D38C61EA715407F6AA7449590AF71ABC540DE252F4DD568ACC')
  EXECUTE ('create procedure [IcsApp].[MappingConfigTaskGetCurrentRunIds]
(
  @MappingConfigTaskName varchar(100)
, @ThreadRunId  int = null out
, @SubProcessRunId int = null out
, @ProcessRunId int = null out
)
as
--<CommentHeader>
/**********************************************************************************************************************

Properties
==========
PROCEDURE NAME:		IcsApp.MappingConfigTaskGetCurrentRunIds
DESCRIPTION:		Outputs the current/most recent open Thread, Step and Process Run Ids for the specified Mapping
					Config Task.  If there is no thread, all values will be null, if any of the related Process or
					Step runs are NULL, they too will be returned as null
ORIGIN DATE:		14-AUG-2017
ORIGINAL AUTHOR:	Greg M. Lucas

Returns
=======
@@Error - always zero on success

Additional Notes
================
Stubs 

REVISION HISTORY
=====================================================================================================================
Version	ChangeDate		Author	BugRef	Narrative
=======	============	======	=======	=============================================================================
001		14-AUG-2017		GML		N/A		Created
------- ------------	------	-------	-----------------------------------------------------------------------------

**********************************************************************************************************************/
--</CommentHeader>

begin
	set nocount on;

	--! Standard/ExceptionHandler variables
	declare	@_FunctionName nvarchar(255) = quotename(object_schema_name(@@procid)) + ''.'' + quotename(object_name(@@procid));
	declare	@_Error int = 0;
	declare @_RowCount int = 0;
	declare @_ReturnValue int = 0;
	declare	@_Message nvarchar(512);
	declare	@_ErrorContext nvarchar(512);
	declare	@_Step varchar(128);
	declare	@_ExceptionId int;

	begin try
		set @_Step = ''Validate Inputs'';

		if coalesce(@MappingConfigTaskName, '''') = ''''
			raiserror(''Mapping Config Task Name must not be null or empty'', 16, 1) ;

		set @_Step = ''Fetch dummy values for stub'' ;

		select
			  @ThreadRunId = ThreadRunID
			, @SubProcessRunId = SubProcessRunID
			, @ProcessRunId = ProcessRunID
		from
			dbo.StubResultSet
		where
			FunctionName = @_FunctionName ;
	end try
	begin catch
		set @_ErrorContext = ''Failed to output current run Ids for MCT Name: '' + coalesce(''"'' + @MappingConfigTaskName + ''"'', ''NULL'')
			+ '' at step: '' + coalesce(''['' + @_Step + '']'', ''NULL'')

		exec log4.ExceptionHandler
				  @ErrorContext   = @_ErrorContext
				, @ErrorProcedure = @_FunctionName
				, @ErrorNumber    = @_Error out
				, @ReturnMessage  = @_Message out
				, @ExceptionId    = @_ExceptionId out

	end catch
	
--/////////////////////////////////////////////////////////////////////////////////////////////////
EndEx:
--/////////////////////////////////////////////////////////////////////////////////////////////////

	--! Finally, throw an exception that will be detected by the caller
	if @_Error > 0 raiserror(@_Message, 16, 99);

	set nocount off;

	--! Return the value of @@ERROR (which will be zero on success)
	return (@_Error);
end
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('c8111ed4-f3a3-5439-83e4-179bf5ee16fe' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'A5CA0806D626B8D38C61EA715407F6AA7449590AF71ABC540DE252F4DD568ACC')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Outputs the current/most recent open Thread, Step and Process Run Ids for the specified Mapping Config Task.  If there is no thread, all values will be null, if any of the related Process or Step runs are NULL, they too will be returned as null'', ''SCHEMA'', N''IcsApp'', ''PROCEDURE'', N''MappingConfigTaskGetCurrentRunIds'', NULL, NULL
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('c8111ed4-f3a3-5439-83e4-179bf5ee16fe' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'A5CA0806D626B8D38C61EA715407F6AA7449590AF71ABC540DE252F4DD568ACC')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Output, the unique Id for the current or latest open (master) process run context for the open thread run dictated by the specified Mapping Config Task. If there is no open process associated with this thread, the output will be null'', ''SCHEMA'', N''IcsApp'', ''PROCEDURE'', N''MappingConfigTaskGetCurrentRunIds'', ''PARAMETER'', N''@ProcessRunId''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('c8111ed4-f3a3-5439-83e4-179bf5ee16fe' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'A5CA0806D626B8D38C61EA715407F6AA7449590AF71ABC540DE252F4DD568ACC')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Output, the unique Id for the current or latest open step/sub-process run context for the open thread run dictated by the specified Mapping Config Task. If there is no open step associated with this thread, the output will be null'', ''SCHEMA'', N''IcsApp'', ''PROCEDURE'', N''MappingConfigTaskGetCurrentRunIds'', ''PARAMETER'', N''@SubProcessRunId''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('c8111ed4-f3a3-5439-83e4-179bf5ee16fe' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'A5CA0806D626B8D38C61EA715407F6AA7449590AF71ABC540DE252F4DD568ACC')
  EXECUTE ('EXEC sp_addextendedproperty N''MS_Description'', N''Output, the unique Id for the current or latest open thread run context for the specified Mapping Config Task. If this MCT has NO open threads, than this and all other outputs will be null.'', ''SCHEMA'', N''IcsApp'', ''PROCEDURE'', N''MappingConfigTaskGetCurrentRunIds'', ''PARAMETER'', N''@ThreadRunId''
');

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('c8111ed4-f3a3-5439-83e4-179bf5ee16fe' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'A5CA0806D626B8D38C61EA715407F6AA7449590AF71ABC540DE252F4DD568ACC')
  PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\IcsApp\Stored Procedures\MappingConfigTaskGetCurrentRunIds.sql", ID: {c8111ed4-f3a3-5439-83e4-179bf5ee16fe} *****
';

GO
IF NOT EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('c8111ed4-f3a3-5439-83e4-179bf5ee16fe' AS UNIQUEIDENTIFIER) AND [script_checksum] = 'A5CA0806D626B8D38C61EA715407F6AA7449590AF71ABC540DE252F4DD568ACC')
  INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
  VALUES                                         (CAST ('c8111ed4-f3a3-5439-83e4-179bf5ee16fe' AS UNIQUEIDENTIFIER), 'A5CA0806D626B8D38C61EA715407F6AA7449590AF71ABC540DE252F4DD568ACC', 'Programmable Objects\IcsApp\Stored Procedures\MappingConfigTaskGetCurrentRunIds.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

GO
PRINT '# Committing transaction';

COMMIT TRANSACTION;

GO







------------------------------------------------------------------------------------------------------------------------
------------------------------------------       POST-DEPLOYMENT SCRIPTS      ------------------------------------------
------------------------------------------------------------------------------------------------------------------------


SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

PRINT '----- executing post-deployment script "Post-Deployment\01_Finalize_Deployment.sql" -----';

---------------------- BEGIN POST-DEPLOYMENT SCRIPT: "Post-Deployment\01_Finalize_Deployment.sql" ------------------------
GO
/*
Post-Deployment Script Template
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.
 Use SQLCMD syntax to include a file in the post-deployment script.
 Example:      :r .\myfile.sql
 Use SQLCMD syntax to reference a variable in the post-deployment script.
 Example:      :setvar TableName MyTable
               SELECT * FROM [$(TableName)]
--------------------------------------------------------------------------------------
*/

GO
----------------------- END POST-DEPLOYMENT SCRIPT: "Post-Deployment\01_Finalize_Deployment.sql" -------------------------


PRINT 'Deployment completed successfully.'




SET NOEXEC OFF; -- Resume statement execution if an error occurred within the script pre-amble
