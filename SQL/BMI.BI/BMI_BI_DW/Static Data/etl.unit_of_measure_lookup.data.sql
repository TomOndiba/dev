--MERGE generated by 'sp_generate_merge' stored procedure, Version 0.93
--Originally by Vyas (http://vyaskn.tripod.com): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008/2012 by Daniel Nolan (http://danere.com)

set nocount on

merge into [dbo].[unit_of_measure] as tgt
using (values
  (-5,'N/D','Not Defined',-4,'Used where the logic to identify the correct static type has not been supplied or specified',0)
 ,(-4,'N/A','Not Applicable',-4,'Used where this static type has no relevance in this context',0)
 ,(-3,'N/I','Not Implemented in Source',-4,'Used when the source system does not support the concept of this static type',0)
 ,(-2,'N/F','Lookup Not Found',-4,'Indicates that the source system provided a value but that there is no matching lookup',0)
 ,(-1,'N/S','Not Specified at Source',-4,'Indicates that the value in the source system was NULL',0)
 ,(10,'Count','Count',14,'',0)
 ,(11,'%','Percentage',14,'',0)
 ,(12,'Seq','Sequence',14,'',0)
 ,(13,'Ave','Average',14,'',0)
 ,(14,'Tot','Total',14,'',0)
 ,(15,'m²','Square Metre(s)',10,'Also per Sq.M',0)
 ,(16,'SqFt','Square Feet',10,'Also per Sq.ft',0)
 ,(17,'Acre','Acre',10,'Also per Acre',0)
 ,(18,'Hectare','Hectare',10,'Also per hectare',0)
 ,(19,'cm²','Square Centimeter(s)',10,'Also per Sq.cm',0)
 ,(20,'Km²','Square Kilometer(s)',10,'Also per Sq.Km',0)
 ,(21,'in²','Square Inch(es)',10,'Also per Sq.in',0)
 ,(22,'yd²','Square Yard(s)',10,'Also per Sq.yd',0)
 ,(23,'Mi²','Square Mile(s)',10,'Also per Sq.Mi',0)
 ,(24,'m³','Cubic Metre(s)',13,'Also per Cu.M',0)
 ,(25,'Min','Minute',16,'Also per minute',0)
 ,(26,'Hrs','Hour',16,'Also per hour',0)
 ,(27,'Day','Day',16,'Also per Day or Daily',0)
 ,(28,'Wk','Week',16,'Also per Week or Weekly',0)
 ,(29,'Mth','Month',16,'Also per Month or Monthly',0)
 ,(30,'Yr','Annum',16,'Also per Annum or Annually',0)
 ,(31,'Qtr','Quarter',16,'Also per Quarter or Quarterly',0)
 ,(32,'HY','Half-Year',16,'Also Bi-annually or Half-Yearly',0)
 ,(33,'M','Metre(s)',11,'',0)
 ,(34,'cm','Centimetre(s)',11,'',0)
 ,(35,'in','Inch(es)',11,'',0)
 ,(36,'ft','Foot/Feet',11,'',0)
 ,(37,'yd','Yard(s)',11,'',0)
 ,(38,'Km','Kilometre(s)',11,'',0)
 ,(39,'Mi','Mile(s)',11,'',0)
 ,(40,'lbs','Pounds AvoirDupois',17,'',0)
 ,(41,'Kg','Kilogrammes',17,'',0)
 ,(42,'Ton','Imperial Ton',17,'',0)
 ,(43,'Tonne','Metric Tonne',17,'',0)
 ,(44,'BD','BD - Needs definition',-5,'',0)
 ,(45,'BG','BG - Needs definition',-5,'',0)
 ,(46,'BN','BN - Needs definition',-5,'',0)
 ,(47,'BX','Box',15,'',0)
 ,(48,'CT','CT - Needs definition',-5,'',0)
 ,(49,'EA','Each/Piece?',15,'',0)
 ,(50,'LM','LM - Needs definition',-5,'',0)
 ,(51,'lt','Litre?',13,'',0)
 ,(52,'PAL','Pallet?',15,'',0)
 ,(53,'RL','Roll?',15,'',0)
) as Source ([unit_of_measure_id],[unit_of_measure_code],[unit_of_measure_name],[unit_of_measure_type_id],[narrative],[is_deleted])
on (tgt.[unit_of_measure_id] = Source.[unit_of_measure_id])
when matched and (
	nullif(Source.[unit_of_measure_code], tgt.[unit_of_measure_code]) is not null or nullif(tgt.[unit_of_measure_code], Source.[unit_of_measure_code]) is not null or 
	nullif(Source.[unit_of_measure_name], tgt.[unit_of_measure_name]) is not null or nullif(tgt.[unit_of_measure_name], Source.[unit_of_measure_name]) is not null or 
	nullif(Source.[unit_of_measure_type_id], tgt.[unit_of_measure_type_id]) is not null or nullif(tgt.[unit_of_measure_type_id], Source.[unit_of_measure_type_id]) is not null or 
	nullif(Source.[narrative], tgt.[narrative]) is not null or nullif(tgt.[narrative], Source.[narrative]) is not null or 
	nullif(Source.[is_deleted], tgt.[is_deleted]) is not null or nullif(tgt.[is_deleted], Source.[is_deleted]) is not null) then
 update set
  [unit_of_measure_code] = Source.[unit_of_measure_code], 
  [unit_of_measure_name] = Source.[unit_of_measure_name], 
  [unit_of_measure_type_id] = Source.[unit_of_measure_type_id], 
  [narrative] = Source.[narrative], 
  [is_deleted] = Source.[is_deleted]
when not matched by target then
 insert([unit_of_measure_id],[unit_of_measure_code],[unit_of_measure_name],[unit_of_measure_type_id],[narrative],[is_deleted])
 values(Source.[unit_of_measure_id],Source.[unit_of_measure_code],Source.[unit_of_measure_name],Source.[unit_of_measure_type_id],Source.[narrative],Source.[is_deleted])
when not matched by source then 
 delete
;
go
declare @mergeError int
 , @mergeCount int
select @mergeError = @@error, @mergeCount = @@rowcount
if @mergeError != 0
 begin
 print 'ERROR OCCURRED IN MERGE FOR [dbo].[unit_of_measure]. Rows affected: ' + cast(@mergeCount as varchar(100)); -- SQL should always return zero rows affected
 end
else
 begin
 print '[dbo].[unit_of_measure] rows affected by MERGE: ' + cast(@mergeCount as varchar(100));
 end
go

set nocount off
go
